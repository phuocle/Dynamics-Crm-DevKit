//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum InvocationSource
	{
		/// <summary>
		/// Child = 1
		/// </summary>
		Child = 1,
		/// <summary>
		/// Parent = 0
		/// </summary>
		Parent = 0
	}

	public enum Mode
	{
		/// <summary>
		/// Asynchronous = 1
		/// </summary>
		Asynchronous = 1,
		/// <summary>
		/// Synchronous = 0
		/// </summary>
		Synchronous = 0
	}

	public enum Stage
	{
		/// <summary>
		/// Final Post-operation (For internal use only) = 55
		/// </summary>
		Final_Post_operation_For_internal_use_only = 55,
		/// <summary>
		/// Initial Pre-operation (For internal use only) = 5
		/// </summary>
		Initial_Pre_operation_For_internal_use_only = 5,
		/// <summary>
		/// Internal Post-operation After External Plugins (For internal use only) = 45
		/// </summary>
		Internal_Post_operation_After_External_Plugins_For_internal_use_only = 45,
		/// <summary>
		/// Internal Post-operation Before External Plugins (For internal use only) = 35
		/// </summary>
		Internal_Post_operation_Before_External_Plugins_For_internal_use_only = 35,
		/// <summary>
		/// Internal Pre-operation After External Plugins (For internal use only) = 25
		/// </summary>
		Internal_Pre_operation_After_External_Plugins_For_internal_use_only = 25,
		/// <summary>
		/// Internal Pre-operation Before External Plugins (For internal use only) = 15
		/// </summary>
		Internal_Pre_operation_Before_External_Plugins_For_internal_use_only = 15,
		/// <summary>
		/// Main Operation (For internal use only) = 30
		/// </summary>
		Main_Operation_For_internal_use_only = 30,
		/// <summary>
		/// Post-Commit stage fired after transaction commit (For internal use only) = 90
		/// </summary>
		Post_Commit_stage_fired_after_transaction_commit_For_internal_use_only = 90,
		/// <summary>
		/// Post-operation = 40
		/// </summary>
		Post_operation = 40,
		/// <summary>
		/// Post-operation (Deprecated) = 50
		/// </summary>
		Post_operation_Deprecated = 50,
		/// <summary>
		/// Pre-Commit stage fired before transaction commit (For internal use only) = 80
		/// </summary>
		Pre_Commit_stage_fired_before_transaction_commit_For_internal_use_only = 80,
		/// <summary>
		/// Pre-operation = 20
		/// </summary>
		Pre_operation = 20,
		/// <summary>
		/// Pre-validation = 10
		/// </summary>
		Pre_validation = 10
	}

	public enum StateCode
	{
		/// <summary>
		/// Disabled = 1
		/// </summary>
		Disabled = 1,
		/// <summary>
		/// Enabled = 0
		/// </summary>
		Enabled = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Disabled = 2
		/// </summary>
		Disabled = 2,
		/// <summary>
		/// Enabled = 1
		/// </summary>
		Enabled = 1
	}

	public enum SupportedDeployment
	{
		/// <summary>
		/// Both = 2
		/// </summary>
		Both = 2,
		/// <summary>
		/// Microsoft Dynamics 365 Client for Outlook Only = 1
		/// </summary>
		Microsoft_Dynamics_365_Client_for_Outlook_Only = 1,
		/// <summary>
		/// Server Only = 0
		/// </summary>
		Server_Only = 0
	}
}

namespace DynamicsCrm.DevKit.Shared.Entities
{
	public partial class SdkMessageProcessingStep : EntityBase
	{
		public struct Fields
		{
			public const string AsyncAutoDelete = "asyncautodelete";
			public const string CanUseReadOnlyConnection = "canusereadonlyconnection";
			public const string Category = "category";
			public const string ComponentState = "componentstate";
			public const string Configuration = "configuration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomizationLevel = "customizationlevel";
			public const string Description = "description";
			public const string EventExpander = "eventexpander";
			public const string EventHandler = "eventhandler";
			public const string FilteringAttributes = "filteringattributes";
			public const string ImpersonatingUserId = "impersonatinguserid";
			public const string IntroducedVersion = "introducedversion";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string InvocationSource = "invocationsource";
			public const string IsManaged = "ismanaged";
			public const string Mode = "mode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string PluginTypeId = "plugintypeid";
			public const string Rank = "rank";
			public const string RuntimeIntegrationProperties = "runtimeintegrationproperties";
			public const string SdkMessageFilterId = "sdkmessagefilterid";
			public const string SdkMessageId = "sdkmessageid";
			public const string SdkMessageProcessingStepId = "sdkmessageprocessingstepid";
			public const string SdkMessageProcessingStepIdUnique = "sdkmessageprocessingstepidunique";
			public const string SdkMessageProcessingStepSecureConfigId = "sdkmessageprocessingstepsecureconfigid";
			public const string SolutionId = "solutionid";
			public const string Stage = "stage";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SupportedDeployment = "supporteddeployment";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "sdkmessageprocessingstep";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4608;

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStep()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStep(Guid SdkMessageProcessingStepId)
		{
			Entity = new Entity(EntityLogicalName, SdkMessageProcessingStepId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStep(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStep(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStep(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SdkMessageProcessingStep(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Indicates whether the asynchronous system job is automatically deleted on completion.</para>
		/// <para>Boolean</para>
		/// <para>Asynchronous Automatic Delete</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AsyncAutoDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AsyncAutoDelete); }
			set { Entity.Attributes[Fields.AsyncAutoDelete] = value; }
		}

		/// <summary>
		/// <para>Identifies whether a SDK Message Processing Step type will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly</para>
		/// <para>Boolean</para>
		/// <para>Intent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanUseReadOnlyConnection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanUseReadOnlyConnection); }
			set { Entity.Attributes[Fields.CanUseReadOnlyConnection] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Step-specific configuration for the plug-in type. Passed to the plug-in constructor at run time.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Configuration
		{
			get { return Entity.GetAttributeValue<string>(Fields.Configuration); }
			set { Entity.Attributes[Fields.Configuration] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the SDK message processing step.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SDK message processing step was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the sdkmessageprocessingstep.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Customization level of the SDK message processing step.</para>
		/// <para>ReadOnly - Integer - MinValue: -255 - MaxValue: 255</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomizationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomizationLevel); }
		}

		/// <summary>
		/// <para>Description of the SDK message processing step.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Configuration for sending pipeline events to the Event Expander service.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>EventExpander</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EventExpander
		{
			get { return Entity.GetAttributeValue<string>(Fields.EventExpander); }
			set { Entity.Attributes[Fields.EventExpander] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated event handler.</para>
		/// <para>Lookup to plugintype, serviceendpoint</para>
		/// <para>Event Handler</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EventHandler
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EventHandler); }
			set { Entity.Attributes[Fields.EventHandler] = value; }
		}

		/// <summary>
		/// <para>Comma-separated list of attributes. If at least one of these attributes is modified, the plug-in should execute.</para>
		/// <para>String - MaxLength: 100000</para>
		/// <para>Filtering Attributes</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FilteringAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.FilteringAttributes); }
			set { Entity.Attributes[Fields.FilteringAttributes] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user to impersonate context when step is executed.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Impersonating User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImpersonatingUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImpersonatingUserId); }
			set { Entity.Attributes[Fields.ImpersonatingUserId] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Identifies if a plug-in should be executed from a parent pipeline, a child pipeline, or both.</para>
		/// <para>Picklist</para>
		/// <para>Invocation Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.InvocationSource? InvocationSource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InvocationSource);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.InvocationSource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InvocationSource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InvocationSource] = null;
			}
		}

		/// <summary>
		/// <para>Information that specifies whether this component is managed.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Run-time mode of execution, for example, synchronous or asynchronous.</para>
		/// <para>Picklist</para>
		/// <para>Execution Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.Mode? Mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Mode);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.Mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Mode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the SDK message processing step.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the SDK message processing step was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the sdkmessageprocessingstep.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of SdkMessage processing step.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization with which the SDK message processing step is associated.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the plug-in type associated with the step.</para>
		/// <para>Lookup to sdkmessagefilter</para>
		/// <para>Plug-In Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public EntityReference PluginTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PluginTypeId); }
			set { Entity.Attributes[Fields.PluginTypeId] = value; }
		}

		/// <summary>
		/// <para>Processing order within the stage.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Execution Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
			set { Entity.Attributes[Fields.Rank] = value; }
		}

		/// <summary>
		/// <para>For internal use only. Holds miscellaneous properties related to runtime integration.</para>
		/// <para>String - MaxLength: 512</para>
		/// <para>Runtime Integration Properties</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RuntimeIntegrationProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.RuntimeIntegrationProperties); }
			set { Entity.Attributes[Fields.RuntimeIntegrationProperties] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message filter.</para>
		/// <para>Lookup to sdkmessagefilter</para>
		/// <para>SdkMessage Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageFilterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageFilterId); }
			set { Entity.Attributes[Fields.SdkMessageFilterId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message.</para>
		/// <para>Lookup to sdkmessage</para>
		/// <para>SDK Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageId); }
			set { Entity.Attributes[Fields.SdkMessageId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message processing step entity.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SdkMessageProcessingStepId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SdkMessageProcessingStepId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the SDK message processing step.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SdkMessageProcessingStepIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SdkMessageProcessingStepIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the Sdk message processing step secure configuration.</para>
		/// <para>Required - Lookup to sdkmessageprocessingstepsecureconfig</para>
		/// <para>SDK Message Processing Step Secure Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageProcessingStepSecureConfigId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageProcessingStepSecureConfigId); }
			set { Entity.Attributes[Fields.SdkMessageProcessingStepSecureConfigId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Stage in the execution pipeline that the SDK message processing step is in.</para>
		/// <para>Picklist</para>
		/// <para>Execution Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.Stage? Stage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Stage);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.Stage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Stage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Stage] = null;
			}
		}

		/// <summary>
		/// <para>Status of the SDK message processing step.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the SDK message processing step.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Deployment that the SDK message processing step should be executed on; server, client, or both.</para>
		/// <para>Picklist</para>
		/// <para>Deployment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.SupportedDeployment? SupportedDeployment
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SupportedDeployment);
				if (value == null) return null;
				return (DynamicsCrm.DevKit.Shared.Entities.SdkMessageProcessingStepOptionSets.SupportedDeployment)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SupportedDeployment] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SupportedDeployment] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Number that identifies a specific revision of the SDK message processing step.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
