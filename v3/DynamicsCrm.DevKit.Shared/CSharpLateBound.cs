using DynamicsCrm.DevKit.Shared.Models;
using Microsoft.VisualStudio.TextManager.Interop;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Tooling.Connector;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security;
using System.Workflow.Activities;

namespace DynamicsCrm.DevKit.Shared
{
    public static class CSharpLateBound
    {
        private const string NEW_LINE = "\r\n";
        private const string TAB = "\t";
        private static EntityMetadata EntityMetadata { get; set; }
        private static string RootNamespace { get; set; }

        public static string GetCode(CrmServiceClient crmServiceClient, EntityMetadata entityMetadata, string rootNameSpace)
        {
            EntityMetadata = entityMetadata;
            RootNamespace = rootNameSpace;
            var code = string.Empty;
            var @class = Utility.SafeDeclareName(entityMetadata.SchemaName, GeneratorType.csharp);
            //code += $"//---------------------------------------------------------------------------------------------------{NEW_LINE}";
            //code += $"// <auto-generated>{NEW_LINE}";
            //code += $"//{TAB}{TAB}Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.{NEW_LINE}";
            //code += $"//{TAB}{TAB}Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit{NEW_LINE}";
            //code += $"// </auto-generated>{NEW_LINE}";
            //code += $"//---------------------------------------------------------------------------------------------------{NEW_LINE}";
            code += $"using Microsoft.Xrm.Sdk;{NEW_LINE}";
            code += $"using System;{NEW_LINE}";
            code += $"using System.Diagnostics;{NEW_LINE}";
            code += $"using System.Linq;{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"namespace {rootNameSpace}.{@class}OptionSets{NEW_LINE}";
            code += $"{{{NEW_LINE}";
            code += $"{GeneratorEnum()}";
            code += $"}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"namespace {rootNameSpace}{NEW_LINE}";
            code += $"{{{NEW_LINE}";
            code += $"{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}public partial class {@class} : EntityBase{NEW_LINE}";
            code += $"{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}public struct Fields{NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{GeneratorClassFields()}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityLogicalName = \"{EntityMetadata.LogicalName}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}[System.Obsolete(\"This value is different for each instance. Please don't use it.\")]{NEW_LINE}";
            code += $"{TAB}{TAB}public const int EntityTypeCode = {EntityMetadata.ObjectTypeCode};{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityCollectionSchemaName = \"{EntityMetadata.CollectionSchemaName}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityDisplayCollectionName = \"{EntityMetadata.DisplayCollectionName?.UserLocalizedLabel?.Label}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string DisplayName = \"{EntityMetadata.DisplayName?.UserLocalizedLabel?.Label}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntitySetName = \"{EntityMetadata.EntitySetName}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityLogicalCollectionName = \"{EntityMetadata.LogicalCollectionName}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityPrimaryIdAttribute = \"{EntityMetadata.PrimaryIdAttribute}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityPrimaryImageAttribute = \"{EntityMetadata.PrimaryImageAttribute}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntityPrimaryNameAttribute = \"{EntityMetadata.PrimaryNameAttribute}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}public const string EntitySchemaName = \"{EntityMetadata.SchemaName}\";{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = new Entity(EntityLogicalName);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(Guid {@class}Id){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = new Entity(EntityLogicalName, {@class}Id);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(string keyName, object keyValue){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = new Entity(EntityLogicalName, keyName, keyValue);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// Instance new late bound class <see cref=\"{@class}\"/> with <paramref name=\"targetEntity\"/>.{NEW_LINE}";
            code += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <exception cref=\"InvalidPluginExecutionException\">when <paramref name=\"targetEntity\"/> is null.</exception>{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(Entity targetEntity){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (targetEntity == null) throw new InvalidPluginExecutionException($\"new {@class}(targetEntity) with targetEntity = null\");{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = targetEntity;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// Instance new late bound class <see cref=\"{@class}\"/> with <paramref name=\"preEntity\"/>. Then copy all attributes from <paramref name=\"targetEntity\"/> to <paramref name=\"preEntity\"/>. Existing attribute will be overwritten.{NEW_LINE}";
            code += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <exception cref=\"InvalidPluginExecutionException\">when <paramref name=\"targetEntity\"/> is null.</exception>{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(Entity preEntity, Entity targetEntity){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (targetEntity == null) throw new InvalidPluginExecutionException($\"new {@class}(preEntity, targetEntity) with targetEntity = null\");{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = preEntity;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}foreach (var property in targetEntity?.Attributes?.ToList()){NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}var key = property.Key;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}var value = property.Value;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}Entity[key] = value;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// Instance new late bound class <see cref=\"{@class}\"/> with <paramref name=\"preEntity\"/>. Then copy all attributes from <paramref name=\"targetEntity\"/> to <paramref name=\"preEntity\"/>. After that copy all attributes from <paramref name=\"postEntity\"/> to the last result. Existing attribute will be overwritten.{NEW_LINE}";
            code += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <exception cref=\"InvalidPluginExecutionException\">when <paramref name=\"targetEntity\"/> is null.</exception>{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(Entity preEntity, Entity targetEntity, Entity postEntity){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (targetEntity == null) throw new InvalidPluginExecutionException($\"new {@class}(preEntity, targetEntity, postEntity) with targetEntity = null\");{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = preEntity;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}foreach (var property in targetEntity?.Attributes?.ToList()){NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}var key = property.Key;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}var value = property.Value;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}Entity[key] = value;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}foreach (var property in postEntity?.Attributes?.ToList()){NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}var key = property.Key;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}var value = property.Value;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}{TAB}Entity[key] = value;{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public {@class}(KeyAttributeCollection keys){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}Entity = new Entity(EntityLogicalName, keys);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}PreEntity = CloneThisEntity(Entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";

            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public static {@class} Read_Record(IOrganizationService serviceAdmin, IOrganizationService service, ITracingService tracing, Guid? {@class}Id, Microsoft.Xrm.Sdk.Query.ColumnSet columns = null){NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if ({@class}Id == null) return new {entityMetadata.SchemaName}();{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}if (columns == null) columns = new Microsoft.Xrm.Sdk.Query.ColumnSet(true);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}var entity = serviceAdmin.Retrieve(EntityLogicalName, {@class}Id.Value, columns);{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}return new {@class}(entity);{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{GeneratorCode()}";
            //code += $"{NEW_LINE}";
            code += $"{GeneratorImageCode()}";
            code = code.TrimEnd($"{NEW_LINE}".ToCharArray());
            code += $"{NEW_LINE}";
            code += $"{TAB}}}{NEW_LINE}";
            code += $"}}";
            return code;
        }

        private static string GetGeneratorImageCode(string schemaName, string logicalName)
        {
            var code = string.Empty;
            code += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <para>byte[]</para>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <para>Image</para>{NEW_LINE}";
            code += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public byte[] {schemaName}{NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<byte[]>(\"{logicalName}\"); }}{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[\"{logicalName}\"] = value; }}{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            code += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <para>ReadOnly - String</para>{NEW_LINE}";
            code += $"{TAB}{TAB}/// <para>Image</para>{NEW_LINE}";
            code += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
            code += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            code += $"{TAB}{TAB}public string {schemaName}Url{NEW_LINE}";
            code += $"{TAB}{TAB}{{{NEW_LINE}";
            code += $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<string>(\"{logicalName}_url\"); }}{NEW_LINE}";
            code += $"{TAB}{TAB}}}{NEW_LINE}";
            //code += $"{NEW_LINE}";
            return code;
        }
        private static string GeneratorImageCode()
        {
            var code = string.Empty;
            foreach (var attribute in EntityMetadata.Attributes.OrderBy(x => x.SchemaName))
            {
                if (attribute is ImageAttributeMetadata image)
                {
                    if (image.IsPrimaryImage ?? false)
                        code += GetGeneratorImageCode("EntityImage", image.LogicalName);
                    else
                    {
                        if (image.LogicalName == "entityimage") continue;
                        code += GetGeneratorImageCode(attribute.SchemaName, attribute.LogicalName);
                    }
                }
            }
            code = code.TrimEnd($",{NEW_LINE}".ToCharArray());
            //code += $"{NEW_LINE}";
            return code;
        }

        private static string GeneratorEnum()
        {
            var @enum = string.Empty;
            @enum += $"{TAB}public enum [[Enum]]{NEW_LINE}";
            @enum += $"{TAB}{{{NEW_LINE}";
            @enum += $"[[Declare]]";
            @enum += $"{TAB}}}{NEW_LINE}";
            var code = string.Empty;
            var attributes = EntityMetadata.Attributes.OrderBy(x => x.SchemaName);
            var stateCodeAttribute = attributes.Where(x => x.LogicalName == "statecode").FirstOrDefault();
            var stateCodeOptions = new List<NameValue>();
            if (stateCodeAttribute != null) stateCodeOptions = GetStateCodeOptions(stateCodeAttribute);
            foreach (var attribute in attributes)
            {
                if (XrmHelper.IsOptionSet(attribute))
                {
                    if (attribute.SchemaName.EndsWith("IdType")) continue;
                    var tmp = string.Empty;
                    var values = attribute.OptionSetValues();
                    if (values.Count == 0) continue;
                    foreach (var value in values)
                    {
                        tmp += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
                        tmp += $"{TAB}{TAB}/// <para>Display Name = {value.Label?.TrimEnd("\r\n".ToCharArray())}</para>{NEW_LINE}";
                        tmp += $"{TAB}{TAB}/// <para>Value = {int.Parse(value.Value).ToString("#,##0")}</para>{NEW_LINE}";
                        if (value.Name3.Length > 0)
                        {
                            var statusCodeComment = $"StateCode.{stateCodeOptions.Where(x => x.Value == value.Name3).FirstOrDefault()?.Name}";
                            tmp += $"{TAB}{TAB}/// <para>{statusCodeComment}</para>{NEW_LINE}";
                        }
                        tmp += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
                        tmp += $"{TAB}{TAB}{value.Name} = {int.Parse(value.Value).ToString("#,##0").Replace(",", "_")},{NEW_LINE}";
                        //tmp += $"{TAB}{TAB}{value.Name} = {value.Value},{NEW_LINE}";
                    }
                    tmp = tmp.TrimEnd($",{NEW_LINE}".ToCharArray());
                    tmp += $"{NEW_LINE}";
                    code += @enum.Replace("[[Enum]]", Utility.SafeIdentifier(attribute.SchemaName)).Replace("[[Declare]]", tmp);
                }
            }
            code = code.TrimEnd($",{NEW_LINE}".ToCharArray());
            code += $"{NEW_LINE}";
            return code;
        }

        //private static string CovertToEasyRead(string value)
        //{
        //    if (value.Length <= 3) return value;
        //    var part = value.Right(3);



        //    return value;
        //}

        private static List<NameValue> GetStateCodeOptions(AttributeMetadata stateCodeAttribute)
        {
            var values = new List<NameValue>();
            var options = ((EnumAttributeMetadata)stateCodeAttribute)?.OptionSet?.Options;
            if (options == null) return values;
            foreach (StateOptionMetadata option in options)
            {
                var value = option?.Value ?? -1;
                var name = option?.Label?.UserLocalizedLabel?.Label ?? String.Empty;
                name = name.Replace("-", "_");
                if (name.Length == 0) continue;
                name = Utility.SafeIdentifier(name);
                values.Add(new NameValue
                {
                    Name = $"{name}",
                    Value = $"{value}"
                });
            }
            return values;
        }

        private static bool IsFieldOk(AttributeMetadata attribute)
        {
            if (attribute is ImageAttributeMetadata) return false;
            if (attribute.AttributeOf != null) return false;
            if (attribute.AttributeTypeName == AttributeTypeDisplayName.ImageType) return false;
            if (XrmHelper.IsOptionSet(attribute) && attribute.OptionSetValues().Count == 0) return false;
            if (attribute.AttributeType == AttributeTypeCode.Memo ||
                attribute.AttributeType == AttributeTypeCode.Virtual ||
                attribute.AttributeType == AttributeTypeCode.EntityName ||
                attribute.AttributeType == AttributeTypeCode.String ||
                attribute.AttributeType == AttributeTypeCode.Boolean ||
                attribute.AttributeType == AttributeTypeCode.Integer ||
                attribute.AttributeType == AttributeTypeCode.BigInt ||
                attribute.AttributeType == AttributeTypeCode.DateTime ||
                attribute.AttributeType == AttributeTypeCode.Uniqueidentifier ||
                attribute.AttributeType == AttributeTypeCode.Decimal ||
                attribute.AttributeType == AttributeTypeCode.Double ||
                attribute.AttributeType == AttributeTypeCode.Lookup ||
                attribute.AttributeType == AttributeTypeCode.Owner ||
                attribute.AttributeType == AttributeTypeCode.Customer ||
                attribute.AttributeType == AttributeTypeCode.Picklist ||
                attribute.AttributeType == AttributeTypeCode.Money ||
                attribute.AttributeType == AttributeTypeCode.State ||
                attribute.AttributeType == AttributeTypeCode.Status ||
                attribute.AttributeType == AttributeTypeCode.PartyList
            )
                return true;
            return false;
        }

        private static string GeneratorClassFields()
        {
            var code = string.Empty;
            foreach (var attribute in EntityMetadata.Attributes.OrderBy(x => x.SchemaName))
            {
                if (!IsFieldOk(attribute)) continue;
                if (!string.IsNullOrWhiteSpace(attribute.DeprecatedVersion))
                    code += $"{TAB}{TAB}{TAB}[System.Obsolete(\"Deprecated from version: {attribute.DeprecatedVersion}\")]{NEW_LINE}";
                code += $"{TAB}{TAB}{TAB}public const string {attribute.SchemaName} = \"{attribute.LogicalName}\";{NEW_LINE}";
                if (attribute is FileAttributeMetadata)
                    code += $"{TAB}{TAB}{TAB}public const string {attribute.SchemaName}_name = \"{attribute.LogicalName}_name\";{NEW_LINE}";
            }
            return code;
        }

        private static string GeneratorCode()
        {
            var code = string.Empty;
            foreach (var attribute in EntityMetadata.Attributes.OrderBy(x => x.SchemaName))
            {
                if (!IsFieldOk(attribute)) continue;
                var utc = string.Empty;
                if (attribute is DateTimeAttributeMetadata datetime)
                    if (datetime.DateTimeBehavior == DateTimeBehavior.UserLocal) utc = "Utc";
                code += $"{GetXml(attribute)}";
                if (!string.IsNullOrWhiteSpace(attribute.DeprecatedVersion))
                    code += $"{TAB}{TAB}[System.Obsolete(\"Deprecated from version: {attribute.DeprecatedVersion}\")]{NEW_LINE}";
                code += $"{TAB}{TAB}public {DeclareType(attribute)} {Utility.SafeDeclareName(attribute.SchemaName, GeneratorType.csharp, EntityMetadata.SchemaName, attribute)}{utc}{NEW_LINE}";
                code += $"{TAB}{TAB}{{{NEW_LINE}";
                code += $"{GetGet(attribute)}";
                if ((attribute.IsValidForCreate ?? false) || (attribute.IsValidForUpdate ?? false))
                    code += $"{GetSet(attribute)}";
                code += $"{TAB}{TAB}}}{NEW_LINE}";
                //code += $"{NEW_LINE}";
            }
            code = code.TrimEnd($",{NEW_LINE}".ToCharArray());
            code += $"{NEW_LINE}";
            return code;
        }

        private static string DeclareType(AttributeMetadata attribute)
        {
            if ((attribute.IsPrimaryId ?? false) && $"{EntityMetadata.LogicalName}id" == attribute.LogicalName)
                return $"Guid";
            switch (attribute.AttributeType)
            {
                case AttributeTypeCode.Picklist:
                case AttributeTypeCode.State:
                case AttributeTypeCode.Status:
                    return $"{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{Utility.SafeIdentifier(attribute.SchemaName)}?";
                case AttributeTypeCode.BigInt:
                    return $"long?";
                case AttributeTypeCode.Integer:
                    return $"int?";
                case AttributeTypeCode.Boolean:
                    return $"bool?";
                case AttributeTypeCode.DateTime:
                    {
                        var datetime = attribute as DateTimeAttributeMetadata;
                        if (datetime.DateTimeBehavior == null)
                            return $"DateTime?";
                        else if (datetime.DateTimeBehavior == DateTimeBehavior.DateOnly)
                            return $"Date?";
                        else if (datetime.DateTimeBehavior == DateTimeBehavior.TimeZoneIndependent)
                            return $"DateTime?";
                        else if (datetime.DateTimeBehavior == DateTimeBehavior.UserLocal)
                            return $"DateTime?";
                        return $"DateTime?";
                    }
                case AttributeTypeCode.Decimal:
                    return $"decimal?";
                case AttributeTypeCode.Money:
                    return $"decimal?";
                case AttributeTypeCode.Double:
                    return $"double?";
                case AttributeTypeCode.Uniqueidentifier:
                    if ($"{EntityMetadata.LogicalName}id" == attribute.LogicalName)
                        return $"Guid";
                    return $"Guid?";
                case AttributeTypeCode.Lookup:
                case AttributeTypeCode.Owner:
                case AttributeTypeCode.Customer:
                    return $"EntityReference";
                case AttributeTypeCode.Memo:
                case AttributeTypeCode.Virtual:
                case AttributeTypeCode.EntityName:
                case AttributeTypeCode.String:
                    if (attribute is MultiSelectPicklistAttributeMetadata)
                        return $"System.Collections.Generic.List<{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{attribute.SchemaName}>";
                    else
                        return $"string";
                case AttributeTypeCode.PartyList:
                    return $"System.Collections.Generic.List<ActivityParty>";
                case AttributeTypeCode.ManagedProperty:
                    return $"?";
                default:
                    return $"?";
            }
        }

        private static string GetSet(AttributeMetadata attribute)
        {
            var code = string.Empty;
            switch (attribute.AttributeType)
            {
                case AttributeTypeCode.Picklist:
                case AttributeTypeCode.State:
                case AttributeTypeCode.Status:
                    code += $"{TAB}{TAB}{TAB}set{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}if (value.HasValue){NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = new OptionSetValue((int)value.Value);{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}else{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = null;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                    return code;
                case AttributeTypeCode.BigInt:
                    return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.Integer:
                    return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.Boolean:
                    return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.DateTime:
                    var datetime = attribute as DateTimeAttributeMetadata;
                    if (datetime.DateTimeBehavior == DateTimeBehavior.DateOnly)
                    {
                        code += $"{TAB}{TAB}{TAB}set{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}if (value.HasValue){NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}DateTime dateTime = value.Value.ToDateTime();{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = dateTime;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}else{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = null;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        return code;
                    }
                    else
                    {
                        return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                    }
                case AttributeTypeCode.Decimal:
                    return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.Money:
                    code += $"{TAB}{TAB}{TAB}set{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}if (value.HasValue){NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = new Money(value.Value);{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}else{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = null;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                    return code;
                case AttributeTypeCode.Double:
                    return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.Uniqueidentifier:
                    if ($"{EntityMetadata.LogicalName}id" == attribute.LogicalName)
                    {
                        code += $"{TAB}{TAB}{TAB}set{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = value;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}Entity.Id = value;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        return code;
                    }
                    else
                    {
                        return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                    }
                case AttributeTypeCode.Lookup:
                case AttributeTypeCode.Owner:
                case AttributeTypeCode.Customer:
                    return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.Memo:
                case AttributeTypeCode.Virtual:
                case AttributeTypeCode.EntityName:
                case AttributeTypeCode.String:
                    if (attribute is MultiSelectPicklistAttributeMetadata)
                    {
                        code += $"{TAB}{TAB}{TAB}set{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}var data = new OptionSetValueCollection();{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}foreach (var item in value){NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}data.Add(new OptionSetValue((int)item));{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}if (data.Count == 0){NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = null;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}else{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = data;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        return code;
                    }
                    else if (attribute is FileAttributeMetadata)
                        return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}_name] = value; }}{NEW_LINE}";
                    else
                        return $"{TAB}{TAB}{TAB}set {{ Entity.Attributes[Fields.{attribute.SchemaName}] = value; }}{NEW_LINE}";
                case AttributeTypeCode.PartyList:
                    code += $"{TAB}{TAB}{TAB}set{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}var data = new EntityCollection();{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}foreach (var item in value){NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}{TAB}data.Entities.Add(item.Entity);{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}Entity.Attributes[Fields.{attribute.SchemaName}] = data;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                    return code;
                case AttributeTypeCode.ManagedProperty:
                    return "set;";
                default:
                    return "set;";
            }
        }

        private static string GetGet(AttributeMetadata attribute)
        {
            var code = string.Empty;
            switch (attribute.AttributeType)
            {
                case AttributeTypeCode.Picklist:
                case AttributeTypeCode.State:
                case AttributeTypeCode.Status:
                    code += $"{TAB}{TAB}{TAB}get{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}var value = Entity.GetAttributeValue<OptionSetValue>(Fields.{attribute.SchemaName});{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}if (value == null) return null;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}return ({RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{Utility.SafeIdentifier(attribute.SchemaName)})value.Value;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                    return code;
                case AttributeTypeCode.BigInt:
                    return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<long?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.Integer:
                    return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<int?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.Boolean:
                    return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<bool?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.DateTime:
                    var datetime = attribute as DateTimeAttributeMetadata;
                    if (datetime.DateTimeBehavior == DateTimeBehavior.DateOnly)
                    {
                        code += $"{TAB}{TAB}{TAB}get{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.{attribute.SchemaName});{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}if (dateTime == null) return null;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}return dateTime.Value.ToDate();{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        return code;
                    }
                    else
                        return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<DateTime?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.Decimal:
                    return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<decimal?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.Money:
                    code += $"{TAB}{TAB}{TAB}get{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}var value = Entity.GetAttributeValue<Money>(Fields.{attribute.SchemaName});{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}if (value == null) return null;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}return value.Value;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                    return code;
                case AttributeTypeCode.Double:
                    return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<double?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.Uniqueidentifier:
                    if ((attribute.IsPrimaryId ?? false) && $"{EntityMetadata.LogicalName}id" == attribute.LogicalName)
                        return $"{TAB}{TAB}{TAB}get {{ return Id; }}{NEW_LINE}";
                    else
                    {
                        if ($"{EntityMetadata.LogicalName}id" == attribute.LogicalName)
                            return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<Guid>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                        return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<Guid?>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                    }
                case AttributeTypeCode.Lookup:
                case AttributeTypeCode.Owner:
                case AttributeTypeCode.Customer:
                    return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<EntityReference>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.Memo:
                case AttributeTypeCode.Virtual:
                case AttributeTypeCode.EntityName:
                case AttributeTypeCode.String:
                    if (attribute is MultiSelectPicklistAttributeMetadata)
                    {
                        code += $"{TAB}{TAB}{TAB}get{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}var data = new System.Collections.Generic.List<{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{attribute.SchemaName}>();{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.{attribute.SchemaName});{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}if (items != null){NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{{\r\n";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}foreach (OptionSetValue item in items){NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}{{{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}{TAB}data.Add(({RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{attribute.SchemaName})item.Value);{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}{TAB}return data;{NEW_LINE}";
                        code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                        return code;
                    }
                    else if (attribute is FileAttributeMetadata)
                        return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<string>(Fields.{attribute.SchemaName}_name); }}{NEW_LINE}";
                    else
                        return $"{TAB}{TAB}{TAB}get {{ return Entity.GetAttributeValue<string>(Fields.{attribute.SchemaName}); }}{NEW_LINE}";
                case AttributeTypeCode.PartyList:
                    code += $"{TAB}{TAB}{TAB}get{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{{{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}var data = new System.Collections.Generic.List<ActivityParty>();{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.{attribute.SchemaName}).Entities){NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}{TAB}data.Add(new ActivityParty(item));{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}{TAB}return data;{NEW_LINE}";
                    code += $"{TAB}{TAB}{TAB}}}{NEW_LINE}";
                    return code;
                default:
                    return $"?{attribute.AttributeType}";
            }
        }

        private static string GetXml(AttributeMetadata attribute)
        {
            var line1 = string.Empty;
            var line2 = string.Empty;
            var line3 = string.Empty;
            var line4 = string.Empty;
            //var para4 = string.Empty;
            var readOnly = string.Empty;
            if (!(attribute.IsValidForCreate ?? false) && !(attribute.IsValidForUpdate ?? false))
                readOnly = "ReadOnly";
            if (readOnly.Length > 0) line3 += readOnly + " - ";
            if (attribute.IsPrimaryId ?? false)
                if ($"{EntityMetadata.LogicalName}id" == attribute.LogicalName)
                    line3 += "Primary Key - ";
            if (attribute.IsPrimaryName ?? false)
                    line3 += "Primary Name - ";
            if (attribute.RequiredLevel?.Value == AttributeRequiredLevel.ApplicationRequired) line3 += "Required - ";
            if (attribute is DateTimeAttributeMetadata datetime)
            {
                line3 += "Date and Time - ";
                if (datetime.DateTimeBehavior == DateTimeBehavior.DateOnly)
                    line3 += "DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly";
                else if (datetime.DateTimeBehavior == DateTimeBehavior.UserLocal)
                {
                    if (datetime.Format == DateTimeFormat.DateOnly)
                        line3 += "DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly";
                    else if (datetime.Format == DateTimeFormat.DateAndTime)
                        line3 += "DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime";
                }
                else if (datetime.DateTimeBehavior == DateTimeBehavior.TimeZoneIndependent)
                {
                    if (datetime.Format == DateTimeFormat.DateOnly)
                        line3 += "DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateOnly";
                    else if (datetime.Format == DateTimeFormat.DateAndTime)
                        line3 += "DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime";
                }
            }
            else if (attribute is MultiSelectPicklistAttributeMetadata)
            {
                line3 += $"MultiSelect OptionSet <see cref=\"{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{Utility.SafeIdentifier(attribute.SchemaName)}\"/>";
            }
            else if (attribute is PicklistAttributeMetadata)
            {
                line3 += $"OptionSet <see cref=\"{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{Utility.SafeIdentifier(attribute.SchemaName)}\"/>";
            }
            else if (attribute is StateAttributeMetadata)
            {
                line3 += $"Status <see cref=\"{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{Utility.SafeIdentifier(attribute.SchemaName)}\"/>";
            }
            else if (attribute is StatusAttributeMetadata)
            {
                line3 += $"Status Reason <see cref=\"{RootNamespace}.{Utility.SafeDeclareName(EntityMetadata.SchemaName, GeneratorType.csharp)}OptionSets.{Utility.SafeIdentifier(attribute.SchemaName)}\"/>";
            }
            else if (attribute is LookupAttributeMetadata lookup)
            {
                line3 += $"Lookup to: ";
                foreach (var target in lookup.Targets)
                {
                    line3 += $"<see cref=\"{target}\"/>, ";
                }
                line3 = line3.TrimEnd(", ".ToCharArray());
            }
            else if (attribute is BooleanAttributeMetadata boolean)
            {
                var temp = $"[{boolean?.OptionSet?.TrueOption?.Label?.UserLocalizedLabel?.Label}]=true - [{boolean?.OptionSet?.FalseOption?.Label?.UserLocalizedLabel?.Label}]=false";
                line3 += $"Two Option - " + temp;
            }
            else if (attribute is DoubleAttributeMetadata)
                line3 += "Decimal Number";
            else if (attribute is DecimalAttributeMetadata)
                line3 += "Floating Point Number";
            else if (attribute is IntegerAttributeMetadata)
                line3 += "Whole Number";
            else if (attribute is MoneyAttributeMetadata)
            {
                line3 += "Currency";
            }
            else if (attribute is MemoAttributeMetadata)
            {
                line3 += "Multiple Lines of Text";
            }
            else if (attribute is StringAttributeMetadata)
            {
                line3 += "Single Line of Text";
            }
            else if (attribute is ImageAttributeMetadata)
            {
                line3 += "Image";
            }
            else
                line3 += attribute.AttributeType.ToString();
            if (attribute.GetMaxLength().HasValue) line3 += " - MaxLength: " + attribute.GetMaxLength().Value.ToString("#,#", CultureInfo.InvariantCulture);
            if (attribute.GetMinValue().HasValue) line3 += " - MinValue: " + attribute.GetMinValue().Value.ToString("#,#", CultureInfo.InvariantCulture);
            if (attribute.GetMaxValue().HasValue) line3 += " - MaxValue: " + attribute.GetMaxValue().Value.ToString("#,#", CultureInfo.InvariantCulture);
            var xml = $"{TAB}{TAB}/// <summary>{NEW_LINE}";
            line1 = attribute?.DisplayName?.UserLocalizedLabel?.Label.TrimNewLine();
            if (line1 != null && line1.Length > 0)
            {
                xml += $"{TAB}{TAB}/// <para>Display Name: {line1}</para>{NEW_LINE}";
            }
            var description = attribute?.Description?.UserLocalizedLabel?.Label;
            if (!string.IsNullOrWhiteSpace(description))
            {
                line2 = SecurityElement.Escape(description.TrimNewLine());
                xml += $"{TAB}{TAB}/// <para>Description: {line2}</para>{NEW_LINE}";
            }
            xml += $"{TAB}{TAB}/// <para>{line3}</para>{NEW_LINE}";
            if (attribute.SourceType != null && attribute.SourceType != 0)
            {
                if (attribute.SourceType == 1) line4 = "Calculated Field";
                else if (attribute.SourceType == 2) line4 = "Rollup Field";
                else if (attribute.SourceType == 3) line4 = "Power-Fx Field";
                xml += $"{TAB}{TAB}/// <para>{line4}</para>{NEW_LINE}";
            }
            else if (attribute.SchemaName.EndsWith("_rollup_Date") || attribute.SchemaName.EndsWith("_rollup_State")) {
                line4 = "Rollup Field";
                xml += $"{TAB}{TAB}/// <para>{line4}</para>{NEW_LINE}";
            }

            xml += $"{TAB}{TAB}/// </summary>\r\n";
            xml += $"{TAB}{TAB}[DebuggerNonUserCode()]{NEW_LINE}";
            return xml;
        }
    }
}
