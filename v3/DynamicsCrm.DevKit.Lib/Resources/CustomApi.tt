using System;
using Microsoft.Xrm.Sdk;
using <#=Context.PluginSharedNameSpace#>;

namespace <#=Context.PluginNameSpace#>
{
    [CrmPluginRegistration("<#=Context.PluginMessage#>Request", "<#=Context.PluginMessage#>", PluginType.CustomApi<#if(Context.PluginLogicalName!="none"){#>, EntityLogicalName = "<#=Context.PluginLogicalName#>"<#}#>)]
    public class <#=Context.Class#> : IPlugin
    {
        /*
        <#=Context.PluginComment#>
        */

        public void Execute(IServiceProvider serviceProvider)
        {
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            var serviceAdmin = serviceFactory.CreateOrganizationService(null);
            var service = serviceFactory.CreateOrganizationService(context.UserId);
            var tracing = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            <#if(Context.PluginLogicalName!="none"){#>if (context.PrimaryEntityName.ToLower() != "<#=Context.PluginLogicalName#>") throw new InvalidPluginExecutionException("PrimaryEntityName does not equals <#=Context.PluginLogicalName#>");<#}#>

            //tracing.DebugContext(context);

            var outputs = ExecuteCustomApi(context, serviceFactory, serviceAdmin, service, tracing);
            foreach (var output in outputs)
                if (context.OutputParameters.Contains(output.Key))
                    context.OutputParameters[output.Key] = output.Value;
        }

        private ParameterCollection ExecuteCustomApi(IPluginExecutionContext context, IOrganizationServiceFactory serviceFactory, IOrganizationService serviceAdmin, IOrganizationService service, ITracingService tracing)
        {
            var outputs = new ParameterCollection();
            //YOUR CUSTOM ACTION BEGIN HERE

            return outputs;
        }
    }
}