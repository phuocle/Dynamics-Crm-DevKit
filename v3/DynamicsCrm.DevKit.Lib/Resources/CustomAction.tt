using System;
using Microsoft.Xrm.Sdk;
using <#=Context.PluginSharedNameSpace#>;

namespace <#=Context.PluginNameSpace#>
{
    [CrmPluginRegistration("<#=Context.PluginMessage#>", "<#=Context.PluginLogicalName#>", StageEnum.<#=Context.PluginStage#>, ExecutionModeEnum.<#=Context.PluginExecution#>, "", "<#=Context.PluginNameSpace#>.<#=Context.Class#>", 1, IsolationModeEnum.Sandbox, PluginType = PluginType.CustomAction<#if(Context.IsNeedDeleteAsyncOperation){#>, DeleteAsyncOperation = true<#}#>)]
    public class <#=Context.Class#> : IPlugin
    {
        /*
        <#=Context.PluginComment#>
        */

        //private readonly string unSecureConfiguration = null;
        //private readonly string secureConfiguration = null;
        //public <#=Context.Class#>(string unSecureConfiguration, string secureConfiguration)
        //{
        //    this.unSecureConfiguration = unSecureConfiguration;
        //    this.secureConfiguration = secureConfiguration;
        //}

        public void Execute(IServiceProvider serviceProvider)
        {
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            var serviceAdmin = serviceFactory.CreateOrganizationService(null);
            var service = serviceFactory.CreateOrganizationService(context.UserId);
            var tracing = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            if (context.Stage != (int)StageEnum.<#=Context.PluginStage#>) throw new InvalidPluginExecutionException("Stage does not equals <#=Context.PluginStage#>");
            if (context.PrimaryEntityName.ToLower() != "<#=Context.PluginLogicalName#>") throw new InvalidPluginExecutionException("PrimaryEntityName does not equals <#=Context.PluginLogicalName#>");
            if (context.MessageName.ToLower() != "<#=Context.PluginMessage#>".ToLower()) throw new InvalidPluginExecutionException("MessageName does not equals <#=Context.PluginMessage#>");
            if (context.Mode != (int)ExecutionModeEnum.<#=Context.PluginExecution#>) throw new InvalidPluginExecutionException("Execution does not equals <#=Context.PluginExecution#>");

            //tracing.DebugContext(context);

            var outputs = ExecuteCustomAction(context, serviceFactory, serviceAdmin, service, tracing);
            foreach (var output in outputs)
            {
                if (context.OutputParameters.Contains(output.Key))
                {
                    context.OutputParameters[output.Key] = output.Value;
                }
            }
        }

        private ParameterCollection ExecuteCustomAction(IPluginExecutionContext context, IOrganizationServiceFactory serviceFactory, IOrganizationService serviceAdmin, IOrganizationService service, ITracingService tracing)
        {
            var outputs = new ParameterCollection();
            //YOUR CUSTOM ACTION BEGIN HERE

            return outputs;
        }
    }
}
