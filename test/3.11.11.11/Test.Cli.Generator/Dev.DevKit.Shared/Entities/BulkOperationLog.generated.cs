//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.BulkOperationLogOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BulkOperationLog : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalInfo = "additionalinfo";
			public const string BulkOperationId = "bulkoperationid";
			public const string BulkOperationLogId = "bulkoperationlogid";
			public const string CampaignActivityId = "campaignactivityid";
			public const string CreatedObjectId = "createdobjectid";
			public const string ErrorDescriptionFormatted = "errordescriptionformatted";
			public const string ErrorNumber = "errornumber";
			public const string ErrorNumberFormatted = "errornumberformatted";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string RegardingObjectId = "regardingobjectid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "bulkoperationlog";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4405;

		[DebuggerNonUserCode()]
		public BulkOperationLog()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkOperationLog(Guid BulkOperationLogId)
		{
			Entity = new Entity(EntityLogicalName, BulkOperationLogId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkOperationLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkOperationLog(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkOperationLog(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BulkOperationLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows the data value at which an error occurred during the quick campaign.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Failed on Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalInfo); }
			set { Entity.Attributes[Fields.AdditionalInfo] = value; }
		}

		/// <summary>
		/// <para>Shows the quick campaign record that the log applies to. This information is used to relate log data to the parent quick campaign.</para>
		/// <para>Lookup to bulkoperation</para>
		/// <para>Bulk Operation Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BulkOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BulkOperationId); }
			set { Entity.Attributes[Fields.BulkOperationId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the bulk operation log.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Bulk Operation Log Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BulkOperationLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BulkOperationLogId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows the campaign activity record that the log applies to. This information is used to relate log data to the parent campaign activity.</para>
		/// <para>Lookup to campaignactivity</para>
		/// <para>Campaign Activity Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignActivityId); }
			set { Entity.Attributes[Fields.CampaignActivityId] = value; }
		}

		/// <summary>
		/// <para>Choose the activity or other item created by the bulk operation.</para>
		/// <para>Lookup to account, activitypointer, contact, lead, opportunity</para>
		/// <para>Created Object</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedObjectId); }
			set { Entity.Attributes[Fields.CreatedObjectId] = value; }
		}

		/// <summary>
		/// <para>The error description formatted.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Error description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDescriptionFormatted
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDescriptionFormatted); }
			set { Entity.Attributes[Fields.ErrorDescriptionFormatted] = value; }
		}

		/// <summary>
		/// <para>Shows the error code that is used to troubleshoot issues in the bulk operation.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Reason Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorNumber); }
		}

		/// <summary>
		/// <para>The error number formatted.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Error number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorNumberFormatted
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorNumberFormatted); }
			set { Entity.Attributes[Fields.ErrorNumberFormatted] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>name</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Required - Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Choose the account, contact, lead, or list that the bulk operation log item applies to.</para>
		/// <para>Required - Lookup to account, contact, lead</para>
		/// <para>Customers</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
