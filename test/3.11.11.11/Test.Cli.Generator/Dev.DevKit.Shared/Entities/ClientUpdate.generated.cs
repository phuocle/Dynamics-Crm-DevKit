//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ClientUpdateOptionSets
{
	public enum WhenExecute
	{
		/// <summary>
		/// After download data = 3
		/// </summary>
		After_download_data = 3,
		/// <summary>
		/// After SchemaChanges but before Download data = 2
		/// </summary>
		After_SchemaChanges_but_before_Download_data = 2,
		/// <summary>
		/// Before SchemaChanges = 1
		/// </summary>
		Before_SchemaChanges = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ClientUpdate : EntityBase
	{
		public struct Fields
		{
			public const string ClientUpdateId = "clientupdateid";
			public const string CreatedOn = "createdon";
			public const string Description = "description";
			public const string SqlScript = "sqlscript";
			public const string VersionNumber = "versionnumber";
			public const string WasExecuted = "wasexecuted";
			public const string WhenExecute = "whenexecute";
		}

		public const string EntityLogicalName = "clientupdate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 36;

		[DebuggerNonUserCode()]
		public ClientUpdate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ClientUpdate(Guid ClientUpdateId)
		{
			Entity = new Entity(EntityLogicalName, ClientUpdateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ClientUpdate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ClientUpdate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ClientUpdate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ClientUpdate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the client update.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Client update Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ClientUpdateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ClientUpdateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only. Date and time when the ClientUpdate script was created on server.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Description of the client update.</para>
		/// <para>String - MaxLength: 512</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Contents of the client update.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>SQL Script</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SqlScript
		{
			get { return Entity.GetAttributeValue<string>(Fields.SqlScript); }
			set { Entity.Attributes[Fields.SqlScript] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>For internal use only. Should be set by client to 1 after action was executed.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WasExecuted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WasExecuted); }
			set { Entity.Attributes[Fields.WasExecuted] = value; }
		}

		/// <summary>
		/// <para>For internal use only. Values are: 1 - Before SchemaChanges; 2 - After SchemaChanges but before Download data; 3 - After download data.</para>
		/// <para>Picklist</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ClientUpdateOptionSets.WhenExecute? WhenExecute
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.WhenExecute);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ClientUpdateOptionSets.WhenExecute)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.WhenExecute] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.WhenExecute] = null;
			}
		}
	}
}
