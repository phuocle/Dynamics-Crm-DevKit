//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.UserSettingsOptionSets
{
	public enum DataValidationModeForExportToExcel
	{
		/// <summary>
		/// Full = 0
		/// </summary>
		Full = 0,
		/// <summary>
		/// None = 1
		/// </summary>
		None = 1
	}

	public enum DefaultSearchExperience
	{
		/// <summary>
		/// Categorized search = 1
		/// </summary>
		Categorized_search = 1,
		/// <summary>
		/// Custom search = 3
		/// </summary>
		Custom_search = 3,
		/// <summary>
		/// Relevance search = 0
		/// </summary>
		Relevance_search = 0,
		/// <summary>
		/// Use last search = 2
		/// </summary>
		Use_last_search = 2
	}

	public enum EntityFormMode
	{
		/// <summary>
		/// Edit = 2
		/// </summary>
		Edit = 2,
		/// <summary>
		/// Organization default = 0
		/// </summary>
		Organization_default = 0,
		/// <summary>
		/// Read-optimized = 1
		/// </summary>
		Read_optimized = 1
	}

	public enum IncomingEmailFilteringMethod
	{
		/// <summary>
		/// All email messages = 0
		/// </summary>
		All_email_messages = 0,
		/// <summary>
		/// Email messages from Dynamics 365 Leads, Contacts and Accounts = 2
		/// </summary>
		Email_messages_from_Dynamics_365_Leads_Contacts_and_Accounts = 2,
		/// <summary>
		/// Email messages from Dynamics 365 records that are email enabled = 3
		/// </summary>
		Email_messages_from_Dynamics_365_records_that_are_email_enabled = 3,
		/// <summary>
		/// Email messages in response to Dynamics 365 email = 1
		/// </summary>
		Email_messages_in_response_to_Dynamics_365_email = 1,
		/// <summary>
		/// No email messages = 4
		/// </summary>
		No_email_messages = 4
	}

	public enum ReportScriptErrors
	{
		/// <summary>
		/// Ask me for permission to send an error report to Microsoft = 1
		/// </summary>
		Ask_me_for_permission_to_send_an_error_report_to_Microsoft = 1,
		/// <summary>
		/// Automatically send an error report to Microsoft without asking me for permission = 2
		/// </summary>
		Automatically_send_an_error_report_to_Microsoft_without_asking_me_for_permission = 2,
		/// <summary>
		/// Never send an error report to Microsoft about Microsoft Dynamics 365 = 3
		/// </summary>
		Never_send_an_error_report_to_Microsoft_about_Microsoft_Dynamics_365 = 3
	}

	public enum VisualizationPaneLayout
	{
		/// <summary>
		/// Side-by-side = 1
		/// </summary>
		Side_by_side = 1,
		/// <summary>
		/// Top-bottom = 0
		/// </summary>
		Top_bottom = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UserSettings : EntityBase
	{
		public struct Fields
		{
			public const string AddressBookSyncInterval = "addressbooksyncinterval";
			public const string AdvancedFindStartupMode = "advancedfindstartupmode";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string AllowEmailCredentials = "allowemailcredentials";
			public const string AMDesignator = "amdesignator";
			public const string AutoCaptureUserStatus = "autocaptureuserstatus";
			public const string AutoCreateContactOnPromote = "autocreatecontactonpromote";
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarType = "calendartype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string CurrencyDecimalPrecision = "currencydecimalprecision";
			public const string CurrencyFormatCode = "currencyformatcode";
			public const string CurrencySymbol = "currencysymbol";
			public const string DataValidationModeForExportToExcel = "datavalidationmodeforexporttoexcel";
			public const string DateFormatCode = "dateformatcode";
			public const string DateFormatString = "dateformatstring";
			public const string DateSeparator = "dateseparator";
			public const string DecimalSymbol = "decimalsymbol";
			public const string DefaultCalendarView = "defaultcalendarview";
			public const string DefaultCountryCode = "defaultcountrycode";
			public const string DefaultDashboardId = "defaultdashboardid";
			public const string DefaultSearchExperience = "defaultsearchexperience";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string EmailPassword = "emailpassword";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string EmailUsername = "emailusername";
			public const string EntityFormMode = "entityformmode";
			public const string FullNameConventionCode = "fullnameconventioncode";
			public const string GetStartedPaneContentEnabled = "getstartedpanecontentenabled";
			public const string HelpLanguageId = "helplanguageid";
			public const string HomepageArea = "homepagearea";
			public const string HomepageLayout = "homepagelayout";
			public const string HomepageSubarea = "homepagesubarea";
			public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
			public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
			public const string IsAppsForCrmAlertDismissed = "isappsforcrmalertdismissed";
			public const string IsAutoDataCaptureEnabled = "isautodatacaptureenabled";
			public const string IsDefaultCountryCodeCheckEnabled = "isdefaultcountrycodecheckenabled";
			public const string IsDuplicateDetectionEnabledWhenGoingOnline = "isduplicatedetectionenabledwhengoingonline";
			public const string IsEmailConversationViewEnabled = "isemailconversationviewenabled";
			public const string IsGuidedHelpEnabled = "isguidedhelpenabled";
			public const string IsResourceBookingExchangeSyncEnabled = "isresourcebookingexchangesyncenabled";
			public const string IsSendAsAllowed = "issendasallowed";
			public const string LastAlertsViewedTime = "lastalertsviewedtime";
			public const string LastModifiedTimeForViewPersonalizationSettings = "lastmodifiedtimeforviewpersonalizationsettings";
			public const string LocaleId = "localeid";
			public const string LongDateFormatCode = "longdateformatcode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string NegativeCurrencyFormatCode = "negativecurrencyformatcode";
			public const string NegativeFormatCode = "negativeformatcode";
			public const string NextTrackingNumber = "nexttrackingnumber";
			public const string NumberGroupFormat = "numbergroupformat";
			public const string NumberSeparator = "numberseparator";
			public const string OfflineSyncInterval = "offlinesyncinterval";
			public const string OutlookSyncInterval = "outlooksyncinterval";
			public const string PagingLimit = "paginglimit";
			public const string PersonalizationSettings = "personalizationsettings";
			public const string PMDesignator = "pmdesignator";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string PricingDecimalPrecision = "pricingdecimalprecision";
			public const string ReportScriptErrors = "reportscripterrors";
			public const string ResourceBookingExchangeSyncVersion = "resourcebookingexchangesyncversion";
			public const string SelectedGlobalFilterId = "selectedglobalfilterid";
			public const string ShowWeekNumber = "showweeknumber";
			public const string SplitViewState = "splitviewstate";
			public const string SyncContactCompany = "synccontactcompany";
			public const string SystemUserId = "systemuserid";
			public const string TimeFormatCode = "timeformatcode";
			public const string TimeFormatString = "timeformatstring";
			public const string TimeSeparator = "timeseparator";
			public const string TimeZoneBias = "timezonebias";
			public const string TimeZoneCode = "timezonecode";
			public const string TimeZoneDaylightBias = "timezonedaylightbias";
			public const string TimeZoneDaylightDay = "timezonedaylightday";
			public const string TimeZoneDaylightDayOfWeek = "timezonedaylightdayofweek";
			public const string TimeZoneDaylightHour = "timezonedaylighthour";
			public const string TimeZoneDaylightMinute = "timezonedaylightminute";
			public const string TimeZoneDaylightMonth = "timezonedaylightmonth";
			public const string TimeZoneDaylightSecond = "timezonedaylightsecond";
			public const string TimeZoneDaylightYear = "timezonedaylightyear";
			public const string TimeZoneStandardBias = "timezonestandardbias";
			public const string TimeZoneStandardDay = "timezonestandardday";
			public const string TimeZoneStandardDayOfWeek = "timezonestandarddayofweek";
			public const string TimeZoneStandardHour = "timezonestandardhour";
			public const string TimeZoneStandardMinute = "timezonestandardminute";
			public const string TimeZoneStandardMonth = "timezonestandardmonth";
			public const string TimeZoneStandardSecond = "timezonestandardsecond";
			public const string TimeZoneStandardYear = "timezonestandardyear";
			public const string TrackingTokenId = "trackingtokenid";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UILanguageId = "uilanguageid";
			public const string UseCrmFormForAppointment = "usecrmformforappointment";
			public const string UseCrmFormForContact = "usecrmformforcontact";
			public const string UseCrmFormForEmail = "usecrmformforemail";
			public const string UseCrmFormForTask = "usecrmformfortask";
			public const string UseImageStrips = "useimagestrips";
			public const string UserProfile = "userprofile";
			public const string VersionNumber = "versionnumber";
			public const string VisualizationPaneLayout = "visualizationpanelayout";
			public const string WorkdayStartTime = "workdaystarttime";
			public const string WorkdayStopTime = "workdaystoptime";
		}

		public const string EntityLogicalName = "usersettings";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 150;

		[DebuggerNonUserCode()]
		public UserSettings()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserSettings(Guid UserSettingsId)
		{
			Entity = new Entity(EntityLogicalName, UserSettingsId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserSettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserSettings(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserSettings(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UserSettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Normal polling frequency used for address book synchronization in Microsoft Office Outlook.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AddressBookSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AddressBookSyncInterval); }
			set { Entity.Attributes[Fields.AddressBookSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Default mode, such as simple or detailed, for advanced find.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AdvancedFindStartupMode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AdvancedFindStartupMode); }
			set { Entity.Attributes[Fields.AdvancedFindStartupMode] = value; }
		}

		/// <summary>
		/// <para>This attribute is no longer used. The data is now in the Mailbox.AllowEmailConnectorToUseCredentials attribute.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public bool? AllowEmailCredentials
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEmailCredentials); }
		}

		/// <summary>
		/// <para>AM designator to use in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AMDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.AMDesignator); }
			set { Entity.Attributes[Fields.AMDesignator] = value; }
		}

		/// <summary>
		/// <para>Set user status for ADC Suggestions</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AutoCaptureUserStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AutoCaptureUserStatus); }
			set { Entity.Attributes[Fields.AutoCaptureUserStatus] = value; }
		}

		/// <summary>
		/// <para>Auto-create contact on client promote</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AutoCreateContactOnPromote
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AutoCreateContactOnPromote); }
			set { Entity.Attributes[Fields.AutoCreateContactOnPromote] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit with which the user is associated.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BusinessUnitId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}

		/// <summary>
		/// <para>Calendar type for the system. Set to Gregorian US by default.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CalendarType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CalendarType); }
			set { Entity.Attributes[Fields.CalendarType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the user settings.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the user settings object was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the usersettings.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Number of decimal places that can be used for currency.</para>
		/// <para>Required - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public int? CurrencyDecimalPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrencyDecimalPrecision); }
			set { Entity.Attributes[Fields.CurrencyDecimalPrecision] = value; }
		}

		/// <summary>
		/// <para>Information about how currency symbols are placed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrencyFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrencyFormatCode); }
			set { Entity.Attributes[Fields.CurrencyFormatCode] = value; }
		}

		/// <summary>
		/// <para>Symbol used for currency in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 13</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CurrencySymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.CurrencySymbol); }
			set { Entity.Attributes[Fields.CurrencySymbol] = value; }
		}

		/// <summary>
		/// <para>Information that specifies the level of data validation in excel worksheets exported in a format suitable for import.</para>
		/// <para>Picklist</para>
		/// <para>Data Validation Mode For Export To Excel</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserSettingsOptionSets.DataValidationModeForExportToExcel? DataValidationModeForExportToExcel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataValidationModeForExportToExcel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserSettingsOptionSets.DataValidationModeForExportToExcel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataValidationModeForExportToExcel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataValidationModeForExportToExcel] = null;
			}
		}

		/// <summary>
		/// <para>Information about how the date is displayed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DateFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DateFormatCode); }
			set { Entity.Attributes[Fields.DateFormatCode] = value; }
		}

		/// <summary>
		/// <para>String showing how the date is displayed throughout Microsoft 365.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateFormatString
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateFormatString); }
			set { Entity.Attributes[Fields.DateFormatString] = value; }
		}

		/// <summary>
		/// <para>Character used to separate the month, the day, and the year in dates in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateSeparator); }
			set { Entity.Attributes[Fields.DateSeparator] = value; }
		}

		/// <summary>
		/// <para>Symbol used for decimal in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DecimalSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.DecimalSymbol); }
			set { Entity.Attributes[Fields.DecimalSymbol] = value; }
		}

		/// <summary>
		/// <para>Default calendar view for the user.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DefaultCalendarView
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DefaultCalendarView); }
			set { Entity.Attributes[Fields.DefaultCalendarView] = value; }
		}

		/// <summary>
		/// <para>Text area to enter default country code.</para>
		/// <para>String - MaxLength: 30</para>
		/// <para>Default Country Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultCountryCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultCountryCode); }
			set { Entity.Attributes[Fields.DefaultCountryCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default dashboard.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DefaultDashboardId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DefaultDashboardId); }
			set { Entity.Attributes[Fields.DefaultDashboardId] = value; }
		}

		/// <summary>
		/// <para>Default search experience for the user.</para>
		/// <para>Picklist</para>
		/// <para>Default Search Experience</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserSettingsOptionSets.DefaultSearchExperience? DefaultSearchExperience
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DefaultSearchExperience);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserSettingsOptionSets.DefaultSearchExperience)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DefaultSearchExperience] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DefaultSearchExperience] = null;
			}
		}

		/// <summary>
		/// <para>This attribute is no longer used. The data is now in the Mailbox.Password attribute.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public string EmailPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailPassword); }
		}

		/// <summary>
		/// <para>This attribute is no longer used. The data is now in the Mailbox.UserName attribute.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public string EmailUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailUsername); }
		}

		/// <summary>
		/// <para>Indicates the form mode to be used.</para>
		/// <para>Picklist</para>
		/// <para>Form Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserSettingsOptionSets.EntityFormMode? EntityFormMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EntityFormMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserSettingsOptionSets.EntityFormMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EntityFormMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EntityFormMode] = null;
			}
		}

		/// <summary>
		/// <para>Order in which names are to be displayed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FullNameConventionCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FullNameConventionCode); }
			set { Entity.Attributes[Fields.FullNameConventionCode] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the Get Started pane in lists is enabled.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GetStartedPaneContentEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GetStartedPaneContentEnabled); }
			set { Entity.Attributes[Fields.GetStartedPaneContentEnabled] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the Help language.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HelpLanguageId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HelpLanguageId); }
			set { Entity.Attributes[Fields.HelpLanguageId] = value; }
		}

		/// <summary>
		/// <para>Web site home page for the user.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HomepageArea
		{
			get { return Entity.GetAttributeValue<string>(Fields.HomepageArea); }
			set { Entity.Attributes[Fields.HomepageArea] = value; }
		}

		/// <summary>
		/// <para>Configuration of the home page layout.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HomepageLayout
		{
			get { return Entity.GetAttributeValue<string>(Fields.HomepageLayout); }
			set { Entity.Attributes[Fields.HomepageLayout] = value; }
		}

		/// <summary>
		/// <para>Web site page for the user.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HomepageSubarea
		{
			get { return Entity.GetAttributeValue<string>(Fields.HomepageSubarea); }
			set { Entity.Attributes[Fields.HomepageSubarea] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether a user account is to ignore unsolicited email (deprecated).</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreUnsolicitedEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreUnsolicitedEmail); }
			set { Entity.Attributes[Fields.IgnoreUnsolicitedEmail] = value; }
		}

		/// <summary>
		/// <para>Incoming email filtering method.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Email Filtering Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserSettingsOptionSets.IncomingEmailFilteringMethod? IncomingEmailFilteringMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailFilteringMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserSettingsOptionSets.IncomingEmailFilteringMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = null;
			}
		}

		/// <summary>
		/// <para>Show or dismiss alert for Apps for 365.</para>
		/// <para>Boolean</para>
		/// <para>Show alert for Apps for 365.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAppsForCrmAlertDismissed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAppsForCrmAlertDismissed); }
			set { Entity.Attributes[Fields.IsAppsForCrmAlertDismissed] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to use the Auto Capture feature enabled or not.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoDataCaptureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoDataCaptureEnabled); }
			set { Entity.Attributes[Fields.IsAutoDataCaptureEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable country code selection .</para>
		/// <para>Boolean</para>
		/// <para>Enable Default Country Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefaultCountryCodeCheckEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefaultCountryCodeCheckEnabled); }
			set { Entity.Attributes[Fields.IsDefaultCountryCodeCheckEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates if duplicate detection is enabled when going online.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledWhenGoingOnline
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledWhenGoingOnline); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledWhenGoingOnline] = value; }
		}

		/// <summary>
		/// <para>Enable or disable email conversation view on timeline wall selection.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailConversationViewEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailConversationViewEnabled); }
			set { Entity.Attributes[Fields.IsEmailConversationViewEnabled] = value; }
		}

		/// <summary>
		/// <para>Enable or disable guided help.</para>
		/// <para>Boolean</para>
		/// <para>Enable Default Guided Help</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsGuidedHelpEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsGuidedHelpEnabled); }
			set { Entity.Attributes[Fields.IsGuidedHelpEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates if the synchronization of user resource booking with Exchange is enabled at user level.</para>
		/// <para>Boolean</para>
		/// <para>Resource booking synchronization enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsResourceBookingExchangeSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsResourceBookingExchangeSyncEnabled); }
			set { Entity.Attributes[Fields.IsResourceBookingExchangeSyncEnabled] = value; }
		}

		/// <summary>
		/// <para>Indicates if send as other user privilege is enabled or not.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSendAsAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSendAsAllowed); }
			set { Entity.Attributes[Fields.IsSendAsAllowed] = value; }
		}

		/// <summary>
		/// <para>Shows the last time when the traces were read from the database.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastAlertsViewedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastAlertsViewedTime); }
			set { Entity.Attributes[Fields.LastAlertsViewedTime] = value; }
		}

		/// <summary>
		/// <para>Stores the timestamp for when the ViewPersonalizationSettings attribute was updated for this user in the UserEntityUISettings table.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last modified timestamp for the view personalization settings in UserEntityUISettings table</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastModifiedTimeForViewPersonalizationSettingsUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastModifiedTimeForViewPersonalizationSettings); }
			set { Entity.Attributes[Fields.LastModifiedTimeForViewPersonalizationSettings] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user locale.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LocaleId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LocaleId); }
			set { Entity.Attributes[Fields.LocaleId] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how Long Date is displayed throughout Microsoft 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LongDateFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LongDateFormatCode); }
			set { Entity.Attributes[Fields.LongDateFormatCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the user settings.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the user settings object was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the usersettings.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Information that specifies how negative currency numbers are displayed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 15</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NegativeCurrencyFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NegativeCurrencyFormatCode); }
			set { Entity.Attributes[Fields.NegativeCurrencyFormatCode] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how negative numbers are displayed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NegativeFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NegativeFormatCode); }
			set { Entity.Attributes[Fields.NegativeFormatCode] = value; }
		}

		/// <summary>
		/// <para>Next tracking number.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextTrackingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextTrackingNumber); }
			set { Entity.Attributes[Fields.NextTrackingNumber] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how numbers are grouped in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberGroupFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberGroupFormat); }
			set { Entity.Attributes[Fields.NumberGroupFormat] = value; }
		}

		/// <summary>
		/// <para>Symbol used for number separation in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberSeparator); }
			set { Entity.Attributes[Fields.NumberSeparator] = value; }
		}

		/// <summary>
		/// <para>Normal polling frequency used for background offline synchronization in Microsoft Office Outlook.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OfflineSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OfflineSyncInterval); }
			set { Entity.Attributes[Fields.OfflineSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Normal polling frequency used for record synchronization in Microsoft Office Outlook.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OutlookSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OutlookSyncInterval); }
			set { Entity.Attributes[Fields.OutlookSyncInterval] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how many items to list on a page in list views.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PagingLimit
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PagingLimit); }
			set { Entity.Attributes[Fields.PagingLimit] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PersonalizationSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.PersonalizationSettings); }
			set { Entity.Attributes[Fields.PersonalizationSettings] = value; }
		}

		/// <summary>
		/// <para>PM designator to use in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PMDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.PMDesignator); }
			set { Entity.Attributes[Fields.PMDesignator] = value; }
		}

		/// <summary>
		/// <para>Number of decimal places that can be used for prices.</para>
		/// <para>Required - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public int? PricingDecimalPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PricingDecimalPrecision); }
			set { Entity.Attributes[Fields.PricingDecimalPrecision] = value; }
		}

		/// <summary>
		/// <para>Picklist for selecting the user preference for reporting scripting errors.</para>
		/// <para>Picklist</para>
		/// <para>Report Script Errors</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserSettingsOptionSets.ReportScriptErrors? ReportScriptErrors
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReportScriptErrors);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserSettingsOptionSets.ReportScriptErrors)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReportScriptErrors] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReportScriptErrors] = null;
			}
		}

		/// <summary>
		/// <para>The version number for resource booking synchronization with Exchange.</para>
		/// <para>BigInt</para>
		/// <para>User resource booking synchronization version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? ResourceBookingExchangeSyncVersion
		{
			get { return Entity.GetAttributeValue<long?>(Fields.ResourceBookingExchangeSyncVersion); }
			set { Entity.Attributes[Fields.ResourceBookingExchangeSyncVersion] = value; }
		}

		/// <summary>
		/// <para>Store selected customer service hub dashboard saved filter id.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SelectedGlobalFilterId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SelectedGlobalFilterId); }
			set { Entity.Attributes[Fields.SelectedGlobalFilterId] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether to display the week number in calendar displays in Microsoft Dynamics 365.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowWeekNumber
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowWeekNumber); }
			set { Entity.Attributes[Fields.ShowWeekNumber] = value; }
		}

		/// <summary>
		/// <para>For Internal use only</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SplitViewState
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SplitViewState); }
			set { Entity.Attributes[Fields.SplitViewState] = value; }
		}

		/// <summary>
		/// <para>Indicates if the company field in Microsoft Office Outlook items are set during Outlook synchronization.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncContactCompany
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncContactCompany); }
			set { Entity.Attributes[Fields.SyncContactCompany] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SystemUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SystemUserId); }
			set { Entity.Attributes[Fields.SystemUserId] = value; }
		}

		/// <summary>
		/// <para>Information that specifies how the time is displayed in Microsoft Dynamics 365.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeFormatCode); }
			set { Entity.Attributes[Fields.TimeFormatCode] = value; }
		}

		/// <summary>
		/// <para>Text for how time is displayed in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeFormatString
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeFormatString); }
			set { Entity.Attributes[Fields.TimeFormatString] = value; }
		}

		/// <summary>
		/// <para>Text for how time is displayed in Microsoft Dynamics 365.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSeparator); }
			set { Entity.Attributes[Fields.TimeSeparator] = value; }
		}

		/// <summary>
		/// <para>Local time zone adjustment for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneBias); }
			set { Entity.Attributes[Fields.TimeZoneBias] = value; }
		}

		/// <summary>
		/// <para>Local time zone for the user.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneCode); }
			set { Entity.Attributes[Fields.TimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight adjustment for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightBias); }
			set { Entity.Attributes[Fields.TimeZoneDaylightBias] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight day for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightDay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightDay); }
			set { Entity.Attributes[Fields.TimeZoneDaylightDay] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight day of week for the user. System calculated based on the time zone selected in Options.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightDayOfWeek); }
			set { Entity.Attributes[Fields.TimeZoneDaylightDayOfWeek] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight hour for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightHour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightHour); }
			set { Entity.Attributes[Fields.TimeZoneDaylightHour] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight minute for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightMinute
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightMinute); }
			set { Entity.Attributes[Fields.TimeZoneDaylightMinute] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight month for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightMonth); }
			set { Entity.Attributes[Fields.TimeZoneDaylightMonth] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight second for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightSecond
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightSecond); }
			set { Entity.Attributes[Fields.TimeZoneDaylightSecond] = value; }
		}

		/// <summary>
		/// <para>Local time zone daylight year for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneDaylightYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneDaylightYear); }
			set { Entity.Attributes[Fields.TimeZoneDaylightYear] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard time bias for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardBias); }
			set { Entity.Attributes[Fields.TimeZoneStandardBias] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard day for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardDay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardDay); }
			set { Entity.Attributes[Fields.TimeZoneStandardDay] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard day of week for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardDayOfWeek); }
			set { Entity.Attributes[Fields.TimeZoneStandardDayOfWeek] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard hour for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardHour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardHour); }
			set { Entity.Attributes[Fields.TimeZoneStandardHour] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard minute for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardMinute
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardMinute); }
			set { Entity.Attributes[Fields.TimeZoneStandardMinute] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard month for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardMonth); }
			set { Entity.Attributes[Fields.TimeZoneStandardMonth] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard second for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardSecond
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardSecond); }
			set { Entity.Attributes[Fields.TimeZoneStandardSecond] = value; }
		}

		/// <summary>
		/// <para>Local time zone standard year for the user. System calculated based on the time zone selected.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: -1</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneStandardYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneStandardYear); }
			set { Entity.Attributes[Fields.TimeZoneStandardYear] = value; }
		}

		/// <summary>
		/// <para>Tracking token ID.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TrackingTokenId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TrackingTokenId); }
			set { Entity.Attributes[Fields.TrackingTokenId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default currency of the user.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the language in which to view the user interface (UI).</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UILanguageId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UILanguageId); }
			set { Entity.Attributes[Fields.UILanguageId] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to use the Microsoft Dynamics 365 appointment form within Microsoft Office Outlook for creating new appointments.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseCrmFormForAppointment
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseCrmFormForAppointment); }
			set { Entity.Attributes[Fields.UseCrmFormForAppointment] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to use the Microsoft Dynamics 365 contact form within Microsoft Office Outlook for creating new contacts.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseCrmFormForContact
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseCrmFormForContact); }
			set { Entity.Attributes[Fields.UseCrmFormForContact] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to use the Microsoft Dynamics 365 email form within Microsoft Office Outlook for creating new emails.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseCrmFormForEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseCrmFormForEmail); }
			set { Entity.Attributes[Fields.UseCrmFormForEmail] = value; }
		}

		/// <summary>
		/// <para>Indicates whether to use the Microsoft Dynamics 365 task form within Microsoft Office Outlook for creating new tasks.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseCrmFormForTask
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseCrmFormForTask); }
			set { Entity.Attributes[Fields.UseCrmFormForTask] = value; }
		}

		/// <summary>
		/// <para>Indicates whether image strips are used to render images.</para>
		/// <para>Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseImageStrips
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseImageStrips); }
			set { Entity.Attributes[Fields.UseImageStrips] = value; }
		}

		/// <summary>
		/// <para>Specifies user profile ids in comma separated list.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserProfile
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserProfile); }
			set { Entity.Attributes[Fields.UserProfile] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>The layout of the visualization pane.</para>
		/// <para>Picklist</para>
		/// <para>Visualization Pane Layout.</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UserSettingsOptionSets.VisualizationPaneLayout? VisualizationPaneLayout
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.VisualizationPaneLayout);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UserSettingsOptionSets.VisualizationPaneLayout)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.VisualizationPaneLayout] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.VisualizationPaneLayout] = null;
			}
		}

		/// <summary>
		/// <para>Workday start time for the user.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WorkdayStartTime
		{
			get { return Entity.GetAttributeValue<string>(Fields.WorkdayStartTime); }
			set { Entity.Attributes[Fields.WorkdayStartTime] = value; }
		}

		/// <summary>
		/// <para>Workday stop time for the user.</para>
		/// <para>String - MaxLength: 5</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WorkdayStopTime
		{
			get { return Entity.GetAttributeValue<string>(Fields.WorkdayStopTime); }
			set { Entity.Attributes[Fields.WorkdayStopTime] = value; }
		}
	}
}
