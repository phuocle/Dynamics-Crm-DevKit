//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.appactionOptionSets
{
	public enum ClientType
	{
		/// <summary>
		/// Browser = 0
		/// </summary>
		Browser = 0,
		/// <summary>
		/// Mail App = 2
		/// </summary>
		Mail_App = 2,
		/// <summary>
		/// Mobile = 1
		/// </summary>
		Mobile = 1
	}

	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum Context
	{
		/// <summary>
		/// All = 0
		/// </summary>
		All = 0,
		/// <summary>
		/// Entity = 1
		/// </summary>
		Entity = 1
	}

	public enum Location
	{
		/// <summary>
		/// Associated Grid = 3
		/// </summary>
		Associated_Grid = 3,
		/// <summary>
		/// Dashboard = 6
		/// </summary>
		Dashboard = 6,
		/// <summary>
		/// Form = 0
		/// </summary>
		Form = 0,
		/// <summary>
		/// Global Header = 5
		/// </summary>
		Global_Header = 5,
		/// <summary>
		/// Main Grid = 1
		/// </summary>
		Main_Grid = 1,
		/// <summary>
		/// Quick Form = 4
		/// </summary>
		Quick_Form = 4,
		/// <summary>
		/// Sub Grid = 2
		/// </summary>
		Sub_Grid = 2
	}

	public enum OnClickEventType
	{
		/// <summary>
		/// Formula = 1
		/// </summary>
		Formula = 1,
		/// <summary>
		/// JavaScript = 2
		/// </summary>
		JavaScript = 2,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}

	public enum Type
	{
		/// <summary>
		/// Dropdown Button = 1
		/// </summary>
		Dropdown_Button = 1,
		/// <summary>
		/// Group = 3
		/// </summary>
		Group = 3,
		/// <summary>
		/// Split Button = 2
		/// </summary>
		Split_Button = 2,
		/// <summary>
		/// Standard Button = 0
		/// </summary>
		Standard_Button = 0
	}

	public enum VisibilityType
	{
		/// <summary>
		/// Classic Rules = 2
		/// </summary>
		Classic_Rules = 2,
		/// <summary>
		/// Formula = 1
		/// </summary>
		Formula = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class appaction : EntityBase
	{
		public struct Fields
		{
			public const string appactionId = "appactionid";
			public const string AppModuleId = "appmoduleid";
			public const string ButtonAccessibilityText = "buttonaccessibilitytext";
			public const string ButtonLabelText = "buttonlabeltext";
			public const string ButtonSequencePriority = "buttonsequencepriority";
			public const string ButtonTooltipDescription = "buttontooltipdescription";
			public const string ButtonTooltipTitle = "buttontooltiptitle";
			public const string ClientType = "clienttype";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string Context = "context";
			public const string ContextEntity = "contextentity";
			public const string ContextValue = "contextvalue";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string FontIcon = "fonticon";
			public const string GroupTitle = "grouptitle";
			public const string Hidden = "hidden";
			public const string IconWebResourceId = "iconwebresourceid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string isGroupTitleHidden = "isgrouptitlehidden";
			public const string IsManaged = "ismanaged";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OnClickEventFormulaComponentLibrary = "onclickeventformulacomponentlibrary";
			public const string OnClickEventFormulaComponentLibraryId = "onclickeventformulacomponentlibraryid";
			public const string OnClickEventFormulaComponentName = "onclickeventformulacomponentname";
			public const string OnClickEventFormulaFunctionName = "onclickeventformulafunctionname";
			public const string OnClickEventJavaScriptFunctionName = "onclickeventjavascriptfunctionname";
			public const string OnClickEventJavaScriptParameters = "onclickeventjavascriptparameters";
			public const string OnClickEventJavaScriptWebResourceId = "onclickeventjavascriptwebresourceid";
			public const string OnClickEventType = "onclickeventtype";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string ParentAppActionId = "parentappactionid";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Type = "type";
			public const string UniqueName = "uniquename";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string VisibilityFormulaComponentLibrary = "visibilityformulacomponentlibrary";
			public const string VisibilityFormulaComponentLibraryId = "visibilityformulacomponentlibraryid";
			public const string VisibilityFormulaComponentName = "visibilityformulacomponentname";
			public const string VisibilityFormulaFunctionName = "visibilityformulafunctionname";
			public const string VisibilityType = "visibilitytype";
		}

		public const string EntityLogicalName = "appaction";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10119;

		[DebuggerNonUserCode()]
		public appaction()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appaction(Guid appactionId)
		{
			Entity = new Entity(EntityLogicalName, appactionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appaction(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appaction(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appaction(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public appaction(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>App Action</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid appactionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.appactionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Lookup to appmodule</para>
		/// <para>App Module Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppModuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppModuleId); }
			set { Entity.Attributes[Fields.AppModuleId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Button Accessibility Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonAccessibilityText
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonAccessibilityText); }
			set { Entity.Attributes[Fields.ButtonAccessibilityText] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Button Label Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonLabelText
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonLabelText); }
			set { Entity.Attributes[Fields.ButtonLabelText] = value; }
		}

		/// <summary>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Button Sequence Priority</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ButtonSequencePriority
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ButtonSequencePriority); }
			set { Entity.Attributes[Fields.ButtonSequencePriority] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 500</para>
		/// <para>Button Tooltip Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonTooltipDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonTooltipDescription); }
			set { Entity.Attributes[Fields.ButtonTooltipDescription] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Button Tooltip Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonTooltipTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonTooltipTitle); }
			set { Entity.Attributes[Fields.ButtonTooltipTitle] = value; }
		}

		/// <summary>
		/// <para>MultiSelectPicklist</para>
		/// <para>Client Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType> ClientType
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.ClientType);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.ClientType] = null;
				}
				else
				{
					Entity.Attributes[Fields.ClientType] = data;
				}
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Row id unique</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Context</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Context? Context
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Context);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Context)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Context] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Context] = null;
			}
		}

		/// <summary>
		/// <para>Lookup to entity</para>
		/// <para>Context Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContextEntity
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContextEntity); }
			set { Entity.Attributes[Fields.ContextEntity] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 150</para>
		/// <para>Context Value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContextValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContextValue); }
			set { Entity.Attributes[Fields.ContextValue] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Font Icon</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FontIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.FontIcon); }
			set { Entity.Attributes[Fields.FontIcon] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Group Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupTitle); }
			set { Entity.Attributes[Fields.GroupTitle] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Hidden</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Hidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Hidden); }
			set { Entity.Attributes[Fields.Hidden] = value; }
		}

		/// <summary>
		/// <para>Lookup to webresource</para>
		/// <para>Icon WebResource Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference IconWebResourceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.IconWebResourceId); }
			set { Entity.Attributes[Fields.IconWebResourceId] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>isGroupTitleHidden</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? isGroupTitleHidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.isGroupTitleHidden); }
			set { Entity.Attributes[Fields.isGroupTitleHidden] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Location? Location
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Location);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Location)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Location] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Location] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 200</para>
		/// <para>On Click Event Formula Component Library</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventFormulaComponentLibrary
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventFormulaComponentLibrary); }
			set { Entity.Attributes[Fields.OnClickEventFormulaComponentLibrary] = value; }
		}

		/// <summary>
		/// <para>Lookup to canvasapp</para>
		/// <para>On Click Event Formula Component Library Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OnClickEventFormulaComponentLibraryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OnClickEventFormulaComponentLibraryId); }
			set { Entity.Attributes[Fields.OnClickEventFormulaComponentLibraryId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>On Click Event Formula Component Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventFormulaComponentName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventFormulaComponentName); }
			set { Entity.Attributes[Fields.OnClickEventFormulaComponentName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>On Click Event Formula Function Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventFormulaFunctionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventFormulaFunctionName); }
			set { Entity.Attributes[Fields.OnClickEventFormulaFunctionName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 300</para>
		/// <para>On Click Event JavaScript Function Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventJavaScriptFunctionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventJavaScriptFunctionName); }
			set { Entity.Attributes[Fields.OnClickEventJavaScriptFunctionName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>On Click Event JavaScript Parameters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventJavaScriptParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventJavaScriptParameters); }
			set { Entity.Attributes[Fields.OnClickEventJavaScriptParameters] = value; }
		}

		/// <summary>
		/// <para>Lookup to webresource</para>
		/// <para>On Click Event JavaScript WebResource Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OnClickEventJavaScriptWebResourceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OnClickEventJavaScriptWebResourceId); }
			set { Entity.Attributes[Fields.OnClickEventJavaScriptWebResourceId] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>On Click Event Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.OnClickEventType? OnClickEventType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OnClickEventType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.OnClickEventType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OnClickEventType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OnClickEventType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier for App Action associated with App Action.</para>
		/// <para>Lookup to appaction</para>
		/// <para>Parent AppAction</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAppActionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAppActionId); }
			set { Entity.Attributes[Fields.ParentAppActionId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Status of the App Action</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the App Action</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 300</para>
		/// <para>Unique Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>String - MaxLength: 200</para>
		/// <para>Visibility Formula Component Library</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VisibilityFormulaComponentLibrary
		{
			get { return Entity.GetAttributeValue<string>(Fields.VisibilityFormulaComponentLibrary); }
			set { Entity.Attributes[Fields.VisibilityFormulaComponentLibrary] = value; }
		}

		/// <summary>
		/// <para>Lookup to canvasapp</para>
		/// <para>Visibility Formula Component Library Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference VisibilityFormulaComponentLibraryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.VisibilityFormulaComponentLibraryId); }
			set { Entity.Attributes[Fields.VisibilityFormulaComponentLibraryId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Visibility Formula Component Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VisibilityFormulaComponentName
		{
			get { return Entity.GetAttributeValue<string>(Fields.VisibilityFormulaComponentName); }
			set { Entity.Attributes[Fields.VisibilityFormulaComponentName] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para>Visibility Formula Function Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VisibilityFormulaFunctionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.VisibilityFormulaFunctionName); }
			set { Entity.Attributes[Fields.VisibilityFormulaFunctionName] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Visibility Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.VisibilityType? VisibilityType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.VisibilityType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.VisibilityType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.VisibilityType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.VisibilityType] = null;
			}
		}
	}
}
