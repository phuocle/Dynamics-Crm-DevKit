//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ProductOptionSets
{
	public enum msdyn_FieldServiceProductType
	{
		/// <summary>
		/// Inventory = 690970000
		/// </summary>
		Inventory = 690970000,
		/// <summary>
		/// Non-Inventory = 690970001
		/// </summary>
		Non_Inventory = 690970001,
		/// <summary>
		/// Service = 690970002
		/// </summary>
		Service = 690970002
	}

	public enum ProductStructure
	{
		/// <summary>
		/// Product = 1
		/// </summary>
		Product = 1,
		/// <summary>
		/// Product Bundle = 3
		/// </summary>
		Product_Bundle = 3,
		/// <summary>
		/// Product Family = 2
		/// </summary>
		Product_Family = 2
	}

	public enum ProductTypeCode
	{
		/// <summary>
		/// Flat Fees = 4
		/// </summary>
		Flat_Fees = 4,
		/// <summary>
		/// Miscellaneous Charges = 2
		/// </summary>
		Miscellaneous_Charges = 2,
		/// <summary>
		/// Sales Inventory = 1
		/// </summary>
		Sales_Inventory = 1,
		/// <summary>
		/// Services = 3
		/// </summary>
		Services = 3
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Draft = 2
		/// </summary>
		Draft = 2,
		/// <summary>
		/// Retired = 1
		/// </summary>
		Retired = 1,
		/// <summary>
		/// Under Revision = 3
		/// </summary>
		Under_Revision = 3
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Retired = 2
		/// </summary>
		Retired = 2,
		/// <summary>
		/// Under Revision = 3
		/// </summary>
		Under_Revision = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Product : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CurrentCost = "currentcost";
			public const string CurrentCost_Base = "currentcost_base";
			public const string DefaultUoMId = "defaultuomid";
			public const string DefaultUoMScheduleId = "defaultuomscheduleid";
			public const string Description = "description";
			public const string DMTImportState = "dmtimportstate";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string HierarchyPath = "hierarchypath";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsKit = "iskit";
			public const string IsReparented = "isreparented";
			public const string IsStockItem = "isstockitem";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ConvertToCustomerAsset = "msdyn_converttocustomerasset";
			public const string msdyn_DefaultVendor = "msdyn_defaultvendor";
			public const string msdyn_FieldServiceProductType = "msdyn_fieldserviceproducttype";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_PurchaseName = "msdyn_purchasename";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_TransactionCategory = "msdyn_transactioncategory";
			public const string msdyn_UPCCode = "msdyn_upccode";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentProductId = "parentproductid";
			public const string Price = "price";
			public const string Price_Base = "price_base";
			public const string PriceLevelId = "pricelevelid";
			public const string ProcessId = "processid";
			public const string ProductId = "productid";
			public const string ProductNumber = "productnumber";
			public const string ProductStructure = "productstructure";
			public const string ProductTypeCode = "producttypecode";
			public const string ProductUrl = "producturl";
			public const string QuantityDecimal = "quantitydecimal";
			public const string QuantityOnHand = "quantityonhand";
			public const string Size = "size";
			public const string StageId = "stageid";
			public const string StandardCost = "standardcost";
			public const string StandardCost_Base = "standardcost_base";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StockVolume = "stockvolume";
			public const string StockWeight = "stockweight";
			public const string SubjectId = "subjectid";
			public const string SupplierName = "suppliername";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string ValidFromDate = "validfromdate";
			public const string ValidToDate = "validtodate";
			public const string VendorID = "vendorid";
			public const string VendorName = "vendorname";
			public const string VendorPartNumber = "vendorpartnumber";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "product";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1024;

		[DebuggerNonUserCode()]
		public Product()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Product(Guid ProductId)
		{
			Entity = new Entity(EntityLogicalName, ProductId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Product(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Product(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Product(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Product(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the product.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the external party who created the record.</para>
		/// <para>ReadOnly - Lookup to externalparty</para>
		/// <para>Created By (External Party)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the product.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Current cost for the product item. Used in price calculations.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Current Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CurrentCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CurrentCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrentCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CurrentCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Current Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Current Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CurrentCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CurrentCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Default unit for the product.</para>
		/// <para>Required - Lookup to uom</para>
		/// <para>Default Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultUoMId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultUoMId); }
			set { Entity.Attributes[Fields.DefaultUoMId] = value; }
		}

		/// <summary>
		/// <para>Default unit group for the product.</para>
		/// <para>Required - Lookup to uomschedule</para>
		/// <para>Unit Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultUoMScheduleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultUoMScheduleId); }
			set { Entity.Attributes[Fields.DefaultUoMScheduleId] = value; }
		}

		/// <summary>
		/// <para>Description of the product.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Internal Use Only</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Internal Use Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DMTImportState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DMTImportState); }
			set { Entity.Attributes[Fields.DMTImportState] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the product with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Hierarchy path of the product.</para>
		/// <para>ReadOnly - String - MaxLength: 450</para>
		/// <para>Hierarchy Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HierarchyPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.HierarchyPath); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Information that specifies whether the product is a kit.</para>
		/// <para>Boolean</para>
		/// <para>Is Kit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsKit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsKit); }
			set { Entity.Attributes[Fields.IsKit] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Reparented</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReparented
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReparented); }
			set { Entity.Attributes[Fields.IsReparented] = value; }
		}

		/// <summary>
		/// <para>Information about whether the product is a stock item.</para>
		/// <para>Boolean</para>
		/// <para>Stock Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsStockItem
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsStockItem); }
			set { Entity.Attributes[Fields.IsStockItem] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the product.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the external party who modified the record.</para>
		/// <para>ReadOnly - Lookup to externalparty</para>
		/// <para>Modified By (External Party)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the product.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Specify whether a product is to be converted to a customer asset. When a product is used on a work order, the system will automatically convert it into a customer asset when the work order is closed.</para>
		/// <para>Boolean</para>
		/// <para>Convert to Customer Asset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ConvertToCustomerAsset
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ConvertToCustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_ConvertToCustomerAsset] = value; }
		}

		/// <summary>
		/// <para>Default vendor that supplies this product</para>
		/// <para>Lookup to account</para>
		/// <para>Default Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultVendor); }
			set { Entity.Attributes[Fields.msdyn_DefaultVendor] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Field Service Product Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.msdyn_FieldServiceProductType? msdyn_FieldServiceProductType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_FieldServiceProductType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.msdyn_FieldServiceProductType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_FieldServiceProductType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_FieldServiceProductType] = null;
			}
		}

		/// <summary>
		/// <para>Describes whether product is opted out or not</para>
		/// <para>Boolean</para>
		/// <para>GDPR Optout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}

		/// <summary>
		/// <para>Type the name for the product when used on a purchase order.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Purchase Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PurchaseName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PurchaseName); }
			set { Entity.Attributes[Fields.msdyn_PurchaseName] = value; }
		}

		/// <summary>
		/// <para>Select whether the item is taxable. If an item is set as not taxable, it won&apos;t be taxable even on a taxable work order.</para>
		/// <para>Required - Boolean</para>
		/// <para>Taxable</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}

		/// <summary>
		/// <para>Select the transaction category for this product.</para>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Transaction Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TransactionCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TransactionCategory); }
			set { Entity.Attributes[Fields.msdyn_TransactionCategory] = value; }
		}

		/// <summary>
		/// <para>Shows the UPC Code for product. Used for bar code scanning.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>UPC Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UPCCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UPCCode); }
			set { Entity.Attributes[Fields.msdyn_UPCCode] = value; }
		}

		/// <summary>
		/// <para>Name of the product.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Specifies the parent product family hierarchy.</para>
		/// <para>Lookup to product</para>
		/// <para>Parent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentProductId); }
			set { Entity.Attributes[Fields.ParentProductId] = value; }
		}

		/// <summary>
		/// <para>List price for the product item. Used in price calculations.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>List Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Price] = null;
			}
		}

		/// <summary>
		/// <para>Value of the List Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>List Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the default price list for the product.</para>
		/// <para>Lookup to pricelevel</para>
		/// <para>Default Price List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the product.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProductId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProductId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>User-defined product ID.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Product ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductNumber); }
			set { Entity.Attributes[Fields.ProductNumber] = value; }
		}

		/// <summary>
		/// <para>Product Structure.</para>
		/// <para>Picklist</para>
		/// <para>Product Structure</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.ProductStructure? ProductStructure
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProductStructure);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.ProductStructure)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProductStructure] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProductStructure] = null;
			}
		}

		/// <summary>
		/// <para>Type of product.</para>
		/// <para>Picklist</para>
		/// <para>Product Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.ProductTypeCode? ProductTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProductTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.ProductTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProductTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProductTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>URL for the Website associated with the product.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductUrl); }
			set { Entity.Attributes[Fields.ProductUrl] = value; }
		}

		/// <summary>
		/// <para>Number of decimal places that can be used in monetary amounts for the product.</para>
		/// <para>Required - Integer - MinValue: 0 - MaxValue: 5</para>
		/// <para>Decimals Supported</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QuantityDecimal
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QuantityDecimal); }
			set { Entity.Attributes[Fields.QuantityDecimal] = value; }
		}

		/// <summary>
		/// <para>Quantity of the product in stock.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity On Hand</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? QuantityOnHand
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.QuantityOnHand); }
			set { Entity.Attributes[Fields.QuantityOnHand] = value; }
		}

		/// <summary>
		/// <para>Product size.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Size
		{
			get { return Entity.GetAttributeValue<string>(Fields.Size); }
			set { Entity.Attributes[Fields.Size] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Standard cost for the product item. Used in price calculations.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000,000</para>
		/// <para>Standard Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StandardCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StandardCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StandardCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.StandardCost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Standard Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Standard Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StandardCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StandardCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Status of the product.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the product.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Stock volume of the product.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Stock Volume</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StockVolume
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StockVolume); }
			set { Entity.Attributes[Fields.StockVolume] = value; }
		}

		/// <summary>
		/// <para>Stock weight of the product.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Stock Weight</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StockWeight
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StockWeight); }
			set { Entity.Attributes[Fields.StockWeight] = value; }
		}

		/// <summary>
		/// <para>Select a category for the product.</para>
		/// <para>Lookup to subject</para>
		/// <para>Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}

		/// <summary>
		/// <para>Name of the product&apos;s supplier.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Supplier Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SupplierName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SupplierName); }
			set { Entity.Attributes[Fields.SupplierName] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the product.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Date from which this product is valid.</para>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Valid From</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? ValidFromDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.ValidFromDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.ValidFromDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.ValidFromDate] = null;
			}
		}

		/// <summary>
		/// <para>Date to which this product is valid.</para>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Valid To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? ValidToDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.ValidToDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.ValidToDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.ValidToDate] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of vendor supplying the product.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Vendor ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VendorID
		{
			get { return Entity.GetAttributeValue<string>(Fields.VendorID); }
			set { Entity.Attributes[Fields.VendorID] = value; }
		}

		/// <summary>
		/// <para>Name of the product vendor.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Vendor</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VendorName
		{
			get { return Entity.GetAttributeValue<string>(Fields.VendorName); }
			set { Entity.Attributes[Fields.VendorName] = value; }
		}

		/// <summary>
		/// <para>Unique part identifier in vendor catalog of this product.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Vendor Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VendorPartNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.VendorPartNumber); }
			set { Entity.Attributes[Fields.VendorPartNumber] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
