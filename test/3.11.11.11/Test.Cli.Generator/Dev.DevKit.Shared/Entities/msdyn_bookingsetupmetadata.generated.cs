//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_bookingsetupmetadata : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AvailableDurationMinimumPercentage = "msdyn_availabledurationminimumpercentage";
			public const string msdyn_BookingRelationshipLogicalName = "msdyn_bookingrelationshiplogicalname";
			public const string msdyn_bookingsetupmetadataId = "msdyn_bookingsetupmetadataid";
			public const string msdyn_BookingStatusFieldLogicalName = "msdyn_bookingstatusfieldlogicalname";
			public const string msdyn_CancelBookingsWhenMoving = "msdyn_cancelbookingswhenmoving";
			public const string msdyn_CloneEntityQuery = "msdyn_cloneentityquery";
			public const string msdyn_DefaultBookingCanceledStatus = "msdyn_defaultbookingcanceledstatus";
			public const string msdyn_DefaultBookingCommittedStatus = "msdyn_defaultbookingcommittedstatus";
			public const string msdyn_DefaultBookingDuration = "msdyn_defaultbookingduration";
			public const string msdyn_DefaultRequirementActiveStatus = "msdyn_defaultrequirementactivestatus";
			public const string msdyn_DefaultRequirementCanceledStatus = "msdyn_defaultrequirementcanceledstatus";
			public const string msdyn_DefaultRequirementCompletedStatus = "msdyn_defaultrequirementcompletedstatus";
			public const string msdyn_DisableRequirementAutoCreation = "msdyn_disablerequirementautocreation";
			public const string msdyn_enablequickbook = "msdyn_enablequickbook";
			public const string msdyn_EntityLogicalName = "msdyn_entitylogicalname";
			public const string msdyn_RequirementRelationshipLogicalName = "msdyn_requirementrelationshiplogicalname";
			public const string msdyn_ResourceAvailabilityRetrievalLimit = "msdyn_resourceavailabilityretrievallimit";
			public const string msdyn_RetrieveConstraintsQuery = "msdyn_retrieveconstraintsquery";
			public const string msdyn_RetrieveResourcesQuery = "msdyn_retrieveresourcesquery";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_bookingsetupmetadata";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10465;

		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Guid msdyn_bookingsetupmetadataId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_bookingsetupmetadataId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 100</para>
		/// <para>Available Duration Minimum(%)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AvailableDurationMinimumPercentage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AvailableDurationMinimumPercentage); }
			set { Entity.Attributes[Fields.msdyn_AvailableDurationMinimumPercentage] = value; }
		}

		/// <summary>
		/// <para>A unique identifier that links bookings to a scheduling entity.</para>
		/// <para>String - MaxLength: 450</para>
		/// <para>Booking Relationship Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingRelationshipLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingRelationshipLogicalName); }
			set { Entity.Attributes[Fields.msdyn_BookingRelationshipLogicalName] = value; }
		}

		/// <summary>
		/// <para>A unique identifier for an entity instance.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Booking Setup Metadata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_bookingsetupmetadataId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_bookingsetupmetadataId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>An option set that is used to group and filter statuses.</para>
		/// <para>String - MaxLength: 450</para>
		/// <para>Booking Status Field Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingStatusFieldLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingStatusFieldLogicalName); }
			set { Entity.Attributes[Fields.msdyn_BookingStatusFieldLogicalName] = value; }
		}

		/// <summary>
		/// <para>Select whether, when moving open slots to the next day, to leave the old slots and change their status to &quot;Cancel.&quot;</para>
		/// <para>Boolean</para>
		/// <para>Cancel Bookings When Moving</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CancelBookingsWhenMoving
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CancelBookingsWhenMoving); }
			set { Entity.Attributes[Fields.msdyn_CancelBookingsWhenMoving] = value; }
		}

		/// <summary>
		/// <para>Query for retrieving resource requirements for cloning.</para>
		/// <para>Lookup to msdyn_configuration</para>
		/// <para>Clone Entity Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CloneEntityQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CloneEntityQuery); }
			set { Entity.Attributes[Fields.msdyn_CloneEntityQuery] = value; }
		}

		/// <summary>
		/// <para>The default booking canceled status to use when a user can&apos;t select a status.</para>
		/// <para>Lookup to bookingstatus</para>
		/// <para>Default Booking Canceled Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultBookingCanceledStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultBookingCanceledStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingCanceledStatus] = value; }
		}

		/// <summary>
		/// <para>The default booking committed status to use when a user can&apos;t select a status.</para>
		/// <para>Lookup to bookingstatus</para>
		/// <para>Default Booking Committed Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultBookingCommittedStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultBookingCommittedStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingCommittedStatus] = value; }
		}

		/// <summary>
		/// <para>The default booking duration to use when a duration is not provided.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Default Booking Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultBookingDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultBookingDuration); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingDuration] = value; }
		}

		/// <summary>
		/// <para>The default requirement active status to use when a user can&apos;t select a status</para>
		/// <para>Lookup to msdyn_requirementstatus</para>
		/// <para>Default Requirement Active Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultRequirementActiveStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultRequirementActiveStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultRequirementActiveStatus] = value; }
		}

		/// <summary>
		/// <para>The default requirement canceled status to use when a user can&apos;t select a status.</para>
		/// <para>Lookup to msdyn_requirementstatus</para>
		/// <para>Default Requirement Canceled Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultRequirementCanceledStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultRequirementCanceledStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultRequirementCanceledStatus] = value; }
		}

		/// <summary>
		/// <para>The default requirement completed status to use when a user can&apos;t select a status.</para>
		/// <para>Lookup to msdyn_requirementstatus</para>
		/// <para>Default Requirement Completed Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultRequirementCompletedStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultRequirementCompletedStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultRequirementCompletedStatus] = value; }
		}

		/// <summary>
		/// <para>Determines if a requirement should be created automatically when a booking is generated and there&apos;s no requirement for a scheduling entity.</para>
		/// <para>Boolean</para>
		/// <para>Disable Requirement Auto Creation for Bookings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableRequirementAutoCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableRequirementAutoCreation); }
			set { Entity.Attributes[Fields.msdyn_DisableRequirementAutoCreation] = value; }
		}

		/// <summary>
		/// <para>If yes, the book button on schedulable entities will launch the quick book experience. Otherwise, the book button will launch the pop-out scheduler.</para>
		/// <para>Boolean</para>
		/// <para>Enable Quick Book</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablequickbook
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablequickbook); }
			set { Entity.Attributes[Fields.msdyn_enablequickbook] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 450</para>
		/// <para>Entity Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EntityLogicalName); }
			set { Entity.Attributes[Fields.msdyn_EntityLogicalName] = value; }
		}

		/// <summary>
		/// <para>A unique identifier that links requirements to an enabled scheduling entity.</para>
		/// <para>String - MaxLength: 450</para>
		/// <para>Requirement Relationship Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RequirementRelationshipLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RequirementRelationshipLogicalName); }
			set { Entity.Attributes[Fields.msdyn_RequirementRelationshipLogicalName] = value; }
		}

		/// <summary>
		/// <para>The maximum number of resources to retrieve and show in schedule assistant.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000</para>
		/// <para>Resource Availability Retrieval Limit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ResourceAvailabilityRetrievalLimit
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ResourceAvailabilityRetrievalLimit); }
			set { Entity.Attributes[Fields.msdyn_ResourceAvailabilityRetrievalLimit] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_configuration</para>
		/// <para>Retrieve Constraints Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RetrieveConstraintsQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RetrieveConstraintsQuery); }
			set { Entity.Attributes[Fields.msdyn_RetrieveConstraintsQuery] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_configuration</para>
		/// <para>Retrieve Resources Query</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RetrieveResourcesQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RetrieveResourcesQuery); }
			set { Entity.Attributes[Fields.msdyn_RetrieveResourcesQuery] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Booking Setup Metadata</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Booking Setup Metadata</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
