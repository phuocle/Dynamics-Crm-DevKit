//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SLAItemOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SLAItem : EntityBase
	{
		public struct Fields
		{
			public const string actionflowuniquename = "actionflowuniquename";
			public const string ActionURL = "actionurl";
			public const string AllowPauseResume = "allowpauseresume";
			public const string ApplicableEntity = "applicableentity";
			public const string ApplicableWhenXml = "applicablewhenxml";
			public const string BusinessHoursId = "businesshoursid";
			public const string ChangedAttributeList = "changedattributelist";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string FailureAfter = "failureafter";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdvancedPauseConfiguration = "msdyn_advancedpauseconfiguration";
			public const string msdyn_CustomTimeCalculation = "msdyn_customtimecalculation";
			public const string msdyn_CustomTimeCalculationWorkflowId = "msdyn_customtimecalculationworkflowid";
			public const string msdyn_PauseConfigurationXml = "msdyn_pauseconfigurationxml";
			public const string msdyn_slakpiid = "msdyn_slakpiid";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string RelatedField = "relatedfield";
			public const string SequenceNumber = "sequencenumber";
			public const string SLAId = "slaid";
			public const string SLAItemId = "slaitemid";
			public const string SLAItemIdUnique = "slaitemidunique";
			public const string SolutionId = "solutionid";
			public const string SuccessConditionsXml = "successconditionsxml";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
			public const string WarnAfter = "warnafter";
			public const string WorkflowId = "workflowid";
		}

		public const string EntityLogicalName = "slaitem";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9751;

		[DebuggerNonUserCode()]
		public SLAItem()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAItem(Guid SLAItemId)
		{
			Entity = new Entity(EntityLogicalName, SLAItemId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAItem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAItem(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAItem(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SLAItem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Action Flow Unique Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string actionflowuniquename
		{
			get { return Entity.GetAttributeValue<string>(Fields.actionflowuniquename); }
			set { Entity.Attributes[Fields.actionflowuniquename] = value; }
		}

		/// <summary>
		/// <para>Action URL</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Action URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActionURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActionURL); }
			set { Entity.Attributes[Fields.ActionURL] = value; }
		}

		/// <summary>
		/// <para>Select whether this SLA will allow pausing and resuming during the time calculation.</para>
		/// <para>Boolean</para>
		/// <para>Allow Pause and Resume</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowPauseResume
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowPauseResume); }
			set { Entity.Attributes[Fields.AllowPauseResume] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Applicable Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicableEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicableEntity); }
			set { Entity.Attributes[Fields.ApplicableEntity] = value; }
		}

		/// <summary>
		/// <para>Condition for SLA item</para>
		/// <para>Required - Memo - MaxLength: 1073741823</para>
		/// <para>ApplicableWhenXml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicableWhenXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicableWhenXml); }
			set { Entity.Attributes[Fields.ApplicableWhenXml] = value; }
		}

		/// <summary>
		/// <para>Choose the business hours for calculating SLA item timelines.</para>
		/// <para>Lookup to calendar</para>
		/// <para>Business Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessHoursId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessHoursId); }
			set { Entity.Attributes[Fields.BusinessHoursId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Changed Attribute List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ChangedAttributeList
		{
			get { return Entity.GetAttributeValue<string>(Fields.ChangedAttributeList); }
			set { Entity.Attributes[Fields.ChangedAttributeList] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SLAItemOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SLAItemOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the SLA Item</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Exchange rate between the currency associated with the SLA Item record and the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Select how soon the success criteria must be met until the SLA item is considered failed and failure actions are initiated. The actual duration is based on the business hours as specified in the associated SLA record.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Failure After</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureAfter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureAfter); }
			set { Entity.Attributes[Fields.FailureAfter] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Advanced Pause Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AdvancedPauseConfiguration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AdvancedPauseConfiguration); }
			set { Entity.Attributes[Fields.msdyn_AdvancedPauseConfiguration] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Custom Time Calculation Flag</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CustomTimeCalculation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CustomTimeCalculation); }
			set { Entity.Attributes[Fields.msdyn_CustomTimeCalculation] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Custom Time Calculation Workflow associated with SLA Item.</para>
		/// <para>Lookup to workflow</para>
		/// <para>Custom Time Calculation Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomTimeCalculationWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomTimeCalculationWorkflowId); }
			set { Entity.Attributes[Fields.msdyn_CustomTimeCalculationWorkflowId] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>PauseConfigurationXml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PauseConfigurationXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PauseConfigurationXml); }
			set { Entity.Attributes[Fields.msdyn_PauseConfigurationXml] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for SLAKPI associated with SLA Item.</para>
		/// <para>Lookup to msdyn_slakpi</para>
		/// <para>SLA KPI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_slakpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_slakpiid); }
			set { Entity.Attributes[Fields.msdyn_slakpiid] = value; }
		}

		/// <summary>
		/// <para>Type a descriptive name of the service level agreement (SLA) item.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Enter the user or team who owns the SLA. This field is updated every time the item is assigned to a different user.</para>
		/// <para>Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the SLA Item record.</para>
		/// <para>Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
			set { Entity.Attributes[Fields.OwningUser] = value; }
		}

		/// <summary>
		/// <para>Select the service level agreement (SLA) key performance indicator (KPI) that this SLA Item is created for.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Related Case Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedField
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedField); }
			set { Entity.Attributes[Fields.RelatedField] = value; }
		}

		/// <summary>
		/// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,500</para>
		/// <para>Sequence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SequenceNumber); }
			set { Entity.Attributes[Fields.SequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for SLA associated with SLA Item.</para>
		/// <para>Lookup to sla</para>
		/// <para>SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the SLA Item.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SLA Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SLAItemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SLAItemId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SLAItemIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SLAItemIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Condition for SLA item</para>
		/// <para>Required - Memo - MaxLength: 1073741823</para>
		/// <para>SuccessConditionsXml</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SuccessConditionsXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.SuccessConditionsXml); }
			set { Entity.Attributes[Fields.SuccessConditionsXml] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the SLA Item record.</para>
		/// <para>ReadOnly - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}

		/// <summary>
		/// <para>Version number of the SLA Item.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Select how soon the success criteria must be met before warning actions are initiated. The actual duration is based on the business hours as specified in the associated SLA record.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Warn After</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? WarnAfter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.WarnAfter); }
			set { Entity.Attributes[Fields.WarnAfter] = value; }
		}

		/// <summary>
		/// <para>Workflow associated with the SLA Item.</para>
		/// <para>Lookup to workflow</para>
		/// <para>Workflow ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowId); }
			set { Entity.Attributes[Fields.WorkflowId] = value; }
		}
	}
}
