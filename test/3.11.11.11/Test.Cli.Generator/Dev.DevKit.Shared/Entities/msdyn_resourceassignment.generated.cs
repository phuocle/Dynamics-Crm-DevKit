//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets
{
	public enum msdyn_CommitType
	{
		/// <summary>
		/// Canceled = 192350004
		/// </summary>
		Canceled = 192350004,
		/// <summary>
		/// Hard Book = 192350001
		/// </summary>
		Hard_Book = 192350001,
		/// <summary>
		/// None = 192350000
		/// </summary>
		None = 192350000,
		/// <summary>
		/// Proposed = 192350003
		/// </summary>
		Proposed = 192350003,
		/// <summary>
		/// Soft Book = 192350002
		/// </summary>
		Soft_Book = 192350002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_resourceassignment : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_bookableresourceid = "msdyn_bookableresourceid";
			public const string msdyn_bookingstatusid = "msdyn_bookingstatusid";
			public const string msdyn_CommitType = "msdyn_committype";
			public const string msdyn_fromdate = "msdyn_fromdate";
			public const string msdyn_hours = "msdyn_hours";
			public const string msdyn_msprojectclientid = "msdyn_msprojectclientid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_plannedcost = "msdyn_plannedcost";
			public const string msdyn_plannedcost_Base = "msdyn_plannedcost_base";
			public const string msdyn_plannedcostcontour = "msdyn_plannedcostcontour";
			public const string msdyn_plannedsales = "msdyn_plannedsales";
			public const string msdyn_plannedsales_Base = "msdyn_plannedsales_base";
			public const string msdyn_plannedsalescontour = "msdyn_plannedsalescontour";
			public const string msdyn_plannedwork = "msdyn_plannedwork";
			public const string msdyn_projectid = "msdyn_projectid";
			public const string msdyn_projectteamid = "msdyn_projectteamid";
			public const string msdyn_resourceassignmentId = "msdyn_resourceassignmentid";
			public const string msdyn_taskid = "msdyn_taskid";
			public const string msdyn_todate = "msdyn_todate";
			public const string msdyn_userresourceid = "msdyn_userresourceid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_resourceassignment";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10547;

		[DebuggerNonUserCode()]
		public msdyn_resourceassignment()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourceassignment(Guid msdyn_resourceassignmentId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_resourceassignmentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourceassignment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourceassignment(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourceassignment(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_resourceassignment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the resource.</para>
		/// <para>Lookup to bookableresource</para>
		/// <para>Bookable Resource</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresourceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresourceid); }
			set { Entity.Attributes[Fields.msdyn_bookableresourceid] = value; }
		}

		/// <summary>
		/// <para>Booking Status</para>
		/// <para>Lookup to bookingstatus</para>
		/// <para>Booking Status (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookingstatusid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookingstatusid); }
			set { Entity.Attributes[Fields.msdyn_bookingstatusid] = value; }
		}

		/// <summary>
		/// <para>Select the commitment type of the assignment (hard or soft).</para>
		/// <para>Picklist</para>
		/// <para>Commit Type (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets.msdyn_CommitType? msdyn_CommitType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CommitType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets.msdyn_CommitType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CommitType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CommitType] = null;
			}
		}

		/// <summary>
		/// <para>Enter the date a resource is assigned from.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>From Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_fromdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_fromdate); }
			set { Entity.Attributes[Fields.msdyn_fromdate] = value; }
		}

		/// <summary>
		/// <para>Enter the number of hours for which a resource is assigned.</para>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Hours</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_hours
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_hours); }
			set { Entity.Attributes[Fields.msdyn_hours] = value; }
		}

		/// <summary>
		/// <para>id for resource assignment in ms project</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>MS Project Client Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_msprojectclientid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_msprojectclientid); }
			set { Entity.Attributes[Fields.msdyn_msprojectclientid] = value; }
		}

		/// <summary>
		/// <para>Type the name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Planned Cost Amount</para>
		/// <para>Money - MinValue: 0 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Cost</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedcost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedcost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_plannedcost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_plannedcost] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Planned Cost in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Cost (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Serialized planned cost contour</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Planned Cost Contour</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_plannedcostcontour
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_plannedcostcontour); }
			set { Entity.Attributes[Fields.msdyn_plannedcostcontour] = value; }
		}

		/// <summary>
		/// <para>Planned Sales Amount</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Sales</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedsales
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedsales);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_plannedsales] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_plannedsales] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Planned Sales in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Planned Sales (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_plannedsales_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_plannedsales_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Serialized planned sales contour</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Planned Sales Contour</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_plannedsalescontour
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_plannedsalescontour); }
			set { Entity.Attributes[Fields.msdyn_plannedsalescontour] = value; }
		}

		/// <summary>
		/// <para>Serialized planned work schedule for assigned resource</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Planned Work</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_plannedwork
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_plannedwork); }
			set { Entity.Attributes[Fields.msdyn_plannedwork] = value; }
		}

		/// <summary>
		/// <para>Select the project for which the resource is assigned.</para>
		/// <para>Lookup to msdyn_project</para>
		/// <para>Project</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectid); }
			set { Entity.Attributes[Fields.msdyn_projectid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Project Team Member associated with Resource Assignment.</para>
		/// <para>Lookup to msdyn_projectteam</para>
		/// <para>Project Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_projectteamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_projectteamid); }
			set { Entity.Attributes[Fields.msdyn_projectteamid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Resource Assignment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_resourceassignmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_resourceassignmentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select the task for which the resource is assigned to.</para>
		/// <para>Lookup to msdyn_projecttask</para>
		/// <para>Task</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_taskid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_taskid); }
			set { Entity.Attributes[Fields.msdyn_taskid] = value; }
		}

		/// <summary>
		/// <para>Enter the end date until which a resource is assigned.</para>
		/// <para>Required - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>To Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_todateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_todate); }
			set { Entity.Attributes[Fields.msdyn_todate] = value; }
		}

		/// <summary>
		/// <para>Select the user whose capacity is assigned.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Resource (Deprecated in v3.0)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_userresourceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_userresourceid); }
			set { Entity.Attributes[Fields.msdyn_userresourceid] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Resource Assignment</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Resource Assignment</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourceassignmentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
