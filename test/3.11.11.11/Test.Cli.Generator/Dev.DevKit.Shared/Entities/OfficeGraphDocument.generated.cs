//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.OfficeGraphDocumentOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OfficeGraphDocument : EntityBase
	{
		public struct Fields
		{
			public const string AuthorNames = "authornames";
			public const string CreatedBy = "createdby";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedTime = "createdtime";
			public const string DocumentId = "documentid";
			public const string DocumentLastModifiedBy = "documentlastmodifiedby";
			public const string DocumentLastModifiedOn = "documentlastmodifiedon";
			public const string DocumentPreviewMetadata = "documentpreviewmetadata";
			public const string ExchangeRate = "exchangerate";
			public const string FileExtension = "fileextension";
			public const string FileType = "filetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedTime = "modifiedtime";
			public const string OfficeGraphDocumentId = "officegraphdocumentid";
			public const string OrganizationId = "organizationid";
			public const string PreviewImageUrl = "previewimageurl";
			public const string QueryType = "querytype";
			public const string Rank = "rank";
			public const string ReadUrl = "readurl";
			public const string SecondaryFileExtension = "secondaryfileextension";
			public const string SiteTitle = "sitetitle";
			public const string SiteUrl = "siteurl";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string ViewCount = "viewcount";
			public const string WebLocationUrl = "weblocationurl";
		}

		public const string EntityLogicalName = "officegraphdocument";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9950;

		[DebuggerNonUserCode()]
		public OfficeGraphDocument()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Guid OfficeGraphDocumentId)
		{
			Entity = new Entity(EntityLogicalName, OfficeGraphDocumentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OfficeGraphDocument(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public OfficeGraphDocument(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Shows Author Names of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Author Names</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuthorNames
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuthorNames); }
		}

		/// <summary>
		/// <para>Shows Created By of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CreatedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedTime); }
		}

		/// <summary>
		/// <para>Document Id.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Document Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentId); }
			set { Entity.Attributes[Fields.DocumentId] = value; }
		}

		/// <summary>
		/// <para>Document Last Modified By</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Document Last Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentLastModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentLastModifiedBy); }
		}

		/// <summary>
		/// <para>Document Last Modified On</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Document Last Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DocumentLastModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DocumentLastModifiedOn); }
		}

		/// <summary>
		/// <para>document preview metadata</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>document preview metadata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentPreviewMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentPreviewMetadata); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the Office Graph Document with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ExchangeRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>File Extension of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>File Extension</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileExtension
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileExtension); }
		}

		/// <summary>
		/// <para>Shows the File Type of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>File Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
		}

		/// <summary>
		/// <para>Shows modified by of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedTime); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>OfficeGraphDocument</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OfficeGraphDocumentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OfficeGraphDocumentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Shows the Preview Image Url Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Preview Image Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PreviewImageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PreviewImageUrl); }
		}

		/// <summary>
		/// <para>Shows Query Type of child folders</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Query Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QueryType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QueryType); }
		}

		/// <summary>
		/// <para>The relevancy rank of the document retrieved</para>
		/// <para>ReadOnly - Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Relevancy Rank of the Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
		}

		/// <summary>
		/// <para>The online read url</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Read Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadUrl); }
		}

		/// <summary>
		/// <para>Secondary File Extension of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Secondary File Extension</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SecondaryFileExtension
		{
			get { return Entity.GetAttributeValue<string>(Fields.SecondaryFileExtension); }
		}

		/// <summary>
		/// <para>The title of the parent document site</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Parent Site Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SiteTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.SiteTitle); }
		}

		/// <summary>
		/// <para>The site url for the parent document site</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>Site Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.SiteUrl); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>The title of the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the Office Graph Document with respect to the base currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Shows View Count of child folders.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>View Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ViewCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ViewCount); }
		}

		/// <summary>
		/// <para>Shows the Web Location Url of Office Graph Document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Web Location Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebLocationUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebLocationUrl); }
		}
	}
}
