//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.FileAttachmentOptionSets
{
	public enum ObjectTypeCode
	{
		/// <summary>
		/// Account = 1
		/// </summary>
		Account = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class FileAttachment : EntityBase
	{
		public struct Fields
		{
			public const string Body = "body";
			public const string CreatedOn = "createdon";
			public const string FileAttachmentId = "fileattachmentid";
			public const string FileName = "filename";
			public const string FilePointer = "filepointer";
			public const string FileSizeInBytes = "filesizeinbytes";
			public const string IsCommitted = "iscommitted";
			public const string MimeType = "mimetype";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string Prefix = "prefix";
			public const string RegardingFieldName = "regardingfieldname";
			public const string StoragePointer = "storagepointer";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "fileattachment";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 55;

		[DebuggerNonUserCode()]
		public FileAttachment()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FileAttachment(Guid FileAttachmentId)
		{
			Entity = new Entity(EntityLogicalName, FileAttachmentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FileAttachment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FileAttachment(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FileAttachment(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public FileAttachment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Body</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Body</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Body
		{
			get { return Entity.GetAttributeValue<string>(Fields.Body); }
		}

		/// <summary>
		/// <para>Date and time when the attachment was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the file attachment.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>FileAttachmentId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid FileAttachmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.FileAttachmentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>File name of the attachment.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File pointer of the attachment.</para>
		/// <para>ReadOnly - String - MaxLength: 255</para>
		/// <para>File Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FilePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.FilePointer); }
		}

		/// <summary>
		/// <para>File size of the attachment in bytes.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? FileSizeInBytes
		{
			get { return Entity.GetAttributeValue<long?>(Fields.FileSizeInBytes); }
		}

		/// <summary>
		/// <para>IsCommitted</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>IsCommitted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCommitted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCommitted); }
		}

		/// <summary>
		/// <para>MIME type of the attachment.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>MIME Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the attachment is associated.</para>
		/// <para>Lookup to activityfileattachment, asyncoperation, canvasapp, cascadegrantrevokeaccessrecordstracker, exportsolutionupload, flowsession, imagedescriptor, knowledgearticle, mailbox, msdyn_aibfeedbackloop, msdyn_aibfile, msdyn_aiconfiguration, msdyn_bookableresourcebookingquicknote, msdyn_conversationinsight, msdyn_customerassetattachment, msdyn_kbattachment, msdyn_knowledgearticleimage, msdyn_ocrecording, msdyn_pminferredtask, msdyn_richtextfile, msdyn_soundfile, msdyn_transcript, msfp_fileresponse, pluginpackage, revokeinheritedaccessrecordstracker, ribbonclientmetadata, solution, stagesolutionupload, webresource, workflowbinary, workflowlog</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Type of entity with which the file attachment is associated.</para>
		/// <para>EntityName</para>
		/// <para>Object Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Prefix of the file pointer in blob storage.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Prefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Prefix); }
		}

		/// <summary>
		/// <para>Regarding attribute schema name of the attachment.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>Regarding Attribute Schema Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RegardingFieldName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RegardingFieldName); }
			set { Entity.Attributes[Fields.RegardingFieldName] = value; }
		}

		/// <summary>
		/// <para>Storage pointer.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Storage Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StoragePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.StoragePointer); }
		}

		/// <summary>
		/// <para>Version number of the file attachment.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
