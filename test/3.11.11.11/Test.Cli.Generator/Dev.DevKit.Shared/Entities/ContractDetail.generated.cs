//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ContractDetailOptionSets
{
	public enum ServiceContractUnitsCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Canceled = 2
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// Existing = 0
		/// </summary>
		Existing = 0,
		/// <summary>
		/// Expired = 3
		/// </summary>
		Expired = 3,
		/// <summary>
		/// Renewed = 1
		/// </summary>
		Renewed = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 3
		/// </summary>
		Canceled = 3,
		/// <summary>
		/// Expired = 4
		/// </summary>
		Expired = 4,
		/// <summary>
		/// New = 1
		/// </summary>
		New = 1,
		/// <summary>
		/// Renewed = 2
		/// </summary>
		Renewed = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ContractDetail : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActiveOn = "activeon";
			public const string AllotmentsOverage = "allotmentsoverage";
			public const string AllotmentsRemaining = "allotmentsremaining";
			public const string AllotmentsUsed = "allotmentsused";
			public const string ContactId = "contactid";
			public const string ContractDetailId = "contractdetailid";
			public const string ContractId = "contractid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string Discount = "discount";
			public const string Discount_Base = "discount_base";
			public const string DiscountPercentage = "discountpercentage";
			public const string EffectivityCalendar = "effectivitycalendar";
			public const string ExchangeRate = "exchangerate";
			public const string ExpiresOn = "expireson";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialQuantity = "initialquantity";
			public const string LineItemOrder = "lineitemorder";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Net = "net";
			public const string Net_Base = "net_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Price = "price";
			public const string Price_Base = "price_base";
			public const string ProductId = "productid";
			public const string ProductSerialNumber = "productserialnumber";
			public const string Rate = "rate";
			public const string Rate_Base = "rate_base";
			public const string ServiceAddress = "serviceaddress";
			public const string ServiceContractUnitsCode = "servicecontractunitscode";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TotalAllotments = "totalallotments";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UoMId = "uomid";
			public const string UoMScheduleId = "uomscheduleid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "contractdetail";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1011;

		[DebuggerNonUserCode()]
		public ContractDetail()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractDetail(Guid ContractDetailId)
		{
			Entity = new Entity(EntityLogicalName, ContractDetailId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractDetail(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractDetail(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractDetail(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ContractDetail(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the account with which the contract is associated.</para>
		/// <para>ReadOnly - Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}

		/// <summary>
		/// <para>Enter the date when the contract line becomes active.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActiveOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActiveOn); }
			set { Entity.Attributes[Fields.ActiveOn] = value; }
		}

		/// <summary>
		/// <para>Shows the number of minutes over the Total Allotments field that have been spent on resolved cases related to the contract line.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Allotments Overage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AllotmentsOverage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AllotmentsOverage); }
		}

		/// <summary>
		/// <para>Shows the number of cases or minutes remaining, based on the resolved cases logged to the contract line.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Allotments Remaining</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AllotmentsRemaining
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AllotmentsRemaining); }
		}

		/// <summary>
		/// <para>Shows the number of cases or minutes used in the resolved cases on the contract line.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Allotments Used</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AllotmentsUsed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AllotmentsUsed); }
		}

		/// <summary>
		/// <para>Unique identifier for the contact associated with the contract line.</para>
		/// <para>ReadOnly - Lookup to contact</para>
		/// <para>Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}

		/// <summary>
		/// <para>Unique identifier of the contract line.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Contract Line</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ContractDetailId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ContractDetailId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the contract associated with the contract line.</para>
		/// <para>Lookup to contract</para>
		/// <para>Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractId); }
			set { Entity.Attributes[Fields.ContractId] = value; }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
		/// <para>Lookup to account, contact</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}

		/// <summary>
		/// <para>Type the discount amount for the contract line to deduct any negotiated or other savings from the net amount due.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Discount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Discount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Discount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Discount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Discount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Discount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Discount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Discount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Discount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Type the discount rate that should be applied to the Total Price, for use in calculating the net amount due for the contract line.</para>
		/// <para>Decimal - MinValue: 0 - MaxValue: 100</para>
		/// <para>Discount (%)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DiscountPercentage); }
			set { Entity.Attributes[Fields.DiscountPercentage] = value; }
		}

		/// <summary>
		/// <para>Days of the week and times for which the contract line item is effective.</para>
		/// <para>String - MaxLength: 168</para>
		/// <para>Support Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EffectivityCalendar
		{
			get { return Entity.GetAttributeValue<string>(Fields.EffectivityCalendar); }
			set { Entity.Attributes[Fields.EffectivityCalendar] = value; }
		}

		/// <summary>
		/// <para>Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Enter the date when the contract line expires. The date is automatically filled with the contract date, but you can change it if required.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>End Date</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpiresOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpiresOn); }
			set { Entity.Attributes[Fields.ExpiresOn] = value; }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Type the number of units of the specified product or service that are eligible for support on the contract line.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Quantity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InitialQuantity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InitialQuantity); }
			set { Entity.Attributes[Fields.InitialQuantity] = value; }
		}

		/// <summary>
		/// <para>Type the line item number for the contract line to easily identify the contract line and make sure it&apos;s listed in the correct order in the parent contract.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Line Item Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LineItemOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LineItemOrder); }
			set { Entity.Attributes[Fields.LineItemOrder] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the total charge to the customer for the contract line, calculated as the Total Price minus any discounts.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Net</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Net
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Net);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Net in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Net (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Net_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Net_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Required - Lookup to </para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Required - Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Type the total service charge for the contract line before any discounts are credited.</para>
		/// <para>Money - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Price] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Total Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Total Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the product that is eligible for services on the contract line.</para>
		/// <para>Lookup to product</para>
		/// <para>Product</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProductId); }
			set { Entity.Attributes[Fields.ProductId] = value; }
		}

		/// <summary>
		/// <para>Type the serial number for the product that is eligible for services on the contract line.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Serial Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductSerialNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductSerialNumber); }
			set { Entity.Attributes[Fields.ProductSerialNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the cost per case or minute, calculated by dividing the Total Price value by the total number of cases or minutes allocated to the contract line.</para>
		/// <para>ReadOnly - Money - MinValue: 0 - MaxValue: 100,000,000,000,000</para>
		/// <para>Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rate
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Rate);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Value of the Rate in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Rate (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rate_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Rate_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Choose the address for the customer account or contact where the services are provided.</para>
		/// <para>Lookup to customeraddress</para>
		/// <para>Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceAddress
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceAddress); }
			set { Entity.Attributes[Fields.ServiceAddress] = value; }
		}

		/// <summary>
		/// <para>Select the unit type allotted in the contract line, such as cases or minutes, to determine the level of support.</para>
		/// <para>Picklist</para>
		/// <para>Service Contract Units</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractDetailOptionSets.ServiceContractUnitsCode? ServiceContractUnitsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceContractUnitsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractDetailOptionSets.ServiceContractUnitsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceContractUnitsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceContractUnitsCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows whether the contract line is existing, renewed, canceled, or expired. You can&apos;t edit a contract line after it is saved, regardless of the status.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractDetailOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractDetailOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Select the contract line&apos;s status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractDetailOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractDetailOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type a title or name that describes the contract line.</para>
		/// <para>Required - String - MaxLength: 500</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Type the total number of minutes or cases allowed for the contract line.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Total Allotments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TotalAllotments
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TotalAllotments); }
			set { Entity.Attributes[Fields.TotalAllotments] = value; }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>ReadOnly - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}

		/// <summary>
		/// <para>Choose the unit of measurement for the base unit quantity for this purchase, such as each or dozen.</para>
		/// <para>Lookup to uom</para>
		/// <para>Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UoMId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UoMId); }
			set { Entity.Attributes[Fields.UoMId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the unit group associated with the contract line.</para>
		/// <para>Lookup to uomschedule</para>
		/// <para>Unit Schedule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UoMScheduleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UoMScheduleId); }
			set { Entity.Attributes[Fields.UoMScheduleId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
