//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.WorkflowLogOptionSets
{
	public enum ChildWorkflowInstanceObjectTypeCode
	{
		/// <summary>
		/// Flow Session = 4720
		/// </summary>
		Flow_Session = 4720,
		/// <summary>
		/// System Job = 4700
		/// </summary>
		System_Job = 4700,
		/// <summary>
		/// Workflow Session = 4710
		/// </summary>
		Workflow_Session = 4710
	}

	public enum ObjectTypeCode
	{
		/// <summary>
		/// Flow Session = 4720
		/// </summary>
		Flow_Session = 4720,
		/// <summary>
		/// System Job = 4700
		/// </summary>
		System_Job = 4700,
		/// <summary>
		/// Workflow Session = 4710
		/// </summary>
		Workflow_Session = 4710
	}

	public enum Status
	{
		/// <summary>
		/// Canceled = 4
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// Failed = 3
		/// </summary>
		Failed = 3,
		/// <summary>
		/// In Progress = 1
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// Succeeded = 2
		/// </summary>
		Succeeded = 2,
		/// <summary>
		/// Waiting = 5
		/// </summary>
		Waiting = 5
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class WorkflowLog : EntityBase
	{
		public struct Fields
		{
			public const string ActivityName = "activityname";
			public const string AsyncOperationId = "asyncoperationid";
			public const string ChildWorkflowInstanceId = "childworkflowinstanceid";
			public const string CompletedOn = "completedon";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string ErrorCode = "errorcode";
			public const string ErrorText = "errortext";
			public const string Inputs = "inputs";
			public const string InteractionActivityResult = "interactionactivityresult";
			public const string IterationCount = "iterationcount";
			public const string Message = "message";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Outputs = "outputs";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RepetitionCount = "repetitioncount";
			public const string RepetitionId = "repetitionid";
			public const string StageName = "stagename";
			public const string StartedOn = "startedon";
			public const string Status = "status";
			public const string StepName = "stepname";
			public const string WorkflowLogId = "workflowlogid";
		}

		public const string EntityLogicalName = "workflowlog";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4706;

		[DebuggerNonUserCode()]
		public WorkflowLog()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowLog(Guid WorkflowLogId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowLogId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowLog(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowLog(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public WorkflowLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Name of the activity which the process step is currently processing.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Activity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityName); }
			set { Entity.Attributes[Fields.ActivityName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the parent record.</para>
		/// <para>Lookup to asyncoperation, processsession</para>
		/// <para>Parent record</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AsyncOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AsyncOperationId); }
			set { Entity.Attributes[Fields.AsyncOperationId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the system job.</para>
		/// <para>Lookup to asyncoperation, processsession</para>
		/// <para>Child Workflow System Job</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ChildWorkflowInstanceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ChildWorkflowInstanceId); }
			set { Entity.Attributes[Fields.ChildWorkflowInstanceId] = value; }
		}

		/// <summary>
		/// <para>Date and time when the operation was completed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
			set { Entity.Attributes[Fields.CompletedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the process log entry.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the process log entry was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the process log.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Description of the process step.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Step Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Duration between completed on and started on, used by business process flow.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
		}

		/// <summary>
		/// <para>Error code related to process.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Error Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}

		/// <summary>
		/// <para>The string representation of the error.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>ErrorText</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorText
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorText); }
			set { Entity.Attributes[Fields.ErrorText] = value; }
		}

		/// <summary>
		/// <para>Inputs required by the workflow step.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>Inputs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Inputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Inputs); }
		}

		/// <summary>
		/// <para>String specifying the result of an interaction activity.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Interaction Activity Result</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InteractionActivityResult
		{
			get { return Entity.GetAttributeValue<string>(Fields.InteractionActivityResult); }
			set { Entity.Attributes[Fields.InteractionActivityResult] = value; }
		}

		/// <summary>
		/// <para>The iteration count for the action when in a do until loop.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>IterationCount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IterationCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IterationCount); }
			set { Entity.Attributes[Fields.IterationCount] = value; }
		}

		/// <summary>
		/// <para>Message related to process.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Message
		{
			get { return Entity.GetAttributeValue<string>(Fields.Message); }
			set { Entity.Attributes[Fields.Message] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the process log entry.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the process log entry was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the process log.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Outputs generated by the workflow step.</para>
		/// <para>ReadOnly - Virtual</para>
		/// <para>Outputs</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Outputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Outputs); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the process log.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the process.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the process log.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the process.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated record.</para>
		/// <para>Lookup to </para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>The count of repetitions of the action when in a loop.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>RepetitionCount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RepetitionCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RepetitionCount); }
			set { Entity.Attributes[Fields.RepetitionCount] = value; }
		}

		/// <summary>
		/// <para>The string representation of the repetition and iteration / level of the action.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>RepetitionId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RepetitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.RepetitionId); }
			set { Entity.Attributes[Fields.RepetitionId] = value; }
		}

		/// <summary>
		/// <para>Name of the process stage.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Process Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StageName); }
			set { Entity.Attributes[Fields.StageName] = value; }
		}

		/// <summary>
		/// <para>Date and time when the operation was started.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
			set { Entity.Attributes[Fields.StartedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the process step for which process log record has been created: In Progress, Successfully Completed, or Failed.</para>
		/// <para>Picklist</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowLogOptionSets.Status? Status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowLogOptionSets.Status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Status] = null;
			}
		}

		/// <summary>
		/// <para>Name of the process step.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Step Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepName); }
			set { Entity.Attributes[Fields.StepName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the process log entry.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Process Log</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowLogId] = value;
				Entity.Id = value;
			}
		}
	}
}
