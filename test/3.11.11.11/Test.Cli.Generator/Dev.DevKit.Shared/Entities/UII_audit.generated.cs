//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.UII_auditOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UII_audit : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Uii_ActionData = "uii_actiondata";
			public const string UII_ActionName = "uii_actionname";
			public const string UII_ActivityID = "uii_activityid";
			public const string UII_AgentState = "uii_agentstate";
			public const string uii_applicationid = "uii_applicationid";
			public const string UII_auditId = "uii_auditid";
			public const string UII_ClientTimeZone = "uii_clienttimezone";
			public const string UII_ContextID = "uii_contextid";
			public const string UII_CurrentTime = "uii_currenttime";
			public const string UII_CustomerID = "uii_customerid";
			public const string UII_MachineName = "uii_machinename";
			public const string UII_name = "uii_name";
			public const string UII_TargetApplication = "uii_targetapplication";
			public const string uii_workflowactivestepid = "uii_workflowactivestepid";
			public const string uii_workflowid = "uii_workflowid";
			public const string UII_WorkflowStatus = "uii_workflowstatus";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "uii_audit";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10922;

		[DebuggerNonUserCode()]
		public UII_audit()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_audit(Guid UII_auditId)
		{
			Entity = new Entity(EntityLogicalName, UII_auditId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_audit(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_audit(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_audit(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public UII_audit(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the UII Audit</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_auditOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_auditOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the UII Audit</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.UII_auditOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.UII_auditOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Action Data</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Action Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Uii_ActionData
		{
			get { return Entity.GetAttributeValue<string>(Fields.Uii_ActionData); }
			set { Entity.Attributes[Fields.Uii_ActionData] = value; }
		}

		/// <summary>
		/// <para>Name of the Action.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Action Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ActionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ActionName); }
			set { Entity.Attributes[Fields.UII_ActionName] = value; }
		}

		/// <summary>
		/// <para>Audit log assigned activity Id.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Activity ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_ActivityID
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_ActivityID); }
			set { Entity.Attributes[Fields.UII_ActivityID] = value; }
		}

		/// <summary>
		/// <para>Presence information of an Agent.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Agent State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_AgentState
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_AgentState); }
			set { Entity.Attributes[Fields.UII_AgentState] = value; }
		}

		/// <summary>
		/// <para>Application Id.</para>
		/// <para>Lookup to uii_hostedapplication</para>
		/// <para>Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference uii_applicationid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.uii_applicationid); }
			set { Entity.Attributes[Fields.uii_applicationid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>UII Audit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UII_auditId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UII_auditId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Client time zone detail.</para>
		/// <para>Integer - MinValue: -2,147,483,647 - MaxValue: 2,147,483,647</para>
		/// <para>Client Time Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UII_ClientTimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UII_ClientTimeZone); }
			set { Entity.Attributes[Fields.UII_ClientTimeZone] = value; }
		}

		/// <summary>
		/// <para>Context Guid.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Context ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_ContextID
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_ContextID); }
			set { Entity.Attributes[Fields.UII_ContextID] = value; }
		}

		/// <summary>
		/// <para>Current time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Current Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? UII_CurrentTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.UII_CurrentTime); }
			set { Entity.Attributes[Fields.UII_CurrentTime] = value; }
		}

		/// <summary>
		/// <para>Account or Contact Guid.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Customer ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_CustomerID
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_CustomerID); }
			set { Entity.Attributes[Fields.UII_CustomerID] = value; }
		}

		/// <summary>
		/// <para>Agent&apos;s Machine name.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Machine Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_MachineName); }
			set { Entity.Attributes[Fields.UII_MachineName] = value; }
		}

		/// <summary>
		/// <para>This attribute is a general Name which is not used for Log Data.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_name); }
			set { Entity.Attributes[Fields.UII_name] = value; }
		}

		/// <summary>
		/// <para>Target Hosted Application.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Target Application</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_TargetApplication
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_TargetApplication); }
			set { Entity.Attributes[Fields.UII_TargetApplication] = value; }
		}

		/// <summary>
		/// <para>Workflow Active Step Id.</para>
		/// <para>Lookup to uii_workflowstep</para>
		/// <para>Workflow Active Step</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference uii_workflowactivestepid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.uii_workflowactivestepid); }
			set { Entity.Attributes[Fields.uii_workflowactivestepid] = value; }
		}

		/// <summary>
		/// <para>Workflow Id.</para>
		/// <para>Lookup to uii_workflow</para>
		/// <para>Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference uii_workflowid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.uii_workflowid); }
			set { Entity.Attributes[Fields.uii_workflowid] = value; }
		}

		/// <summary>
		/// <para>Status of the Workflow</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Workflow Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UII_WorkflowStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.UII_WorkflowStatus); }
			set { Entity.Attributes[Fields.UII_WorkflowStatus] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
