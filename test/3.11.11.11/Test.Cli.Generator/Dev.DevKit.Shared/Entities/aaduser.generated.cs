//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.aaduserOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class aaduser : EntityBase
	{
		public struct Fields
		{
			public const string aaduserId = "aaduserid";
			public const string AccountEnabled = "accountenabled";
			public const string BusinessPhones = "businessphones";
			public const string City = "city";
			public const string CompanyName = "companyname";
			public const string CreatedDateTime = "createddatetime";
			public const string DisplayName = "displayname";
			public const string GivenName = "givenname";
			public const string id = "id";
			public const string ImAddresses = "imaddresses";
			public const string JobTitle = "jobtitle";
			public const string Mail = "mail";
			public const string MobilePhone = "mobilephone";
			public const string OfficeLocation = "officelocation";
			public const string PostalCode = "postalcode";
			public const string PreferredLanguage = "preferredlanguage";
			public const string StreetAddress = "streetaddress";
			public const string surname = "surname";
			public const string UserPrincipalName = "userprincipalname";
			public const string UserType = "usertype";
		}

		public const string EntityLogicalName = "aaduser";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10017;

		[DebuggerNonUserCode()]
		public aaduser()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public aaduser(Guid aaduserId)
		{
			Entity = new Entity(EntityLogicalName, aaduserId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public aaduser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public aaduser(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public aaduser(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public aaduser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of an aad user.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>AAD user id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid aaduserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.aaduserId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Indicates if the Account of an AAD User is enabled.</para>
		/// <para>Boolean</para>
		/// <para>AAD User Account Enabled</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AccountEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AccountEnabled); }
			set { Entity.Attributes[Fields.AccountEnabled] = value; }
		}

		/// <summary>
		/// <para>Business phone number for the user</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Business Phones</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessPhones
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessPhones); }
			set { Entity.Attributes[Fields.BusinessPhones] = value; }
		}

		/// <summary>
		/// <para>City.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string City
		{
			get { return Entity.GetAttributeValue<string>(Fields.City); }
			set { Entity.Attributes[Fields.City] = value; }
		}

		/// <summary>
		/// <para>Company Name.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Company Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CompanyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CompanyName); }
			set { Entity.Attributes[Fields.CompanyName] = value; }
		}

		/// <summary>
		/// <para>Date and time when the AAD user was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created Date Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedDateTime); }
		}

		/// <summary>
		/// <para>The name displayed in the address book for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Display Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisplayName); }
			set { Entity.Attributes[Fields.DisplayName] = value; }
		}

		/// <summary>
		/// <para>The given name (first name) of the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Given Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GivenName
		{
			get { return Entity.GetAttributeValue<string>(Fields.GivenName); }
			set { Entity.Attributes[Fields.GivenName] = value; }
		}

		/// <summary>
		/// <para>A unique identifer for AAD User</para>
		/// <para>Uniqueidentifier</para>
		/// <para>A unique identifer for AAD User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? id1
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.id); }
			set { Entity.Attributes[Fields.id] = value; }
		}

		/// <summary>
		/// <para>ImAddresses for the user</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>ImAddresses</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImAddresses
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImAddresses); }
			set { Entity.Attributes[Fields.ImAddresses] = value; }
		}

		/// <summary>
		/// <para>The user&apos;s job title.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Job Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}

		/// <summary>
		/// <para>The SMTP address for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Mail</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Mail
		{
			get { return Entity.GetAttributeValue<string>(Fields.Mail); }
			set { Entity.Attributes[Fields.Mail] = value; }
		}

		/// <summary>
		/// <para>The primary cellular telephone number for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Mobile Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}

		/// <summary>
		/// <para>The office location in the user&apos;s place of business.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Office Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfficeLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfficeLocation); }
			set { Entity.Attributes[Fields.OfficeLocation] = value; }
		}

		/// <summary>
		/// <para>Postal Code.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostalCode); }
			set { Entity.Attributes[Fields.PostalCode] = value; }
		}

		/// <summary>
		/// <para>The preferred language for the user. Should follow ISO 639-1 Code; for example &apos;en-US&apos;.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Preferred Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PreferredLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.PreferredLanguage); }
			set { Entity.Attributes[Fields.PreferredLanguage] = value; }
		}

		/// <summary>
		/// <para>Street Address.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Street Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StreetAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.StreetAddress); }
			set { Entity.Attributes[Fields.StreetAddress] = value; }
		}

		/// <summary>
		/// <para>The user&apos;s surname (family name or last name).</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Surname</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string surname
		{
			get { return Entity.GetAttributeValue<string>(Fields.surname); }
			set { Entity.Attributes[Fields.surname] = value; }
		}

		/// <summary>
		/// <para>The user principal name (UPN) of the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>User Principal Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserPrincipalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserPrincipalName); }
			set { Entity.Attributes[Fields.UserPrincipalName] = value; }
		}

		/// <summary>
		/// <para>User Type.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>User Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserType
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserType); }
			set { Entity.Attributes[Fields.UserType] = value; }
		}
	}
}
