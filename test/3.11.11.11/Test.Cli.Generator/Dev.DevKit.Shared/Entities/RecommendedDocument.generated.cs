//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.RecommendedDocumentOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RecommendedDocument : EntityBase
	{
		public struct Fields
		{
			public const string AbsoluteUrl = "absoluteurl";
			public const string AssociatedRecordName = "associatedrecordname";
			public const string Author = "author";
			public const string ContentType = "contenttype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EditUrl = "editurl";
			public const string ExchangeRate = "exchangerate";
			public const string ExternalDocumentId = "externaldocumentid";
			public const string ExternalModifiedBy = "externalmodifiedby";
			public const string FileSize = "filesize";
			public const string FileType = "filetype";
			public const string FullName = "fullname";
			public const string IconClassName = "iconclassname";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string ReadUrl = "readurl";
			public const string RecommendedDocumentId = "recommendeddocumentid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string Source = "source";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "recommendeddocument";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1189;

		[DebuggerNonUserCode()]
		public RecommendedDocument()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RecommendedDocument(Guid RecommendedDocumentId)
		{
			Entity = new Entity(EntityLogicalName, RecommendedDocumentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RecommendedDocument(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RecommendedDocument(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RecommendedDocument(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public RecommendedDocument(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Type the URL where the recommended document is located.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Absolute URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AbsoluteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.AbsoluteUrl); }
		}

		/// <summary>
		/// <para>Shows the associated record name of the recommended document.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Associated Record Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AssociatedRecordName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AssociatedRecordName); }
			set { Entity.Attributes[Fields.AssociatedRecordName] = value; }
		}

		/// <summary>
		/// <para>Shows the name of the author of the recommended document.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Author</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Author
		{
			get { return Entity.GetAttributeValue<string>(Fields.Author); }
			set { Entity.Attributes[Fields.Author] = value; }
		}

		/// <summary>
		/// <para>Select the document content type.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Content Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentType
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentType); }
		}

		/// <summary>
		/// <para>Shows the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the Edit URL of the recommended document.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Edit Web App URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EditUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.EditUrl); }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the recommended document with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>ExchangeRate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the external document.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>External Document ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalDocumentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalDocumentId); }
			set { Entity.Attributes[Fields.ExternalDocumentId] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the document record.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Modified by</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalModifiedBy); }
			set { Entity.Attributes[Fields.ExternalModifiedBy] = value; }
		}

		/// <summary>
		/// <para>Shows the file size.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>File Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>Shows the file type.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>File Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
		}

		/// <summary>
		/// <para>Shows the full name of the recommended document.</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}

		/// <summary>
		/// <para>Stores the Icon Class name of the recommended document.</para>
		/// <para>ReadOnly - String - MaxLength: 160</para>
		/// <para>Icon Class Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconClassName
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconClassName); }
		}

		/// <summary>
		/// <para>Shows the location of the recommended document.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Location
		{
			get { return Entity.GetAttributeValue<string>(Fields.Location); }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who last updated the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Shows the organization.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Shows the Read URL of the recommended document.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Read Web App URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadUrl); }
		}

		/// <summary>
		/// <para>Shows the recommended document record.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Recommended Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid RecommendedDocumentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.RecommendedDocumentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Choose the parent record that the recommended document record is associated with.</para>
		/// <para>Lookup to </para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Shows the source storage of the recommended document.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Source
		{
			get { return Entity.GetAttributeValue<string>(Fields.Source); }
			set { Entity.Attributes[Fields.Source] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Type a title for the entity.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Shows the exchange rate for the currency associated with the recommended document with respect to the base currency.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Shows the time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Shows the recommended document version.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Recommended Document Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Version
		{
			get { return Entity.GetAttributeValue<string>(Fields.Version); }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
