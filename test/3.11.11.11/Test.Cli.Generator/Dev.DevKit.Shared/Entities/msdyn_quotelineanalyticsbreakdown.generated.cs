//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets
{
	public enum msdyn_BillingType
	{
		/// <summary>
		/// Chargeable = 192350001
		/// </summary>
		Chargeable = 192350001,
		/// <summary>
		/// Complimentary = 192350002
		/// </summary>
		Complimentary = 192350002,
		/// <summary>
		/// Non Chargeable = 192350000
		/// </summary>
		Non_Chargeable = 192350000,
		/// <summary>
		/// Not Available = 192350003
		/// </summary>
		Not_Available = 192350003
	}

	public enum msdyn_TransactionClassification
	{
		/// <summary>
		/// Additional = 690970001
		/// </summary>
		Additional = 690970001,
		/// <summary>
		/// Commission = 690970000
		/// </summary>
		Commission = 690970000,
		/// <summary>
		/// Expense = 192350001
		/// </summary>
		Expense = 192350001,
		/// <summary>
		/// Fee = 192350004
		/// </summary>
		Fee = 192350004,
		/// <summary>
		/// Material = 192350002
		/// </summary>
		Material = 192350002,
		/// <summary>
		/// Milestone = 192350003
		/// </summary>
		Milestone = 192350003,
		/// <summary>
		/// Tax = 690970002
		/// </summary>
		Tax = 690970002,
		/// <summary>
		/// Time = 192350000
		/// </summary>
		Time = 192350000
	}

	public enum msdyn_TransactionTypeCode
	{
		/// <summary>
		/// Billed Sales = 192350006
		/// </summary>
		Billed_Sales = 192350006,
		/// <summary>
		/// Cost = 192350000
		/// </summary>
		Cost = 192350000,
		/// <summary>
		/// Inter-Organizational Sales = 192350008
		/// </summary>
		Inter_Organizational_Sales = 192350008,
		/// <summary>
		/// Project Contract = 192350004
		/// </summary>
		Project_Contract = 192350004,
		/// <summary>
		/// Resourcing Unit Cost = 192350007
		/// </summary>
		Resourcing_Unit_Cost = 192350007,
		/// <summary>
		/// Unbilled Sales = 192350005
		/// </summary>
		Unbilled_Sales = 192350005
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_quotelineanalyticsbreakdown : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Amount = "msdyn_amount";
			public const string msdyn_amount_Base = "msdyn_amount_base";
			public const string msdyn_BillingType = "msdyn_billingtype";
			public const string msdyn_EndDateTime = "msdyn_enddatetime";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Price = "msdyn_price";
			public const string msdyn_price_Base = "msdyn_price_base";
			public const string msdyn_Quote = "msdyn_quote";
			public const string msdyn_quotelineanalyticsbreakdownId = "msdyn_quotelineanalyticsbreakdownid";
			public const string msdyn_QuoteLineDetail = "msdyn_quotelinedetail";
			public const string msdyn_QuoteLineScheduleOfValue = "msdyn_quotelinescheduleofvalue";
			public const string msdyn_ResourceCategory = "msdyn_resourcecategory";
			public const string msdyn_StartDateTime = "msdyn_startdatetime";
			public const string msdyn_TransactionCategory = "msdyn_transactioncategory";
			public const string msdyn_TransactionClassification = "msdyn_transactionclassification";
			public const string msdyn_TransactionTypeCode = "msdyn_transactiontypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_quotelineanalyticsbreakdown";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10539;

		[DebuggerNonUserCode()]
		public msdyn_quotelineanalyticsbreakdown()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelineanalyticsbreakdown(Guid msdyn_quotelineanalyticsbreakdownId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_quotelineanalyticsbreakdownId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelineanalyticsbreakdown(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelineanalyticsbreakdown(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelineanalyticsbreakdown(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_quotelineanalyticsbreakdown(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Enter the amount on the quote line estimate.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Amount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Amount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Amount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Amount] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Amount in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Amount (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select whether the quote line estimate will be charged to the customer. Valid values are Chargeable, Non-chargeable and Complimentary. Only chargeable transactions will affect the invoice totals.</para>
		/// <para>Required - Picklist</para>
		/// <para>Billing Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.msdyn_BillingType? msdyn_BillingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.msdyn_BillingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingType] = null;
			}
		}

		/// <summary>
		/// <para>Enter the estimated end date of the quote line estimate.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>End Date Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_EndDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_EndDateTime); }
			set { Entity.Attributes[Fields.msdyn_EndDateTime] = value; }
		}

		/// <summary>
		/// <para>Type a description of the entity breakdown.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Enter the unit price on the quote line estimate.</para>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Price] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Price in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Price (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Select the quote that this quote line estimate belongs to.</para>
		/// <para>Required - Lookup to quote</para>
		/// <para>Quote</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Quote
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Quote); }
			set { Entity.Attributes[Fields.msdyn_Quote] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Quote Line Analytics Breakdown</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_quotelineanalyticsbreakdownId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_quotelineanalyticsbreakdownId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select the quote line estimate.</para>
		/// <para>Lookup to msdyn_quotelinetransaction</para>
		/// <para>Quote Line Detail</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_QuoteLineDetail
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_QuoteLineDetail); }
			set { Entity.Attributes[Fields.msdyn_QuoteLineDetail] = value; }
		}

		/// <summary>
		/// <para>Shows the billing milestone for the quote line.</para>
		/// <para>Lookup to msdyn_quotelinescheduleofvalue</para>
		/// <para>QuoteLineScheduleOfValue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_QuoteLineScheduleOfValue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_QuoteLineScheduleOfValue); }
			set { Entity.Attributes[Fields.msdyn_QuoteLineScheduleOfValue] = value; }
		}

		/// <summary>
		/// <para>Select the role that is estimated on the quote line.</para>
		/// <para>Lookup to bookableresourcecategory</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceCategory); }
			set { Entity.Attributes[Fields.msdyn_ResourceCategory] = value; }
		}

		/// <summary>
		/// <para>Enter the estimated start date of the quote line estimate.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Start Date Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_StartDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_StartDateTime); }
			set { Entity.Attributes[Fields.msdyn_StartDateTime] = value; }
		}

		/// <summary>
		/// <para>Select the category identified on the quote line estimate.</para>
		/// <para>Lookup to msdyn_transactioncategory</para>
		/// <para>Transaction Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TransactionCategory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TransactionCategory); }
			set { Entity.Attributes[Fields.msdyn_TransactionCategory] = value; }
		}

		/// <summary>
		/// <para>Transaction classification of  Project quote analytics</para>
		/// <para>Required - Picklist</para>
		/// <para>Transaction Class</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.msdyn_TransactionClassification? msdyn_TransactionClassification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionClassification);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.msdyn_TransactionClassification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionClassification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionClassification] = null;
			}
		}

		/// <summary>
		/// <para>Transaction type of the Project quote analytics</para>
		/// <para>Required - Picklist</para>
		/// <para>Transaction Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.msdyn_TransactionTypeCode? msdyn_TransactionTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.msdyn_TransactionTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Quote Line Analytics Breakdown</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Quote Line Analytics Breakdown</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotelineanalyticsbreakdownOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
