//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets
{
	public enum msdyn_AnalysisComponentType
	{
		/// <summary>
		/// Component Health = 192350001
		/// </summary>
		Component_Health = 192350001,
		/// <summary>
		/// Object Health = 192350002
		/// </summary>
		Object_Health = 192350002,
		/// <summary>
		/// Organization Health = 192350000
		/// </summary>
		Organization_Health = 192350000
	}

	public enum msdyn_ComponentType
	{
		/// <summary>
		/// Configuration = 192350005
		/// </summary>
		Configuration = 192350005,
		/// <summary>
		/// Entity = 192350001
		/// </summary>
		Entity = 192350001,
		/// <summary>
		/// Form = 192350003
		/// </summary>
		Form = 192350003,
		/// <summary>
		/// Plugin = 192350004
		/// </summary>
		Plugin = 192350004,
		/// <summary>
		/// Solution = 192350000
		/// </summary>
		Solution = 192350000,
		/// <summary>
		/// View = 192350002
		/// </summary>
		View = 192350002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Canceled = 2
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// Complete = 192350001
		/// </summary>
		Complete = 192350001,
		/// <summary>
		/// Completed With Exceptions = 192350003
		/// </summary>
		Completed_With_Exceptions = 192350003,
		/// <summary>
		/// Exception = 192350002
		/// </summary>
		Exception = 192350002,
		/// <summary>
		/// Pending = 1
		/// </summary>
		Pending = 1,
		/// <summary>
		/// Running = 192350000
		/// </summary>
		Running = 192350000
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_analysiscomponent : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_analysiscomponentId = "msdyn_analysiscomponentid";
			public const string msdyn_AnalysisComponentType = "msdyn_analysiscomponenttype";
			public const string msdyn_AnalysisJobId = "msdyn_analysisjobid";
			public const string msdyn_ComponentId = "msdyn_componentid";
			public const string msdyn_ComponentName = "msdyn_componentname";
			public const string msdyn_ComponentType = "msdyn_componenttype";
			public const string msdyn_ComponentVersion = "msdyn_componentversion";
			public const string msdyn_ErrorCount = "msdyn_errorcount";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_RetryCount = "msdyn_retrycount";
			public const string msdyn_RuleFailCount = "msdyn_rulefailcount";
			public const string msdyn_RulePassCount = "msdyn_rulepasscount";
			public const string msdyn_RulePassRate = "msdyn_rulepassrate";
			public const string msdyn_sevcriticalcount = "msdyn_sevcriticalcount";
			public const string msdyn_sevhighcount = "msdyn_sevhighcount";
			public const string msdyn_sevlowcount = "msdyn_sevlowcount";
			public const string msdyn_sevmediumcount = "msdyn_sevmediumcount";
			public const string msdyn_SolutionHealthRuleSetId = "msdyn_solutionhealthrulesetid";
			public const string msdyn_SuggestionCount = "msdyn_suggestioncount";
			public const string msdyn_WarningCount = "msdyn_warningcount";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_analysiscomponent";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10129;

		[DebuggerNonUserCode()]
		public msdyn_analysiscomponent()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_analysiscomponent(Guid msdyn_analysiscomponentId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_analysiscomponentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_analysiscomponent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_analysiscomponent(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_analysiscomponent(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_analysiscomponent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Analysis Component</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_analysiscomponentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_analysiscomponentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Analysis Component Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.msdyn_AnalysisComponentType? msdyn_AnalysisComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AnalysisComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.msdyn_AnalysisComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AnalysisComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AnalysisComponentType] = null;
			}
		}

		/// <summary>
		/// <para>The parent Analysis Job that analyzed this particular Analysis Component.</para>
		/// <para>Lookup to msdyn_analysisjob</para>
		/// <para>Analysis Job</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AnalysisJobId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AnalysisJobId); }
			set { Entity.Attributes[Fields.msdyn_AnalysisJobId] = value; }
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 50</para>
		/// <para>Component Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ComponentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ComponentId); }
			set { Entity.Attributes[Fields.msdyn_ComponentId] = value; }
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Component Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ComponentName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ComponentName); }
			set { Entity.Attributes[Fields.msdyn_ComponentName] = value; }
		}

		/// <summary>
		/// <para>Required - Picklist</para>
		/// <para>Component Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.msdyn_ComponentType? msdyn_ComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.msdyn_ComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ComponentType] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Component Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ComponentVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ComponentVersion); }
			set { Entity.Attributes[Fields.msdyn_ComponentVersion] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Error Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ErrorCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ErrorCount); }
			set { Entity.Attributes[Fields.msdyn_ErrorCount] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Retry Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RetryCount); }
			set { Entity.Attributes[Fields.msdyn_RetryCount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Rule Fail Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RuleFailCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RuleFailCount); }
			set { Entity.Attributes[Fields.msdyn_RuleFailCount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Rule Pass Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RulePassCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RulePassCount); }
			set { Entity.Attributes[Fields.msdyn_RulePassCount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Rule Pass Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RulePassRate
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RulePassRate); }
			set { Entity.Attributes[Fields.msdyn_RulePassRate] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Critical Severity Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_sevcriticalcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_sevcriticalcount); }
			set { Entity.Attributes[Fields.msdyn_sevcriticalcount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>High Severity Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_sevhighcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_sevhighcount); }
			set { Entity.Attributes[Fields.msdyn_sevhighcount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Low Severity Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_sevlowcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_sevlowcount); }
			set { Entity.Attributes[Fields.msdyn_sevlowcount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Medium Severity Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_sevmediumcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_sevmediumcount); }
			set { Entity.Attributes[Fields.msdyn_sevmediumcount] = value; }
		}

		/// <summary>
		/// <para>The Solution Health Rule Set for which this is analysis component is for.</para>
		/// <para>Lookup to msdyn_solutionhealthruleset</para>
		/// <para>Solution Health Rule Set</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SolutionHealthRuleSetId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SolutionHealthRuleSetId); }
			set { Entity.Attributes[Fields.msdyn_SolutionHealthRuleSetId] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Suggestion Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_SuggestionCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_SuggestionCount); }
			set { Entity.Attributes[Fields.msdyn_SuggestionCount] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Warning Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_WarningCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_WarningCount); }
			set { Entity.Attributes[Fields.msdyn_WarningCount] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Analysis Component</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Analysis Component</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysiscomponentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
