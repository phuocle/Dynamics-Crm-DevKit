//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.DuplicateRuleConditionOptionSets
{
	public enum OperatorCode
	{
		/// <summary>
		/// Exact Match = 0
		/// </summary>
		Exact_Match = 0,
		/// <summary>
		/// Exact Match (Pick List Label) = 5
		/// </summary>
		Exact_Match_Pick_List_Label = 5,
		/// <summary>
		/// Exact Match (Pick List Value) = 6
		/// </summary>
		Exact_Match_Pick_List_Value = 6,
		/// <summary>
		/// Same Date = 3
		/// </summary>
		Same_Date = 3,
		/// <summary>
		/// Same Date and Time = 4
		/// </summary>
		Same_Date_and_Time = 4,
		/// <summary>
		/// Same First Characters = 1
		/// </summary>
		Same_First_Characters = 1,
		/// <summary>
		/// Same Last Characters = 2
		/// </summary>
		Same_Last_Characters = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DuplicateRuleCondition : EntityBase
	{
		public struct Fields
		{
			public const string BaseAttributeName = "baseattributename";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DuplicateRuleConditionId = "duplicateruleconditionid";
			public const string IgnoreBlankValues = "ignoreblankvalues";
			public const string MatchingAttributeName = "matchingattributename";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OperatorCode = "operatorcode";
			public const string OperatorParam = "operatorparam";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string RegardingObjectId = "regardingobjectid";
			public const string UniqueRuleName = "uniquerulename";
		}

		public const string EntityLogicalName = "duplicaterulecondition";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4416;

		[DebuggerNonUserCode()]
		public DuplicateRuleCondition()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRuleCondition(Guid DuplicateRuleConditionId)
		{
			Entity = new Entity(EntityLogicalName, DuplicateRuleConditionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRuleCondition(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRuleCondition(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRuleCondition(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRuleCondition(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Field that is being compared.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Base Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseAttributeName); }
			set { Entity.Attributes[Fields.BaseAttributeName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the condition.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the condition was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the duplicate rule condition.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the condition.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Duplicate Rule Condition</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DuplicateRuleConditionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DuplicateRuleConditionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Determines whether to consider blank values as non-duplicate values</para>
		/// <para>Boolean</para>
		/// <para>Ignore Blank Values</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreBlankValues
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreBlankValues); }
			set { Entity.Attributes[Fields.IgnoreBlankValues] = value; }
		}

		/// <summary>
		/// <para>Field that is being compared with the base field.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Matching Field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MatchingAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MatchingAttributeName); }
			set { Entity.Attributes[Fields.MatchingAttributeName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the condition.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the condition was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the duplicate rule condition.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Operator for this rule condition.</para>
		/// <para>Picklist</para>
		/// <para>Operator Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DuplicateRuleConditionOptionSets.OperatorCode? OperatorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperatorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DuplicateRuleConditionOptionSets.OperatorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperatorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperatorCode] = null;
			}
		}

		/// <summary>
		/// <para>Parameter value of N if the operator is Same First Characters or Same Last Characters.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Operator Parameter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OperatorParam
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OperatorParam); }
			set { Entity.Attributes[Fields.OperatorParam] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the duplicate rule condition.</para>
		/// <para>ReadOnly - Required - Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the condition.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the condition.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningUser
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the condition is associated.</para>
		/// <para>Lookup to duplicaterule</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>UniqueRuleName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueRuleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueRuleName); }
			set { Entity.Attributes[Fields.UniqueRuleName] = value; }
		}
	}
}
