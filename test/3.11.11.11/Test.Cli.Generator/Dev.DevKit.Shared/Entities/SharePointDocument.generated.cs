//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets
{
	public enum DocumentLocationType
	{
		/// <summary>
		/// Dedicated for OneNote Integration = 1
		/// </summary>
		Dedicated_for_OneNote_Integration = 1,
		/// <summary>
		/// General = 0
		/// </summary>
		General = 0
	}

	public enum ServiceType
	{
		/// <summary>
		/// MS Teams = 3
		/// </summary>
		MS_Teams = 3,
		/// <summary>
		/// OneDrive = 1
		/// </summary>
		OneDrive = 1,
		/// <summary>
		/// Shared with me = 2
		/// </summary>
		Shared_with_me = 2,
		/// <summary>
		/// SharePoint = 0
		/// </summary>
		SharePoint = 0
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SharePointDocument : EntityBase
	{
		public struct Fields
		{
			public const string AbsoluteUrl = "absoluteurl";
			public const string AppCreatedBy = "appcreatedby";
			public const string AppModifiedBy = "appmodifiedby";
			public const string Author = "author";
			public const string BusinessUnitId = "businessunitid";
			public const string CheckedOutTo = "checkedoutto";
			public const string CheckInComment = "checkincomment";
			public const string ChildFolderCount = "childfoldercount";
			public const string ChildItemCount = "childitemcount";
			public const string ContentType = "contenttype";
			public const string ContentTypeId = "contenttypeid";
			public const string CopySource = "copysource";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentId = "documentid";
			public const string DocumentLocationType = "documentlocationtype";
			public const string Edit = "edit";
			public const string EditUrl = "editurl";
			public const string ExchangeRate = "exchangerate";
			public const string FileSize = "filesize";
			public const string FileType = "filetype";
			public const string FullName = "fullname";
			public const string IconClassName = "iconclassname";
			public const string IsCheckedOut = "ischeckedout";
			public const string IsFolder = "isfolder";
			public const string IsRecursiveFetch = "isrecursivefetch";
			public const string LocationId = "locationid";
			public const string LocationName = "locationname";
			public const string Modified = "modified";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ReadUrl = "readurl";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RelativeLocation = "relativelocation";
			public const string ServiceType = "servicetype";
			public const string SharePointCreatedOn = "sharepointcreatedon";
			public const string SharePointDocumentId = "sharepointdocumentid";
			public const string SharePointModifiedBy = "sharepointmodifiedby";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string Version = "version";
		}

		public const string EntityLogicalName = "sharepointdocument";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9507;

		[DebuggerNonUserCode()]
		public SharePointDocument()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocument(Guid SharePointDocumentId)
		{
			Entity = new Entity(EntityLogicalName, SharePointDocumentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocument(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocument(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocument(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SharePointDocument(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Type the URL where the SharePoint document is located.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Absolute URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AbsoluteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.AbsoluteUrl); }
		}

		/// <summary>
		/// <para>Name of the person who created the application.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Application Created by</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppCreatedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppCreatedBy); }
		}

		/// <summary>
		/// <para>Name of the person who last modified the application.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Application Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppModifiedBy); }
		}

		/// <summary>
		/// <para>Name of the author of the SharePoint document.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Author</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Author
		{
			get { return Entity.GetAttributeValue<string>(Fields.Author); }
			set { Entity.Attributes[Fields.Author] = value; }
		}

		/// <summary>
		/// <para>Shows the business unit that the record is associated with.</para>
		/// <para>Lookup to businessunit</para>
		/// <para>Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}

		/// <summary>
		/// <para>Shows who the SharePoint document is checked out to.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Checked Out To</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CheckedOutTo
		{
			get { return Entity.GetAttributeValue<string>(Fields.CheckedOutTo); }
		}

		/// <summary>
		/// <para>Type a comment about the document that is being checked in.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Check In Comment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CheckInComment
		{
			get { return Entity.GetAttributeValue<string>(Fields.CheckInComment); }
		}

		/// <summary>
		/// <para>Shows the number of child folders.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Folder Child Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ChildFolderCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ChildFolderCount); }
		}

		/// <summary>
		/// <para>Shows how many child items there are.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Child Item Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ChildItemCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ChildItemCount); }
		}

		/// <summary>
		/// <para>The content type of the document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Content Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentType
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentType); }
		}

		/// <summary>
		/// <para>Shows the unique identifier of the content type.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Content Type ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ContentTypeId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ContentTypeId); }
		}

		/// <summary>
		/// <para>SharePoint source item URL</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Copy Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CopySource
		{
			get { return Entity.GetAttributeValue<string>(Fields.CopySource); }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of a SharePoint document in document library.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Document ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DocumentId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DocumentId); }
		}

		/// <summary>
		/// <para>Location type of the SharePoint document location.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Document Location Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.DocumentLocationType? DocumentLocationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DocumentLocationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.DocumentLocationType)value.Value;
			}
		}

		/// <summary>
		/// <para>Edit Url of the Sharepoint Form</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Edit Url Sharepoint Form</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Edit
		{
			get { return Entity.GetAttributeValue<string>(Fields.Edit); }
		}

		/// <summary>
		/// <para>Shows the edit URL of the SharePoint document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Edit Web App URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EditUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.EditUrl); }
		}

		/// <summary>
		/// <para>Shows the exchange rate between the currency associated with the SharePoint document record and the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Shows the file size.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>File Size</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>Shows the file type.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>File Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
		}

		/// <summary>
		/// <para>Shows the full name of the SharePoint document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}

		/// <summary>
		/// <para>Stores the Icon Class name of the SharePoint document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Icon ClassName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconClassName
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconClassName); }
		}

		/// <summary>
		/// <para>Shows whether the file is checked out.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Checked out</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCheckedOut
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCheckedOut); }
		}

		/// <summary>
		/// <para>Shows whether the file is a folder.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Folder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFolder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFolder); }
		}

		/// <summary>
		/// <para>Shows whether to fetch data recursively from the given folder location.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Recursive Fetch</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRecursiveFetch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRecursiveFetch); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated document location.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>SharePoint Document Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LocationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LocationId); }
		}

		/// <summary>
		/// <para>Name of the associated document location.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Location</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LocationName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LocationName); }
		}

		/// <summary>
		/// <para>Shows the date and time when the SharePoint document was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Modified); }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who modified the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the SharePoint document.</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Shows the business unit that the record owner belongs to.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Shows the team that owns the SharePoint document record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Shows the user who owns the SharePoint document record.</para>
		/// <para>ReadOnly - Lookup to </para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Shows the Read URL of the SharePoint document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Read WebApp URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadUrl); }
		}

		/// <summary>
		/// <para>Choose the parent record that the SharePoint document record is associated with.</para>
		/// <para>Lookup to account, contact, kbarticle, knowledgearticle, lead, msdyn_agreement, msdyn_agreementbookingdate, msdyn_agreementbookingsetup, msdyn_agreementinvoicedate, msdyn_agreementinvoicesetup, msdyn_bookingtimestamp, msdyn_expense, msdyn_incidenttypeproduct, msdyn_inventoryadjustment, msdyn_inventoryadjustmentproduct, msdyn_inventorytransfer, msdyn_knowledgearticletemplate, msdyn_playbookactivity, msdyn_project, msdyn_purchaseorder, msdyn_purchaseorderproduct, msdyn_purchaseorderreceipt, msdyn_resourceterritory, msdyn_rma, msdyn_rmareceipt, msdyn_rtv, msdyn_timegroup, msdyn_timegroupdetail, msdyn_warehouse, msdyn_workorder, msdyn_workorderincident, msdyn_workorderproduct, msdyn_workorderservice, msdyn_workorderservicetask, opportunity, product, quote, salesliterature</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Relative location of Sharepoint Document</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelativeLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelativeLocation); }
		}

		/// <summary>
		/// <para>Shows the service type of the SharePoint site.</para>
		/// <para>Picklist</para>
		/// <para>Source</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.ServiceType? ServiceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.ServiceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceType] = null;
			}
		}

		/// <summary>
		/// <para>Shows the date and time when the SharePoint document record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On SharePoint</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SharePointCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SharePointCreatedOn); }
		}

		/// <summary>
		/// <para>Shows the unique identifier of the SharePoint document record.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SharePoint Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SharePointDocumentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SharePointDocumentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Shows who last updated the document record.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Modified by</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SharePointModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.SharePointModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the title or name that describes the SharePoint document.</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
		}

		/// <summary>
		/// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>ReadOnly - Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}

		/// <summary>
		/// <para>Shows the SharePoint document version</para>
		/// <para>ReadOnly - String - MaxLength: 2000</para>
		/// <para>SharePoint Document Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Version
		{
			get { return Entity.GetAttributeValue<string>(Fields.Version); }
		}
	}
}
