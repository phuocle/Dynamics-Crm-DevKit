//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.EntityDataSourceOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EntityDataSource : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string ConnectionDefinition = "connectiondefinition";
			public const string ConnectionDefinitionSecrets = "connectiondefinitionsecrets";
			public const string Description = "description";
			public const string EntityDataProviderId = "entitydataproviderid";
			public const string EntityDataSourceId = "entitydatasourceid";
			public const string EntityDataSourceIdUnique = "entitydatasourceidunique";
			public const string EntityName = "entityname";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
		}

		public const string EntityLogicalName = "entitydatasource";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 85;

		[DebuggerNonUserCode()]
		public EntityDataSource()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataSource(Guid EntityDataSourceId)
		{
			Entity = new Entity(EntityLogicalName, EntityDataSourceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataSource(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataSource(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataSource(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public EntityDataSource(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntityDataSourceOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntityDataSourceOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>JSON data representing values from a data source entity as individual fields.</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Data Source Values</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectionDefinition
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectionDefinition); }
			set { Entity.Attributes[Fields.ConnectionDefinition] = value; }
		}

		/// <summary>
		/// <para>JSON data representing secrets in a data source entity as individual fields.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Data Source Secrets</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectionDefinitionSecrets
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectionDefinitionSecrets); }
			set { Entity.Attributes[Fields.ConnectionDefinitionSecrets] = value; }
		}

		/// <summary>
		/// <para>Enter additional information to describe the environment this data source targets and the purpose of this system.</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Choose the entity dataprovider for the entity datasource.</para>
		/// <para>Lookup to contact</para>
		/// <para>Entity Provider</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EntityDataProviderId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EntityDataProviderId); }
			set { Entity.Attributes[Fields.EntityDataProviderId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the Data Source Id</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Data Source Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EntityDataSourceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EntityDataSourceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityDataSourceIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityDataSourceIdUnique); }
		}

		/// <summary>
		/// <para>Entity Logical Name</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Entity Logical Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Name of this data source. This name appears in the data source drop-down when creating a new entity.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
	}
}
