//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AttachmentOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Attachment : EntityBase
	{
		public struct Fields
		{
			public const string AttachmentId = "attachmentid";
			public const string Body = "body";
			public const string FileName = "filename";
			public const string FilePointer = "filepointer";
			public const string FileSize = "filesize";
			public const string MimeType = "mimetype";
			public const string Prefix = "prefix";
			public const string StoragePointer = "storagepointer";
			public const string Subject = "subject";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "attachment";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1002;

		[DebuggerNonUserCode()]
		public Attachment()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Attachment(Guid AttachmentId)
		{
			Entity = new Entity(EntityLogicalName, AttachmentId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Attachment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Attachment(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Attachment(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Attachment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the attachment.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Attachment</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AttachmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AttachmentId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Contents of the attachment.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Body</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Body
		{
			get { return Entity.GetAttributeValue<string>(Fields.Body); }
			set { Entity.Attributes[Fields.Body] = value; }
		}

		/// <summary>
		/// <para>File name of the attachment.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File pointer of the attachment.</para>
		/// <para>ReadOnly - String - MaxLength: 255</para>
		/// <para>File Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FilePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.FilePointer); }
		}

		/// <summary>
		/// <para>File size of the attachment.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>MIME type of the attachment.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>MIME Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Prefix of the file pointer in blob storage.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Prefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Prefix); }
		}

		/// <summary>
		/// <para>Storage pointer.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Storage Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StoragePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.StoragePointer); }
		}

		/// <summary>
		/// <para>Subject associated with the attachment.</para>
		/// <para>String - MaxLength: 2000</para>
		/// <para>Subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}

		/// <summary>
		/// <para>Version number of the attachment.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
