//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets
{
	public enum EntityType
	{
		/// <summary>
		/// Requested = 0
		/// </summary>
		Requested = 0
	}

	public enum InitialSyncState
	{
		/// <summary>
		/// Completed = 4
		/// </summary>
		Completed = 4,
		/// <summary>
		/// CompletedWithFailures = 8
		/// </summary>
		CompletedWithFailures = 8,
		/// <summary>
		/// InProgress = 2
		/// </summary>
		InProgress = 2,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// NotStarted = 1
		/// </summary>
		NotStarted = 1,
		/// <summary>
		/// Paused = 32
		/// </summary>
		Paused = 32,
		/// <summary>
		/// PostProcessing = 64
		/// </summary>
		PostProcessing = 64,
		/// <summary>
		/// RequestedInitialData = 16
		/// </summary>
		RequestedInitialData = 16
	}

	public enum MetadataState
	{
		/// <summary>
		/// Created = 8
		/// </summary>
		Created = 8,
		/// <summary>
		/// Failure = 16
		/// </summary>
		Failure = 16,
		/// <summary>
		/// MetadataCreating = 2
		/// </summary>
		MetadataCreating = 2,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// NotCreated = 1
		/// </summary>
		NotCreated = 1,
		/// <summary>
		/// RelationshipCreating = 4
		/// </summary>
		RelationshipCreating = 4
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}

	public enum SynapseTableCreationState
	{
		/// <summary>
		/// Completed = 2
		/// </summary>
		Completed = 2,
		/// <summary>
		/// Failed = 3
		/// </summary>
		Failed = 3,
		/// <summary>
		/// InProgress = 1
		/// </summary>
		InProgress = 1,
		/// <summary>
		/// NotStarted = 0
		/// </summary>
		NotStarted = 0
	}

	public enum SyncState
	{
		/// <summary>
		/// Completed = 4
		/// </summary>
		Completed = 4,
		/// <summary>
		/// CompletedWithFailures = 8
		/// </summary>
		CompletedWithFailures = 8,
		/// <summary>
		/// InProgress = 2
		/// </summary>
		InProgress = 2,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// NotStarted = 1
		/// </summary>
		NotStarted = 1,
		/// <summary>
		/// Paused = 32
		/// </summary>
		Paused = 32,
		/// <summary>
		/// PostProcessing = 64
		/// </summary>
		PostProcessing = 64,
		/// <summary>
		/// RequestedInitialData = 16
		/// </summary>
		RequestedInitialData = 16
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class synapselinkprofileentitystate : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EntityName = "entityname";
			public const string EntityType = "entitytype";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialSyncDataCompletedTime = "initialsyncdatacompletedtime";
			public const string InitialSyncMetadataCreatedTime = "initialsyncmetadatacreatedtime";
			public const string InitialSyncProcessCompletedTime = "initialsyncprocesscompletedtime";
			public const string InitialSyncState = "initialsyncstate";
			public const string LastSyncedDataTime = "lastsynceddatatime";
			public const string LastSyncedDataVersion = "lastsynceddataversion";
			public const string LastSyncedMetadataTime = "lastsyncedmetadatatime";
			public const string LastSyncedMetadataVersion = "lastsyncedmetadataversion";
			public const string MetadataState = "metadatastate";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string profile = "profile";
			public const string profileentity = "profileentity";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string synapselinkprofileentitystateId = "synapselinkprofileentitystateid";
			public const string SynapseTableCreationState = "synapsetablecreationstate";
			public const string SyncState = "syncstate";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "synapselinkprofileentitystate";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10034;

		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Guid synapselinkprofileentitystateId)
		{
			Entity = new Entity(EntityLogicalName, synapselinkprofileentitystateId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the entity</para>
		/// <para>Required - String - MaxLength: 64</para>
		/// <para>EntityName</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}

		/// <summary>
		/// <para>Type of the entity</para>
		/// <para>Required - Picklist</para>
		/// <para>EntityType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntityType? EntityType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EntityType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntityType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EntityType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EntityType] = null;
			}
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Initial sync data completed time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Initial Sync Data Completed Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InitialSyncDataCompletedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InitialSyncDataCompletedTime); }
			set { Entity.Attributes[Fields.InitialSyncDataCompletedTime] = value; }
		}

		/// <summary>
		/// <para>Initial sync metadata created time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Initial Sync Metadata Created Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InitialSyncMetadataCreatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InitialSyncMetadataCreatedTime); }
			set { Entity.Attributes[Fields.InitialSyncMetadataCreatedTime] = value; }
		}

		/// <summary>
		/// <para>Initial sync process completed time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Initial Sync Process Completed Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InitialSyncProcessCompletedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InitialSyncProcessCompletedTime); }
			set { Entity.Attributes[Fields.InitialSyncProcessCompletedTime] = value; }
		}

		/// <summary>
		/// <para>Initial sync state</para>
		/// <para>Picklist</para>
		/// <para>Initial Sync State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.InitialSyncState? InitialSyncState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialSyncState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.InitialSyncState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialSyncState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialSyncState] = null;
			}
		}

		/// <summary>
		/// <para>Last synced data time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Synced Data Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncedDataTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncedDataTime); }
			set { Entity.Attributes[Fields.LastSyncedDataTime] = value; }
		}

		/// <summary>
		/// <para>Last synced data version</para>
		/// <para>String - MaxLength: 32</para>
		/// <para>Last Synced Data Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncedDataVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncedDataVersion); }
			set { Entity.Attributes[Fields.LastSyncedDataVersion] = value; }
		}

		/// <summary>
		/// <para>Last synced metadata time</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Last Synced Metadata Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncedMetadataTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncedMetadataTime); }
			set { Entity.Attributes[Fields.LastSyncedMetadataTime] = value; }
		}

		/// <summary>
		/// <para>Last synced metadata version</para>
		/// <para>String - MaxLength: 32</para>
		/// <para>Last Synced Metadata Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncedMetadataVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncedMetadataVersion); }
			set { Entity.Attributes[Fields.LastSyncedMetadataVersion] = value; }
		}

		/// <summary>
		/// <para>Metadata state</para>
		/// <para>Required - Picklist</para>
		/// <para>Metadata State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.MetadataState? MetadataState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MetadataState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.MetadataState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MetadataState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MetadataState] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the organization</para>
		/// <para>ReadOnly - Lookup to organization</para>
		/// <para>Organization Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Synapse Link Profile associated with Synapse Link Profile Entity State.</para>
		/// <para>Required - Lookup to synapselinkprofile</para>
		/// <para>Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference profile
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.profile); }
			set { Entity.Attributes[Fields.profile] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Synapse Link Profile Entity associated with Synapse Link Profile Entity State.</para>
		/// <para>Lookup to synapselinkprofileentity</para>
		/// <para>ProfileEntity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference profileentity
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.profileentity); }
			set { Entity.Attributes[Fields.profileentity] = value; }
		}

		/// <summary>
		/// <para>Status of the Synapse Link Profile Entity State</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Synapse Link Profile Entity State</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Synapse Link Profile Entity State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid synapselinkprofileentitystateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.synapselinkprofileentitystateId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Synapse table creation state</para>
		/// <para>Required - Picklist</para>
		/// <para>Synapse Table Creation State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SynapseTableCreationState? SynapseTableCreationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SynapseTableCreationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SynapseTableCreationState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SynapseTableCreationState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SynapseTableCreationState] = null;
			}
		}

		/// <summary>
		/// <para>Entity sync state</para>
		/// <para>Required - Picklist</para>
		/// <para>SyncState</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SyncState? SyncState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SyncState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SyncState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SyncState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SyncState] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
