//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.SystemUserOptionSets
{
	public enum AccessMode
	{
		/// <summary>
		/// Administrative = 1
		/// </summary>
		Administrative = 1,
		/// <summary>
		/// Delegated Admin = 5
		/// </summary>
		Delegated_Admin = 5,
		/// <summary>
		/// Non-interactive = 4
		/// </summary>
		Non_interactive = 4,
		/// <summary>
		/// Read = 2
		/// </summary>
		Read = 2,
		/// <summary>
		/// Read-Write = 0
		/// </summary>
		Read_Write = 0,
		/// <summary>
		/// Support User = 3
		/// </summary>
		Support_User = 3
	}

	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum AzureState
	{
		/// <summary>
		/// Exists = 0
		/// </summary>
		Exists = 0,
		/// <summary>
		/// Not found or hard deleted = 2
		/// </summary>
		Not_found_or_hard_deleted = 2,
		/// <summary>
		/// Soft deleted = 1
		/// </summary>
		Soft_deleted = 1
	}

	public enum CALType
	{
		/// <summary>
		/// Administrative = 1
		/// </summary>
		Administrative = 1,
		/// <summary>
		/// Basic = 2
		/// </summary>
		Basic = 2,
		/// <summary>
		/// Device Basic = 4
		/// </summary>
		Device_Basic = 4,
		/// <summary>
		/// Device Enterprise = 8
		/// </summary>
		Device_Enterprise = 8,
		/// <summary>
		/// Device Essential = 6
		/// </summary>
		Device_Essential = 6,
		/// <summary>
		/// Device Professional = 3
		/// </summary>
		Device_Professional = 3,
		/// <summary>
		/// Enterprise = 7
		/// </summary>
		Enterprise = 7,
		/// <summary>
		/// Essential = 5
		/// </summary>
		Essential = 5,
		/// <summary>
		/// Field Service = 11
		/// </summary>
		Field_Service = 11,
		/// <summary>
		/// Professional = 0
		/// </summary>
		Professional = 0,
		/// <summary>
		/// Project Service = 12
		/// </summary>
		Project_Service = 12,
		/// <summary>
		/// Sales = 9
		/// </summary>
		Sales = 9,
		/// <summary>
		/// Service = 10
		/// </summary>
		Service = 10
	}

	public enum DeletedState
	{
		/// <summary>
		/// Not deleted = 0
		/// </summary>
		Not_deleted = 0,
		/// <summary>
		/// Soft deleted = 1
		/// </summary>
		Soft_deleted = 1
	}

	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// Approved = 1
		/// </summary>
		Approved = 1,
		/// <summary>
		/// Empty = 0
		/// </summary>
		Empty = 0,
		/// <summary>
		/// Pending Approval = 2
		/// </summary>
		Pending_Approval = 2,
		/// <summary>
		/// Rejected = 3
		/// </summary>
		Rejected = 3
	}

	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// Forward Mailbox = 3
		/// </summary>
		Forward_Mailbox = 3,
		/// <summary>
		/// Microsoft Dynamics 365 for Outlook = 1
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Server-Side Synchronization or Email Router = 2
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}

	public enum InviteStatusCode
	{
		/// <summary>
		/// Invitation Accepted = 4
		/// </summary>
		Invitation_Accepted = 4,
		/// <summary>
		/// Invitation Expired = 3
		/// </summary>
		Invitation_Expired = 3,
		/// <summary>
		/// Invitation Near Expired = 2
		/// </summary>
		Invitation_Near_Expired = 2,
		/// <summary>
		/// Invitation Not Sent = 0
		/// </summary>
		Invitation_Not_Sent = 0,
		/// <summary>
		/// Invitation Rejected = 5
		/// </summary>
		Invitation_Rejected = 5,
		/// <summary>
		/// Invitation Revoked = 6
		/// </summary>
		Invitation_Revoked = 6,
		/// <summary>
		/// Invited = 1
		/// </summary>
		Invited = 1
	}

	public enum msdyn_AgentType
	{
		/// <summary>
		/// Application user = 192350000
		/// </summary>
		Application_user = 192350000,
		/// <summary>
		/// Bot application user = 192350001
		/// </summary>
		Bot_application_user = 192350001
	}

	public enum msdyn_BotProvider
	{
		/// <summary>
		/// None = 192350002
		/// </summary>
		None = 192350002,
		/// <summary>
		/// Other = 192350001
		/// </summary>
		Other = 192350001,
		/// <summary>
		/// Virtual Agent = 192350000
		/// </summary>
		Virtual_Agent = 192350000
	}

	public enum msdyn_UserType
	{
		/// <summary>
		/// BOT User = 192350001
		/// </summary>
		BOT_User = 192350001,
		/// <summary>
		/// CRM User = 192350000
		/// </summary>
		CRM_User = 192350000
	}

	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// Microsoft Dynamics 365 for Outlook = 1
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 1,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Server-Side Synchronization or Email Router = 2
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}

	public enum PreferredAddressCode
	{
		/// <summary>
		/// Mailing Address = 1
		/// </summary>
		Mailing_Address = 1,
		/// <summary>
		/// Other Address = 2
		/// </summary>
		Other_Address = 2
	}

	public enum PreferredEmailCode
	{
		/// <summary>
		/// Default Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum PreferredPhoneCode
	{
		/// <summary>
		/// Home Phone = 3
		/// </summary>
		Home_Phone = 3,
		/// <summary>
		/// Main Phone = 1
		/// </summary>
		Main_Phone = 1,
		/// <summary>
		/// Mobile Phone = 4
		/// </summary>
		Mobile_Phone = 4,
		/// <summary>
		/// Other Phone = 2
		/// </summary>
		Other_Phone = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SystemUser : EntityBase
	{
		public struct Fields
		{
			public const string AccessMode = "accessmode";
			public const string ActiveDirectoryGuid = "activedirectoryguid";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string ApplicationId = "applicationid";
			public const string ApplicationIdUri = "applicationiduri";
			public const string AzureActiveDirectoryObjectId = "azureactivedirectoryobjectid";
			public const string AzureDeletedOn = "azuredeletedon";
			public const string AzureState = "azurestate";
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CALType = "caltype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultFiltersPopulated = "defaultfilterspopulated";
			public const string DefaultMailbox = "defaultmailbox";
			public const string DefaultOdbFolderName = "defaultodbfoldername";
			public const string DeletedState = "deletedstate";
			public const string DisabledReason = "disabledreason";
			public const string DisplayInServiceViews = "displayinserviceviews";
			public const string DomainName = "domainname";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmployeeId = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FirstName = "firstname";
			public const string FullName = "fullname";
			public const string GovernmentId = "governmentid";
			public const string HomePhone = "homephone";
			public const string IdentityId = "identityid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string InternalEMailAddress = "internalemailaddress";
			public const string InviteStatusCode = "invitestatuscode";
			public const string IsActiveDirectoryUser = "isactivedirectoryuser";
			public const string IsDisabled = "isdisabled";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string IsIntegrationUser = "isintegrationuser";
			public const string IsLicensed = "islicensed";
			public const string IsSyncWithDirectory = "issyncwithdirectory";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LatestUpdateTime = "latestupdatetime";
			public const string MiddleName = "middlename";
			public const string MobileAlertEMail = "mobilealertemail";
			public const string MobileOfflineProfileId = "mobileofflineprofileid";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AgentType = "msdyn_agentType";
			public const string msdyn_BotApplicationId = "msdyn_botapplicationid";
			public const string msdyn_BotDescription = "msdyn_botdescription";
			public const string msdyn_BotEndpoint = "msdyn_botendpoint";
			public const string msdyn_bothandle = "msdyn_bothandle";
			public const string msdyn_BotProvider = "msdyn_botprovider";
			public const string msdyn_BotSecretKeys = "msdyn_botsecretkeys";
			public const string msdyn_Capacity = "msdyn_capacity";
			public const string msdyn_DefaultPresenceIdUser = "msdyn_defaultpresenceiduser";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_gridwrappercontrolfield = "msdyn_gridwrappercontrolfield";
			public const string msdyn_OwningEnvironmentId = "msdyn_owningenvironmentid";
			public const string msdyn_phonenumberid = "msdyn_phonenumberid";
			public const string msdyn_UserType = "msdyn_usertype";
			public const string msdyusd_USDConfigurationId = "msdyusd_usdconfigurationid";
			public const string NickName = "nickname";
			public const string OrganizationId = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentSystemUserId = "parentsystemuserid";
			public const string PassportHi = "passporthi";
			public const string PassportLo = "passportlo";
			public const string PersonalEMailAddress = "personalemailaddress";
			public const string PhotoUrl = "photourl";
			public const string PositionId = "positionid";
			public const string PreferredAddressCode = "preferredaddresscode";
			public const string PreferredEmailCode = "preferredemailcode";
			public const string PreferredPhoneCode = "preferredphonecode";
			public const string ProcessId = "processid";
			public const string QueueId = "queueid";
			public const string Salutation = "salutation";
			public const string SetupUser = "setupuser";
			public const string SharePointEmailAddress = "sharepointemailaddress";
			public const string SiteId = "siteid";
			public const string Skills = "skills";
			public const string StageId = "stageid";
			public const string SystemUserId = "systemuserid";
			public const string TerritoryId = "territoryid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UserLicenseType = "userlicensetype";
			public const string UserPuid = "userpuid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WindowsLiveID = "windowsliveid";
			public const string YammerEmailAddress = "yammeremailaddress";
			public const string YammerUserId = "yammeruserid";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}

		public const string EntityLogicalName = "systemuser";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8;

		[DebuggerNonUserCode()]
		public SystemUser()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SystemUser(Guid SystemUserId)
		{
			Entity = new Entity(EntityLogicalName, SystemUserId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SystemUser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SystemUser(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SystemUser(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public SystemUser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Type of user.</para>
		/// <para>Picklist</para>
		/// <para>Access Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode? AccessMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccessMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccessMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccessMode] = null;
			}
		}

		/// <summary>
		/// <para>Active Directory object GUID for the system user.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Active Directory Guid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActiveDirectoryGuid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActiveDirectoryGuid); }
		}

		/// <summary>
		/// <para>Unique identifier for address 1.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Address 1: ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}

		/// <summary>
		/// <para>Type of address for address 1, such as billing, shipping, or primary address.</para>
		/// <para>Picklist</para>
		/// <para>Address 1: Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>City name for address 1.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete primary address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}

		/// <summary>
		/// <para>Country/region name in address 1.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}

		/// <summary>
		/// <para>County name for address 1.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Address 1: County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}

		/// <summary>
		/// <para>Fax number for address 1.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Address 1: Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}

		/// <summary>
		/// <para>Latitude for address 1.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Address 1: Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}

		/// <summary>
		/// <para>First line for entering address 1 information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}

		/// <summary>
		/// <para>Second line for entering address 1 information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}

		/// <summary>
		/// <para>Third line for entering address 1 information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}

		/// <summary>
		/// <para>Longitude for address 1.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Address 1: Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}

		/// <summary>
		/// <para>Name to enter for address 1.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Address 1: Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}

		/// <summary>
		/// <para>ZIP Code or postal code for address 1.</para>
		/// <para>String - MaxLength: 40</para>
		/// <para>ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Post office box number for address 1.</para>
		/// <para>String - MaxLength: 40</para>
		/// <para>Address 1: Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Method of shipment for address 1.</para>
		/// <para>Picklist</para>
		/// <para>Address 1: Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>State or province for address 1.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>First telephone number associated with address 1.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Main Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}

		/// <summary>
		/// <para>Second telephone number associated with address 1.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Other Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}

		/// <summary>
		/// <para>Third telephone number associated with address 1.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Pager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}

		/// <summary>
		/// <para>United Parcel Service (UPS) zone for address 1.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>Address 1: UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}

		/// <summary>
		/// <para>UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Address 1: UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for address 2.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Address 2: ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}

		/// <summary>
		/// <para>Type of address for address 2, such as billing, shipping, or primary address.</para>
		/// <para>Picklist</para>
		/// <para>Address 2: Address Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>City name for address 2.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Other City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}

		/// <summary>
		/// <para>Shows the complete secondary address.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1000</para>
		/// <para>Other Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}

		/// <summary>
		/// <para>Country/region name in address 2.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Other Country/Region</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}

		/// <summary>
		/// <para>County name for address 2.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Address 2: County</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}

		/// <summary>
		/// <para>Fax number for address 2.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Fax</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}

		/// <summary>
		/// <para>Latitude for address 2.</para>
		/// <para>Double - MinValue: -90 - MaxValue: 90</para>
		/// <para>Address 2: Latitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}

		/// <summary>
		/// <para>First line for entering address 2 information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Other Street 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}

		/// <summary>
		/// <para>Second line for entering address 2 information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Other Street 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}

		/// <summary>
		/// <para>Third line for entering address 2 information.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Other Street 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}

		/// <summary>
		/// <para>Longitude for address 2.</para>
		/// <para>Double - MinValue: -180 - MaxValue: 180</para>
		/// <para>Address 2: Longitude</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}

		/// <summary>
		/// <para>Name to enter for address 2.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Address 2: Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}

		/// <summary>
		/// <para>ZIP Code or postal code for address 2.</para>
		/// <para>String - MaxLength: 40</para>
		/// <para>Other ZIP/Postal Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}

		/// <summary>
		/// <para>Post office box number for address 2.</para>
		/// <para>String - MaxLength: 40</para>
		/// <para>Address 2: Post Office Box</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}

		/// <summary>
		/// <para>Method of shipment for address 2.</para>
		/// <para>Picklist</para>
		/// <para>Address 2: Shipping Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}

		/// <summary>
		/// <para>State or province for address 2.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Other State/Province</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}

		/// <summary>
		/// <para>First telephone number associated with address 2.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}

		/// <summary>
		/// <para>Second telephone number associated with address 2.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}

		/// <summary>
		/// <para>Third telephone number associated with address 2.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Address 2: Telephone 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}

		/// <summary>
		/// <para>United Parcel Service (UPS) zone for address 2.</para>
		/// <para>String - MaxLength: 4</para>
		/// <para>Address 2: UPS Zone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}

		/// <summary>
		/// <para>UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Address 2: UTC Offset</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}

		/// <summary>
		/// <para>The identifier for the application. This is used to access data in another application.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Application ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ApplicationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ApplicationId); }
			set { Entity.Attributes[Fields.ApplicationId] = value; }
		}

		/// <summary>
		/// <para>The URI used as a unique logical identifier for the external app. This can be used to validate the application.</para>
		/// <para>ReadOnly - String - MaxLength: 1024</para>
		/// <para>Application ID URI</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicationIdUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicationIdUri); }
		}

		/// <summary>
		/// <para>This is the application directory object Id.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Azure AD Object ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AzureActiveDirectoryObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AzureActiveDirectoryObjectId); }
		}

		/// <summary>
		/// <para>Date and time when the user was set as soft deleted in Azure.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Azure Deleted On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? AzureDeletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.AzureDeletedOn); }
		}

		/// <summary>
		/// <para>Azure state of user</para>
		/// <para>Picklist</para>
		/// <para>Azure State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState? AzureState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AzureState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AzureState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AzureState] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the business unit with which the user is associated.</para>
		/// <para>Lookup to businessunit</para>
		/// <para>Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}

		/// <summary>
		/// <para>Fiscal calendar associated with the user.</para>
		/// <para>Lookup to calendar</para>
		/// <para>Calendar</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}

		/// <summary>
		/// <para>License type of user. This is used only in the on-premises version of the product. Online licenses are managed through Microsoft 365 Office Portal</para>
		/// <para>Picklist</para>
		/// <para>License Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType? CALType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CALType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CALType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CALType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the user was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the systemuser.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Indicates if default outlook filters have been populated.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Default Filters Populated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DefaultFiltersPopulated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DefaultFiltersPopulated); }
		}

		/// <summary>
		/// <para>Select the mailbox associated with this user.</para>
		/// <para>ReadOnly - Lookup to mailbox</para>
		/// <para>Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMailbox
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMailbox); }
		}

		/// <summary>
		/// <para>Type a default folder name for the user&apos;s OneDrive For Business location.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Default OneDrive for Business Folder Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultOdbFolderName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultOdbFolderName); }
		}

		/// <summary>
		/// <para>User delete state</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Deleted State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState? DeletedState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeletedState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState)value.Value;
			}
		}

		/// <summary>
		/// <para>Reason for disabling the user.</para>
		/// <para>ReadOnly - String - MaxLength: 500</para>
		/// <para>Disabled Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisabledReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisabledReason); }
		}

		/// <summary>
		/// <para>Whether to display the user in service views.</para>
		/// <para>Boolean</para>
		/// <para>Display in Service Views</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisplayInServiceViews
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisplayInServiceViews); }
			set { Entity.Attributes[Fields.DisplayInServiceViews] = value; }
		}

		/// <summary>
		/// <para>Active Directory domain of which the user is a member.</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>User Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DomainName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DomainName); }
			set { Entity.Attributes[Fields.DomainName] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the primary email address.</para>
		/// <para>Picklist</para>
		/// <para>Primary Email Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}

		/// <summary>
		/// <para>Employee identifier for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Employee</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmployeeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmployeeId); }
			set { Entity.Attributes[Fields.EmployeeId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the systemuser with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>First name of the user.</para>
		/// <para>Required - String - MaxLength: 256</para>
		/// <para>First Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}

		/// <summary>
		/// <para>Full name of the user.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Full Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}

		/// <summary>
		/// <para>Government identifier for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Government</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GovernmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GovernmentId); }
			set { Entity.Attributes[Fields.GovernmentId] = value; }
		}

		/// <summary>
		/// <para>Home phone number for the user.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Home Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HomePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.HomePhone); }
			set { Entity.Attributes[Fields.HomePhone] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Unique user identity id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IdentityId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IdentityId); }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Incoming email delivery method for the user.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Email Delivery Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Internal email address for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Primary Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InternalEMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.InternalEMailAddress); }
			set { Entity.Attributes[Fields.InternalEMailAddress] = value; }
		}

		/// <summary>
		/// <para>User invitation status.</para>
		/// <para>Required - Picklist</para>
		/// <para>Invitation Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode? InviteStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InviteStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InviteStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InviteStatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Information about whether the user is an AD user.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Active Directory User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActiveDirectoryUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActiveDirectoryUser); }
		}

		/// <summary>
		/// <para>Information about whether the user is enabled.</para>
		/// <para>Boolean</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
			set { Entity.Attributes[Fields.IsDisabled] = value; }
		}

		/// <summary>
		/// <para>Shows the status of approval of the email address by O365 Admin.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Email Address O365 Admin Approval Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
		}

		/// <summary>
		/// <para>Check if user is an integration user.</para>
		/// <para>Boolean</para>
		/// <para>Integration user mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIntegrationUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIntegrationUser); }
			set { Entity.Attributes[Fields.IsIntegrationUser] = value; }
		}

		/// <summary>
		/// <para>Information about whether the user is licensed.</para>
		/// <para>Boolean</para>
		/// <para>User Licensed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLicensed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLicensed); }
			set { Entity.Attributes[Fields.IsLicensed] = value; }
		}

		/// <summary>
		/// <para>Information about whether the user is synced with the directory.</para>
		/// <para>Boolean</para>
		/// <para>User Synced</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSyncWithDirectory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSyncWithDirectory); }
			set { Entity.Attributes[Fields.IsSyncWithDirectory] = value; }
		}

		/// <summary>
		/// <para>Job title of the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Job Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}

		/// <summary>
		/// <para>Last name of the user.</para>
		/// <para>Required - String - MaxLength: 256</para>
		/// <para>Last Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}

		/// <summary>
		/// <para>Time stamp of the latest update for the user</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Latest User Update Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestUpdateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestUpdateTime); }
		}

		/// <summary>
		/// <para>Middle name of the user.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Middle Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}

		/// <summary>
		/// <para>Mobile alert email address for the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Mobile Alert Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobileAlertEMail
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobileAlertEMail); }
			set { Entity.Attributes[Fields.MobileAlertEMail] = value; }
		}

		/// <summary>
		/// <para>Items contained with a particular SystemUser.</para>
		/// <para>Lookup to mobileofflineprofile</para>
		/// <para>Mobile Offline Profile</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MobileOfflineProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MobileOfflineProfileId); }
			set { Entity.Attributes[Fields.MobileOfflineProfileId] = value; }
		}

		/// <summary>
		/// <para>Mobile phone number for the user.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Mobile Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the user.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the user was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the systemuser.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type of user - Application user or Bot application user</para>
		/// <para>Picklist</para>
		/// <para>User type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_AgentType? msdyn_AgentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AgentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_AgentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AgentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AgentType] = null;
			}
		}

		/// <summary>
		/// <para>Application ID of the bot.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Bot application ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotApplicationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotApplicationId); }
			set { Entity.Attributes[Fields.msdyn_BotApplicationId] = value; }
		}

		/// <summary>
		/// <para>BOT User Description</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotDescription); }
			set { Entity.Attributes[Fields.msdyn_BotDescription] = value; }
		}

		/// <summary>
		/// <para>Bot User Endpoint</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Endpoint</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotEndpoint
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotEndpoint); }
			set { Entity.Attributes[Fields.msdyn_BotEndpoint] = value; }
		}

		/// <summary>
		/// <para>Bot handle</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Bot handle</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_bothandle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_bothandle); }
			set { Entity.Attributes[Fields.msdyn_bothandle] = value; }
		}

		/// <summary>
		/// <para>Indicates the type of bot</para>
		/// <para>Required - Picklist</para>
		/// <para>Bot Provider</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_BotProvider? msdyn_BotProvider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BotProvider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_BotProvider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BotProvider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BotProvider] = null;
			}
		}

		/// <summary>
		/// <para>Bot User Secret Keys</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Secret Keys</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotSecretKeys
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotSecretKeys); }
			set { Entity.Attributes[Fields.msdyn_BotSecretKeys] = value; }
		}

		/// <summary>
		/// <para>Capacity associated with the User.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Capacity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Capacity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Capacity); }
			set { Entity.Attributes[Fields.msdyn_Capacity] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Presence associated with User.</para>
		/// <para>Lookup to msdyn_presence</para>
		/// <para>Default Presence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultPresenceIdUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultPresenceIdUser); }
			set { Entity.Attributes[Fields.msdyn_DefaultPresenceIdUser] = value; }
		}

		/// <summary>
		/// <para>Describes whether user is opted out or not</para>
		/// <para>Boolean</para>
		/// <para>GDPR Optout</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}

		/// <summary>
		/// <para>Field to bind grid wrapper control</para>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Grid Wrapper Control field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_gridwrappercontrolfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_gridwrappercontrolfield); }
			set { Entity.Attributes[Fields.msdyn_gridwrappercontrolfield] = value; }
		}

		/// <summary>
		/// <para>Environment Id of the CDS environment that owns the bot user.</para>
		/// <para>String - MaxLength: 500</para>
		/// <para>Owning Environment Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_OwningEnvironmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_OwningEnvironmentId); }
			set { Entity.Attributes[Fields.msdyn_OwningEnvironmentId] = value; }
		}

		/// <summary>
		/// <para>Lookup to msdyn_ocphonenumber</para>
		/// <para>Phone Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_phonenumberid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_phonenumberid); }
			set { Entity.Attributes[Fields.msdyn_phonenumberid] = value; }
		}

		/// <summary>
		/// <para>Type of user - CRM or BOT user</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_UserType? msdyn_UserType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_UserType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_UserType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UserType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_UserType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Configuration associated with User.</para>
		/// <para>Lookup to msdyusd_configuration</para>
		/// <para>Unified Service Desk Configuration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyusd_USDConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyusd_USDConfigurationId); }
			set { Entity.Attributes[Fields.msdyusd_USDConfigurationId] = value; }
		}

		/// <summary>
		/// <para>Nickname of the user.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Nickname</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NickName
		{
			get { return Entity.GetAttributeValue<string>(Fields.NickName); }
			set { Entity.Attributes[Fields.NickName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the user.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Outgoing email delivery method for the user.</para>
		/// <para>Picklist</para>
		/// <para>Outgoing Email Delivery Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the manager of the user.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Manager</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSystemUserId); }
			set { Entity.Attributes[Fields.ParentSystemUserId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Passport Hi</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PassportHi
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PassportHi); }
			set { Entity.Attributes[Fields.PassportHi] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Passport Lo</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PassportLo
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PassportLo); }
			set { Entity.Attributes[Fields.PassportLo] = value; }
		}

		/// <summary>
		/// <para>Personal email address of the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PersonalEMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.PersonalEMailAddress); }
			set { Entity.Attributes[Fields.PersonalEMailAddress] = value; }
		}

		/// <summary>
		/// <para>URL for the Website on which a photo of the user is located.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Photo URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PhotoUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PhotoUrl); }
			set { Entity.Attributes[Fields.PhotoUrl] = value; }
		}

		/// <summary>
		/// <para>User&apos;s position in hierarchical security model.</para>
		/// <para>Lookup to position</para>
		/// <para>Position</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PositionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PositionId); }
			set { Entity.Attributes[Fields.PositionId] = value; }
		}

		/// <summary>
		/// <para>Preferred address for the user.</para>
		/// <para>Picklist</para>
		/// <para>Preferred Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode? PreferredAddressCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAddressCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAddressCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAddressCode] = null;
			}
		}

		/// <summary>
		/// <para>Preferred email address for the user.</para>
		/// <para>Picklist</para>
		/// <para>Preferred Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode? PreferredEmailCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredEmailCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredEmailCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredEmailCode] = null;
			}
		}

		/// <summary>
		/// <para>Preferred phone number for the user.</para>
		/// <para>Picklist</para>
		/// <para>Preferred Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode? PreferredPhoneCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredPhoneCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredPhoneCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredPhoneCode] = null;
			}
		}

		/// <summary>
		/// <para>Shows the ID of the process.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the default queue for the user.</para>
		/// <para>Lookup to queue</para>
		/// <para>Default Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}

		/// <summary>
		/// <para>Salutation for correspondence with the user.</para>
		/// <para>String - MaxLength: 20</para>
		/// <para>Salutation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}

		/// <summary>
		/// <para>Check if user is a setup user.</para>
		/// <para>Boolean</para>
		/// <para>Restricted Access Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetupUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetupUser); }
			set { Entity.Attributes[Fields.SetupUser] = value; }
		}

		/// <summary>
		/// <para>SharePoint Work Email Address</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>SharePoint Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SharePointEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.SharePointEmailAddress); }
			set { Entity.Attributes[Fields.SharePointEmailAddress] = value; }
		}

		/// <summary>
		/// <para>Site at which the user is located.</para>
		/// <para>Lookup to site</para>
		/// <para>Site</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SiteId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SiteId); }
			set { Entity.Attributes[Fields.SiteId] = value; }
		}

		/// <summary>
		/// <para>Skill set of the user.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Skills</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Skills
		{
			get { return Entity.GetAttributeValue<string>(Fields.Skills); }
			set { Entity.Attributes[Fields.Skills] = value; }
		}

		/// <summary>
		/// <para>Shows the ID of the stage.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Process Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the user.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SystemUserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SystemUserId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the territory to which the user is assigned.</para>
		/// <para>Lookup to territory</para>
		/// <para>Territory</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TerritoryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TerritoryId); }
			set { Entity.Attributes[Fields.TerritoryId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Title of the user.</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the systemuser.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Shows the type of user license.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>User License Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UserLicenseType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UserLicenseType); }
			set { Entity.Attributes[Fields.UserLicenseType] = value; }
		}

		/// <summary>
		/// <para>User PUID User Identifiable Information</para>
		/// <para>ReadOnly - String - MaxLength: 100</para>
		/// <para>User PUID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserPuid
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserPuid); }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version number of the user.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Windows Live ID</para>
		/// <para>String - MaxLength: 1024</para>
		/// <para>Windows Live ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WindowsLiveID
		{
			get { return Entity.GetAttributeValue<string>(Fields.WindowsLiveID); }
			set { Entity.Attributes[Fields.WindowsLiveID] = value; }
		}

		/// <summary>
		/// <para>User&apos;s Yammer login email address</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Yammer Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerEmailAddress); }
			set { Entity.Attributes[Fields.YammerEmailAddress] = value; }
		}

		/// <summary>
		/// <para>User&apos;s Yammer ID</para>
		/// <para>String - MaxLength: 128</para>
		/// <para>Yammer User ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerUserId
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerUserId); }
			set { Entity.Attributes[Fields.YammerUserId] = value; }
		}

		/// <summary>
		/// <para>Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Yomi First Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}

		/// <summary>
		/// <para>Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para>Yomi Full Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}

		/// <summary>
		/// <para>Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para>String - MaxLength: 64</para>
		/// <para>Yomi Last Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}

		/// <summary>
		/// <para>Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para>String - MaxLength: 50</para>
		/// <para>Yomi Middle Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
