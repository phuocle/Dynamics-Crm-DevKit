//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ActivityPartyOptionSets
{
    public enum InstanceTypeCode
    {
        /// <summary>
        /// Not_Recurring = 0
        /// </summary>
        Not_Recurring = 0,
        /// <summary>
        /// Recurring_Exception = 3
        /// </summary>
        Recurring_Exception = 3,
        /// <summary>
        /// Recurring_Future_Exception = 4
        /// </summary>
        Recurring_Future_Exception = 4,
        /// <summary>
        /// Recurring_Instance = 2
        /// </summary>
        Recurring_Instance = 2,
        /// <summary>
        /// Recurring_Master = 1
        /// </summary>
        Recurring_Master = 1
    }

    public enum ParticipationTypeMask
    {
        /// <summary>
        /// BCC_Recipient = 4
        /// </summary>
        BCC_Recipient = 4,
        /// <summary>
        /// CC_Recipient = 3
        /// </summary>
        CC_Recipient = 3,
        /// <summary>
        /// Customer = 11
        /// </summary>
        Customer = 11,
        /// <summary>
        /// Optional_attendee = 6
        /// </summary>
        Optional_attendee = 6,
        /// <summary>
        /// Organizer = 7
        /// </summary>
        Organizer = 7,
        /// <summary>
        /// Owner = 9
        /// </summary>
        Owner = 9,
        /// <summary>
        /// Regarding = 8
        /// </summary>
        Regarding = 8,
        /// <summary>
        /// Required_attendee = 5
        /// </summary>
        Required_attendee = 5,
        /// <summary>
        /// Resource = 10
        /// </summary>
        Resource = 10,
        /// <summary>
        /// Sender = 1
        /// </summary>
        Sender = 1,
        /// <summary>
        /// To_Recipient = 2
        /// </summary>
        To_Recipient = 2
    }
}

namespace Dev.DevKit.Shared.Entities
{
    public partial class ActivityParty : EntityBase
    {
        public struct Fields
        {
            public const string ActivityId = "activityid";
            public const string ActivityPartyId = "activitypartyid";
            public const string AddressUsed = "addressused";
            public const string AddressUsedEmailColumnNumber = "addressusedemailcolumnnumber";
            public const string DoNotEmail = "donotemail";
            public const string DoNotFax = "donotfax";
            public const string DoNotPhone = "donotphone";
            public const string DoNotPostalMail = "donotpostalmail";
            public const string Effort = "effort";
            public const string ExchangeEntryId = "exchangeentryid";
            public const string InstanceTypeCode = "instancetypecode";
            public const string IsPartyDeleted = "ispartydeleted";
            public const string OwnerId = "ownerid";
            public const string OwningBusinessUnit = "owningbusinessunit";
            public const string OwningUser = "owninguser";
            public const string ParticipationTypeMask = "participationtypemask";
            public const string PartyId = "partyid";
            public const string ScheduledEnd = "scheduledend";
            public const string ScheduledStart = "scheduledstart";
            public const string VersionNumber = "versionnumber";
        }

        public const string EntityLogicalName = "activityparty";

        public const int EntityTypeCode = 135;

        [DebuggerNonUserCode()]
        public ActivityParty()
        {
            Entity = new Entity(EntityLogicalName);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public ActivityParty(Guid ActivityPartyId)
        {
            Entity = new Entity(EntityLogicalName, ActivityPartyId);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public ActivityParty(string keyName, object keyValue)
        {
            Entity = new Entity(EntityLogicalName, keyName, keyValue);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public ActivityParty(Entity entity)
        {
            Entity = entity;
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public ActivityParty(Entity entity, Entity merge)
        {
            Entity = entity;
            foreach (var property in merge?.Attributes)
            {
                var key = property.Key;
                var value = property.Value;
                Entity[key] = value;
            }
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public ActivityParty(KeyAttributeCollection keys)
        {
            Entity = new Entity(EntityLogicalName, keys);
            PreEntity = CloneThisEntity(Entity);
        }

        /// <summary>
        /// <para>Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)</para>
        /// <para>Lookup to activitypointer</para>
        /// <para>Activity</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ActivityId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ActivityId); }
            set { Entity.Attributes[Fields.ActivityId] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the activity party.</para>
        /// <para>Primary Key - Uniqueidentifier</para>
        /// <para>Activity Party</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid ActivityPartyId
        {
            get { return Id; }
            set
            {
                Entity.Attributes[Fields.ActivityPartyId] = value;
                Entity.Id = value;
            }
        }

        /// <summary>
        /// <para>Email address to which an email is delivered, and which is associated with the target entity.</para>
        /// <para>String - MaxLength: 200</para>
        /// <para>Address </para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string AddressUsed
        {
            get { return Entity.GetAttributeValue<string>(Fields.AddressUsed); }
            set { Entity.Attributes[Fields.AddressUsed] = value; }
        }

        /// <summary>
        /// <para>Email address column number from associated party.</para>
        /// <para>ReadOnly - Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
        /// <para>Email column number of party</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? AddressUsedEmailColumnNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.AddressUsedEmailColumnNumber); }
        }

        /// <summary>
        /// <para>Information about whether to allow sending email to the activity party.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Do not allow Emails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotEmail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEmail); }
        }

        /// <summary>
        /// <para>Information about whether to allow sending faxes to the activity party.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Do not allow Faxes</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotFax
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
        }

        /// <summary>
        /// <para>Information about whether to allow phone calls to the lead.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Do not allow Phone Calls</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotPhone
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
        }

        /// <summary>
        /// <para>Information about whether to allow sending postal mail to the lead.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Do not allow Postal Mails</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? DoNotPostalMail
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
        }

        /// <summary>
        /// <para>Amount of effort used by the resource in a service appointment activity.</para>
        /// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
        /// <para>Effort</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public double? Effort
        {
            get { return Entity.GetAttributeValue<double?>(Fields.Effort); }
            set { Entity.Attributes[Fields.Effort] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>String - MaxLength: 1024</para>
        /// <para>Exchange Entry</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ExchangeEntryId
        {
            get { return Entity.GetAttributeValue<string>(Fields.ExchangeEntryId); }
            set { Entity.Attributes[Fields.ExchangeEntryId] = value; }
        }

        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>ReadOnly - Picklist</para>
        /// <para>Appointment Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.InstanceTypeCode? InstanceTypeCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.InstanceTypeCode)value.Value;
            }
        }

        /// <summary>
        /// <para>Information about whether the underlying entity record is deleted.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Is Party Deleted</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsPartyDeleted
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsPartyDeleted); }
        }

        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity_party.</para>
        /// <para>ReadOnly - Required - Owner</para>
        /// <para>Owner</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwnerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
        }

        /// <summary>
        /// <para>ReadOnly - Uniqueidentifier</para>
        /// <para></para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? OwningBusinessUnit
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
        }

        /// <summary>
        /// <para>ReadOnly - Uniqueidentifier</para>
        /// <para></para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? OwningUser
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
        }

        /// <summary>
        /// <para>Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.</para>
        /// <para>Picklist</para>
        /// <para>Participation Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.ParticipationTypeMask? ParticipationTypeMask
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ParticipationTypeMask);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.ParticipationTypeMask)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.ParticipationTypeMask] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.ParticipationTypeMask] = null;
            }
        }

        /// <summary>
        /// <para>Unique identifier of the party associated with the activity.</para>
        /// <para>Lookup to account;contact;knowledgearticle;queue;systemuser</para>
        /// <para>Party</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference PartyId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.PartyId); }
            set { Entity.Attributes[Fields.PartyId] = value; }
        }

        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Scheduled End</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ScheduledEndUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
        }

        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Scheduled Start</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ScheduledStartUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
        }

        /// <summary>
        /// <para>ReadOnly - BigInt</para>
        /// <para></para>
        /// </summary>
        [DebuggerNonUserCode()]
        public long? VersionNumber
        {
            get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
        }
    }
}

