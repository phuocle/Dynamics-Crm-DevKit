//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.TaskOptionSets
{
    public enum PriorityCode
    {
        /// <summary>
        /// High = 2
        /// </summary>
        High = 2,
        /// <summary>
        /// Low = 0
        /// </summary>
        Low = 0,
        /// <summary>
        /// Normal = 1
        /// </summary>
        Normal = 1
    }

    public enum StateCode
    {
        /// <summary>
        /// Canceled = 2
        /// </summary>
        Canceled = 2,
        /// <summary>
        /// Completed = 1
        /// </summary>
        Completed = 1,
        /// <summary>
        /// Open = 0
        /// </summary>
        Open = 0
    }

    public enum StatusCode
    {
        /// <summary>
        /// Canceled = 6
        /// </summary>
        Canceled = 6,
        /// <summary>
        /// Completed = 5
        /// </summary>
        Completed = 5,
        /// <summary>
        /// Deferred = 7
        /// </summary>
        Deferred = 7,
        /// <summary>
        /// In_Progress = 3
        /// </summary>
        In_Progress = 3,
        /// <summary>
        /// Not_Started = 2
        /// </summary>
        Not_Started = 2,
        /// <summary>
        /// Waiting_on_someone_else = 4
        /// </summary>
        Waiting_on_someone_else = 4
    }
}

namespace Dev.DevKit.Shared.Entities
{
    public partial class Task : EntityBase
    {
        public struct Fields
        {
            public const string ActivityAdditionalParams = "activityadditionalparams";
            public const string ActivityId = "activityid";
            public const string ActivityTypeCode = "activitytypecode";
            public const string ActualDurationMinutes = "actualdurationminutes";
            public const string ActualEnd = "actualend";
            public const string ActualStart = "actualstart";
            public const string Category = "category";
            public const string CreatedBy = "createdby";
            public const string CreatedOn = "createdon";
            public const string CreatedOnBehalfBy = "createdonbehalfby";
            public const string CrmTaskAssignedUniqueId = "crmtaskassigneduniqueid";
            public const string Description = "description";
            public const string ExchangeRate = "exchangerate";
            public const string ImportSequenceNumber = "importsequencenumber";
            public const string IsBilled = "isbilled";
            public const string IsRegularActivity = "isregularactivity";
            public const string IsWorkflowCreated = "isworkflowcreated";
            public const string LastOnHoldTime = "lastonholdtime";
            public const string ModifiedBy = "modifiedby";
            public const string ModifiedOn = "modifiedon";
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
            public const string OnHoldTime = "onholdtime";
            public const string OverriddenCreatedOn = "overriddencreatedon";
            public const string OwnerId = "ownerid";
            public const string OwningBusinessUnit = "owningbusinessunit";
            public const string OwningTeam = "owningteam";
            public const string OwningUser = "owninguser";
            public const string PercentComplete = "percentcomplete";
            public const string PriorityCode = "prioritycode";
            public const string ProcessId = "processid";
            public const string RegardingObjectId = "regardingobjectid";
            public const string ScheduledDurationMinutes = "scheduleddurationminutes";
            public const string ScheduledEnd = "scheduledend";
            public const string ScheduledStart = "scheduledstart";
            public const string SLAId = "slaid";
            public const string SLAInvokedId = "slainvokedid";
            public const string SortDate = "sortdate";
            public const string StageId = "stageid";
            public const string StateCode = "statecode";
            public const string StatusCode = "statuscode";
            public const string Subcategory = "subcategory";
            public const string Subject = "subject";
            public const string SubscriptionId = "subscriptionid";
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
            public const string TransactionCurrencyId = "transactioncurrencyid";
            public const string TraversedPath = "traversedpath";
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
            public const string VersionNumber = "versionnumber";
        }

        public const string EntityLogicalName = "task";

        public const int EntityTypeCode = 4212;

        [DebuggerNonUserCode()]
        public Task()
        {
            Entity = new Entity(EntityLogicalName);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Task(Guid TaskId)
        {
            Entity = new Entity(EntityLogicalName, TaskId);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Task(string keyName, object keyValue)
        {
            Entity = new Entity(EntityLogicalName, keyName, keyValue);
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Task(Entity entity)
        {
            Entity = entity;
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Task(Entity entity, Entity merge)
        {
            Entity = entity;
            foreach (var property in merge?.Attributes)
            {
                var key = property.Key;
                var value = property.Value;
                Entity[key] = value;
            }
            PreEntity = CloneThisEntity(Entity);
        }

        [DebuggerNonUserCode()]
        public Task(KeyAttributeCollection keys)
        {
            Entity = new Entity(EntityLogicalName, keys);
            PreEntity = CloneThisEntity(Entity);
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Memo - MaxLength: 8192</para>
        /// <para>Additional Parameters</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ActivityAdditionalParams
        {
            get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
            set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
        }

        /// <summary>
        /// <para>Unique identifier of the task.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Task</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ActivityId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
            set { Entity.Attributes[Fields.ActivityId] = value; }
        }

        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>ReadOnly - EntityName</para>
        /// <para>Activity Type</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string ActivityTypeCode
        {
            get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
        }

        /// <summary>
        /// <para>Type the number of minutes spent on the task. The duration is used in reporting.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Duration</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ActualDurationMinutes
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
            set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
        }

        /// <summary>
        /// <para>Enter the actual end date and time of the task. By default, it displays when the activity was completed or canceled.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Actual End</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ActualEndUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
            set { Entity.Attributes[Fields.ActualEnd] = value; }
        }

        /// <summary>
        /// <para>Enter the actual start date and time for the task. By default, it displays when the task was created.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Actual Start</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ActualStartUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
            set { Entity.Attributes[Fields.ActualStart] = value; }
        }

        /// <summary>
        /// <para>Type a category to identify the task type, such as lead gathering or customer follow up, to tie the task to a business group or function.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Category
        {
            get { return Entity.GetAttributeValue<string>(Fields.Category); }
            set { Entity.Attributes[Fields.Category] = value; }
        }

        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? CreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
        }

        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Created By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference CreatedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Assigned Task Unique Id</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Assigned Task Unique Id</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? CrmTaskAssignedUniqueId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.CrmTaskAssignedUniqueId); }
            set { Entity.Attributes[Fields.CrmTaskAssignedUniqueId] = value; }
        }

        /// <summary>
        /// <para>Type additional information to describe the task.</para>
        /// <para>Memo - MaxLength: 2000</para>
        /// <para>Description</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Description
        {
            get { return Entity.GetAttributeValue<string>(Fields.Description); }
            set { Entity.Attributes[Fields.Description] = value; }
        }

        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
        /// <para>Exchange Rate</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public decimal? ExchangeRate
        {
            get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
        }

        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>Import Sequence Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ImportSequenceNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
            set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
        }

        /// <summary>
        /// <para>Information which specifies whether the task was billed as part of resolving a case.</para>
        /// <para>Boolean</para>
        /// <para>Is Billed</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsBilled
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
            set { Entity.Attributes[Fields.IsBilled] = value; }
        }

        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>ReadOnly - Boolean</para>
        /// <para>Is Regular Activity</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsRegularActivity
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
        }

        /// <summary>
        /// <para>Information which specifies if the task was created from a workflow rule.</para>
        /// <para>Boolean</para>
        /// <para>Is Workflow Created</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public bool? IsWorkflowCreated
        {
            get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
            set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
        }

        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Last On Hold Time</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? LastOnHoldTimeUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
            set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
        }

        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
        }

        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Modified On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ModifiedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
        }

        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Modified By (Delegate)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference ModifiedOnBehalfBy
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
        }

        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
        /// <para>On Hold Time (Minutes)</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? OnHoldTime
        {
            get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
        }

        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
        /// <para>Record Created On</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? OverriddenCreatedOnUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
            set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
        }

        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Owner</para>
        /// <para>Owner</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwnerId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
            set { Entity.Attributes[Fields.OwnerId] = value; }
        }

        /// <summary>
        /// <para>Shows the record owner's business unit.</para>
        /// <para>ReadOnly - Lookup to businessunit</para>
        /// <para>Owning Business Unit</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningBusinessUnit
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
        }

        /// <summary>
        /// <para>Unique identifier of the team that owns the task.</para>
        /// <para>ReadOnly - Lookup to team</para>
        /// <para>Owning Team</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningTeam
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
        }

        /// <summary>
        /// <para>Unique identifier of the user that owns the task.</para>
        /// <para>ReadOnly - Lookup to systemuser</para>
        /// <para>Owning User</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference OwningUser
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
        }

        /// <summary>
        /// <para>Type the percentage complete value for the task to track tasks to completion.</para>
        /// <para>Integer - MinValue: 0 - MaxValue: 100</para>
        /// <para>Percent Complete</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? PercentComplete
        {
            get { return Entity.GetAttributeValue<int?>(Fields.PercentComplete); }
            set { Entity.Attributes[Fields.PercentComplete] = value; }
        }

        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Picklist</para>
        /// <para>Priority</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.TaskOptionSets.PriorityCode? PriorityCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.TaskOptionSets.PriorityCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.PriorityCode] = null;
            }
        }

        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Process</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? ProcessId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
            set { Entity.Attributes[Fields.ProcessId] = value; }
        }

        /// <summary>
        /// <para>Choose the record that the task relates to.</para>
        /// <para>Lookup to account;contact;knowledgearticle;knowledgebaserecord</para>
        /// <para>Regarding</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference RegardingObjectId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
            set { Entity.Attributes[Fields.RegardingObjectId] = value; }
        }

        /// <summary>
        /// <para>Scheduled duration of the task, specified in minutes.</para>
        /// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
        /// <para>Scheduled Duration</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? ScheduledDurationMinutes
        {
            get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
        }

        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Due Date</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ScheduledEndUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
            set { Entity.Attributes[Fields.ScheduledEnd] = value; }
        }

        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Start Date</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? ScheduledStartUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
            set { Entity.Attributes[Fields.ScheduledStart] = value; }
        }

        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Task record.</para>
        /// <para>Lookup to sla</para>
        /// <para>SLA</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
            set { Entity.Attributes[Fields.SLAId] = value; }
        }

        /// <summary>
        /// <para>Last SLA that was applied to this Task. This field is for internal use only.</para>
        /// <para>ReadOnly - Lookup to sla</para>
        /// <para>Last SLA applied</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference SLAInvokedId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
        }

        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
        /// <para>Sort Date</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public DateTime? SortDateUtc
        {
            get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
            set { Entity.Attributes[Fields.SortDate] = value; }
        }

        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>(Deprecated) Process Stage</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? StageId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
            set { Entity.Attributes[Fields.StageId] = value; }
        }

        /// <summary>
        /// <para>Shows whether the task is open, completed, or canceled. Completed and canceled tasks are read-only and can't be edited.</para>
        /// <para>State</para>
        /// <para>Activity Status</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.TaskOptionSets.StateCode? StateCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.TaskOptionSets.StateCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StateCode] = null;
            }
        }

        /// <summary>
        /// <para>Select the task's status.</para>
        /// <para>Status</para>
        /// <para>Status Reason</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Dev.DevKit.Shared.Entities.TaskOptionSets.StatusCode? StatusCode
        {
            get
            {
                var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
                if (value == null) return null;
                return (Dev.DevKit.Shared.Entities.TaskOptionSets.StatusCode)value.Value;
            }
            set
            {
                if (value.HasValue)
                    Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
                else
                    Entity.Attributes[Fields.StatusCode] = null;
            }
        }

        /// <summary>
        /// <para>Type a subcategory to identify the task type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>String - MaxLength: 250</para>
        /// <para>Sub-Category</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Subcategory
        {
            get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
            set { Entity.Attributes[Fields.Subcategory] = value; }
        }

        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the task.</para>
        /// <para>Required - String - MaxLength: 200</para>
        /// <para>Subject</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string Subject
        {
            get { return Entity.GetAttributeValue<string>(Fields.Subject); }
            set { Entity.Attributes[Fields.Subject] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Uniqueidentifier</para>
        /// <para>Subscription</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public Guid? SubscriptionId
        {
            get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
            set { Entity.Attributes[Fields.SubscriptionId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>Time Zone Rule Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? TimeZoneRuleVersionNumber
        {
            get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
            set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
        }

        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Lookup to transactioncurrency</para>
        /// <para>Currency</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public EntityReference TransactionCurrencyId
        {
            get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
            set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
        }

        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>String - MaxLength: 1250</para>
        /// <para>(Deprecated) Traversed Path</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public string TraversedPath
        {
            get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
            set { Entity.Attributes[Fields.TraversedPath] = value; }
        }

        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
        /// <para>UTC Conversion Time Zone Code</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public int? UTCConversionTimeZoneCode
        {
            get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
            set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
        }

        /// <summary>
        /// <para>Version number of the task.</para>
        /// <para>ReadOnly - BigInt</para>
        /// <para>Version Number</para>
        /// </summary>
        [DebuggerNonUserCode()]
        public long? VersionNumber
        {
            get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
        }
    }
}

