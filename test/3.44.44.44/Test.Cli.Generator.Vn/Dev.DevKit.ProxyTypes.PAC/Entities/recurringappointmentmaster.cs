#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dev.DevKit.ProxyTypes
{
	
	
	/// <summary>
	/// Mã trạng thái để cho biết chuỗi được mở rộng toàn bộ hay một phần.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_expansionstatecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Khngmrng = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mtphn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		y = 2,
	}
	
	/// <summary>
	/// Xác định tổng đếm mà trong đó, mẫu lặp lại hợp lệ đối với khoảng đã cho.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_instance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		utin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thhai = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thba = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tht = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cuicng = 5,
	}
	
	/// <summary>
	/// Loại phiên bản của chuỗi lặp lại.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_instancetypecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KhngLpli = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BnghichLpli = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhinbnLpli = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NgoilLpli = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NgoilTnglaiLpli = 4,
	}
	
	/// <summary>
	/// Loại kết thúc mẫu của chuỗi lặp lại.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_patternendtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KhngcNgyKtthc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lnxyra = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NgyKtthcKiu = 3,
	}
	
	/// <summary>
	/// Mức ưu tiên của recurringappointmentmaster.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_prioritycode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bnhthng = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cao = 2,
	}
	
	/// <summary>
	/// Loại lặp lại.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_recurrencepatterntype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hngngy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hngtun = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hngthng = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hngnm = 3,
	}
	
	/// <summary>
	/// Trạng thái của recurringappointmentmaster.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_statecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 3,
	}
	
	/// <summary>
	/// Lý do dẫn đến trạng thái của recurringappointmentmaster.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum recurringappointmentmaster_statuscode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rnh = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chadtkhot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		honthnh = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bn = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Khngcmtvnphng = 6,
	}
	
	/// <summary>
	/// Cuộc hẹn chính của chuỗi cuộc hẹn lặp lại.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recurringappointmentmaster")]
	public partial class RecurringAppointmentMaster : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the recurringappointmentmaster entity
		/// </summary>
		public partial class Fields
		{
			public const string ActivityId = "activityid";
			public const string Id = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActivityTypeCodeName = "activitytypecodename";
			public const string Category = "category";
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string DayOfMonth = "dayofmonth";
			public const string DaysOfWeekMask = "daysofweekmask";
			public const string DeletedExceptionsList = "deletedexceptionslist";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string EffectiveEndDate = "effectiveenddate";
			public const string EffectiveStartDate = "effectivestartdate";
			public const string EndTime = "endtime";
			public const string ExchangeRate = "exchangerate";
			public const string ExpansionStateCode = "expansionstatecode";
			public const string ExpansionStateCodeName = "expansionstatecodename";
			public const string FirstDayOfWeek = "firstdayofweek";
			public const string GlobalObjectId = "globalobjectid";
			public const string GroupId = "groupid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Instance = "instance";
			public const string InstanceName = "instancename";
			public const string InstanceTypeCode = "instancetypecode";
			public const string InstanceTypeCodeName = "instancetypecodename";
			public const string Interval = "interval";
			public const string IsAllDayEvent = "isalldayevent";
			public const string IsAllDayEventName = "isalldayeventname";
			public const string IsBilled = "isbilled";
			public const string IsBilledName = "isbilledname";
			public const string IsMapiPrivate = "ismapiprivate";
			public const string IsMapiPrivateName = "ismapiprivatename";
			public const string IsNthMonthly = "isnthmonthly";
			public const string IsNthMonthlyName = "isnthmonthlyname";
			public const string IsNthYearly = "isnthyearly";
			public const string IsNthYearlyName = "isnthyearlyname";
			public const string IsOnlineMeeting = "isonlinemeeting";
			public const string isonlinemeetingName = "isonlinemeetingname";
			public const string IsRegenerate = "isregenerate";
			public const string IsRegenerateName = "isregeneratename";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsRegularActivityName = "isregularactivityname";
			public const string IsUnsafe = "isunsafe";
			public const string IsWeekDayPattern = "isweekdaypattern";
			public const string IsWeekDayPatternName = "isweekdaypatternname";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string IsWorkflowCreatedName = "isworkflowcreatedname";
			public const string LastExpandedInstanceDate = "lastexpandedinstancedate";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string MonthOfYear = "monthofyear";
			public const string MonthOfYearName = "monthofyearname";
			public const string NextExpansionInstanceDate = "nextexpansioninstancedate";
			public const string Occurrences = "occurrences";
			public const string OnlineMeetingChatId = "onlinemeetingchatid";
			public const string OnlineMeetingId = "onlinemeetingid";
			public const string OnlineMeetingJoinUrl = "onlinemeetingjoinurl";
			public const string OnlineMeetingType = "onlinemeetingtype";
			public const string onlinemeetingtypeName = "onlinemeetingtypename";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string OutlookOwnerApptId = "outlookownerapptid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwnerIdName = "owneridname";
			public const string OwnerIdYomiName = "owneridyominame";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningBusinessUnitName = "owningbusinessunitname";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PatternEndDate = "patternenddate";
			public const string PatternEndType = "patternendtype";
			public const string PatternEndTypeName = "patternendtypename";
			public const string PatternStartDate = "patternstartdate";
			public const string PriorityCode = "prioritycode";
			public const string PriorityCodeName = "prioritycodename";
			public const string ProcessId = "processid";
			public const string RecurrencePatternType = "recurrencepatterntype";
			public const string RecurrencePatternTypeName = "recurrencepatterntypename";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectIdName = "regardingobjectidname";
			public const string RegardingObjectIdYomiName = "regardingobjectidyominame";
			public const string RequiredAttendees = "requiredattendees";
			public const string RuleId = "ruleid";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SeriesStatus = "seriesstatus";
			public const string SeriesStatusName = "seriesstatusname";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StartTime = "starttime";
			public const string StateCode = "statecode";
			public const string StateCodeName = "statecodename";
			public const string StatusCode = "statuscode";
			public const string StatusCodeName = "statuscodename";
			public const string Subcategory = "subcategory";
			public const string Subject = "subject";
			public const string SubscriptionId = "subscriptionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TransactionCurrencyIdName = "transactioncurrencyidname";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string recurringappointmentmaster_actioncard = "recurringappointmentmaster_actioncard";
			public const string recurringappointmentmaster_activity_parties = "recurringappointmentmaster_activity_parties";
			public const string RecurringAppointmentMaster_Annotation = "RecurringAppointmentMaster_Annotation";
			public const string recurringappointmentmaster_appointment = "recurringappointmentmaster_appointment";
			public const string RecurringAppointmentMaster_AsyncOperations = "RecurringAppointmentMaster_AsyncOperations";
			public const string RecurringAppointmentMaster_BulkDeleteFailures = "RecurringAppointmentMaster_BulkDeleteFailures";
			public const string recurringappointmentmaster_connections1 = "recurringappointmentmaster_connections1";
			public const string recurringappointmentmaster_connections2 = "recurringappointmentmaster_connections2";
			public const string RecurringAppointmentMaster_DuplicateBaseRecord = "RecurringAppointmentMaster_DuplicateBaseRecord";
			public const string RecurringAppointmentMaster_DuplicateMatchingRecord = "RecurringAppointmentMaster_DuplicateMatchingRecord";
			public const string recurringappointmentmaster_PostFollows = "recurringappointmentmaster_PostFollows";
			public const string recurringappointmentmaster_principalobjectattributeaccess = "recurringappointmentmaster_principalobjectattributeaccess";
			public const string RecurringAppointmentMaster_ProcessSessions = "RecurringAppointmentMaster_ProcessSessions";
			public const string RecurringAppointmentMaster_QueueItem = "RecurringAppointmentMaster_QueueItem";
			public const string RecurringAppointmentMaster_SyncErrors = "RecurringAppointmentMaster_SyncErrors";
			public const string userentityinstancedata_recurringappointmentmaster = "userentityinstancedata_recurringappointmentmaster";
			public const string Account_RecurringAppointmentMasters = "Account_RecurringAppointmentMasters";
			public const string activity_pointer_recurringappointmentmaster = "activity_pointer_recurringappointmentmaster";
			public const string adx_invitation_RecurringAppointmentMasters = "adx_invitation_RecurringAppointmentMasters";
			public const string business_unit_recurringappointmentmaster_activities = "business_unit_recurringappointmentmaster_activities";
			public const string Contact_RecurringAppointmentMasters = "Contact_RecurringAppointmentMasters";
			public const string KnowledgeArticle_RecurringAppointmentMasters = "KnowledgeArticle_RecurringAppointmentMasters";
			public const string KnowledgeBaseRecord_RecurringAppointmentMasters = "KnowledgeBaseRecord_RecurringAppointmentMasters";
			public const string lk_recurringappointmentmaster_createdby = "lk_recurringappointmentmaster_createdby";
			public const string lk_recurringappointmentmaster_createdonbehalfby = "lk_recurringappointmentmaster_createdonbehalfby";
			public const string lk_recurringappointmentmaster_modifiedby = "lk_recurringappointmentmaster_modifiedby";
			public const string lk_recurringappointmentmaster_modifiedonbehalfby = "lk_recurringappointmentmaster_modifiedonbehalfby";
			public const string mspp_adplacement_RecurringAppointmentMasters = "mspp_adplacement_RecurringAppointmentMasters";
			public const string mspp_pollplacement_RecurringAppointmentMasters = "mspp_pollplacement_RecurringAppointmentMasters";
			public const string mspp_publishingstatetransitionrule_RecurringAppointmentMasters = "mspp_publishingstatetransitionrule_RecurringAppointmentMasters";
			public const string mspp_redirect_RecurringAppointmentMasters = "mspp_redirect_RecurringAppointmentMasters";
			public const string mspp_shortcut_RecurringAppointmentMasters = "mspp_shortcut_RecurringAppointmentMasters";
			public const string mspp_website_RecurringAppointmentMasters = "mspp_website_RecurringAppointmentMasters";
			public const string processstage_recurringappointmentmasters = "processstage_recurringappointmentmasters";
			public const string recurrencerule_recurringappointmentmaster = "recurrencerule_recurringappointmentmaster";
			public const string team_recurringappointmentmaster = "team_recurringappointmentmaster";
			public const string TransactionCurrency_RecurringAppointmentMaster = "TransactionCurrency_RecurringAppointmentMaster";
			public const string user_recurringappointmentmaster = "user_recurringappointmentmaster";
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public RecurringAppointmentMaster() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "recurringappointmentmaster";
		
		public const string EntityLogicalCollectionName = "recurringappointmentmasters";
		
		public const string EntitySetName = "recurringappointmentmasters";
		
		public const int EntityTypeCode = 4251;
		
		/// <summary>
		/// Mã định danh duy nhất của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activityid")]
		public System.Nullable<System.Guid> ActivityId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("activityid");
			}
			set
			{
				this.SetAttributeValue("activityid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activityid")]
		public override System.Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.ActivityId = value;
			}
		}
		
		/// <summary>
		/// Loại hoạt động.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activitytypecode")]
		public string ActivityTypeCode
		{
			get
			{
				return this.GetAttributeValue<string>("activitytypecode");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activitytypecodename")]
		public string ActivityTypeCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("activitytypecode"))
				{
					return this.FormattedValues["activitytypecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Nhập thể loại để xác định loại cuộc hẹn lặp lại, như họp giao ban hay cuộc gọi dịch vụ, để liên kết cuộc hẹn với bộ phận hoặc nhóm kinh doanh.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("category")]
		public string Category
		{
			get
			{
				return this.GetAttributeValue<string>("category");
			}
			set
			{
				this.SetAttributeValue("category", value);
			}
		}
		
		/// <summary>
		/// Cho biết người tạo bản ghi.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyname")]
		public string CreatedByName
		{
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyyominame")]
		public string CreatedByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Cho biết người tạo bản ghi thay mặt cho người dùng khác.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyname")]
		public string CreatedOnBehalfByName
		{
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
		public string CreatedOnBehalfByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Ngày của tháng xảy ra cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("dayofmonth")]
		public System.Nullable<int> DayOfMonth
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("dayofmonth");
			}
			set
			{
				this.SetAttributeValue("dayofmonth", value);
			}
		}
		
		/// <summary>
		/// Bitmask cho biết ngày của tuần xảy ra cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("daysofweekmask")]
		public System.Nullable<int> DaysOfWeekMask
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("daysofweekmask");
			}
			set
			{
				this.SetAttributeValue("daysofweekmask", value);
			}
		}
		
		/// <summary>
		/// Danh sách lần xuất hiện đã xóa của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("deletedexceptionslist")]
		public string DeletedExceptionsList
		{
			get
			{
				return this.GetAttributeValue<string>("deletedexceptionslist");
			}
		}
		
		/// <summary>
		/// Nhập thêm thông tin để mô tả cuộc hẹn lặp lại, như những điểm thảo luận chính hoặc mục tiêu.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.SetAttributeValue("description", value);
			}
		}
		
		/// <summary>
		/// Khoảng thời gian của chuỗi cuộc hẹn lặp lại, tính bằng phút.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("duration")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("duration");
			}
			set
			{
				this.SetAttributeValue("duration", value);
			}
		}
		
		/// <summary>
		/// Ngày kết thúc thực tế của chuỗi cuộc hẹn lặp lại, dựa trên ngày kết thúc đã chỉ định và mẫu lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("effectiveenddate")]
		public System.Nullable<System.DateTime> EffectiveEndDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("effectiveenddate");
			}
			set
			{
				this.SetAttributeValue("effectiveenddate", value);
			}
		}
		
		/// <summary>
		/// Ngày bắt đầu thực tế của chuỗi cuộc hẹn lặp lại, dựa trên ngày bắt đầu đã chỉ định và mẫu lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("effectivestartdate")]
		public System.Nullable<System.DateTime> EffectiveStartDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("effectivestartdate");
			}
			set
			{
				this.SetAttributeValue("effectivestartdate", value);
			}
		}
		
		/// <summary>
		/// Thời gian kết thúc của hoạt động đã liên kết.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("endtime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("endtime");
			}
			set
			{
				this.SetAttributeValue("endtime", value);
			}
		}
		
		/// <summary>
		/// Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("exchangerate")]
		public System.Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Mã trạng thái để cho biết chuỗi cuộc hẹn lặp lại mở rộng toàn bộ hay một phần.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("expansionstatecode")]
		public virtual recurringappointmentmaster_expansionstatecode? ExpansionStateCode
		{
			get
			{
				return ((recurringappointmentmaster_expansionstatecode?)(EntityOptionSetEnum.GetEnum(this, "expansionstatecode")));
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("expansionstatecodename")]
		public string ExpansionStateCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("expansionstatecode"))
				{
					return this.FormattedValues["expansionstatecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Ngày đầu tiên của tuần dành cho mẫu lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("firstdayofweek")]
		public System.Nullable<int> FirstDayOfWeek
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("firstdayofweek");
			}
			set
			{
				this.SetAttributeValue("firstdayofweek", value);
			}
		}
		
		/// <summary>
		/// Mã định danh Outlook duy nhất để tương quan chuỗi cuộc hẹn lặp lại trong các hộp thư Exchange.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("globalobjectid")]
		public string GlobalObjectId
		{
			get
			{
				return this.GetAttributeValue<string>("globalobjectid");
			}
			set
			{
				this.SetAttributeValue("globalobjectid", value);
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của chuỗi cuộc hẹn lặp lại, trong đó, đã cập nhật thông tin lặp lại. 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("groupid")]
		public Microsoft.Xrm.Sdk.EntityReference GroupId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("groupid");
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			set
			{
				this.SetAttributeValue("importsequencenumber", value);
			}
		}
		
		/// <summary>
		/// Xác định chuỗi cuộc hẹn lặp lại để xảy ra vào mỗi ngày thứ N của tháng. Duy nhất hợp lệ cho mẫu lặp lại hàng tháng và hàng năm.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("instance")]
		public virtual recurringappointmentmaster_instance? Instance
		{
			get
			{
				return ((recurringappointmentmaster_instance?)(EntityOptionSetEnum.GetEnum(this, "instance")));
			}
			set
			{
				this.SetAttributeValue("instance", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("instancename")]
		public string InstanceName
		{
			get
			{
				if (this.FormattedValues.Contains("instance"))
				{
					return this.FormattedValues["instance"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Loại xuất hiện của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("instancetypecode")]
		public virtual recurringappointmentmaster_instancetypecode? InstanceTypeCode
		{
			get
			{
				return ((recurringappointmentmaster_instancetypecode?)(EntityOptionSetEnum.GetEnum(this, "instancetypecode")));
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("instancetypecodename")]
		public string InstanceTypeCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("instancetypecode"))
				{
					return this.FormattedValues["instancetypecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Số lượng đơn vị của loại lặp lại đã cho giữa các lần xảy ra.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("interval")]
		public System.Nullable<int> Interval
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("interval");
			}
			set
			{
				this.SetAttributeValue("interval", value);
			}
		}
		
		/// <summary>
		/// Chọn khả năng cuộc hẹn lặp lại là sự kiện cả ngày, để đảm bảo lên lịch nguồn lực bắt buộc cho cả ngày.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isalldayevent")]
		public System.Nullable<bool> IsAllDayEvent
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isalldayevent");
			}
			set
			{
				this.SetAttributeValue("isalldayevent", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isalldayeventname")]
		public string IsAllDayEventName
		{
			get
			{
				if (this.FormattedValues.Contains("isalldayevent"))
				{
					return this.FormattedValues["isalldayevent"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ định khả năng xuất hóa đơn cho chuỗi cuộc hẹn lặp lại khi giải quyết trường hợp.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isbilled")]
		public System.Nullable<bool> IsBilled
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isbilled");
			}
			set
			{
				this.SetAttributeValue("isbilled", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isbilledname")]
		public string IsBilledName
		{
			get
			{
				if (this.FormattedValues.Contains("isbilled"))
				{
					return this.FormattedValues["isbilled"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ sử dụng nội bộ.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismapiprivate")]
		public System.Nullable<bool> IsMapiPrivate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("ismapiprivate");
			}
			set
			{
				this.SetAttributeValue("ismapiprivate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismapiprivatename")]
		public string IsMapiPrivateName
		{
			get
			{
				if (this.FormattedValues.Contains("ismapiprivate"))
				{
					return this.FormattedValues["ismapiprivate"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ định khả năng xảy ra chuỗi cuộc hẹn lặp lại sau N tháng một lần. Duy nhất hợp lệ cho mẫu lặp lại hàng tháng.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isnthmonthly")]
		public System.Nullable<bool> IsNthMonthly
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isnthmonthly");
			}
			set
			{
				this.SetAttributeValue("isnthmonthly", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isnthmonthlyname")]
		public string IsNthMonthlyName
		{
			get
			{
				if (this.FormattedValues.Contains("isnthmonthly"))
				{
					return this.FormattedValues["isnthmonthly"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ định khả năng xảy ra chuỗi cuộc hẹn lặp lại sau N năm một lần. Duy nhất hợp lệ cho mẫu lặp lại hàng năm.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isnthyearly")]
		public System.Nullable<bool> IsNthYearly
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isnthyearly");
			}
			set
			{
				this.SetAttributeValue("isnthyearly", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isnthyearlyname")]
		public string IsNthYearlyName
		{
			get
			{
				if (this.FormattedValues.Contains("isnthyearly"))
				{
					return this.FormattedValues["isnthyearly"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Hiển thị xem đây có phải là cuộc họp trực tuyến hay không.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isonlinemeeting")]
		public System.Nullable<bool> IsOnlineMeeting
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isonlinemeeting");
			}
			set
			{
				this.SetAttributeValue("isonlinemeeting", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isonlinemeetingname")]
		public string isonlinemeetingName
		{
			get
			{
				if (this.FormattedValues.Contains("isonlinemeeting"))
				{
					return this.FormattedValues["isonlinemeeting"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ sử dụng nội bộ.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isregenerate")]
		public System.Nullable<bool> IsRegenerate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isregenerate");
			}
			set
			{
				this.SetAttributeValue("isregenerate", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isregeneratename")]
		public string IsRegenerateName
		{
			get
			{
				if (this.FormattedValues.Contains("isregenerate"))
				{
					return this.FormattedValues["isregenerate"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ định hoạt động là loại hoạt động thông thường hay loại sự kiện.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isregularactivity")]
		public System.Nullable<bool> IsRegularActivity
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isregularactivity");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isregularactivityname")]
		public string IsRegularActivityName
		{
			get
			{
				if (this.FormattedValues.Contains("isregularactivity"))
				{
					return this.FormattedValues["isregularactivity"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ sử dụng nội bộ.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isunsafe")]
		public System.Nullable<int> IsUnsafe
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("isunsafe");
			}
		}
		
		/// <summary>
		/// Chỉ định khả năng mẫu lặp lại hàng tuần là mẫu hàng ngày vào ngày trong tuần. Duy nhất hợp lệ cho mẫu hàng tuần.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isweekdaypattern")]
		public System.Nullable<bool> IsWeekDayPattern
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isweekdaypattern");
			}
			set
			{
				this.SetAttributeValue("isweekdaypattern", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isweekdaypatternname")]
		public string IsWeekDayPatternName
		{
			get
			{
				if (this.FormattedValues.Contains("isweekdaypattern"))
				{
					return this.FormattedValues["isweekdaypattern"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ định khả năng tạo chuỗi cuộc hẹn lặp lại từ quy tắc quy trình.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isworkflowcreated")]
		public System.Nullable<bool> IsWorkflowCreated
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("isworkflowcreated");
			}
			set
			{
				this.SetAttributeValue("isworkflowcreated", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isworkflowcreatedname")]
		public string IsWorkflowCreatedName
		{
			get
			{
				if (this.FormattedValues.Contains("isworkflowcreated"))
				{
					return this.FormattedValues["isworkflowcreated"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Ngày xuất hiện mở rộng cuối cùng của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("lastexpandedinstancedate")]
		public System.Nullable<System.DateTime> LastExpandedInstanceDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("lastexpandedinstancedate");
			}
		}
		
		/// <summary>
		/// Nhập vị trí diễn ra cuộc hẹn lặp lại, như phòng hội nghị hoặc văn phòng khách hàng.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("location")]
		public string Location
		{
			get
			{
				return this.GetAttributeValue<string>("location");
			}
			set
			{
				this.SetAttributeValue("location", value);
			}
		}
		
		/// <summary>
		/// Cho biết người cập nhật bản ghi sau cùng.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyname")]
		public string ModifiedByName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyyominame")]
		public string ModifiedByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
		public string ModifiedOnBehalfByName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
		public string ModifiedOnBehalfByYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ định tháng của năm cho mẫu lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("monthofyear")]
		public virtual recurrencerule_monthofyear? MonthOfYear
		{
			get
			{
				return ((recurrencerule_monthofyear?)(EntityOptionSetEnum.GetEnum(this, "monthofyear")));
			}
			set
			{
				this.SetAttributeValue("monthofyear", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("monthofyearname")]
		public string MonthOfYearName
		{
			get
			{
				if (this.FormattedValues.Contains("monthofyear"))
				{
					return this.FormattedValues["monthofyear"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Ngày xuất hiện mở rộng tiếp theo của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("nextexpansioninstancedate")]
		public System.Nullable<System.DateTime> NextExpansionInstanceDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("nextexpansioninstancedate");
			}
		}
		
		/// <summary>
		/// Số lần xảy ra cuộc hẹn trong chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("occurrences")]
		public System.Nullable<int> Occurrences
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("occurrences");
			}
			set
			{
				this.SetAttributeValue("occurrences", value);
			}
		}
		
		/// <summary>
		/// Hiển thị ID cuộc trò chuyện trong cuộc họp trực tuyến.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("onlinemeetingchatid")]
		public string OnlineMeetingChatId
		{
			get
			{
				return this.GetAttributeValue<string>("onlinemeetingchatid");
			}
			set
			{
				this.SetAttributeValue("onlinemeetingchatid", value);
			}
		}
		
		/// <summary>
		/// Hiển thị ID cuộc họp trực tuyến.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("onlinemeetingid")]
		public string OnlineMeetingId
		{
			get
			{
				return this.GetAttributeValue<string>("onlinemeetingid");
			}
			set
			{
				this.SetAttributeValue("onlinemeetingid", value);
			}
		}
		
		/// <summary>
		/// Hiển thị URL tham gia cuộc họp trực tuyến.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("onlinemeetingjoinurl")]
		public string OnlineMeetingJoinUrl
		{
			get
			{
				return this.GetAttributeValue<string>("onlinemeetingjoinurl");
			}
			set
			{
				this.SetAttributeValue("onlinemeetingjoinurl", value);
			}
		}
		
		/// <summary>
		/// Hiển thị loại cuộc họp trực tuyến.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("onlinemeetingtype")]
		public virtual onlinemeetingtype? OnlineMeetingType
		{
			get
			{
				return ((onlinemeetingtype?)(EntityOptionSetEnum.GetEnum(this, "onlinemeetingtype")));
			}
			set
			{
				this.SetAttributeValue("onlinemeetingtype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("onlinemeetingtypename")]
		public string onlinemeetingtypeName
		{
			get
			{
				if (this.FormattedValues.Contains("onlinemeetingtype"))
				{
					return this.FormattedValues["onlinemeetingtype"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Nhập khách hàng, người liên hệ, khách hàng tiềm năng, người dùng hoặc nguồn lực thiết bị không cần thiết tại cuộc hẹn lặp lại, nhưng có thể tham gia theo tùy chọn.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("optionalattendees")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.ActivityParty> OptionalAttendees
		{
			get
			{
				Microsoft.Xrm.Sdk.EntityCollection collection = this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityCollection>("optionalattendees");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return System.Linq.Enumerable.Cast<Dev.DevKit.ProxyTypes.ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				if ((value == null))
				{
					this.SetAttributeValue("optionalattendees", value);
				}
				else
				{
					this.SetAttributeValue("optionalattendees", new Microsoft.Xrm.Sdk.EntityCollection(new System.Collections.Generic.List<Microsoft.Xrm.Sdk.Entity>(value)));
				}
			}
		}
		
		/// <summary>
		/// Nhập người dùng phụ trách phối hợp hoặc chủ trì cuộc họp lặp lại để đảm bảo hiển thị cuộc họp trong dạng xem Hoạt động của tôi của người dùng.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizer")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.ActivityParty> Organizer
		{
			get
			{
				Microsoft.Xrm.Sdk.EntityCollection collection = this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityCollection>("organizer");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return System.Linq.Enumerable.Cast<Dev.DevKit.ProxyTypes.ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				if ((value == null))
				{
					this.SetAttributeValue("organizer", value);
				}
				else
				{
					this.SetAttributeValue("organizer", new Microsoft.Xrm.Sdk.EntityCollection(new System.Collections.Generic.List<Microsoft.Xrm.Sdk.Entity>(value)));
				}
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của chủ sở hữu chuỗi cuộc hẹn lặp lại Microsoft Office Outlook có tương quan với thuộc tính MAPI PR_OWNER_APPT_ID.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("outlookownerapptid")]
		public System.Nullable<int> OutlookOwnerApptId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("outlookownerapptid");
			}
			set
			{
				this.SetAttributeValue("outlookownerapptid", value);
			}
		}
		
		/// <summary>
		/// Ngày và giờ dịch chuyển bản ghi.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			set
			{
				this.SetAttributeValue("overriddencreatedon", value);
			}
		}
		
		/// <summary>
		/// Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			set
			{
				this.SetAttributeValue("ownerid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridname")]
		public string OwnerIdName
		{
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridyominame")]
		public string OwnerIdYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("ownerid"))
				{
					return this.FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của bơn vị kinh doanh sở hữu chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunitname")]
		public string OwningBusinessUnitName
		{
			get
			{
				if (this.FormattedValues.Contains("owningbusinessunit"))
				{
					return this.FormattedValues["owningbusinessunit"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của nhóm sở hữu chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của người dùng sở hữu chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Ngày kết thúc của phạm vi lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("patternenddate")]
		public System.Nullable<System.DateTime> PatternEndDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("patternenddate");
			}
			set
			{
				this.SetAttributeValue("patternenddate", value);
			}
		}
		
		/// <summary>
		/// Chọn loại ngày kết thúc cho cuộc hẹn lặp lại, như không có ngày kết thúc hoặc số lần xảy ra.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("patternendtype")]
		public virtual recurringappointmentmaster_patternendtype? PatternEndType
		{
			get
			{
				return ((recurringappointmentmaster_patternendtype?)(EntityOptionSetEnum.GetEnum(this, "patternendtype")));
			}
			set
			{
				this.SetAttributeValue("patternendtype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("patternendtypename")]
		public string PatternEndTypeName
		{
			get
			{
				if (this.FormattedValues.Contains("patternendtype"))
				{
					return this.FormattedValues["patternendtype"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Ngày bắt đầu của phạm vi lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("patternstartdate")]
		public System.Nullable<System.DateTime> PatternStartDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("patternstartdate");
			}
			set
			{
				this.SetAttributeValue("patternstartdate", value);
			}
		}
		
		/// <summary>
		/// Chọn mức ưu tiên sao cho khách hàng được ưu tiên hoặc những vấn đề nghiêm trọng sẽ được xử lý nhanh chóng.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("prioritycode")]
		public virtual recurringappointmentmaster_prioritycode? PriorityCode
		{
			get
			{
				return ((recurringappointmentmaster_prioritycode?)(EntityOptionSetEnum.GetEnum(this, "prioritycode")));
			}
			set
			{
				this.SetAttributeValue("prioritycode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("prioritycodename")]
		public string PriorityCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("prioritycode"))
				{
					return this.FormattedValues["prioritycode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Cho biết ID của quy trình.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processid")]
		public System.Nullable<System.Guid> ProcessId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("processid");
			}
			set
			{
				this.SetAttributeValue("processid", value);
			}
		}
		
		/// <summary>
		/// Chọn loại mẫu dành cho cuộc hẹn lặp lại để chỉ định cuộc hẹn xảy ra hàng ngày, hàng tuần, hàng tháng hay hàng năm.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("recurrencepatterntype")]
		public virtual recurringappointmentmaster_recurrencepatterntype? RecurrencePatternType
		{
			get
			{
				return ((recurringappointmentmaster_recurrencepatterntype?)(EntityOptionSetEnum.GetEnum(this, "recurrencepatterntype")));
			}
			set
			{
				this.SetAttributeValue("recurrencepatterntype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("recurrencepatterntypename")]
		public string RecurrencePatternTypeName
		{
			get
			{
				if (this.FormattedValues.Contains("recurrencepatterntype"))
				{
					return this.FormattedValues["recurrencepatterntype"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chọn bản ghi liên quan đến chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		public Microsoft.Xrm.Sdk.EntityReference RegardingObjectId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("regardingobjectid");
			}
			set
			{
				this.SetAttributeValue("regardingobjectid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectidname")]
		public string RegardingObjectIdName
		{
			get
			{
				if (this.FormattedValues.Contains("regardingobjectid"))
				{
					return this.FormattedValues["regardingobjectid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectidyominame")]
		public string RegardingObjectIdYomiName
		{
			get
			{
				if (this.FormattedValues.Contains("regardingobjectid"))
				{
					return this.FormattedValues["regardingobjectid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Nhập khách hàng, người liên hệ, khách hàng tiềm năng, người dùng hoặc nguồn lực thiết bị khác bắt buộc phải tham gia cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("requiredattendees")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.ActivityParty> RequiredAttendees
		{
			get
			{
				Microsoft.Xrm.Sdk.EntityCollection collection = this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityCollection>("requiredattendees");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return System.Linq.Enumerable.Cast<Dev.DevKit.ProxyTypes.ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				if ((value == null))
				{
					this.SetAttributeValue("requiredattendees", value);
				}
				else
				{
					this.SetAttributeValue("requiredattendees", new Microsoft.Xrm.Sdk.EntityCollection(new System.Collections.Generic.List<Microsoft.Xrm.Sdk.Entity>(value)));
				}
			}
		}
		
		/// <summary>
		/// Mã định danh duy nhất của quy tắc lặp lại có liên kết với chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ruleid")]
		public Microsoft.Xrm.Sdk.EntityReference RuleId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ruleid");
			}
		}
		
		/// <summary>
		/// Thời gian kết thúc theo lịch của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("scheduledend")]
		public System.Nullable<System.DateTime> ScheduledEnd
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("scheduledend");
			}
		}
		
		/// <summary>
		/// Thời gian bắt đầu theo lịch của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("scheduledstart")]
		public System.Nullable<System.DateTime> ScheduledStart
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("scheduledstart");
			}
		}
		
		/// <summary>
		/// Chỉ định chuỗi cuộc hẹn lặp lại là hiện hoạt hay không hoạt động.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("seriesstatus")]
		public System.Nullable<bool> SeriesStatus
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("seriesstatus");
			}
			set
			{
				this.SetAttributeValue("seriesstatus", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("seriesstatusname")]
		public string SeriesStatusName
		{
			get
			{
				if (this.FormattedValues.Contains("seriesstatus"))
				{
					return this.FormattedValues["seriesstatus"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Hiển thị ngày và giờ sắp xếp hoạt động.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sortdate")]
		public System.Nullable<System.DateTime> SortDate
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("sortdate");
			}
			set
			{
				this.SetAttributeValue("sortdate", value);
			}
		}
		
		/// <summary>
		/// Cho biết ID của giai đoạn.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("stageid")]
		public System.Nullable<System.Guid> StageId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("stageid");
			}
			set
			{
				this.SetAttributeValue("stageid", value);
			}
		}
		
		/// <summary>
		/// Thời gian bắt đầu của chuỗi cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("starttime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("starttime");
			}
			set
			{
				this.SetAttributeValue("starttime", value);
			}
		}
		
		/// <summary>
		/// Cho biết cuộc hẹn lặp lại ở trạng thái mở, đã lên lịch, đã hoàn thành hay bị hủy. Cuộc hẹn đã hoàn thành hoặc bị hủy sẽ có trạng thái chỉ đọc và không chỉnh sửa được.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public virtual recurringappointmentmaster_statecode? StateCode
		{
			get
			{
				return ((recurringappointmentmaster_statecode?)(EntityOptionSetEnum.GetEnum(this, "statecode")));
			}
			set
			{
				this.SetAttributeValue("statecode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecodename")]
		public string StateCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("statecode"))
				{
					return this.FormattedValues["statecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chọn trạng thái của cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual recurringappointmentmaster_statuscode? StatusCode
		{
			get
			{
				return ((recurringappointmentmaster_statuscode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			set
			{
				this.SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscodename")]
		public string StatusCodeName
		{
			get
			{
				if (this.FormattedValues.Contains("statuscode"))
				{
					return this.FormattedValues["statuscode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Nhập thể loại con để xác định loại cuộc hẹn lặp lại và liên kết hoạt động với sản phẩm cụ thể, khu vực bán hàng, nhóm kinh doanh hoặc chức năng khác.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subcategory")]
		public string Subcategory
		{
			get
			{
				return this.GetAttributeValue<string>("subcategory");
			}
			set
			{
				this.SetAttributeValue("subcategory", value);
			}
		}
		
		/// <summary>
		/// Nhập mô tả ngắn về mục tiêu hoặc chủ đề chính của cuộc hẹn lặp lại.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subject")]
		public string Subject
		{
			get
			{
				return this.GetAttributeValue<string>("subject");
			}
			set
			{
				this.SetAttributeValue("subject", value);
			}
		}
		
		/// <summary>
		/// Chỉ sử dụng nội bộ.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subscriptionid")]
		public System.Nullable<System.Guid> SubscriptionId
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("subscriptionid");
			}
			set
			{
				this.SetAttributeValue("subscriptionid", value);
			}
		}
		
		/// <summary>
		/// Chỉ sử dụng nội bộ.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public System.Nullable<int> TimeZoneRuleVersionNumber
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("timezoneruleversionnumber");
			}
			set
			{
				this.SetAttributeValue("timezoneruleversionnumber", value);
			}
		}
		
		/// <summary>
		/// Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyid")]
		public Microsoft.Xrm.Sdk.EntityReference TransactionCurrencyId
		{
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.SetAttributeValue("transactioncurrencyid", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyidname")]
		public string TransactionCurrencyIdName
		{
			get
			{
				if (this.FormattedValues.Contains("transactioncurrencyid"))
				{
					return this.FormattedValues["transactioncurrencyid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Chỉ sử dụng nội bộ.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("traversedpath")]
		public string TraversedPath
		{
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			set
			{
				this.SetAttributeValue("traversedpath", value);
			}
		}
		
		/// <summary>
		/// Mã múi giờ đã được sử dụng khi tạo bản ghi.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public System.Nullable<int> UTCConversionTimeZoneCode
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("utcconversiontimezonecode");
			}
			set
			{
				this.SetAttributeValue("utcconversiontimezonecode", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_actioncard
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_actioncard")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.ActionCard> recurringappointmentmaster_actioncard
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.ActionCard>("recurringappointmentmaster_actioncard", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.ActionCard>("recurringappointmentmaster_actioncard", null, value);
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_activity_parties
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_activity_parties")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.ActivityParty> recurringappointmentmaster_activity_parties
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.ActivityParty>("recurringappointmentmaster_activity_parties", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.ActivityParty>("recurringappointmentmaster_activity_parties", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_Annotation
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_Annotation")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.Annotation> RecurringAppointmentMaster_Annotation
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.Annotation>("RecurringAppointmentMaster_Annotation", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.Annotation>("RecurringAppointmentMaster_Annotation", null, value);
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_appointment
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_appointment")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.Appointment> recurringappointmentmaster_appointment
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.Appointment>("recurringappointmentmaster_appointment", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.Appointment>("recurringappointmentmaster_appointment", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_AsyncOperations
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_AsyncOperations")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.AsyncOperation> RecurringAppointmentMaster_AsyncOperations
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.AsyncOperation>("RecurringAppointmentMaster_AsyncOperations", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.AsyncOperation>("RecurringAppointmentMaster_AsyncOperations", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_BulkDeleteFailures
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_BulkDeleteFailures")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.BulkDeleteFailure> RecurringAppointmentMaster_BulkDeleteFailures
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.BulkDeleteFailure>("RecurringAppointmentMaster_BulkDeleteFailures", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.BulkDeleteFailure>("RecurringAppointmentMaster_BulkDeleteFailures", null, value);
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_connections1
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_connections1")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.Connection> recurringappointmentmaster_connections1
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.Connection>("recurringappointmentmaster_connections1", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.Connection>("recurringappointmentmaster_connections1", null, value);
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_connections2
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_connections2")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.Connection> recurringappointmentmaster_connections2
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.Connection>("recurringappointmentmaster_connections2", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.Connection>("recurringappointmentmaster_connections2", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_DuplicateBaseRecord
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_DuplicateBaseRecord")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.DuplicateRecord> RecurringAppointmentMaster_DuplicateBaseRecord
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.DuplicateRecord>("RecurringAppointmentMaster_DuplicateBaseRecord", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.DuplicateRecord>("RecurringAppointmentMaster_DuplicateBaseRecord", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_DuplicateMatchingRecord
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_DuplicateMatchingRecord")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.DuplicateRecord> RecurringAppointmentMaster_DuplicateMatchingRecord
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.DuplicateRecord>("RecurringAppointmentMaster_DuplicateMatchingRecord", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.DuplicateRecord>("RecurringAppointmentMaster_DuplicateMatchingRecord", null, value);
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_PostFollows
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_PostFollows")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.PostFollow> recurringappointmentmaster_PostFollows
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.PostFollow>("recurringappointmentmaster_PostFollows", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.PostFollow>("recurringappointmentmaster_PostFollows", null, value);
			}
		}
		
		/// <summary>
		/// 1:N recurringappointmentmaster_principalobjectattributeaccess
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurringappointmentmaster_principalobjectattributeaccess")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.PrincipalObjectAttributeAccess> recurringappointmentmaster_principalobjectattributeaccess
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.PrincipalObjectAttributeAccess>("recurringappointmentmaster_principalobjectattributeaccess", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.PrincipalObjectAttributeAccess>("recurringappointmentmaster_principalobjectattributeaccess", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_ProcessSessions
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_ProcessSessions")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.ProcessSession> RecurringAppointmentMaster_ProcessSessions
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.ProcessSession>("RecurringAppointmentMaster_ProcessSessions", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.ProcessSession>("RecurringAppointmentMaster_ProcessSessions", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_QueueItem
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_QueueItem")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.QueueItem> RecurringAppointmentMaster_QueueItem
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.QueueItem>("RecurringAppointmentMaster_QueueItem", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.QueueItem>("RecurringAppointmentMaster_QueueItem", null, value);
			}
		}
		
		/// <summary>
		/// 1:N RecurringAppointmentMaster_SyncErrors
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("RecurringAppointmentMaster_SyncErrors")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.SyncError> RecurringAppointmentMaster_SyncErrors
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.SyncError>("RecurringAppointmentMaster_SyncErrors", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.SyncError>("RecurringAppointmentMaster_SyncErrors", null, value);
			}
		}
		
		/// <summary>
		/// 1:N userentityinstancedata_recurringappointmentmaster
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("userentityinstancedata_recurringappointmentmaster")]
		public System.Collections.Generic.IEnumerable<Dev.DevKit.ProxyTypes.UserEntityInstanceData> userentityinstancedata_recurringappointmentmaster
		{
			get
			{
				return this.GetRelatedEntities<Dev.DevKit.ProxyTypes.UserEntityInstanceData>("userentityinstancedata_recurringappointmentmaster", null);
			}
			set
			{
				this.SetRelatedEntities<Dev.DevKit.ProxyTypes.UserEntityInstanceData>("userentityinstancedata_recurringappointmentmaster", null, value);
			}
		}
		
		/// <summary>
		/// N:1 Account_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("Account_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.Account Account_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.Account>("Account_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.Account>("Account_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 activity_pointer_recurringappointmentmaster
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activityid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("activity_pointer_recurringappointmentmaster")]
		public Dev.DevKit.ProxyTypes.ActivityPointer activity_pointer_recurringappointmentmaster
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.ActivityPointer>("activity_pointer_recurringappointmentmaster", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.ActivityPointer>("activity_pointer_recurringappointmentmaster", null, value);
			}
		}
		
		/// <summary>
		/// N:1 adx_invitation_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("adx_invitation_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.adx_invitation adx_invitation_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.adx_invitation>("adx_invitation_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.adx_invitation>("adx_invitation_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 business_unit_recurringappointmentmaster_activities
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("business_unit_recurringappointmentmaster_activities")]
		public Dev.DevKit.ProxyTypes.BusinessUnit business_unit_recurringappointmentmaster_activities
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.BusinessUnit>("business_unit_recurringappointmentmaster_activities", null);
			}
		}
		
		/// <summary>
		/// N:1 Contact_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("Contact_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.Contact Contact_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.Contact>("Contact_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.Contact>("Contact_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 KnowledgeArticle_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("KnowledgeArticle_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.KnowledgeArticle KnowledgeArticle_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.KnowledgeArticle>("KnowledgeArticle_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.KnowledgeArticle>("KnowledgeArticle_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 KnowledgeBaseRecord_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("KnowledgeBaseRecord_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.KnowledgeBaseRecord KnowledgeBaseRecord_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.KnowledgeBaseRecord>("KnowledgeBaseRecord_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.KnowledgeBaseRecord>("KnowledgeBaseRecord_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lk_recurringappointmentmaster_createdby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_recurringappointmentmaster_createdby")]
		public Dev.DevKit.ProxyTypes.SystemUser lk_recurringappointmentmaster_createdby
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.SystemUser>("lk_recurringappointmentmaster_createdby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_recurringappointmentmaster_createdonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_recurringappointmentmaster_createdonbehalfby")]
		public Dev.DevKit.ProxyTypes.SystemUser lk_recurringappointmentmaster_createdonbehalfby
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.SystemUser>("lk_recurringappointmentmaster_createdonbehalfby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_recurringappointmentmaster_modifiedby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_recurringappointmentmaster_modifiedby")]
		public Dev.DevKit.ProxyTypes.SystemUser lk_recurringappointmentmaster_modifiedby
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.SystemUser>("lk_recurringappointmentmaster_modifiedby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_recurringappointmentmaster_modifiedonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_recurringappointmentmaster_modifiedonbehalfby")]
		public Dev.DevKit.ProxyTypes.SystemUser lk_recurringappointmentmaster_modifiedonbehalfby
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.SystemUser>("lk_recurringappointmentmaster_modifiedonbehalfby", null);
			}
		}
		
		/// <summary>
		/// N:1 mspp_adplacement_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("mspp_adplacement_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.mspp_adplacement mspp_adplacement_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_adplacement>("mspp_adplacement_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_adplacement>("mspp_adplacement_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 mspp_pollplacement_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("mspp_pollplacement_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.mspp_pollplacement mspp_pollplacement_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_pollplacement>("mspp_pollplacement_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_pollplacement>("mspp_pollplacement_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 mspp_publishingstatetransitionrule_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("mspp_publishingstatetransitionrule_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.mspp_publishingstatetransitionrule mspp_publishingstatetransitionrule_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_publishingstatetransitionrule>("mspp_publishingstatetransitionrule_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_publishingstatetransitionrule>("mspp_publishingstatetransitionrule_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 mspp_redirect_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("mspp_redirect_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.mspp_redirect mspp_redirect_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_redirect>("mspp_redirect_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_redirect>("mspp_redirect_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 mspp_shortcut_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("mspp_shortcut_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.mspp_shortcut mspp_shortcut_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_shortcut>("mspp_shortcut_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_shortcut>("mspp_shortcut_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 mspp_website_RecurringAppointmentMasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("regardingobjectid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("mspp_website_RecurringAppointmentMasters")]
		public Dev.DevKit.ProxyTypes.mspp_website mspp_website_RecurringAppointmentMasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_website>("mspp_website_RecurringAppointmentMasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.mspp_website>("mspp_website_RecurringAppointmentMasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 processstage_recurringappointmentmasters
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("stageid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("processstage_recurringappointmentmasters")]
		public Dev.DevKit.ProxyTypes.ProcessStage processstage_recurringappointmentmasters
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.ProcessStage>("processstage_recurringappointmentmasters", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.ProcessStage>("processstage_recurringappointmentmasters", null, value);
			}
		}
		
		/// <summary>
		/// N:1 recurrencerule_recurringappointmentmaster
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activityid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("recurrencerule_recurringappointmentmaster")]
		public Dev.DevKit.ProxyTypes.RecurrenceRule recurrencerule_recurringappointmentmaster
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.RecurrenceRule>("recurrencerule_recurringappointmentmaster", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.RecurrenceRule>("recurrencerule_recurringappointmentmaster", null, value);
			}
		}
		
		/// <summary>
		/// N:1 team_recurringappointmentmaster
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("team_recurringappointmentmaster")]
		public Dev.DevKit.ProxyTypes.Team team_recurringappointmentmaster
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.Team>("team_recurringappointmentmaster", null);
			}
		}
		
		/// <summary>
		/// N:1 TransactionCurrency_RecurringAppointmentMaster
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyid")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_RecurringAppointmentMaster")]
		public Dev.DevKit.ProxyTypes.TransactionCurrency TransactionCurrency_RecurringAppointmentMaster
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.TransactionCurrency>("TransactionCurrency_RecurringAppointmentMaster", null);
			}
			set
			{
				this.SetRelatedEntity<Dev.DevKit.ProxyTypes.TransactionCurrency>("TransactionCurrency_RecurringAppointmentMaster", null, value);
			}
		}
		
		/// <summary>
		/// N:1 user_recurringappointmentmaster
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("user_recurringappointmentmaster")]
		public Dev.DevKit.ProxyTypes.SystemUser user_recurringappointmentmaster
		{
			get
			{
				return this.GetRelatedEntity<Dev.DevKit.ProxyTypes.SystemUser>("user_recurringappointmentmaster", null);
			}
		}
	}
}
#pragma warning restore CS1591
