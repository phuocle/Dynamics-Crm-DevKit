//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:27
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ImportFileOptionSets
{
	public enum DataDelimiterCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DoubleQuote</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DoubleQuote = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Khong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: SingleQuote</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		SingleQuote = 3
	}
	public enum FieldDelimiterCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu chấm phẩy</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Dau_cham_phay = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu hai chấm</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dau_hai_cham = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu phẩy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dau_phay = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tab</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tab = 3
	}
	public enum FileTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CSV</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		CSV = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tệp đính kèm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tep_dinh_kem = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang tính XML 2003</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Trang_tinh_XML_2003 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: XLSX</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		XLSX = 3
	}
	public enum ProcessCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bỏ qua</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bo_qua = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội bộ</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Noi_bo = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quy_trinh = 1
	}
	public enum ProcessingStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa bắt đầu</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chua_bat_dau = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Chủ sở hữu</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Chuyen_doi_Chu_so_huu = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Danh sách chọn</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Chuyen_doi_Danh_sach_chon = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Hoàn hành</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Chuyen_doi_Hoan_hanh = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Khóa Chính</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Chuyen_doi_Khoa_Chinh = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Phức hợp</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Chuyen_doi_Phuc_hop = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Tra cứu</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Chuyen_doi_Tra_cuu = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang phân tích</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_phan_tich = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập Chuyển qua 1</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Nhap_Chuyen_qua_1 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập Chuyển qua 2</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Nhap_Chuyen_qua_2 = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập Hoàn thành</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Nhap_Hoan_thanh = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phân tích Hoàn thành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Phan_tich_Hoan_thanh = 3
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã gửi</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_gui = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_hoan_thanh = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chuyển đổi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Dang_chuyen_doi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang nhập</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Dang_nhap = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang phân tích</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Dang_phan_tich = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Khong_thanh_cong = 5
	}
	public enum UpsertModeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bỏ qua</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bo_qua = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cập nhật</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cap_nhat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tao = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ImportFile : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalHeaderRow = "additionalheaderrow";
			public const string CompletedOn = "completedon";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataDelimiterCode = "datadelimitercode";
			public const string EnableDuplicateDetection = "enableduplicatedetection";
			public const string EntityKeyId = "entitykeyid";
			public const string FailureCount = "failurecount";
			public const string FieldDelimiterCode = "fielddelimitercode";
			public const string FileTypeCode = "filetypecode";
			public const string HeaderRow = "headerrow";
			public const string ImportFileId = "importfileid";
			public const string ImportId = "importid";
			public const string ImportMapId = "importmapid";
			public const string IsFirstRowHeader = "isfirstrowheader";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParsedTableColumnPrefix = "parsedtablecolumnprefix";
			public const string ParsedTableColumnsNumber = "parsedtablecolumnsnumber";
			public const string ParsedTableName = "parsedtablename";
			public const string PartialFailureCount = "partialfailurecount";
			public const string ProcessCode = "processcode";
			public const string ProcessingStatus = "processingstatus";
			public const string ProgressCounter = "progresscounter";
			public const string RecordsOwnerId = "recordsownerid";
			public const string RelatedEntityColumns = "relatedentitycolumns";
			public const string Size = "size";
			public const string Source = "source";
			public const string SourceEntityName = "sourceentityname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SuccessCount = "successcount";
			public const string TargetEntityName = "targetentityname";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalCount = "totalcount";
			public const string UpsertModeCode = "upsertmodecode";
			public const string UseSystemMap = "usesystemmap";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "importfile";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4412;
		public const string EntityCollectionSchemaName = "ImportFiles";
		public const string EntityDisplayCollectionName = "Nhập";
		public const string DisplayName = "Tệp Nguồn Nhập";
		public const string EntitySetName = "importfiles";
		public const string EntityLogicalCollectionName = "importfiles";
		public const string EntityPrimaryIdAttribute = "importfileid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "ImportFile";
		[DebuggerNonUserCode()]
		public ImportFile()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImportFile(Guid ImportFileId)
		{
			Entity = new Entity(EntityLogicalName, ImportFileId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImportFile(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImportFile"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ImportFile(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImportFile"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ImportFile(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ImportFile(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImportFile"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ImportFile(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ImportFile(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImportFile(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề Bổ sung</para>
		/// <para><strong>Description</strong>: Hiển thị các tiêu đề cột phụ. Các tiêu đề bổ sung được sử dụng trong quá trình biến đổi tệp nhập thành các bản ghi dữ liệu nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalHeaderRow
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalHeaderRow); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoàn thành Vào</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ hoàn thành công việc nhập được liên kết với tệp nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Lưu trữ nội dung của tệp nhập, được lưu trữ dưới dạng các giá trị được phân tách bằng dấu phẩy.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ đã chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu tách Dữ liệu</para>
		/// <para><strong>Description</strong>: Chọn dấu tách dữ liệu ký tự đơn được sử dụng trong tệp nhập. Đây thường là dấu ngoặc kép hoặc dấu nháy đơn.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode? DataDelimiterCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataDelimiterCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataDelimiterCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataDelimiterCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Phát hiện Sự trùng lặp</para>
		/// <para><strong>Description</strong>: Chọn liệu quy tắc phát hiện sự trùng lặp có được chạy cho công việc nhập hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableDuplicateDetection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableDuplicateDetection); }
			set { Entity.Attributes[Fields.EnableDuplicateDetection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Khóa Thực thể</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của ID Khóa thay thế</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityKeyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityKeyId); }
			set { Entity.Attributes[Fields.EntityKeyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Description</strong>: Hiển thị số lượng bản ghi trong tệp nhập không nhập được.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu tách Trường</para>
		/// <para><strong>Description</strong>: Chọn ký tự được sử dụng để phân tách từng trường trong tệp nhập. Thông thường là dấu phẩy.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode? FieldDelimiterCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FieldDelimiterCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FieldDelimiterCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FieldDelimiterCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Tệp</para>
		/// <para><strong>Description</strong>: Hiển thị loại tệp nguồn được tải lên để nhập.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode? FileTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FileTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FileTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FileTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Hiển thị danh sách từng tiêu đề cột trong tệp nhập được phân tách bằng dấu phẩy. Tiêu đề được sử dụng để phân tích tệp trong quá trình diễn ra công việc nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HeaderRow
		{
			get { return Entity.GetAttributeValue<string>(Fields.HeaderRow); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tệp nhập.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ImportFileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ImportFileId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Công việc Nhập</para>
		/// <para><strong>Description</strong>: Chọn công việc nhập mà tệp được tải lên.</para>
		/// <para><strong>Lookup</strong>: <see cref="import"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportId); }
			set { Entity.Attributes[Fields.ImportId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản đồ Dữ liệu</para>
		/// <para><strong>Description</strong>: Chọn bản đồ dữ liệu để khớp tệp nhập và các tiêu đề cột của tệp với các trường và loại bản ghi trong Microsoft Dynamics 365. Nếu tiêu đề cột trong tệp khớp với tên hiển thị của trường đích trong Microsoft Dynamics 365, chúng tôi sẽ tự động nhập dữ liệu. Nếu không, bạn có thể khớp theo cách thủ công trong quá trình nhập.</para>
		/// <para><strong>Lookup</strong>: <see cref="importmap"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportMapId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportMapId); }
			set { Entity.Attributes[Fields.ImportMapId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là Tiêu đề Hàng Đầu tiên</para>
		/// <para><strong>Description</strong>: Chọn liệu hàng đầu tiên của tệp nhập có chứa các tiêu đề cột hay không. Các tiêu đề này được sử dụng để ánh xạ dữ liệu trong quá trình diễn ra công việc nhập.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFirstRowHeader
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFirstRowHeader); }
			set { Entity.Attributes[Fields.IsFirstRowHeader] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi sau cùng. Ngày và giờ được hiển thị trong múi giờ đã chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Công việc Nhập</para>
		/// <para><strong>Description</strong>: Hiển thị tên của tệp nhập. Tên này dựa trên tên của tệp được tải lên.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng được gán để theo dõi hoặc quản lý tệp nhập. Trường này được cập nhật mỗi lần tệp nhập được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Cho biết đơn vị kinh doanh của chủ sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu tệp nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu tệp nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phân tích Tiền tố Cột trong Bảng</para>
		/// <para><strong>Description</strong>: Hiển thị tiền tố được áp dụng cho từng cột sau khi tệp nhập được phân tích.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableColumnPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableColumnPrefix); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phân tích Số lượng Cột trong Bảng</para>
		/// <para><strong>Description</strong>: Hiển thị số lượng cột được bao gồm trong tệp nhập được phân tích.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ParsedTableColumnsNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ParsedTableColumnsNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bảng Phân tích</para>
		/// <para><strong>Description</strong>: Hiển thị tên bảng chứa dữ liệu được phân tích từ tệp nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công Một phần</para>
		/// <para><strong>Description</strong>: Hiển thị số lượng bản ghi trong tệp này không nhập được trong quá trình nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PartialFailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PartialFailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết liệu tệp nhập sẽ bị bỏ qua hay được xử lý trong quá trình nhập.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode.Quy_trinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode? ProcessCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProcessCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProcessCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Xử lý</para>
		/// <para><strong>Description</strong>: Hiển thị mã trạng thái xử lý của tệp nhập. Mã này cho biết liệu dữ liệu trong tệp nhập đã được phân tích, biến đổi hay được nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus? ProcessingStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessingStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ đếm Tiến trình</para>
		/// <para><strong>Description</strong>: Hiển thị mã tiến trình cho quá trình xử lý tệp nhập. Trường này được sử dụng khi công việc nhập tạm dừng được tiếp tục.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProgressCounter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProgressCounter); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu Bản ghi</para>
		/// <para><strong>Description</strong>: Chọn người dùng mà bản ghi được tạo trong quá trình diễn ra công việc nhập sẽ được gán cho người dùng đó.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RecordsOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RecordsOwnerId); }
			set { Entity.Attributes[Fields.RecordsOwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Hiển thị các cột được ánh xạ tới loại bản ghi (thực thể) có liên quan của loại bản ghi (thực thể) chính được bao gồm trong tệp nhập.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedEntityColumns
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedEntityColumns); }
			set { Entity.Attributes[Fields.RelatedEntityColumns] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích thước</para>
		/// <para><strong>Description</strong>: Hiển thị kích thước của tệp nhập, theo kilobyte.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Size
		{
			get { return Entity.GetAttributeValue<string>(Fields.Size); }
			set { Entity.Attributes[Fields.Size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn</para>
		/// <para><strong>Description</strong>: Hiển thị tên của tệp nguồn dữ liệu được tải lên trong công việc nhập.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Source
		{
			get { return Entity.GetAttributeValue<string>(Fields.Source); }
			set { Entity.Attributes[Fields.Source] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể Nguồn</para>
		/// <para><strong>Description</strong>: Hiển thị loại bản ghi (thực thể) của dữ liệu nguồn.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceEntityName); }
			set { Entity.Attributes[Fields.SourceEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Hiển thị trạng thái của bản ghi tệp nhập. Theo mặc định, tất cả các bản ghi đều hiện hoạt và không thể bị hủy kích hoạt.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Hiển thị mã lý do giải thích trạng thái của tệp nhập để xác định giai đoạn của quá trình nhập, từ khi phân tích dữ liệu cho tới khi hoàn tất.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Description</strong>: Hiển thị số lượng bản ghi trong tệp nhập được nhập thành công.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SuccessCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SuccessCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể Đích</para>
		/// <para><strong>Description</strong>: Chọn loại bản ghi (thực thể) đích cho các bản ghi sẽ được tạo trong quá trình diễn ra công việc nhập.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TargetEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.TargetEntityName); }
			set { Entity.Attributes[Fields.TargetEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng số Được xử lý</para>
		/// <para><strong>Description</strong>: Hiển thị tổng số lượng bản ghi trong tệp nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TotalCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TotalCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ Upsert</para>
		/// <para><strong>Description</strong>: Chọn dữ liệu được dùng để xác định chế độ upsert. Chế độ này theo mặc định là Tạo.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode.Tao"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode? UpsertModeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpsertModeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpsertModeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpsertModeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng Bản đồ Hệ thống</para>
		/// <para><strong>Description</strong>: Cho biết liệu có áp dụng bản đồ hệ thống tự động cho tệp nhập hay không. Bản đồ này sẽ tự động ánh xạ dữ liệu nhập tới thực thể đích trong Microsoft Dynamics 365.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSystemMap
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSystemMap); }
			set { Entity.Attributes[Fields.UseSystemMap] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}