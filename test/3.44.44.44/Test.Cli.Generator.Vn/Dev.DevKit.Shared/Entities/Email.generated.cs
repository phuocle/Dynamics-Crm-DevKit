//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.EmailOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc gọi điện thoại</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Cuoc_goi_dien_thoai = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Cuoc_hen = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn lặp lại</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Cuoc_hen_lap_lai = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận xét Cổng thông tin</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Nhan_xet_Cong_thong_tin = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhiệm vụ</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Nhiem_vu = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy đổi Lời mời</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Quy_doi_Loi_moi = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư tín</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Thu_tin = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trò chuyện qua Teams</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Tro_chuyen_qua_Teams = 10_185
	}
	public enum CorrelationMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationIndex</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		ConversationIndex = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomCorrelation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		CustomCorrelation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bỏ qua</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_bo_qua = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: InReplyTo</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		InReplyTo = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: SmartMatching</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		SmartMatching = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: TrackingToken</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		TrackingToken = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: XHeader</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		XHeader = 2
	}
	public enum DeliveryPriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bình thường</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Binh_thuong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cao</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thấp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thap = 0
	}
	public enum EmailReminderStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: NotSet</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NotSet = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReminderExpired</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ReminderExpired = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReminderInvalid</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		ReminderInvalid = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReminderSet</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ReminderSet = 1
	}
	public enum EmailReminderType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Nếu email không được mở vào</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Neu_email_khong_duoc_mo_vao = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nếu tôi không nhận được thư trả lời vào</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Neu_toi_khong_nhan_duoc_thu_tra_loi_vao = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vẫn cứ nhắc tôi vào</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Van_cu_nhac_toi_vao = 2
	}
	public enum Notifications
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội dung bị cắt bớt.</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Noi_dung_bi_cat_bot = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư đã được lưu thành bản ghi email Microsoft Dynamics 365, nhưng không thể lưu tất cả các tệp đính kèm với thư. Không thể lưu một tệp đính kèm nếu tệp đó đã bị chặn hoặc loại tệp không hợp lệ.</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thu_da_duoc_luu_thanh_ban_ghi_email_Microsoft_Dynamics_365_nhung_khong_the_luu_tat_ca_cac_tep_dinh_kem_voi_thu_Khong_the_luu_mot_tep_dinh_kem_neu_tep_do_da_bi_chan_hoac_loai_tep_khong_hop_le = 1
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bình thường</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Binh_thuong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cao</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thấp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thap = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_hoan_thanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_huy = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mở</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Mo = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Ban_nhap = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã gửi</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_gui = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_hoan_thanh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Da_huy</strong></para>
		/// </summary>
		Da_huy = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã nhận</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_nhan = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ Gửi</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Dang_cho_Gui = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang gửi</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Dang_gui = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Khong_thanh_cong = 8
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Email : EntityBase
	{
		public struct Fields
		{
			public const string AcceptingEntityId = "acceptingentityid";
			public const string ActivityAdditionalParams = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActualDurationMinutes = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string AttachmentCount = "attachmentcount";
			public const string AttachmentOpenCount = "attachmentopencount";
			public const string BaseConversationIndexHash = "baseconversationindexhash";
			public const string bcc = "bcc";
			public const string Category = "category";
			public const string cc = "cc";
			public const string Compressed = "compressed";
			public const string ConversationIndex = "conversationindex";
			public const string ConversationTrackingId = "conversationtrackingid";
			public const string CorrelatedActivityId = "correlatedactivityid";
			public const string correlatedsubjectchanged = "correlatedsubjectchanged";
			public const string CorrelationMethod = "correlationmethod";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DelayedEmailSendTime = "delayedemailsendtime";
			public const string DeliveryAttempts = "deliveryattempts";
			public const string DeliveryPriorityCode = "deliveryprioritycode";
			public const string DeliveryReceiptRequested = "deliveryreceiptrequested";
			public const string Description = "description";
			public const string DescriptionBlobId = "descriptionblobid";
			public const string DescriptionBlobId_name = "descriptionblobid_name";
			public const string DirectionCode = "directioncode";
			public const string EmailReminderExpiryTime = "emailreminderexpirytime";
			public const string EmailReminderStatus = "emailreminderstatus";
			public const string EmailReminderText = "emailremindertext";
			public const string EmailReminderType = "emailremindertype";
			public const string EmailSender = "emailsender";
			public const string EmailTrackingId = "emailtrackingid";
			public const string ExchangeRate = "exchangerate";
			public const string FollowEmailUserPreference = "followemailuserpreference";
			public const string from = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InReplyTo = "inreplyto";
			public const string InternetMessageHeaders = "internetmessageheaders";
			public const string IsBilled = "isbilled";
			public const string IsDuplicateSenderUnresolved = "isduplicatesenderunresolved";
			public const string IsEmailFollowed = "isemailfollowed";
			public const string IsEmailReminderSet = "isemailreminderset";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsSafeDescriptionTruncated = "issafedescriptiontruncated";
			public const string IsUnsafe = "isunsafe";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastOpenedTime = "lastopenedtime";
			public const string LinksClickedCount = "linksclickedcount";
			public const string MessageId = "messageid";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string MessageIdDupCheck = "messageiddupcheck";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Notifications = "notifications";
			public const string OnHoldTime = "onholdtime";
			public const string OpenCount = "opencount";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentActivityId = "parentactivityid";
			public const string PostponeEmailProcessingUntil = "postponeemailprocessinguntil";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ReadReceiptRequested = "readreceiptrequested";
			public const string ReceivingMailboxId = "receivingmailboxid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string related = "related";
			public const string ReminderActionCardId = "reminderactioncardid";
			public const string ReplyCount = "replycount";
			public const string ReservedForInternalUse = "reservedforinternaluse";
			public const string ScheduledDurationMinutes = "scheduleddurationminutes";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string Sender = "sender";
			public const string SenderMailboxId = "sendermailboxid";
			public const string SendersAccount = "sendersaccount";
			public const string SentOn = "senton";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subcategory = "subcategory";
			public const string Subject = "subject";
			public const string SubmittedBy = "submittedby";
			public const string TemplateId = "templateid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string to = "to";
			public const string ToRecipients = "torecipients";
			public const string TrackingToken = "trackingtoken";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "email";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4202;
		public const string EntityCollectionSchemaName = "Emails";
		public const string EntityDisplayCollectionName = "Email";
		public const string DisplayName = "Email";
		public const string EntitySetName = "emails";
		public const string EntityLogicalCollectionName = "emails";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "Email";
		[DebuggerNonUserCode()]
		public Email()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Email(Guid EmailId)
		{
			Entity = new Entity(EntityLogicalName, EmailId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Email(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Email"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Email(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Email"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Email(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Email(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Email"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Email(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Email(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Email(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể chấp nhận</para>
		/// <para><strong>Description</strong>: Thực thể đã chấp nhận email</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AcceptingEntityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AcceptingEntityId); }
			set { Entity.Attributes[Fields.AcceptingEntityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham số Bổ sung</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
			set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hoạt động email.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Hoạt động</para>
		/// <para><strong>Description</strong>: Hiển thị loại hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian</para>
		/// <para><strong>Description</strong>: Nhập số phút cần để tạo và gửi email. Khoảng thời gian này được sử dụng trong báo cáo.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
			set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc Thực tế</para>
		/// <para><strong>Description</strong>: Nhập ngày và giờ kết thúc thực tế của email. Theo mặc định, trường này hiển thị ngày và giờ hoàn thành hoặc hủy hoạt động nhưng có thể chỉnh sửa trường này để thu thập thời gian tạo và gửi email thực tế.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu Thực tế</para>
		/// <para><strong>Description</strong>: Nhập ngày và giờ bắt đầu thực tế cho email. Theo mặc định, trường này hiển thị ngày và giờ tạo hoạt động nhưng có thể chỉnh sửa trường này để thu thập thời gian tạo và gửi email thực tế.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng Tệp đính kèm</para>
		/// <para><strong>Description</strong>: Hiển thị số lượng tệp đính kèm của email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AttachmentCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AttachmentCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng Mở Tệp đính kèm</para>
		/// <para><strong>Description</strong>: Cho biết số lần một tệp đính kèm email đã được xem.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AttachmentOpenCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AttachmentOpenCount); }
			set { Entity.Attributes[Fields.AttachmentOpenCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ mục Cuộc hội thoại (Hàm băm)</para>
		/// <para><strong>Description</strong>: Hàm băm gốc của chỉ mục cuộc hội thoại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BaseConversationIndexHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BaseConversationIndexHash); }
			set { Entity.Attributes[Fields.BaseConversationIndexHash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bcc</para>
		/// <para><strong>Description</strong>: Nhập người nhận được bao gồm trong danh sách gửi email nhưng không hiển thị cho người nhận khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> bcc
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.bcc).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.bcc] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại</para>
		/// <para><strong>Description</strong>: Nhập một thể loại để xác định loại email, chẳng hạn như liên hệ với khách hàng tiềm năng, theo dõi khách hàng hoặc thông báo dịch vụ, nhằm liên kết email với một chức năng hoặc nhóm kinh doanh.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cc</para>
		/// <para><strong>Description</strong>: Nhập người nhận sẽ được sao chép trên email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> cc
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.cc).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.cc] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nén</para>
		/// <para><strong>Description</strong>: Cho biết nội dung có được nén hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Nén</strong>]: true - [<strong>Không nén</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không nén</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Compressed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Compressed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ mục Cuộc hội thoại</para>
		/// <para><strong>Description</strong>: Mã định danh cho tất cả các email phản hồi cuộc hội thoại này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConversationIndex
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConversationIndex); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Theo dõi Cuộc hội thoại</para>
		/// <para><strong>Description</strong>: ID Theo dõi Cuộc hội thoại.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ConversationTrackingId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ConversationTrackingId); }
			set { Entity.Attributes[Fields.ConversationTrackingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID hoạt động có tương quan</para>
		/// <para><strong>Description</strong>: ID hoạt động có tương quan</para>
		/// <para><strong>Lookup</strong>: <see cref="email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CorrelatedActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CorrelatedActivityId); }
			set { Entity.Attributes[Fields.CorrelatedActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề tương quan đã thay đổi</para>
		/// <para><strong>Description</strong>: Cho biết nếu chủ đề đã thay đổi so với chủ đề của email tương quan</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? correlatedsubjectchanged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.correlatedsubjectchanged); }
			set { Entity.Attributes[Fields.correlatedsubjectchanged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức tương quan</para>
		/// <para><strong>Description</strong>: Hiển thị cách một email được ràng buộc với một email hiện có trong Microsoft Dynamics 365. XHeader và CustomCorrelation không được sử dụng. Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod.Khong_co"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod? CorrelationMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CorrelationMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gửi Sau</para>
		/// <para><strong>Description</strong>: Nhập ngày và giờ hết hạn dự kiến để gửi email.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DelayedEmailSendTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DelayedEmailSendTime); }
			set { Entity.Attributes[Fields.DelayedEmailSendTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Cố gắng Gửi</para>
		/// <para><strong>Description</strong>: Hiển thị số lần cố gắng gửi email đã được thực hiện. Số lần này được sử dụng làm chỉ số cho các sự cố định tuyến email.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DeliveryAttempts
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DeliveryAttempts); }
			set { Entity.Attributes[Fields.DeliveryAttempts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ưu tiên Gửi</para>
		/// <para><strong>Description</strong>: Chọn mức ưu tiên cho việc gửi email đến máy chủ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode.Binh_thuong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode? DeliveryPriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeliveryPriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeliveryPriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeliveryPriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yêu cầu Gửi Biên nhận</para>
		/// <para><strong>Description</strong>: Chọn liệu người gửi có nhận được xác nhận rằng email đã được gửi hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DeliveryReceiptRequested
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DeliveryReceiptRequested); }
			set { Entity.Attributes[Fields.DeliveryReceiptRequested] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập lời chào và nội dung email.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID tệp mô tả</para>
		/// <para><strong>Description</strong>: Tệp chứa nội dung mô tả.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DescriptionBlobId_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.DescriptionBlobId_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hướng</para>
		/// <para><strong>Description</strong>: Chọn hướng của email là đến hoặc đi.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đi</strong>]: true - [<strong>Đến</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đi</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DirectionCode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DirectionCode); }
			set { Entity.Attributes[Fields.DirectionCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Hết hạn Lời nhắc Email</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ lời nhắc email hết hạn.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EmailReminderExpiryTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EmailReminderExpiryTime); }
			set { Entity.Attributes[Fields.EmailReminderExpiryTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Lời nhắc Email</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái của lời nhắc email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus.NotSet"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus? EmailReminderStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailReminderStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn bản Lời nhắc Email</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailReminderText
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailReminderText); }
			set { Entity.Attributes[Fields.EmailReminderText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Lời nhắc Email</para>
		/// <para><strong>Description</strong>: Hiển thị loại lời nhắc email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType.Neu_toi_khong_nhan_duoc_thu_tra_loi_vao"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType? EmailReminderType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailReminderType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailReminderType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailReminderType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người gửi</para>
		/// <para><strong>Description</strong>: Hiển thị người gửi email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EmailSender
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EmailSender); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Theo dõi Email</para>
		/// <para><strong>Description</strong>: ID Theo dõi Email.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EmailTrackingId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EmailTrackingId); }
			set { Entity.Attributes[Fields.EmailTrackingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang theo dõi</para>
		/// <para><strong>Description</strong>: Chọn xem email có cho phép theo dõi hoạt động của người nhận được gửi từ Microsoft Dynamics 365 hay không. Đây là trạng thái tùy chọn của người dùng, có thể được trạng thái đánh giá hệ thống thay thế.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmailUserPreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmailUserPreference); }
			set { Entity.Attributes[Fields.FollowEmailUserPreference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ</para>
		/// <para><strong>Description</strong>: Nhập người gửi email.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> from
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.from).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.from] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trả lời Thư</para>
		/// <para><strong>Description</strong>: Nhập ID email mà hoạt động email này phản hồi tới.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InReplyTo
		{
			get { return Entity.GetAttributeValue<string>(Fields.InReplyTo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề thư Internet</para>
		/// <para><strong>Description</strong>: Chứa một tập hợp các tiêu đề trên Internet được liên kết với thư email ở định dạng JSON</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InternetMessageHeaders
		{
			get { return Entity.GetAttributeValue<string>(Fields.InternetMessageHeaders); }
			set { Entity.Attributes[Fields.InternetMessageHeaders] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được lập hóa đơn</para>
		/// <para><strong>Description</strong>: Thông tin liên quan tới việc liệu hoạt động email có được lập hóa đơn như là một phần trong việc giải quyết trường hợp hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người gửi trùng lặp chưa được giải quyết</para>
		/// <para><strong>Description</strong>: Cho biết người gửi email không xác định được trong trường hợp có nhiều kết quả trùng khớp</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateSenderUnresolved
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateSenderUnresolved); }
			set { Entity.Attributes[Fields.IsDuplicateSenderUnresolved] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã theo dõi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ Hiển thị xem email có được theo dõi hay không. Đây là trạng thái đánh giá thay thế lựa chọn theo dõi email của người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailFollowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailFollowed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đặt nhắc nhở</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ. Hiển thị khả năng Đặt Lời nhắc email này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailReminderSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailReminderSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động Thông thường</para>
		/// <para><strong>Description</strong>: Thông tin về việc hoạt động có loại hoạt động thông thường hay loại sự kiện.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsSafeDescriptionTruncated</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsSafeDescriptionTruncated
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsSafeDescriptionTruncated); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không an toàn</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsUnsafe
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsUnsafe); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình làm việc Được tạo</para>
		/// <para><strong>Description</strong>: Cho biết liệu email có được tạo bởi quy tắc quy trình hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạm giữ Gần đây nhất</para>
		/// <para><strong>Description</strong>: Chứa nhãn ngày và giờ của lần tạm giữ gần đây nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Mở Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ email đã được mở gần đây nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOpenedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOpenedTime); }
			set { Entity.Attributes[Fields.LastOpenedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Bấm vào Liên kết</para>
		/// <para><strong>Description</strong>: Cho biết số lần liên kết trong email đã được bấm vào.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LinksClickedCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LinksClickedCount); }
			set { Entity.Attributes[Fields.LinksClickedCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Thư</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của email. Chỉ sử dụng cho email được nhận.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessageId); }
			set { Entity.Attributes[Fields.MessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểm tra ID thư Trùng lặp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public Guid? MessageIdDupCheck
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.MessageIdDupCheck); }
			set { Entity.Attributes[Fields.MessageIdDupCheck] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Mime</para>
		/// <para><strong>Description</strong>: Loại MIME của dữ liệu email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo</para>
		/// <para><strong>Description</strong>: Chọn mã thông báo để xác định các sự cố xảy ra với người nhận email hoặc tệp đính kèm, chẳng hạn như các tệp đính kèm bị chặn.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications? Notifications
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Notifications);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Notifications] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Notifications] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạm giữ (Phút)</para>
		/// <para><strong>Description</strong>: Hiển thị khoảng thời gian tính bằng phút mà bản ghi bị tạm giữ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Mở</para>
		/// <para><strong>Description</strong>: Cho biết số lần email đã được mở.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OpenCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OpenCount); }
			set { Entity.Attributes[Fields.OpenCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu hoạt động email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu hoạt động email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu hoạt động email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Hoạt động Cha</para>
		/// <para><strong>Description</strong>: Chọn hoạt động mà email được liên kết với.</para>
		/// <para><strong>Lookup</strong>: <see cref="email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentActivityId); }
			set { Entity.Attributes[Fields.ParentActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn xử lý email cho đến</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeEmailProcessingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeEmailProcessingUntil); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn mức ưu tiên sao cho khách hàng được ưu tiên hoặc những vấn đề nghiêm trọng sẽ được xử lý nhanh chóng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode.Binh_thuong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yêu cầu Biên nhận Đã đọc</para>
		/// <para><strong>Description</strong>: Chỉ ra rằng biên nhận đã đọc được yêu cầu.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReadReceiptRequested
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReadReceiptRequested); }
			set { Entity.Attributes[Fields.ReadReceiptRequested] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư nhận</para>
		/// <para><strong>Description</strong>: Hộp thư đã nhận được email.</para>
		/// <para><strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ReceivingMailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ReceivingMailboxId); }
			set { Entity.Attributes[Fields.ReceivingMailboxId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Chọn bản ghi liên quan đến email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="asyncoperation"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có liên quan</para>
		/// <para><strong>Description</strong>: Nhập các bản ghi liên quan cho email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> related
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.related).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.related] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Thẻ Hành động Lời nhắc.</para>
		/// <para><strong>Description</strong>: ID Thẻ Hành động Lời nhắc.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ReminderActionCardId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ReminderActionCardId); }
			set { Entity.Attributes[Fields.ReminderActionCardId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Trả lời</para>
		/// <para><strong>Description</strong>: Cho biết số lần thư trả lời đã nhận được cho một email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ReplyCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ReplyCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dành riêng cho việc sử dụng nội bộ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 40,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReservedForInternalUse
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReservedForInternalUse); }
			set { Entity.Attributes[Fields.ReservedForInternalUse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian Theo lịch</para>
		/// <para><strong>Description</strong>: Khoảng thời gian theo lịch của hoạt động email, tính bằng phút.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Hết hạn</para>
		/// <para><strong>Description</strong>: Nhập ngày và giờ hết hạn dự kiến để hoàn thành hoạt động nhằm cung cấp chi tiết về thời gian email sẽ được gửi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Bắt đầu</para>
		/// <para><strong>Description</strong>: Nhập ngày và giờ bắt đầu dự kiến cho hoạt động để cung cấp chi tiết về thời gian tạm thời phải bắt đầu hoạt động email.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ</para>
		/// <para><strong>Description</strong>: Người gửi email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Sender
		{
			get { return Entity.GetAttributeValue<string>(Fields.Sender); }
			set { Entity.Attributes[Fields.Sender] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư của Người gửi</para>
		/// <para><strong>Description</strong>: Chọn hộp thư được liên kết với người gửi email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SenderMailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SenderMailboxId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản Người gửi</para>
		/// <para><strong>Description</strong>: Hiển thị tài khoản mẹ của người gửi email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SendersAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SendersAccount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Gửi</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ gửi email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SentOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SentOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận Cấp độ Dịch vụ</para>
		/// <para><strong>Description</strong>: Chọn thỏa thuận cấp độ dịch vụ (SLA) mà bạn muốn áp dụng cho bản ghi email.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận Cấp độ Dịch vụ cuối cùng đã áp dụng</para>
		/// <para><strong>Description</strong>: Thỏa thuận Cấp độ Dịch vụ lần cuối đã được áp dụng cho email này. Chỉ sử dụng nội bộ trường này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sắp xếp Ngày</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ sắp xếp hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Giai đoạn Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của giai đoạn.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Hoạt động</para>
		/// <para><strong>Description</strong>: Cho biết liệu email đang ở trạng thái mở, đã hoàn thành hay bị hủy. Các email đã hoàn thành và bị hủy ở trạng thái chỉ đọc và không chỉnh sửa được.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode.Mo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của email.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại Phụ</para>
		/// <para><strong>Description</strong>: Nhập thể loại phụ để xác định loại email và liên kết hoạt động với sản phẩm cụ thể, khu vực bán hàng, nhóm kinh doanh hoặc chức năng khác.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subcategory
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
			set { Entity.Attributes[Fields.Subcategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Description</strong>: Nhập nội dung mô tả ngắn về mục tiêu hoặc chủ đề chính của email.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 800</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gửi bởi</para>
		/// <para><strong>Description</strong>: Hiển thị tài khoản Microsoft Office Outlook cho người dùng đã gửi email tới Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubmittedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubmittedBy); }
			set { Entity.Attributes[Fields.SubmittedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID cho mẫu đã dùng.</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ. ID cho mẫu đã dùng trong email.</para>
		/// <para><strong>Lookup</strong>: <see cref="template"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TemplateId); }
			set { Entity.Attributes[Fields.TemplateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tới</para>
		/// <para><strong>Description</strong>: Nhập khách hàng, người liên hệ, khách hàng tiềm năng, hàng hoặc người dùng nhận email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> to
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.to).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.to] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tới Người nhận</para>
		/// <para><strong>Description</strong>: Hiển thị địa chỉ email tương ứng với người nhận.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ToRecipients
		{
			get { return Entity.GetAttributeValue<string>(Fields.ToRecipients); }
			set { Entity.Attributes[Fields.ToRecipients] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo Theo dõi</para>
		/// <para><strong>Description</strong>: Hiển thị mã thông báo theo dõi được gán cho email nhằm đảm bảo các email trả lời được tự động theo dõi trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TrackingToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.TrackingToken); }
			set { Entity.Attributes[Fields.TrackingToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Đường ngang</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}