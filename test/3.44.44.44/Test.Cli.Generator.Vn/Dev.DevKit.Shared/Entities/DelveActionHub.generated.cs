//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:09
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.DelveActionHubOptionSets
{
	public enum CardType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặc định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Mac_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: MeetingRequest</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		MeetingRequest = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: SendContentRequest</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		SendContentRequest = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: YesNo</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		YesNo = 2
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_hoan_thanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ xử lý</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dang_cho_xu_ly = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại bỏ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Loai_bo = 2
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_hoan_thanh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ xử lý</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Dang_cho_xu_ly</strong></para>
		/// </summary>
		Dang_cho_xu_ly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại bỏ</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Loai_bo</strong></para>
		/// </summary>
		Loai_bo = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DelveActionHub : EntityBase
	{
		public struct Fields
		{
			public const string CardType = "cardtype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedTime = "createdtime";
			public const string DelveActionHubId = "delveactionhubid";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string IconClassName = "iconclassname";
			public const string MailWebLink = "mailweblink";
			public const string MessageId = "messageid";
			public const string MessageTime = "messagetime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedTime = "modifiedtime";
			public const string OrganizationId = "organizationid";
			public const string RecordId = "recordid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RelatedMailIds = "relatedmailids";
			public const string Sender = "sender";
			public const string SenderEntityId = "senderentityid";
			public const string SenderEntityObjectTypeCode = "senderentityobjecttypecode";
			public const string SenderImageUrl = "senderimageurl";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subject = "subject";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "delveactionhub";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9961;
		public const string EntityCollectionSchemaName = "DelveActionHubs";
		public const string EntityDisplayCollectionName = "Hành động Thông minh";
		public const string DisplayName = "DelveActionHub";
		public const string EntitySetName = "delveactionhubs";
		public const string EntityLogicalCollectionName = "delveactionhub";
		public const string EntityPrimaryIdAttribute = "delveactionhubid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "DelveActionHub";
		[DebuggerNonUserCode()]
		public DelveActionHub()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DelveActionHub(Guid DelveActionHubId)
		{
			Entity = new Entity(EntityLogicalName, DelveActionHubId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DelveActionHub(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DelveActionHub"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public DelveActionHub(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DelveActionHub"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DelveActionHub(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DelveActionHub(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DelveActionHub"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DelveActionHub(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DelveActionHub(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DelveActionHub(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Thẻ</para>
		/// <para><strong>Description</strong>: Hiện loại thông báo.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.CardType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.CardType.Mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.CardType? CardType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CardType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.CardType)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hub Hành động Delve</para>
		/// <para><strong>Description</strong>: Hiển thị các phiên bản thực thể.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DelveActionHubId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DelveActionHubId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả Thẻ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Hiển thị tỷ giá của loại tiền được liên kết với hub hành động Delve theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên lớp biểu tượng</para>
		/// <para><strong>Description</strong>: Lưu trữ tên Lớp Biểu tượng của Thẻ ActionHub Delve.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconClassName
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconClassName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Liên kết Web Thư</para>
		/// <para><strong>Description</strong>: Hiển thị liên kết web thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MailWebLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.MailWebLink); }
			set { Entity.Attributes[Fields.MailWebLink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Thư</para>
		/// <para><strong>Description</strong>: Hiển thị email. Thông tin này chỉ dùng cho email nhận được.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessageId); }
			set { Entity.Attributes[Fields.MessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Thông báo</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ nhận được email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MessageTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MessageTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Tổ chức</para>
		/// <para><strong>Description</strong>: Hiển thị tổ chức sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RecordId</para>
		/// <para><strong>Description</strong>: Hiển thị ID bản ghi.</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RecordId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RecordId); }
			set { Entity.Attributes[Fields.RecordId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Chọn bản ghi liên quan đến email.</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Email Có liên quan</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedMailIds
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedMailIds); }
			set { Entity.Attributes[Fields.RelatedMailIds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ</para>
		/// <para><strong>Description</strong>: Nhập người gửi email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Sender
		{
			get { return Entity.GetAttributeValue<string>(Fields.Sender); }
			set { Entity.Attributes[Fields.Sender] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Bản ghi Người gửi</para>
		/// <para><strong>Description</strong>: ID bản ghi của thực thể người gửi.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SenderEntityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SenderEntityId); }
			set { Entity.Attributes[Fields.SenderEntityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Loại Đối tượng của Thực thể Người gửi</para>
		/// <para><strong>Description</strong>: Mã Loại Đối tượng của thực thể người gửi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SenderEntityObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SenderEntityObjectTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Ảnh Người gửi</para>
		/// <para><strong>Description</strong>: Hình ảnh của người gửi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SenderImageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.SenderImageUrl); }
			set { Entity.Attributes[Fields.SenderImageUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết bản ghi hành động Delve là đang chờ xử lý, đã hoàn thành hay đang theo dõi.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StateCode.Dang_cho_xu_ly"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái bản ghi hành động delve.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DelveActionHubOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề thông điệp</para>
		/// <para><strong>Description</strong>: Nhập mô tả ngắn về mục tiêu hoặc chủ đề chính của email.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị tiền tệ</para>
		/// <para><strong>Description</strong>: Hiển thị tỷ giá của loại tiền được liên kết với hub hành động Delve theo loại tiền gốc.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi theo UTC</para>
		/// <para><strong>Description</strong>: Hiển thị mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}