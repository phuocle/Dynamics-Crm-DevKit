//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:50
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.OrganizationStatisticOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OrganizationStatistic : EntityBase
	{
		public struct Fields
		{
			public const string Hour = "hour";
			public const string OrganizationStatisticId = "organizationstatisticid";
			public const string ServerName = "servername";
			public const string StatisticType = "statistictype";
			public const string StatisticValue = "statisticvalue";
		}
		public const string EntityLogicalName = "organizationstatistic";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4708;
		public const string EntityCollectionSchemaName = "OrganizationStatistic";
		public const string EntityDisplayCollectionName = "Thống kê về tổ chức";
		public const string DisplayName = "Thống kê về tổ chức";
		public const string EntitySetName = "organizationstatistics";
		public const string EntityLogicalCollectionName = "organizationstatistics";
		public const string EntityPrimaryIdAttribute = "organizationstatisticid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "OrganizationStatistic";
		[DebuggerNonUserCode()]
		public OrganizationStatistic()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OrganizationStatistic(Guid OrganizationStatisticId)
		{
			Entity = new Entity(EntityLogicalName, OrganizationStatisticId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OrganizationStatistic(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OrganizationStatistic"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public OrganizationStatistic(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OrganizationStatistic"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public OrganizationStatistic(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new OrganizationStatistic(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OrganizationStatistic"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public OrganizationStatistic(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new OrganizationStatistic(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OrganizationStatistic(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giờ</para>
		/// <para><strong>Description</strong>: Giờ thực hiện lấy số liệu thống kê.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Hour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Hour); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thống kê tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OrganizationStatisticId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên máy chủ</para>
		/// <para><strong>Description</strong>: Máy chủ sở hữu bản ghi này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ServerName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ServerName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại thống kê</para>
		/// <para><strong>Description</strong>: Loại thống kê đang lấy dữ liệu.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StatisticType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StatisticType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị thống kê</para>
		/// <para><strong>Description</strong>: Giá trị của thống kê.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StatisticValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StatisticValue); }
		}
	}
}