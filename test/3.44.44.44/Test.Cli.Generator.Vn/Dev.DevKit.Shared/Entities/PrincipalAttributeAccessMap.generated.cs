//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:52
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets
{
	public enum CreateAccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Cho_phep = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_cho_phep = 0
	}
	public enum ReadAccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Cho_phep = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_cho_phep = 0
	}
	public enum ReadUnMaskedAccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: All Records</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		All_Records = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Allowed</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Allowed = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: One Record</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		One_Record = 1
	}
	public enum UpdateAccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Cho_phep = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_cho_phep = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PrincipalAttributeAccessMap : EntityBase
	{
		public struct Fields
		{
			public const string AttributeId = "attributeid";
			public const string CreateAccess = "createaccess";
			public const string PrincipalAttributeAccessMapId = "principalattributeaccessmapid";
			public const string PrincipalId = "principalid";
			public const string ReadAccess = "readaccess";
			public const string ReadUnMaskedAccess = "readunmaskedaccess";
			public const string UpdateAccess = "updateaccess";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "principalattributeaccessmap";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 43;
		public const string EntityCollectionSchemaName = "PrincipalAttributeAccessMaps";
		public const string EntityDisplayCollectionName = "";
		public const string DisplayName = "";
		public const string EntitySetName = "principalattributeaccessmaps";
		public const string EntityLogicalCollectionName = "principalattributeaccessmaps";
		public const string EntityPrimaryIdAttribute = "principalattributeaccessmapid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "PrincipalAttributeAccessMap";
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Guid PrincipalAttributeAccessMapId)
		{
			Entity = new Entity(EntityLogicalName, PrincipalAttributeAccessMapId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalAttributeAccessMap"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalAttributeAccessMap"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PrincipalAttributeAccessMap(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalAttributeAccessMap"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PrincipalAttributeAccessMap(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalAttributeAccessMap(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AttributeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AttributeId); }
			set { Entity.Attributes[Fields.AttributeId] = value; }
		}
		/// <summary>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.CreateAccess"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.CreateAccess? CreateAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CreateAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.CreateAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreateAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CreateAccess] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của truy cập thuộc tính nguyên tắc.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PrincipalAttributeAccessMapId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PrincipalAttributeAccessMapId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrincipalId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrincipalId); }
			set { Entity.Attributes[Fields.PrincipalId] = value; }
		}
		/// <summary>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadAccess"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadAccess? ReadAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReadAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReadAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReadAccess] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadUnMaskedAccess"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadUnMaskedAccess.Not_Allowed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadUnMaskedAccess? ReadUnMaskedAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReadUnMaskedAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.ReadUnMaskedAccess)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.UpdateAccess"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.UpdateAccess? UpdateAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpdateAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalAttributeAccessMapOptionSets.UpdateAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpdateAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpdateAccess] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}