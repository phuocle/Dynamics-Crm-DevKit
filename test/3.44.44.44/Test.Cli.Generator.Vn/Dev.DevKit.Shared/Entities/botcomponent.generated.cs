//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:05
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.botcomponentOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum ComponentType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản dịch bot (V2)</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Ban_dich_bot_V2 = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Biến bot (V2)</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Bien_bot_V2 = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Biến số bot</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bien_so_bot = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chu_de = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề (V2)</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Chu_de_V2 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đính kèm tệp bot</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Dinh_kem_tep_bot = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: GPT tùy chỉnh</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		GPT_tuy_chinh = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiểu ngôn ngữ</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Hieu_ngon_ngu = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thoại</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Hop_thoai = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỹ năng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ky_nang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỹ năng (V2)</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Ky_nang_V2 = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lược đồ hộp thoại</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Luoc_do_hop_thoai = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn kiến thức</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Nguon_kien_thuc = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo ngôn ngữ</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Tao_ngon_ngu = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể bot</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thuc_the_bot = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể bot (V2)</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Thuc_the_bot_V2 = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trình kích hoạt</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Trinh_kich_hoat = 5
	}
	public enum Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ả Rập</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Tieng_A_Rap = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		Tieng_Anh = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh (Australia)</para>
		/// <para><strong>Value</strong>: 3,081</para>
		/// </summary>
		Tieng_Anh_Australia = 3_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh (Vương quốc Anh)</para>
		/// <para><strong>Value</strong>: 2,057</para>
		/// </summary>
		Tieng_Anh_Vuong_quoc_Anh = 2_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ba Lan</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Tieng_Ba_Lan = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Bồ Đào Nha (Brazil)</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Tieng_Bo_Dao_Nha_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đan Mạch</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Tieng_Dan_Mach = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đức</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		Tieng_Duc = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hà Lan</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Tieng_Ha_Lan = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hàn</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Tieng_Han = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hindi</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Tieng_Hindi = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hy Lạp</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Tieng_Hy_Lap = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Tieng_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Tieng_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Na Uy</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Tieng_Na_Uy = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nga</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Tieng_Nga = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nhật</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Tieng_Nhat = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Phần Lan</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Tieng_Phan_Lan = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		Tieng_Phap = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp (Canada)</para>
		/// <para><strong>Value</strong>: 3,084</para>
		/// </summary>
		Tieng_Phap_Canada = 3_084,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Séc</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Tieng_Sec = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha</para>
		/// <para><strong>Value</strong>: 1,034</para>
		/// </summary>
		Tieng_Tay_Ban_Nha = 1_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha (Hoa Kỳ)</para>
		/// <para><strong>Value</strong>: 21,514</para>
		/// </summary>
		Tieng_Tay_Ban_Nha_Hoa_Ky = 21_514,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thái</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Tieng_Thai = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thổ Nhĩ Kỳ</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Tieng_Tho_Nhi_Ky = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thụy Điển</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Tieng_Thuy_Dien = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung (Giản thể)</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Tieng_Trung_Gian_the = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung (Phồn thể)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Tieng_Trung_Phon_the = 1_028
	}
	public enum ReusePolicy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Công khai</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cong_khai = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Riêng tư</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Rieng_tu = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class botcomponent : EntityBase
	{
		public struct Fields
		{
			public const string AccentColor = "accentcolor";
			public const string botcomponentId = "botcomponentid";
			public const string Category = "category";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string ComponentType = "componenttype";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Data = "data";
			public const string Description = "description";
			public const string FileData = "filedata";
			public const string FileData_name = "filedata_name";
			public const string HelpLink = "helplink";
			public const string IconUrl = "iconurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string Language = "language";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentBotComponentCollectionId = "parentbotcomponentcollectionid";
			public const string ParentBotComponentId = "parentbotcomponentid";
			public const string ParentBotId = "parentbotid";
			public const string ReusePolicy = "reusepolicy";
			public const string SchemaName = "schemaname";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "botcomponent";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10153;
		public const string EntityCollectionSchemaName = "botcomponents";
		public const string EntityDisplayCollectionName = "Thành phần Copilot";
		public const string DisplayName = "Thành phần Copilot";
		public const string EntitySetName = "botcomponents";
		public const string EntityLogicalCollectionName = "botcomponents";
		public const string EntityPrimaryIdAttribute = "botcomponentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "botcomponent";
		[DebuggerNonUserCode()]
		public botcomponent()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public botcomponent(Guid botcomponentId)
		{
			Entity = new Entity(EntityLogicalName, botcomponentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public botcomponent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="botcomponent"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public botcomponent(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="botcomponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public botcomponent(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new botcomponent(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="botcomponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public botcomponent(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new botcomponent(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public botcomponent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu chủ đề</para>
		/// <para><strong>Description</strong>: Màu chủ đề cho thành phần có thể tái sử dụng lại này</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AccentColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.AccentColor); }
			set { Entity.Attributes[Fields.AccentColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BotComponent</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid botcomponentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.botcomponentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại</para>
		/// <para><strong>Description</strong>: Thể loại của thành phần copilot.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ComponentType</para>
		/// <para><strong>Description</strong>: Loại phụ của thành phần copilot.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType? ComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ComponentType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội dung</para>
		/// <para><strong>Description</strong>: Nội dung hoặc siêu dữ liệu của Thành phần Bot xác định cấu trúc và thuộc tính của nó.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu OBI</para>
		/// <para><strong>Description</strong>: Nội dung của Thành phần Bot ở định dạng OBI</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Chứa văn bản có thể tìm kiếm cho thành phần bot</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: filedata</para>
		/// <para><strong>Description</strong>: Đây là thuộc tính loại tệp để lưu trữ Tệp đính kèm.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileData_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileData_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường liên kết trợ giúp</para>
		/// <para><strong>Description</strong>: Liên kết để tìm hiểu thêm về thành phần này</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HelpLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.HelpLink); }
			set { Entity.Attributes[Fields.HelpLink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL biểu tượng</para>
		/// <para><strong>Description</strong>: URL biểu tượng cho thành phần này</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconUrl); }
			set { Entity.Attributes[Fields.IconUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ</para>
		/// <para><strong>Description</strong>: Ngôn ngữ của thành phần copilot</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language? Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên thực thể tùy chỉnh.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID Chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ParentBotComponentCollection</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho tuyển tập thành phần copilot được liên kết với thành phần copilot.</para>
		/// <para><strong>Lookup</strong>: <see cref="botcomponentcollection"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotComponentCollectionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotComponentCollectionId); }
			set { Entity.Attributes[Fields.ParentBotComponentCollectionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phần copilot chính</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho thành phần copilot được liên kết với thành phần copilot.</para>
		/// <para><strong>Lookup</strong>: <see cref="botcomponent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotComponentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotComponentId); }
			set { Entity.Attributes[Fields.ParentBotComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: parentbotid</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Bot được liên kết với Thành phần.</para>
		/// <para><strong>Lookup</strong>: <see cref="bot"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotId); }
			set { Entity.Attributes[Fields.ParentBotId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính sách tái sử dụng</para>
		/// <para><strong>Description</strong>: Chính sách tái sử dụng cho thành phần copilot</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy? ReusePolicy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReusePolicy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReusePolicy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReusePolicy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SchemaName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaName); }
			set { Entity.Attributes[Fields.SchemaName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của BotComponent</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của BotComponent</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản của quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}