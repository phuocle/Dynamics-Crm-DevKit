//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:56
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets
{
	public enum AuthType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ACS</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ACS = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuỗi Truy vấn Http</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Chuoi_Truy_van_Http = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Connection String</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Connection_String = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa SAS</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Khoa_SAS = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa Webhook</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khoa_Webhook = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo SAS</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ma_thong_bao_SAS = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phím truy nhập</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Phim_truy_nhap = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề Http</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Tieu_de_Http = 5
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum ConnectionMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bình thường</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Binh_thuong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hợp nhất</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_hop_nhat = 2
	}
	public enum Contract
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Chu_de = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Lake được quản lý</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Data_Lake_duoc_quan_ly = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng đợi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hang_doi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng đợi (Ổn định)</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Hang_doi_On_dinh = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lưới sự kiện</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Luoi_su_kien = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: OneWay</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		OneWay = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phần còn lại</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Phan_con_lai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trung tâm Sự kiện</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Trung_tam_Su_kien = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: TwoWay</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		TwoWay = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Webhook</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Webhook = 8
	}
	public enum MessageCharset
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặc định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Mac_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: UTF8</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		UTF8 = 1
	}
	public enum MessageFormat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Json</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Json = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn bản XML</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Van_ban_XML = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: XML nhị phân</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		XML_nhi_phan = 1
	}
	public enum NamespaceFormat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Vùng tên</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dia_chi_Vung_ten = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên của Vùng tên</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ten_cua_Vung_ten = 1
	}
	public enum SchemaType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lưới sự kiện</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Luoi_su_kien = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sự kiện đám mây</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Su_kien_dam_may = 2
	}
	public enum UserClaim
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: UserId</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		UserId = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: UserInfo</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		UserInfo = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ServiceEndpoint : EntityBase
	{
		public struct Fields
		{
			public const string AuthType = "authtype";
			public const string AuthValue = "authvalue";
			public const string ComponentState = "componentstate";
			public const string ConnectionMode = "connectionmode";
			public const string Contract = "contract";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string IntroducedVersion = "introducedversion";
			public const string IsAuthValueSet = "isauthvalueset";
			public const string IsManaged = "ismanaged";
			public const string IsSASKeySet = "issaskeyset";
			public const string IsSASTokenSet = "issastokenset";
			public const string KeyVaultReferenceId = "keyvaultreferenceid";
			public const string MessageCharset = "messagecharset";
			public const string MessageFormat = "messageformat";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NamespaceAddress = "namespaceaddress";
			public const string NamespaceFormat = "namespaceformat";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string Path = "path";
			public const string RuntimeIntegrationProperties = "runtimeintegrationproperties";
			public const string SASKey = "saskey";
			public const string SASKeyName = "saskeyname";
			public const string SASToken = "sastoken";
			public const string SchemaType = "schematype";
			public const string ServiceEndpointId = "serviceendpointid";
			public const string ServiceEndpointIdUnique = "serviceendpointidunique";
			public const string SolutionId = "solutionid";
			public const string SolutionNamespace = "solutionnamespace";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Url = "url";
			public const string UseKeyVaultConfiguration = "usekeyvaultconfiguration";
			public const string UserClaim = "userclaim";
		}
		public const string EntityLogicalName = "serviceendpoint";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4618;
		public const string EntityCollectionSchemaName = "ServiceEndpoints";
		public const string EntityDisplayCollectionName = "Điểm cuối dịch vụ";
		public const string DisplayName = "Điểm cuối dịch vụ";
		public const string EntitySetName = "serviceendpoints";
		public const string EntityLogicalCollectionName = "serviceendpoints";
		public const string EntityPrimaryIdAttribute = "serviceendpointid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "ServiceEndpoint";
		[DebuggerNonUserCode()]
		public ServiceEndpoint()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ServiceEndpoint(Guid ServiceEndpointId)
		{
			Entity = new Entity(EntityLogicalName, ServiceEndpointId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ServiceEndpoint(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ServiceEndpoint"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ServiceEndpoint(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ServiceEndpoint"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ServiceEndpoint(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ServiceEndpoint(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ServiceEndpoint"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ServiceEndpoint(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ServiceEndpoint(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ServiceEndpoint(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ định chế độ xác thực với SB</para>
		/// <para><strong>Description</strong>: Chỉ định chế độ xác thực với SB</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.AuthType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.AuthType? AuthType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AuthType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.AuthType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AuthType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AuthType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị Xác thực</para>
		/// <para><strong>Description</strong>: Giá trị Xác thực</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuthValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuthValue); }
			set { Entity.Attributes[Fields.AuthValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ kết nối</para>
		/// <para><strong>Description</strong>: Chế độ kết nối để liên lạc với điểm cuối dịch vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ConnectionMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ConnectionMode.Binh_thuong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ConnectionMode? ConnectionMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ConnectionMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.ConnectionMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ConnectionMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ConnectionMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp đồng</para>
		/// <para><strong>Description</strong>: Loại hợp đồng điểm cuối.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.Contract"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.Contract.OneWay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.Contract? Contract
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Contract);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.Contract)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Contract] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Contract] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo điểm cuối dịch vụ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo điểm cuối dịch vụ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo điểm cuối dịch vụ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả của điểm cuối dịch vụ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản được Giới thiệu</para>
		/// <para><strong>Description</strong>: Phiên bản có biểu mẫu được giới thiệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAuthValueSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAuthValueSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng quản lý thành phần này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSASKeySet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSASKeySet); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSASTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSASTokenSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KeyVaultReferenceId</para>
		/// <para><strong>Description</strong>: Unique identifier for keyvaultreference associated with serviceendpoint.</para>
		/// <para><strong>Lookup</strong>: <see cref="keyvaultreference"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference KeyVaultReferenceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.KeyVaultReferenceId); }
			set { Entity.Attributes[Fields.KeyVaultReferenceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ định phương thức mã hóa ký tự sẽ dùng cho các tin nhắn gửi đến một điểm cuối dịch vụ</para>
		/// <para><strong>Description</strong>: Chỉ định phương thức mã hóa ký tự cho nội dung tin nhắn</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageCharset"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageCharset? MessageCharset
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MessageCharset);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageCharset)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MessageCharset] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MessageCharset] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại nội dung thông báo</para>
		/// <para><strong>Description</strong>: Loại nội dung thông báo</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageFormat"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageFormat? MessageFormat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MessageFormat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.MessageFormat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MessageFormat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MessageFormat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi điểm cuối dịch vụ lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi điểm cuối dịch vụ lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa điểm cuối dịch vụ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của điểm cuối dịch vụ.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Vùng tên</para>
		/// <para><strong>Description</strong>: Địa chỉ điểm cuối dịch vụ đầy đủ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NamespaceAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.NamespaceAddress); }
			set { Entity.Attributes[Fields.NamespaceAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng của Vùng tên Service Bus</para>
		/// <para><strong>Description</strong>: Định dạng của Vùng tên Service Bus</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.NamespaceFormat"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.NamespaceFormat? NamespaceFormat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.NamespaceFormat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.NamespaceFormat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.NamespaceFormat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.NamespaceFormat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức có liên kết với điểm cuối dịch vụ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Ghi đè Bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường dẫn</para>
		/// <para><strong>Description</strong>: Đường dẫn đến điểm cuối dịch vụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Path
		{
			get { return Entity.GetAttributeValue<string>(Fields.Path); }
			set { Entity.Attributes[Fields.Path] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thuộc tính tích hợp thời gian chạy</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ. Giữ các thuộc tính chung liên quan đến tích hợp thời gian chạy.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RuntimeIntegrationProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.RuntimeIntegrationProperties); }
			set { Entity.Attributes[Fields.RuntimeIntegrationProperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa Truy cập được Chia sẻ</para>
		/// <para><strong>Description</strong>: Khóa Truy cập được Chia sẻ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SASKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.SASKey); }
			set { Entity.Attributes[Fields.SASKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Khóa Truy cập được Chia sẻ</para>
		/// <para><strong>Description</strong>: Tên Khóa Truy cập được Chia sẻ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SASKeyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SASKeyName); }
			set { Entity.Attributes[Fields.SASKeyName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo Truy cập được Chia sẻ</para>
		/// <para><strong>Description</strong>: Mã thông báo Truy cập được Chia sẻ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SASToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.SASToken); }
			set { Entity.Attributes[Fields.SASToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ định loại sơ đồ cho các sự kiện trong lưới sự kiện</para>
		/// <para><strong>Description</strong>: Chỉ định loại sơ đồ cho các sự kiện trong lưới sự kiện</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.SchemaType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.SchemaType? SchemaType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SchemaType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.SchemaType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SchemaType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SchemaType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của điểm cuối dịch vụ.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ServiceEndpointId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ServiceEndpointId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của điểm cuối dịch vụ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ServiceEndpointIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ServiceEndpointIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng tên dịch vụ</para>
		/// <para><strong>Description</strong>: Vùng tên của giải pháp App Fabric.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionNamespace
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionNamespace); }
			set { Entity.Attributes[Fields.SolutionNamespace] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Url</para>
		/// <para><strong>Description</strong>: Url điểm cuối dịch vụ đầy đủ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Url
		{
			get { return Entity.GetAttributeValue<string>(Fields.Url); }
			set { Entity.Attributes[Fields.Url] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use Auth Information in KeyVault</para>
		/// <para><strong>Description</strong>: Use Auth Information in KeyVault</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseKeyVaultConfiguration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseKeyVaultConfiguration); }
			set { Entity.Attributes[Fields.UseKeyVaultConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yêu cầu người dùng</para>
		/// <para><strong>Description</strong>: Loại giá trị của yêu cầu người dùng bổ sung.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.UserClaim"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.UserClaim.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.UserClaim? UserClaim
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UserClaim);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceEndpointOptionSets.UserClaim)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UserClaim] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UserClaim] = null;
			}
		}
	}
}