//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:57
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SharePointSiteOptionSets
{
	public enum FolderStructureEntity
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nguoi_lien_he = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tai_khoan = 1
	}
	public enum ServiceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Các nhóm MS</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Cac_nhom_MS = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Được chia sẻ với tôi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Duoc_chia_se_voi_toi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: OneDrive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		OneDrive = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: SharePoint</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		SharePoint = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
	public enum ValidationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa xác thực</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chua_xac_thuc = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_tien_hanh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp lệ</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Hop_le = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hợp lệ</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khong_hop_le = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thể xác thực</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Khong_the_xac_thuc = 5
	}
	public enum ValidationStatusErrorCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa xác thực URL của bản ghi này.</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chua_xac_thuc_URL_cua_ban_ghi_nay = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chứng chỉ không hợp lệ.</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Chung_chi_khong_hop_le = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thể truy cập URL do thiết đặt bảo mật của Internet Explorer.</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Khong_the_truy_cap_URL_do_thiet_dat_bao_mat_cua_Internet_Explorer = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi xác thực.</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Loi_xac_thuc = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sơ đồ URL của Microsoft Dynamics 365 và SharePoint khác nhau.</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		So_do_URL_cua_Microsoft_Dynamics_365_va_SharePoint_khac_nhau = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: URL của bản ghi này có hợp lệ.</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		URL_cua_ban_ghi_nay_co_hop_le = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: URL của bản ghi này không hợp lệ.</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		URL_cua_ban_ghi_nay_khong_hop_le = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SharePointSite : EntityBase
	{
		public struct Fields
		{
			public const string AbsoluteURL = "absoluteurl";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string FolderStructureEntity = "folderstructureentity";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefault = "isdefault";
			public const string IsGridPresent = "isgridpresent";
			public const string IsPowerBISite = "ispowerbisite";
			public const string LastValidated = "lastvalidated";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentSite = "parentsite";
			public const string RelativeUrl = "relativeurl";
			public const string ServiceType = "servicetype";
			public const string SharePointSiteId = "sharepointsiteid";
			public const string SiteCollectionId = "sitecollectionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UserId = "userid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string ValidationStatus = "validationstatus";
			public const string ValidationStatusErrorCode = "validationstatuserrorcode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "sharepointsite";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9502;
		public const string EntityCollectionSchemaName = "SharePointSites";
		public const string EntityDisplayCollectionName = "Trang SharePoint";
		public const string DisplayName = "Trang SharePoint";
		public const string EntitySetName = "sharepointsites";
		public const string EntityLogicalCollectionName = "sharepointsites";
		public const string EntityPrimaryIdAttribute = "sharepointsiteid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SharePointSite";
		[DebuggerNonUserCode()]
		public SharePointSite()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SharePointSite(Guid SharePointSiteId)
		{
			Entity = new Entity(EntityLogicalName, SharePointSiteId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SharePointSite(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SharePointSite"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SharePointSite(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SharePointSite"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SharePointSite(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SharePointSite(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SharePointSite"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SharePointSite(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SharePointSite(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SharePointSite(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL tuyệt đối</para>
		/// <para><strong>Description</strong>: URL tuyệt đối của trang SharePoint.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AbsoluteURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.AbsoluteURL); }
			set { Entity.Attributes[Fields.AbsoluteURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày giờ tạo bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả của bản ghi trang SharePoint.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá giữa loại tiền đã liên kết với bản ghi trang SharePoint và loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể cho cấu trúc thư mục SharePoint</para>
		/// <para><strong>Description</strong>: Thực thể mà hệ thống sẽ tạo cấu trúc thư mục trên đó cho bản ghi Microsoft Dynamics 365 trong SharePoint.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FolderStructureEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.FolderStructureEntity); }
			set { Entity.Attributes[Fields.FolderStructureEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang mặc định</para>
		/// <para><strong>Description</strong>: Cho biết trang SharePoint có phải là trang mặc định hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hệ thống đã cài đặt thành phần danh sách</para>
		/// <para><strong>Description</strong>: Cho biết khả năng hiển thị Lưới SharePoint.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsGridPresent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsGridPresent); }
			set { Entity.Attributes[Fields.IsGridPresent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép Nhúng Báo cáo Power BI</para>
		/// <para><strong>Description</strong>: Cho phép nhúng Báo cáo Power BI có trong trang web SharePoint này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPowerBISite
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPowerBISite); }
			set { Entity.Attributes[Fields.IsPowerBISite] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực lần cuối</para>
		/// <para><strong>Description</strong>: Ngày giờ xác thực URL trang SharePoint lần cuối.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastValidatedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastValidated); }
			set { Entity.Attributes[Fields.LastValidated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi bản ghi trang SharePoint lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày giờ sửa bản ghi trang SharePoint lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của bản ghi trang SharePoint.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu trang SharePoint.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất dành cho bơn vị kinh doanh sở hữu bản ghi vị trí tài liệu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang mẹ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của trang SharePoint mẹ.</para>
		/// <para><strong>Lookup</strong>: <see cref="sharepointsite"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSite
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSite); }
			set { Entity.Attributes[Fields.ParentSite] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL tương đối</para>
		/// <para><strong>Description</strong>: URL tương đối của trang SharePoint.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelativeUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelativeUrl); }
			set { Entity.Attributes[Fields.RelativeUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Dịch vụ</para>
		/// <para><strong>Description</strong>: Cho biết loại dịch vụ cho vị trí của trang web SharePoint.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ServiceType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ServiceType.SharePoint"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ServiceType? ServiceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ServiceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID trang SharePoint</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của trang SharePoint trong Dynamics 365</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SharePointSiteId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SharePointSiteId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SiteCollectionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SiteCollectionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của bản ghi trang SharePoint.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của bản ghi trang SharePoint.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của loại tiền đã liên kết với bản ghi trang SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu Trang web SharePoint</para>
		/// <para><strong>Description</strong>: Chọn người dùng sở hữu trang web SharePoint.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserId); }
			set { Entity.Attributes[Fields.UserId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái xác thực lần cuối</para>
		/// <para><strong>Description</strong>: Trạng thái xác thực của URL trang SharePoint.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatus.Chua_xac_thuc"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatus? ValidationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ValidationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ValidationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ValidationStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin bổ sung</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái xác thực của URL</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatusErrorCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatusErrorCode.Chua_xac_thuc_URL_cua_ban_ghi_nay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatusErrorCode? ValidationStatusErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ValidationStatusErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointSiteOptionSets.ValidationStatusErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ValidationStatusErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ValidationStatusErrorCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}