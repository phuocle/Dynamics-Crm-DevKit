//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:08
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.CustomerAddressOptionSets
{
	public enum AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Chinh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khac = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận hàng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nhan_hang = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận hóa đơn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nhan_hoa_don = 1
	}
	public enum FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảng giao hàng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cang_giao_hang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Miễn phí</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mien_phi = 2
	}
	public enum ObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nguoi_lien_he = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tai_khoan = 1
	}
	public enum ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ đặt hàng trước</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Ban_le_dat_hang_truoc = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyên chở bằng máy bay</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chuyen_cho_bang_may_bay = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầy tải</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Day_tai = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DHL</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		DHL = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FedEx</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư gửi bưu điện</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu_gui_buu_dien = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: UPS</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		UPS = 4
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CustomerAddress : EntityBase
	{
		public struct Fields
		{
			public const string AddressNumber = "addressnumber";
			public const string AddressTypeCode = "addresstypecode";
			public const string City = "city";
			public const string Composite = "composite";
			public const string Country = "country";
			public const string County = "county";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerAddressId = "customeraddressid";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FreightTermsCode = "freighttermscode";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Latitude = "latitude";
			public const string Line1 = "line1";
			public const string Line2 = "line2";
			public const string Line3 = "line3";
			public const string Longitude = "longitude";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ParentId = "parentid";
			public const string PostalCode = "postalcode";
			public const string PostOfficeBox = "postofficebox";
			public const string PrimaryContactName = "primarycontactname";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string StateOrProvince = "stateorprovince";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UPSZone = "upszone";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string UTCOffset = "utcoffset";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "customeraddress";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1071;
		public const string EntityCollectionSchemaName = "CustomerAddresses";
		public const string EntityDisplayCollectionName = "Địa chỉ";
		public const string DisplayName = "Địa chỉ";
		public const string EntitySetName = "customeraddresses";
		public const string EntityLogicalCollectionName = "customeraddresses";
		public const string EntityPrimaryIdAttribute = "customeraddressid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "CustomerAddress";
		[DebuggerNonUserCode()]
		public CustomerAddress()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CustomerAddress(Guid CustomerAddressId)
		{
			Entity = new Entity(EntityLogicalName, CustomerAddressId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CustomerAddress(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CustomerAddress"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public CustomerAddress(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CustomerAddress"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CustomerAddress(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CustomerAddress(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CustomerAddress"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CustomerAddress(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CustomerAddress(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CustomerAddress(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Địa chỉ</para>
		/// <para><strong>Description</strong>: Cho biết số địa chỉ, nhằm biểu thị địa chỉ là chính, phụ hay địa chỉ khác cho khách hàng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AddressNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AddressNumber); }
			set { Entity.Attributes[Fields.AddressNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Chọn loại địa chỉ, chẳng hạn như chính hoặc thanh toán.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.AddressTypeCode? AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phố</para>
		/// <para><strong>Description</strong>: Nhập thành phố cho địa chỉ của khách hàng nhằm giúp xác định vị trí.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string City
		{
			get { return Entity.GetAttributeValue<string>(Fields.City); }
			set { Entity.Attributes[Fields.City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: Nhập quốc gia hoặc khu vực cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Country); }
			set { Entity.Attributes[Fields.Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hạt</para>
		/// <para><strong>Description</strong>: Nhập hạt cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string County
		{
			get { return Entity.GetAttributeValue<string>(Fields.County); }
			set { Entity.Attributes[Fields.County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của địa chỉ khách hàng.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CustomerAddressId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CustomerAddressId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax liên kết với địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điều khoản Vận chuyển hàng hóa</para>
		/// <para><strong>Description</strong>: Chọn điều khoản vận chuyển hàng hóa để đảm bảo phí giao hàng được xử lý chính xác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.FreightTermsCode? FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vĩ độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị vĩ độ cho địa chỉ của khách hàng để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Latitude); }
			set { Entity.Attributes[Fields.Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phố 1</para>
		/// <para><strong>Description</strong>: Nhập dòng đầu tiên cho địa chỉ của khách hàng nhằm giúp xác định vị trí.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line1); }
			set { Entity.Attributes[Fields.Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phố 2</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ hai cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line2); }
			set { Entity.Attributes[Fields.Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phố 3</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ ba cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line3); }
			set { Entity.Attributes[Fields.Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kinh độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị kinh độ cho địa chỉ của khách hàng để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Longitude); }
			set { Entity.Attributes[Fields.Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Địa chỉ</para>
		/// <para><strong>Description</strong>: Nhập tên mô tả cho địa chỉ của khách hàng, chẳng hạn như Trụ sở chính của Tập đoàn.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại đối tượng</para>
		/// <para><strong>Description</strong>: Cho biết mã loại của bản ghi khách hàng nhằm biểu thị địa chỉ đó thuộc về tài khoản khách hàng hay người liên hệ.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Cho biết đơn vị kinh doanh của chủ sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu địa chỉ khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Cha</para>
		/// <para><strong>Description</strong>: Chọn địa chỉ của khách hàng.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentId); }
			set { Entity.Attributes[Fields.ParentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Nhập Mã ZIP hoặc mã bưu điện cho địa chỉ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostalCode); }
			set { Entity.Attributes[Fields.PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hòm Thư</para>
		/// <para><strong>Description</strong>: Nhập số hòm thư cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostOfficeBox); }
			set { Entity.Attributes[Fields.PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ theo Địa chỉ</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ chính cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryContactName); }
			set { Entity.Attributes[Fields.PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CustomerAddressOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: Nhập bang hoặc tỉnh cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.StateOrProvince); }
			set { Entity.Attributes[Fields.StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Chính</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba cho địa chỉ của khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng UPS</para>
		/// <para><strong>Description</strong>: Nhập vùng UPS cho địa chỉ của khách hàng để đảm bảo phí vận chuyển được tính chính xác và hàng được giao kịp thời nếu giao bằng UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.UPSZone); }
			set { Entity.Attributes[Fields.UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Chọn múi giờ cho địa chỉ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCOffset); }
			set { Entity.Attributes[Fields.UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của địa chỉ khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}