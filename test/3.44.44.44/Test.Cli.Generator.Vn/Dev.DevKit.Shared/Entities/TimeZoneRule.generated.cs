//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.TimeZoneRuleOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TimeZoneRule : EntityBase
	{
		public struct Fields
		{
			public const string Bias = "bias";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DaylightBias = "daylightbias";
			public const string DaylightDay = "daylightday";
			public const string DaylightDayOfWeek = "daylightdayofweek";
			public const string DaylightHour = "daylighthour";
			public const string DaylightMinute = "daylightminute";
			public const string DaylightMonth = "daylightmonth";
			public const string DaylightSecond = "daylightsecond";
			public const string DaylightYear = "daylightyear";
			public const string EffectiveDateTime = "effectivedatetime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string StandardBias = "standardbias";
			public const string StandardDay = "standardday";
			public const string StandardDayOfWeek = "standarddayofweek";
			public const string StandardHour = "standardhour";
			public const string StandardMinute = "standardminute";
			public const string StandardMonth = "standardmonth";
			public const string StandardSecond = "standardsecond";
			public const string StandardYear = "standardyear";
			public const string TimeZoneDefinitionId = "timezonedefinitionid";
			public const string TimeZoneRuleId = "timezoneruleid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "timezonerule";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4811;
		public const string EntityCollectionSchemaName = "TimeZoneRules";
		public const string EntityDisplayCollectionName = "Các quy tắc múi giờ";
		public const string DisplayName = "Quy tắc múi giờ";
		public const string EntitySetName = "timezonerules";
		public const string EntityLogicalCollectionName = "timezonerules";
		public const string EntityPrimaryIdAttribute = "timezoneruleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "timezoneruleversionnumber";
		public const string EntitySchemaName = "TimeZoneRule";
		[DebuggerNonUserCode()]
		public TimeZoneRule()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TimeZoneRule(Guid TimeZoneRuleId)
		{
			Entity = new Entity(EntityLogicalName, TimeZoneRuleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TimeZoneRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TimeZoneRule"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public TimeZoneRule(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TimeZoneRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TimeZoneRule(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TimeZoneRule(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TimeZoneRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TimeZoneRule(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TimeZoneRule(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TimeZoneRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiên về</para>
		/// <para><strong>Description</strong>: Thiên về thời gian cơ bản của quy tắc múi giờ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Bias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Bias); }
			set { Entity.Attributes[Fields.Bias] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo quy tắc múi giờ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày giờ tạo quy tắc múi giờ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo timezonerule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiên về giờ mùa hè</para>
		/// <para><strong>Description</strong>: Thiên về giờ bổ sung vào thiên về giờ cơ sở cho quy ước giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightBias); }
			set { Entity.Attributes[Fields.DaylightBias] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tính theo giờ mùa hè</para>
		/// <para><strong>Description</strong>: Ngày của tháng bắt đầu tính theo giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 31</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightDay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightDay); }
			set { Entity.Attributes[Fields.DaylightDay] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tính theo giờ mùa hè của tuần</para>
		/// <para><strong>Description</strong>: Ngày của tuần bắt đầu tính theo giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightDayOfWeek); }
			set { Entity.Attributes[Fields.DaylightDayOfWeek] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giờ tính theo giờ mùa hè</para>
		/// <para><strong>Description</strong>: Giờ của ngày bắt đầu tính theo giờ mùa hè</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 23</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightHour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightHour); }
			set { Entity.Attributes[Fields.DaylightHour] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phút tính theo giờ mùa hè</para>
		/// <para><strong>Description</strong>: Phút của giờ bắt đầu tính theo giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 59</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightMinute
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightMinute); }
			set { Entity.Attributes[Fields.DaylightMinute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng tính theo giờ mùa hè</para>
		/// <para><strong>Description</strong>: Tháng bắt đầu tính theo giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 12</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightMonth); }
			set { Entity.Attributes[Fields.DaylightMonth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giây tính theo giờ mùa hè</para>
		/// <para><strong>Description</strong>: Giây phút bắt đầu tính theo giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 59</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightSecond
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightSecond); }
			set { Entity.Attributes[Fields.DaylightSecond] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm tính theo giờ mùa hè</para>
		/// <para><strong>Description</strong>: Năm bắt đầu tính theo giờ mùa hè.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 32,768</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaylightYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaylightYear); }
			set { Entity.Attributes[Fields.DaylightYear] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giờ và ngày có hiệu lực</para>
		/// <para><strong>Description</strong>: Thời điểm quy tắc này có hiệu lực, theo giờ địa phương.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveDateTime); }
			set { Entity.Attributes[Fields.EffectiveDateTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa quy tắc múi giờ lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày giờ sửa đổi quy tắc múi giờ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi timezonerule lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với quy tắc múi giờ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiên về giờ chuẩn</para>
		/// <para><strong>Description</strong>: Thiên về giờ bổ sung vào thiên về giờ cơ sở cho giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardBias
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardBias); }
			set { Entity.Attributes[Fields.StandardBias] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày chuẩn</para>
		/// <para><strong>Description</strong>: Ngày của tháng bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 31</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardDay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardDay); }
			set { Entity.Attributes[Fields.StandardDay] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày chuẩn của tuần</para>
		/// <para><strong>Description</strong>: Ngày của tuần bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardDayOfWeek); }
			set { Entity.Attributes[Fields.StandardDayOfWeek] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giờ chuẩn</para>
		/// <para><strong>Description</strong>: Giờ của ngày bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 23</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardHour
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardHour); }
			set { Entity.Attributes[Fields.StandardHour] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phút chuẩn</para>
		/// <para><strong>Description</strong>: Phút của giờ bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 59</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardMinute
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardMinute); }
			set { Entity.Attributes[Fields.StandardMinute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng chuẩn</para>
		/// <para><strong>Description</strong>: Tháng bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 12</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardMonth); }
			set { Entity.Attributes[Fields.StandardMonth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giây chuẩn</para>
		/// <para><strong>Description</strong>: Giây Phút bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 59</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardSecond
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardSecond); }
			set { Entity.Attributes[Fields.StandardSecond] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm chuẩn</para>
		/// <para><strong>Description</strong>: Năm bắt đầu tính theo giờ chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 32,768</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StandardYear
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StandardYear); }
			set { Entity.Attributes[Fields.StandardYear] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định nghĩa múi giờ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của định nghĩa múi giờ.</para>
		/// <para><strong>Lookup</strong>: <see cref="timezonedefinition"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TimeZoneDefinitionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TimeZoneDefinitionId); }
			set { Entity.Attributes[Fields.TimeZoneDefinitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quy tắc múi giờ.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TimeZoneRuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TimeZoneRuleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ</para>
		/// <para><strong>Primary Name</strong>: <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}