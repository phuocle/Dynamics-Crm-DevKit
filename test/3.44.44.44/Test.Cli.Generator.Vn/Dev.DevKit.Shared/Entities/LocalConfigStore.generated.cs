//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.LocalConfigStoreOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class LocalConfigStore : EntityBase
	{
		public struct Fields
		{
			public const string AssemblyName = "assemblyname";
			public const string Id = "id";
			public const string IsValueSet = "isvalueset";
			public const string KeyName = "keyname";
			public const string PublicToken = "publictoken";
			public const string Value = "value";
		}
		public const string EntityLogicalName = "localconfigstore";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9201;
		public const string EntityCollectionSchemaName = "LocalConfigStores";
		public const string EntityDisplayCollectionName = "LocalConfigStore";
		public const string DisplayName = "LocalConfigStore";
		public const string EntitySetName = "localconfigstores";
		public const string EntityLogicalCollectionName = "localconfigstores";
		public const string EntityPrimaryIdAttribute = "id";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "LocalConfigStore";
		[DebuggerNonUserCode()]
		public LocalConfigStore()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public LocalConfigStore(Guid LocalConfigStoreId)
		{
			Entity = new Entity(EntityLogicalName, LocalConfigStoreId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public LocalConfigStore(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="LocalConfigStore"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public LocalConfigStore(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="LocalConfigStore"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public LocalConfigStore(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new LocalConfigStore(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="LocalConfigStore"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public LocalConfigStore(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new LocalConfigStore(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public LocalConfigStore(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên cụm tổ hợp</para>
		/// <para><strong>Description</strong>: Tên cụm tổ hợp</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AssemblyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AssemblyName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mục nhập LocalConfigStore.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Id2
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Id); }
			set { Entity.Attributes[Fields.Id] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsValueSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsValueSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Khóa</para>
		/// <para><strong>Description</strong>: Tên Khóa</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KeyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.KeyName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo Công khai Cụm tổ hợp</para>
		/// <para><strong>Description</strong>: Mã thông báo Công khai Cụm tổ hợp</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PublicToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.PublicToken); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị</para>
		/// <para><strong>Description</strong>: Giá trị</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Value
		{
			get { return Entity.GetAttributeValue<string>(Fields.Value); }
		}
	}
}