//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:22
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets
{
	public enum LakehouseShortcutState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Created = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		In_Progress = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Created</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Created = 0
	}
	public enum LastSyncState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Created = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		In_Progress = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Created</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Created = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
	public enum TableState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Created = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		In_Progress = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Created</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Created = 0
	}
	public enum TrinoState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Created = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		In_Progress = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Created</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Created = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class synapselinkexternaltablestate : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string datalakefolder = "datalakefolder";
			public const string EntityName = "entityname";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string LakehouseShortcutState = "lakehouseshortcutstate";
			public const string LastSynchronizedOn = "lastsynchronizedon";
			public const string LastSyncState = "lastsyncstate";
			public const string MaxRecordVersion = "maxrecordversion";
			public const string MetadataVersion = "metadataversion";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string RecordCount = "recordcount";
			public const string SchemaModifiedOn = "schemamodifiedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SynapseDatabaseName = "synapsedatabasename";
			public const string synapselinkexternaltablestateId = "synapselinkexternaltablestateid";
			public const string SynapseWorkspaceName = "synapseworkspacename";
			public const string TableState = "tablestate";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TrinoState = "trinostate";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "synapselinkexternaltablestate";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10044;
		public const string EntityCollectionSchemaName = "synapselinkexternaltablestates";
		public const string EntityDisplayCollectionName = "Synapse Link External Table States";
		public const string DisplayName = "Synapse Link External Table State";
		public const string EntitySetName = "synapselinkexternaltablestates";
		public const string EntityLogicalCollectionName = "synapselinkexternaltablestates";
		public const string EntityPrimaryIdAttribute = "synapselinkexternaltablestateid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "synapselinkexternaltablestate";
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate(Guid synapselinkexternaltablestateId)
		{
			Entity = new Entity(EntityLogicalName, synapselinkexternaltablestateId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="synapselinkexternaltablestate"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="synapselinkexternaltablestate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new synapselinkexternaltablestate(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="synapselinkexternaltablestate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new synapselinkexternaltablestate(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public synapselinkexternaltablestate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Lake Folder</para>
		/// <para><strong>Description</strong>: Unique identifier for Data Lake Folder associated with Synapse Link External Table State.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="datalakefolder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference datalakefolder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.datalakefolder); }
			set { Entity.Attributes[Fields.datalakefolder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Name</para>
		/// <para><strong>Description</strong>: Name of the entity</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lakehouse Shortcut State</para>
		/// <para><strong>Description</strong>: State of lakehouse shortcut creation for an entity</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LakehouseShortcutState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LakehouseShortcutState.Not_Created"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LakehouseShortcutState? LakehouseShortcutState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LakehouseShortcutState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LakehouseShortcutState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LakehouseShortcutState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LakehouseShortcutState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Synchronized On</para>
		/// <para><strong>Description</strong>: Last SynchronizedOn Date time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSynchronizedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSynchronizedOn); }
			set { Entity.Attributes[Fields.LastSynchronizedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Synchronization State</para>
		/// <para><strong>Description</strong>: Last data synchronization state</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LastSyncState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LastSyncState.Not_Created"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LastSyncState? LastSyncState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastSyncState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.LastSyncState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastSyncState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastSyncState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum Record Version</para>
		/// <para><strong>Description</strong>: Maximum record version synchronized to the lake</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? MaxRecordVersion
		{
			get { return Entity.GetAttributeValue<long?>(Fields.MaxRecordVersion); }
			set { Entity.Attributes[Fields.MaxRecordVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metadata Version</para>
		/// <para><strong>Description</strong>: Metadata version</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 32</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MetadataVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.MetadataVersion); }
			set { Entity.Attributes[Fields.MetadataVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Count</para>
		/// <para><strong>Description</strong>: Record count synchronized to lake</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RecordCount
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RecordCount); }
			set { Entity.Attributes[Fields.RecordCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schema Modified On</para>
		/// <para><strong>Description</strong>: Schema modified on date-time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SchemaModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SchemaModifiedOn); }
			set { Entity.Attributes[Fields.SchemaModifiedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Synapse Link External Table State</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Synapse Link External Table State</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Synapse Database Name</para>
		/// <para><strong>Description</strong>: Synapse database name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SynapseDatabaseName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SynapseDatabaseName); }
			set { Entity.Attributes[Fields.SynapseDatabaseName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Synapse Link External Table State</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid synapselinkexternaltablestateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.synapselinkexternaltablestateId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Synapse Workspace Name</para>
		/// <para><strong>Description</strong>: Synapse workspace name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SynapseWorkspaceName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SynapseWorkspaceName); }
			set { Entity.Attributes[Fields.SynapseWorkspaceName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Table State</para>
		/// <para><strong>Description</strong>: External table state</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TableState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TableState.Not_Created"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TableState? TableState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TableState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TableState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TableState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TableState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trino State</para>
		/// <para><strong>Description</strong>: State of Trino registration for an entity</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TrinoState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TrinoState.Not_Created"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TrinoState? TrinoState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TrinoState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkexternaltablestateOptionSets.TrinoState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TrinoState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TrinoState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}