//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:55
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RoleTemplatePrivilegesOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RoleTemplatePrivileges : EntityBase
	{
		public struct Fields
		{
			public const string IsBasic = "isbasic";
			public const string IsDeep = "isdeep";
			public const string IsGlobal = "isglobal";
			public const string IsLocal = "islocal";
			public const string PrivilegeId = "privilegeid";
			public const string RoleTemplateId = "roletemplateid";
			public const string RoleTemplatePrivilegeId = "roletemplateprivilegeid";
			public const string Upgrading = "upgrading";
		}
		public const string EntityLogicalName = "roletemplateprivileges";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 28;
		public const string EntityCollectionSchemaName = "";
		public const string EntityDisplayCollectionName = "";
		public const string DisplayName = "";
		public const string EntitySetName = "roletemplateprivilegescollection";
		public const string EntityLogicalCollectionName = "";
		public const string EntityPrimaryIdAttribute = "roletemplateprivilegeid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RoleTemplatePrivileges";
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges(Guid RoleTemplatePrivilegesId)
		{
			Entity = new Entity(EntityLogicalName, RoleTemplatePrivilegesId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RoleTemplatePrivileges"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RoleTemplatePrivileges"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RoleTemplatePrivileges(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RoleTemplatePrivileges"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RoleTemplatePrivileges(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RoleTemplatePrivileges(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Description</strong>: Thông tin về khả năng vai trò trong mẫu áp dụng cho người dùng, nhóm của người dùng hoặc đối tượng mà người dùng chia sẻ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBasic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBasic); }
			set { Entity.Attributes[Fields.IsBasic] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Thông tin về khả năng vai trò trong mẫu áp dụng cho bơn vị kinh doanh cấp dưới của bơn vị kinh doanh liên kết với người dùng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDeep
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDeep); }
			set { Entity.Attributes[Fields.IsDeep] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Thông tin về khả năng vai trò trong mẫu áp dụng cho toàn bộ tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsGlobal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsGlobal); }
			set { Entity.Attributes[Fields.IsGlobal] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Thông tin về khả năng vai trò trong mẫu áp dụng cho bơn vị kinh doanh của người dùng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLocal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLocal); }
			set { Entity.Attributes[Fields.IsLocal] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quyền đã gán cho mẫu vai trò.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrivilegeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrivilegeId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mẫu vai trò đã liên kết với quyền vai trò.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RoleTemplateId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RoleTemplateId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quyền mẫu vai trò.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RoleTemplatePrivilegeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RoleTemplatePrivilegeId); }
			set { Entity.Attributes[Fields.RoleTemplatePrivilegeId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Upgrading
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Upgrading); }
		}
	}
}