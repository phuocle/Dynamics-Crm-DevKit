//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets
{
	public enum ExchangeVersion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange 2007</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Exchange_2007 = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange 2007 SP1</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Exchange_2007_SP1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange 2010</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Exchange_2010 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange 2010 SP1</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Exchange_2010_SP1 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange 2010 SP2</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Exchange_2010_SP2 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange 2013</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Exchange_2013 = 5
	}
	public enum IncomingAuthenticationProtocol
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cơ bản</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Co_ban = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: NTLM</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		NTLM = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		OAuth = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phát hiện Tự động</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Phat_hien_Tu_dong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thương lượng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thuong_luong = 1
	}
	public enum IncomingCredentialRetrieval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Gmail OAuth</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Gmail_OAuth = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có thông tin xác thực (Ẩn danh)</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khong_co_thong_tin_xac_thuc_An_danh = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Oauth với Microsoft Entra ID</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Oauth_voi_Microsoft_Entra_ID = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức xác thực hiện đại kết hợp (HMA) của Exchange</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Phuong_thuc_xac_thuc_hien_dai_ket_hop_HMA_cua_Exchange = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin xác thực do người dùng hoặc hàng đợi chỉ định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thong_tin_xac_thuc_do_nguoi_dung_hoac_hang_doi_chi_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin xác thực được chỉ định trong Cấu hình máy chủ email</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thong_tin_xac_thuc_duoc_chi_dinh_trong_Cau_hinh_may_chu_email = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực máy chủ tới máy chủ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Xac_thuc_may_chu_toi_may_chu = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực tích hợp của Windows</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Xac_thuc_tich_hop_cua_Windows = 3
	}
	public enum LastAuthorizationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Loi = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum LastTestExecutionStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảnh báo</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canh_bao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Loi = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum LastTestValidationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Loi = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum OutgoingAuthenticationProtocol
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cơ bản</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Co_ban = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: NTLM</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		NTLM = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		OAuth = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phát hiện Tự động</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Phat_hien_Tu_dong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thương lượng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thuong_luong = 1
	}
	public enum OutgoingCredentialRetrieval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Gmail OAuth</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Gmail_OAuth = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có thông tin xác thực (Ẩn danh)</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khong_co_thong_tin_xac_thuc_An_danh = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Oauth với Microsoft Entra ID</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Oauth_voi_Microsoft_Entra_ID = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức xác thực hiện đại kết hợp (HMA) của Exchange</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Phuong_thuc_xac_thuc_hien_dai_ket_hop_HMA_cua_Exchange = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin xác thực do người dùng hoặc hàng đợi chỉ định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thong_tin_xac_thuc_do_nguoi_dung_hoac_hang_doi_chi_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin xác thực được chỉ định trong Cấu hình máy chủ email</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thong_tin_xac_thuc_duoc_chi_dinh_trong_Cau_hinh_may_chu_email = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực máy chủ tới máy chủ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Xac_thuc_may_chu_toi_may_chu = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực tích hợp của Windows</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Xac_thuc_tich_hop_cua_Windows = 3
	}
	public enum ServerAuthority
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cơ quan chính phủ Hoa Kỳ (GCC High và DoD) (https://login.microsoftonline.us)</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Co_quan_chinh_phu_Hoa_Ky_GCC_High_va_DoD_httpsloginmicrosoftonlineus = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Công cộng (+GCC) (https://login.microsoftonline.com)</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Cong_cong_GCC_httpsloginmicrosoftonlinecom = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trung Quốc (21Vianet) (https://login.chinacloudapi.cn)</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Trung_Quoc_21Vianet_httpsloginchinacloudapicn = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động (được xác định bởi đám mây Dynamics 365)</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tu_dong_duoc_xac_dinh_boi_dam_may_Dynamics_365 = 3
	}
	public enum ServerType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Online (Kết hợp)</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Exchange_Online_Ket_hop = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Server</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Exchange_Server = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Server (Kết hợp)</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Exchange_Server_Ket_hop = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: IMAP/SMTP</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		IMAPSMTP = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác (POP3/SMTP)</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khac_POP3SMTP = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EmailServerProfile : EntityBase
	{
		public struct Fields
		{
			public const string AadResourceId = "aadresourceid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultServerLocation = "defaultserverlocation";
			public const string Description = "description";
			public const string EmailServerProfileId = "emailserverprofileid";
			public const string EmailServerTypeName = "emailservertypename";
			public const string EncodingCodePage = "encodingcodepage";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeOnlineTenantId = "exchangeonlinetenantid";
			public const string ExchangeVersion = "exchangeversion";
			public const string IncomingAuthenticationProtocol = "incomingauthenticationprotocol";
			public const string IncomingCredentialRetrieval = "incomingcredentialretrieval";
			public const string IncomingPartnerApplication = "incomingpartnerapplication";
			public const string IncomingPassword = "incomingpassword";
			public const string IncomingPortNumber = "incomingportnumber";
			public const string IncomingServerLocation = "incomingserverlocation";
			public const string IncomingUseImpersonation = "incominguseimpersonation";
			public const string IncomingUserName = "incomingusername";
			public const string IncomingUseSSL = "incomingusessl";
			public const string IsIncomingPasswordSet = "isincomingpasswordset";
			public const string IsOauthClientSecretSet = "isoauthclientsecretset";
			public const string IsOutgoingPasswordSet = "isoutgoingpasswordset";
			public const string keyvaultreferenceid = "keyvaultreferenceid";
			public const string LastAuthorizationStatus = "lastauthorizationstatus";
			public const string LastCrmMessage = "lastcrmmessage";
			public const string LastTestExecutionStatus = "lasttestexecutionstatus";
			public const string LastTestRequest = "lasttestrequest";
			public const string LastTestResponse = "lasttestresponse";
			public const string LastTestStartTime = "lastteststarttime";
			public const string LastTestTotalExecutionTime = "lasttesttotalexecutiontime";
			public const string LastTestValidationStatus = "lasttestvalidationstatus";
			public const string managedidentityid = "managedidentityid";
			public const string MaxConcurrentConnections = "maxconcurrentconnections";
			public const string MinPollingIntervalInMinutes = "minpollingintervalinminutes";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MoveUndeliveredEmails = "moveundeliveredemails";
			public const string Name = "name";
			public const string OauthClientId = "oauthclientid";
			public const string OauthClientSecret = "oauthclientsecret";
			public const string OrganizationId = "organizationid";
			public const string OutgoingAuthenticationProtocol = "outgoingauthenticationprotocol";
			public const string OutgoingAutoGrantDelegateAccess = "outgoingautograntdelegateaccess";
			public const string OutgoingCredentialRetrieval = "outgoingcredentialretrieval";
			public const string OutgoingPartnerApplication = "outgoingpartnerapplication";
			public const string OutgoingPassword = "outgoingpassword";
			public const string OutgoingPortNumber = "outgoingportnumber";
			public const string OutgoingServerLocation = "outgoingserverlocation";
			public const string OutgoingUseImpersonation = "outgoinguseimpersonation";
			public const string OutgoingUsername = "outgoingusername";
			public const string OutgoingUseSSL = "outgoingusessl";
			public const string OwnerEmailAddress = "owneremailaddress";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessEmailsReceivedAfter = "processemailsreceivedafter";
			public const string SendEmailAlert = "sendemailalert";
			public const string ServerAuthority = "serverauthority";
			public const string ServerType = "servertype";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeoutMailboxConnection = "timeoutmailboxconnection";
			public const string TimeoutMailboxConnectionAfterAmount = "timeoutmailboxconnectionafteramount";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UseAutoDiscover = "useautodiscover";
			public const string UseDefaultTenantId = "usedefaulttenantid";
			public const string UseSameSettingsForOutgoingConnections = "usesamesettingsforoutgoingconnections";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "emailserverprofile";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9605;
		public const string EntityCollectionSchemaName = "EmailServerProfiles";
		public const string EntityDisplayCollectionName = "Cấu hình Máy chủ Email";
		public const string DisplayName = "Cấu hình Máy chủ Email";
		public const string EntitySetName = "emailserverprofiles";
		public const string EntityLogicalCollectionName = "emailserverprofiles";
		public const string EntityPrimaryIdAttribute = "emailserverprofileid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "EmailServerProfile";
		[DebuggerNonUserCode()]
		public EmailServerProfile()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EmailServerProfile(Guid EmailServerProfileId)
		{
			Entity = new Entity(EntityLogicalName, EmailServerProfileId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EmailServerProfile(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EmailServerProfile"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public EmailServerProfile(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EmailServerProfile"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public EmailServerProfile(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new EmailServerProfile(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EmailServerProfile"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public EmailServerProfile(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new EmailServerProfile(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EmailServerProfile(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID nguồn lực Microsoft Entra</para>
		/// <para><strong>Description</strong>: ID nguồn lực Microsoft Entra được dùng cho sơ đồ xác thực OAuth</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AadResourceId
		{
			get { return Entity.GetAttributeValue<string>(Fields.AadResourceId); }
			set { Entity.Attributes[Fields.AadResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí Máy chủ Email Mặc định</para>
		/// <para><strong>Description</strong>: Nhập vị trí mặc định của máy chủ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultServerLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultServerLocation); }
			set { Entity.Attributes[Fields.DefaultServerLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập thông tin bổ sung mô tả cấu hình máy chủ email.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EmailServerProfile</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của cấu hình máy chủ email.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EmailServerProfileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EmailServerProfileId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Loại Máy chủ Email</para>
		/// <para><strong>Description</strong>: Tên Loại Máy chủ Email</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailServerTypeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailServerTypeName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang Mã dành cho Mã hóa</para>
		/// <para><strong>Description</strong>: Cho biết trang mã để sử dụng khi mã hóa nội dung email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EncodingCodePage
		{
			get { return Entity.GetAttributeValue<string>(Fields.EncodingCodePage); }
			set { Entity.Attributes[Fields.EncodingCodePage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Đối tượng thuê của Exchange Online</para>
		/// <para><strong>Description</strong>: Nhập ID đối tượng thuê của Exchange Online.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 36</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeOnlineTenantId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeOnlineTenantId); }
			set { Entity.Attributes[Fields.ExchangeOnlineTenantId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Exchange</para>
		/// <para><strong>Description</strong>: Chọn phiên bản Exchange trên máy chủ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ExchangeVersion"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ExchangeVersion? ExchangeVersion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExchangeVersion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ExchangeVersion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExchangeVersion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExchangeVersion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao thức Xác thực Email đến</para>
		/// <para><strong>Description</strong>: Chọn giao thức xác thực email đến được sử dụng để kết nối với máy chủ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingAuthenticationProtocol"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingAuthenticationProtocol.Phat_hien_Tu_dong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingAuthenticationProtocol? IncomingAuthenticationProtocol
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingAuthenticationProtocol);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingAuthenticationProtocol)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingAuthenticationProtocol] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingAuthenticationProtocol] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy xuất thông tin đăng nhập của email đến</para>
		/// <para><strong>Description</strong>: Chọn cách truy xuất thông tin đăng nhập của email đến.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingCredentialRetrieval"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingCredentialRetrieval.Thong_tin_xac_thuc_do_nguoi_dung_hoac_hang_doi_chi_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingCredentialRetrieval? IncomingCredentialRetrieval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingCredentialRetrieval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.IncomingCredentialRetrieval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingCredentialRetrieval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingCredentialRetrieval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ứng dụng Đối tác của Email Đến</para>
		/// <para><strong>Description</strong>: Cho biết ứng dụng đối tác của email đến.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="partnerapplication"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference IncomingPartnerApplication
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.IncomingPartnerApplication); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mật khẩu Email Đến</para>
		/// <para><strong>Description</strong>: Nhập mật khẩu cho email đến.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IncomingPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.IncomingPassword); }
			set { Entity.Attributes[Fields.IncomingPassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cổng Email Đến</para>
		/// <para><strong>Description</strong>: Nhấp số cổng Exchange cho thư đến.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 65,536</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IncomingPortNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IncomingPortNumber); }
			set { Entity.Attributes[Fields.IncomingPortNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí Máy chủ Email Đến</para>
		/// <para><strong>Description</strong>: Nhập vị trí máy chủ cho email đến.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IncomingServerLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.IncomingServerLocation); }
			set { Entity.Attributes[Fields.IncomingServerLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng Hình thức Mạo danh cho Email Đến</para>
		/// <para><strong>Description</strong>: Chọn liệu có truy cập hộp thư dưới hình thức mạo danh để xử lý các email đến không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IncomingUseImpersonation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IncomingUseImpersonation); }
			set { Entity.Attributes[Fields.IncomingUseImpersonation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người dùng cho Email Đến</para>
		/// <para><strong>Description</strong>: Nhập tên người dùng cho email đến.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IncomingUserName
		{
			get { return Entity.GetAttributeValue<string>(Fields.IncomingUserName); }
			set { Entity.Attributes[Fields.IncomingUserName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng Giao thức SSL cho Email Đến</para>
		/// <para><strong>Description</strong>: Chọn liệu có sử dụng giao thức Tầng Khe Bảo mật (giao thức SSL) cho email đến hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IncomingUseSSL
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IncomingUseSSL); }
			set { Entity.Attributes[Fields.IncomingUseSSL] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIncomingPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIncomingPasswordSet); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOauthClientSecretSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOauthClientSecretSet); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOutgoingPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOutgoingPasswordSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID tham chiếu cho Key Vault</para>
		/// <para><strong>Description</strong>: ID tham chiếu cho Azure Key Vault</para>
		/// <para><strong>Lookup</strong>: <see cref="keyvaultreference"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference keyvaultreferenceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.keyvaultreferenceid); }
			set { Entity.Attributes[Fields.keyvaultreferenceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Ủy quyền Kiểm tra Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị trạng thái ủy quyền kiểm tra lần cuối của cấu hình máy chủ email</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastAuthorizationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastAuthorizationStatus.Thanh_cong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastAuthorizationStatus? LastAuthorizationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastAuthorizationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastAuthorizationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastAuthorizationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastAuthorizationStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư Dynamics 365 Trước</para>
		/// <para><strong>Description</strong>: Hiển thị Thông báo Dynamics 365 nhận được trong quá trình Kiểm tra Lần cuối</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastCrmMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastCrmMessage); }
			set { Entity.Attributes[Fields.LastCrmMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thực thi Kiểm tra Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị trạng thái Thực thi kiểm tra lần cuối của cấu hình máy chủ email</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestExecutionStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestExecutionStatus.Thanh_cong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestExecutionStatus? LastTestExecutionStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastTestExecutionStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestExecutionStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastTestExecutionStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastTestExecutionStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yêu cầu Kiểm tra Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị Yêu cầu EWS được tạo trong quá trình Kiểm tra Lần cuối</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastTestRequest
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastTestRequest); }
			set { Entity.Attributes[Fields.LastTestRequest] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phản hồi Kiểm tra Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị Phản hồi EWS nhận được trong quá trình Kiểm tra Lần cuối</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastTestResponse
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastTestResponse); }
			set { Entity.Attributes[Fields.LastTestResponse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Kiểm tra Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ Bắt đầu Kiểm tra Lần cuối</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastTestStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastTestStartTime); }
			set { Entity.Attributes[Fields.LastTestStartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Kiểm tra Lần cuối đã Bỏ ra</para>
		/// <para><strong>Description</strong>: Hiển thị Thời gian đã bỏ ra trong khi chạy kiểm tra lần cuối</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? LastTestTotalExecutionTime
		{
			get { return Entity.GetAttributeValue<long?>(Fields.LastTestTotalExecutionTime); }
			set { Entity.Attributes[Fields.LastTestTotalExecutionTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Xác thực Kiểm tra Lần cuối</para>
		/// <para><strong>Description</strong>: Hiển thị trạng thái Xác thực kiểm tra lần cuối của cấu hình máy chủ email</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestValidationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestValidationStatus.Thanh_cong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestValidationStatus? LastTestValidationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastTestValidationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.LastTestValidationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastTestValidationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastTestValidationStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID danh tính được quản lý</para>
		/// <para><strong>Description</strong>: ID danh tính được quản lý</para>
		/// <para><strong>Lookup</strong>: <see cref="managedidentity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference managedidentityid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.managedidentityid); }
			set { Entity.Attributes[Fields.managedidentityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Kết nối Đồng thời Tối đa</para>
		/// <para><strong>Description</strong>: Số lượng kết nối đồng thời tối đa được phép tới máy chủ email cho mỗi người dùng được xác thực.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxConcurrentConnections
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxConcurrentConnections); }
			set { Entity.Attributes[Fields.MaxConcurrentConnections] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian Kiểm soát vòng Tối thiểu Tính theo Phút</para>
		/// <para><strong>Description</strong>: Khoảng thời gian kiểm soát vòng tối thiểu, tính theo phút, cho các hộp thư được liên kết với cấu hình máy chủ email này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,440</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinPollingIntervalInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinPollingIntervalInMinutes); }
			set { Entity.Attributes[Fields.MinPollingIntervalInMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Di chuyển Email Không gửi được đến Thư mục Không gửi được</para>
		/// <para><strong>Description</strong>: Cho biết liệu có di chuyển các email đến không gửi được tới thư mục Không gửi được trong Microsoft Exchange hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? MoveUndeliveredEmails
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.MoveUndeliveredEmails); }
			set { Entity.Attributes[Fields.MoveUndeliveredEmails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Nhập một tên có nghĩa cho cấu hình máy chủ email. Tên này được hiển thị khi bạn cần chọn một cấu hình máy chủ email.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id máy khách Oauth</para>
		/// <para><strong>Description</strong>: Id máy khách được dùng cho sơ đồ xác thực OAuth</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthClientId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthClientId); }
			set { Entity.Attributes[Fields.OauthClientId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã bí mật máy khách OAuth</para>
		/// <para><strong>Description</strong>: Mã bí mật máy khách được dùng cho sơ đồ xác thực OAuth</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthClientSecret
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthClientSecret); }
			set { Entity.Attributes[Fields.OauthClientSecret] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức được liên kết với bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao thức Xác thực Email đi</para>
		/// <para><strong>Description</strong>: Chọn giao thức xác thực email đi được sử dụng để kết nối với máy chủ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingAuthenticationProtocol"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingAuthenticationProtocol.Phat_hien_Tu_dong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingAuthenticationProtocol? OutgoingAuthenticationProtocol
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingAuthenticationProtocol);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingAuthenticationProtocol)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingAuthenticationProtocol] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingAuthenticationProtocol] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động Cấp Quyền truy cập Đại diện cho Email Đi.</para>
		/// <para><strong>Description</strong>: Cho biết liệu bộ liên kết email có cấp quyền truy cập đại diện cho người dùng đang truy cập khi được yêu cầu trong lúc xử lý email đi hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OutgoingAutoGrantDelegateAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OutgoingAutoGrantDelegateAccess); }
			set { Entity.Attributes[Fields.OutgoingAutoGrantDelegateAccess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy xuất thông tin đăng nhập cho email đi</para>
		/// <para><strong>Description</strong>: Chọn cách truy xuất thông tin đăng nhập cho email đi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingCredentialRetrieval"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingCredentialRetrieval? OutgoingCredentialRetrieval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingCredentialRetrieval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.OutgoingCredentialRetrieval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingCredentialRetrieval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingCredentialRetrieval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ứng dụng Đối tác của Email Đi</para>
		/// <para><strong>Description</strong>: Cho biết ứng dụng đối tác của email đi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="partnerapplication"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OutgoingPartnerApplication
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OutgoingPartnerApplication); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mật khẩu Email Đi</para>
		/// <para><strong>Description</strong>: Nhập mật khẩu cho email đi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OutgoingPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.OutgoingPassword); }
			set { Entity.Attributes[Fields.OutgoingPassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cổng Email Đi</para>
		/// <para><strong>Description</strong>: Nhấp số cổng Exchange cho thư đi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 65,536</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OutgoingPortNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OutgoingPortNumber); }
			set { Entity.Attributes[Fields.OutgoingPortNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí Máy chủ Email Đi</para>
		/// <para><strong>Description</strong>: Nhập vị trí máy chủ cho email đi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OutgoingServerLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.OutgoingServerLocation); }
			set { Entity.Attributes[Fields.OutgoingServerLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng Hình thức Mạo danh cho Email Đi</para>
		/// <para><strong>Description</strong>: Chọn liệu có truy cập hộp thư dưới hình thức mạo danh để xử lý các email đi không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OutgoingUseImpersonation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OutgoingUseImpersonation); }
			set { Entity.Attributes[Fields.OutgoingUseImpersonation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người dùng cho Email Đi</para>
		/// <para><strong>Description</strong>: Nhập tên người dùng cho email đi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OutgoingUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.OutgoingUsername); }
			set { Entity.Attributes[Fields.OutgoingUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng giao thức SSL cho Email Đi</para>
		/// <para><strong>Description</strong>: Chọn liệu có sử dụng giao thức Tầng Khe Bảo mật (giao thức SSL) cho email đi hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OutgoingUseSSL
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OutgoingUseSSL); }
			set { Entity.Attributes[Fields.OutgoingUseSSL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ email của chủ sở hữu cấu hình máy chủ email</para>
		/// <para><strong>Description</strong>: Địa chỉ email của chủ sở hữu cấu hình máy chủ email</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OwnerEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.OwnerEmailAddress); }
			set { Entity.Attributes[Fields.OwnerEmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Chọn đơn vị kinh doanh sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xử lý Email Nhận được sau</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ mà sau đó email nhận được sẽ được xử lý cho các hộp thư được liên kết với cấu hình máy chủ email.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessEmailsReceivedAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessEmailsReceivedAfter); }
			set { Entity.Attributes[Fields.ProcessEmailsReceivedAfter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gửi email thông báo tới chủ sở hữu của cấu hình máy chủ email báo cáo về các sự kiện chính</para>
		/// <para><strong>Description</strong>: Chọn xem có gửi cảnh báo qua email nếu hơn 50% hộp thư trong cấu hình máy chủ email này không thể đồng bộ hóa trong khoảng thời gian một giờ được không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendEmailAlert
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendEmailAlert); }
			set { Entity.Attributes[Fields.SendEmailAlert] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thẩm quyền máy chủ email</para>
		/// <para><strong>Description</strong>: Chọn quyền cho máy chủ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerAuthority"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerAuthority.Cong_cong_GCC_httpsloginmicrosoftonlinecom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerAuthority? ServerAuthority
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServerAuthority);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerAuthority)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServerAuthority] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServerAuthority] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Máy chủ Email</para>
		/// <para><strong>Description</strong>: Chọn loại máy chủ email của cấu hình.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerType? ServerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.ServerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServerType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết cấu hình máy chủ email hiện hoạt hay không hoạt động.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của cấu hình máy chủ email.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailServerProfileOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hết thời gian chờ Kết nối Hộp thư đến Exchange</para>
		/// <para><strong>Description</strong>: Chọn xem đã hết thời gian chờ một hộp thư đơn lẻ chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TimeoutMailboxConnection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TimeoutMailboxConnection); }
			set { Entity.Attributes[Fields.TimeoutMailboxConnection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hết thời gian chờ kết nối hộp thư đơn lẻ sau số mili giây này</para>
		/// <para><strong>Description</strong>: Nhập số mili giây hết thời gian chờ một hộp thư đơn lẻ. Giới hạn trên là 100 giây.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeoutMailboxConnectionAfterAmount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeoutMailboxConnectionAfterAmount); }
			set { Entity.Attributes[Fields.TimeoutMailboxConnectionAfterAmount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động Phát hiện Vị trí Máy chủ</para>
		/// <para><strong>Description</strong>: Chọn liệu có tự động phát hiện vị trí máy chủ hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseAutoDiscover
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseAutoDiscover); }
			set { Entity.Attributes[Fields.UseAutoDiscover] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng ID Đối tượng thuê Mặc định</para>
		/// <para><strong>Description</strong>: Chọn có sử dụng ID Đối tượng thuê của Exchange Online có được khi chạy các lệnh ghép ngắn Microsoft Azure PowerShell (rất khuyến nghị) không. Nếu chọn Không, bạn có thể chỉnh sửa thủ công trường này</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseDefaultTenantId
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseDefaultTenantId); }
			set { Entity.Attributes[Fields.UseDefaultTenantId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng Cùng một Cài đặt cho Kết nối Đi</para>
		/// <para><strong>Description</strong>: Chọn liệu có sử dụng cùng một cài đặt cho các kết nối đến và đi hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSameSettingsForOutgoingConnections
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSameSettingsForOutgoingConnections); }
			set { Entity.Attributes[Fields.UseSameSettingsForOutgoingConnections] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của cấu hình máy chủ email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}