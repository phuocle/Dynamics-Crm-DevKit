//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:49
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.MultiEntitySearchEntitiesOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class MultiEntitySearchEntities : EntityBase
	{
		public struct Fields
		{
			public const string EntityName = "entityname";
			public const string EntityOrder = "entityorder";
			public const string MultiEntitySearchEntityId = "multientitysearchentityid";
			public const string MultiEntitySearchId = "multientitysearchid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "multientitysearchentities";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9911;
		public const string EntityCollectionSchemaName = "MultiEntitySearchEntities";
		public const string EntityDisplayCollectionName = "";
		public const string DisplayName = "";
		public const string EntitySetName = "multientitysearchentitiescollection";
		public const string EntityLogicalCollectionName = "multientitysearchentitiescollection";
		public const string EntityPrimaryIdAttribute = "multientitysearchentityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "MultiEntitySearchEntities";
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Guid MultiEntitySearchEntitiesId)
		{
			Entity = new Entity(EntityLogicalName, MultiEntitySearchEntitiesId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MultiEntitySearchEntities"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MultiEntitySearchEntities"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new MultiEntitySearchEntities(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MultiEntitySearchEntities"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new MultiEntitySearchEntities(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MultiEntitySearchEntities(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Thực thể</para>
		/// <para><strong>Description</strong>: Tên thực thể logic của thực thể có mặt trong tìm kiếm nhiều thực thể.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ tự Thực thể</para>
		/// <para><strong>Description</strong>: Thứ tự thực thể trong bộ sưu tập kết quả.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? EntityOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.EntityOrder); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Cho biết thực thể được dùng cho tìm kiếm nhiều thực thể.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? MultiEntitySearchEntityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.MultiEntitySearchEntityId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MultiEntitySearchId</para>
		/// <para><strong>Description</strong>: Cho biết ID của tìm kiếm nhiều thực thể.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="multientitysearch"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MultiEntitySearchId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MultiEntitySearchId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}