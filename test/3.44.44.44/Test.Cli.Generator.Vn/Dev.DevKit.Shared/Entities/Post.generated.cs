//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:51
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PostOptionSets
{
	public enum Source
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài đăng ActionHub</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bai_dang_ActionHub = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đăng Thủ công</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_Thu_cong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đăng Tự động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_Tu_dong = 1
	}
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Câu hỏi</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Cau_hoi = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đăng lại</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Dang_lai = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểm nhập</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Kiem_nhap = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo Riêng tư</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thong_bao_Rieng_tu = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tin tức</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tin_tuc = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Trang_thai = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ý tưởng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Y_tuong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Post : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string LargeText = "largetext";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string PostId = "postid";
			public const string PostRegardingId = "postregardingid";
			public const string PostToYammer = "posttoyammer";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectOwnerId = "regardingobjectownerid";
			public const string RegardingObjectOwningBusinessUnit = "regardingobjectowningbusinessunit";
			public const string Source = "source";
			public const string Text = "text";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Type = "type";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string YammerPostState = "yammerpoststate";
			public const string YammerRetryCount = "yammerretrycount";
		}
		public const string EntityLogicalName = "post";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8000;
		public const string EntityCollectionSchemaName = "Posts";
		public const string EntityDisplayCollectionName = "Bài đăng";
		public const string DisplayName = "Bài đăng";
		public const string EntitySetName = "posts";
		public const string EntityLogicalCollectionName = "posts";
		public const string EntityPrimaryIdAttribute = "postid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "text";
		public const string EntitySchemaName = "Post";
		[DebuggerNonUserCode()]
		public Post()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Post(Guid PostId)
		{
			Entity = new Entity(EntityLogicalName, PostId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Post(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Post"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Post(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Post"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Post(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Post(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Post"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Post(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Post(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Post(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn bản</para>
		/// <para><strong>Description</strong>: Hiển thị văn bản của bài đăng.</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LargeText
		{
			get { return Entity.GetAttributeValue<string>(Fields.LargeText); }
			set { Entity.Attributes[Fields.LargeText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài đăng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PostId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PostId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý bài đăng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản lưu ý bài đăng mà có liên kết đến bài đăng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="postregarding"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PostRegardingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PostRegardingId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: đăng lên yammer</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PostToYammer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PostToYammer); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Chọn bản ghi mẹ dành cho bài đăng để nhận dạng khách hàng, cơ hội, trường hợp hoặc bản ghi khác có liên quan mật thiết nhất đến bài đăng.</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu đối tượng liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đối tượng liên quan sở hữu bơn vị kinh doanh</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu đối tượng liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn</para>
		/// <para><strong>Description</strong>: Chọn khả năng tạo bài đăng theo cách thủ công hoặc tự động.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PostOptionSets.Source"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PostOptionSets.Source.Dang_Thu_cong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PostOptionSets.Source? Source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PostOptionSets.Source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Source] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn bản</para>
		/// <para><strong>Description</strong>: Hiện văn bản của bài đăng. Nếu đây là bài đăng thủ công, nó sẽ hiển thị là văn bản thuần. Nếu đây là bài đăng tự động, nó sẽ hiển thị ở dạng XML.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Text
		{
			get { return Entity.GetAttributeValue<string>(Fields.Text); }
			set { Entity.Attributes[Fields.Text] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại</para>
		/// <para><strong>Description</strong>: Chọn loại bài đăng.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PostOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PostOptionSets.Type.Kiem_nhap"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PostOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PostOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái bài đăng Yammer</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? YammerPostState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.YammerPostState); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng số lần thử lại Yammer</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? YammerRetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.YammerRetryCount); }
		}
	}
}