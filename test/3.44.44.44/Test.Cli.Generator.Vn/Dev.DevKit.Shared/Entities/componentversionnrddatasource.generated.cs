//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:07
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.componentversionnrddatasourceOptionSets
{
	public enum Operation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cập nhật</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cap_nhat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khôi phục</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khoi_phuc = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập giải pháp</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Nhap_giai_phap = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phát hành</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Phat_hanh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tao = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class componentversionnrddatasource : EntityBase
	{
		public struct Fields
		{
			public const string ChangeSummary = "changesummary";
			public const string Component = "component";
			public const string componentversionname = "componentversionname";
			public const string componentversionnrddatasourceId = "componentversionnrddatasourceid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Operation = "operation";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PartitionId = "partitionid";
			public const string Payload = "payload";
			public const string Payload_name = "payload_name";
			public const string RestoredFromVersion = "restoredfromversion";
			public const string SystemChangeSummary = "systemchangesummary";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "componentversionnrddatasource";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10051;
		public const string EntityCollectionSchemaName = "componentversionnrddatasources";
		public const string EntityDisplayCollectionName = "Phiên bản thành phần (Nội bộ)";
		public const string DisplayName = "Phiên bản thành phần (Nội bộ)";
		public const string EntitySetName = "componentversionnrddatasourceset";
		public const string EntityLogicalCollectionName = "componentversionnrddatasourceset";
		public const string EntityPrimaryIdAttribute = "componentversionnrddatasourceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "componentversionname";
		public const string EntitySchemaName = "componentversionnrddatasource";
		[DebuggerNonUserCode()]
		public componentversionnrddatasource()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public componentversionnrddatasource(Guid componentversionnrddatasourceId)
		{
			Entity = new Entity(EntityLogicalName, componentversionnrddatasourceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public componentversionnrddatasource(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="componentversionnrddatasource"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public componentversionnrddatasource(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="componentversionnrddatasource"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public componentversionnrddatasource(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new componentversionnrddatasource(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="componentversionnrddatasource"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public componentversionnrddatasource(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new componentversionnrddatasource(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public componentversionnrddatasource(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tóm tắt nội dung thay đổi</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ChangeSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.ChangeSummary); }
			set { Entity.Attributes[Fields.ChangeSummary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phần</para>
		/// <para><strong>Description</strong>: Thành phần sở hữu.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Component
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Component); }
			set { Entity.Attributes[Fields.Component] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên phiên bản</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string componentversionname
		{
			get { return Entity.GetAttributeValue<string>(Fields.componentversionname); }
			set { Entity.Attributes[Fields.componentversionname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản thành phần (Nội bộ)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid componentversionnrddatasourceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.componentversionnrddatasourceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và thời gian tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự của lượt nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của lượt nhập đã tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.componentversionnrddatasourceOptionSets.Operation"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.componentversionnrddatasourceOptionSets.Operation? Operation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Operation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.componentversionnrddatasourceOptionSets.Operation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Operation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Operation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID chủ sở hữu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID phân vùng</para>
		/// <para><strong>Description</strong>: ID phân vùng logic. Một phân vùng logic bao gồm một tập hợp các bản ghi có cùng ID phân vùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tải trọng</para>
		/// <para><strong>Description</strong>: Tải trọng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Payload_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Payload_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được khôi phục từ phiên bản</para>
		/// <para><strong>Description</strong>: Phiên bản cơ sở đã được khôi phục.</para>
		/// <para><strong>Lookup</strong>: <see cref="componentversionnrddatasource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RestoredFromVersion
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RestoredFromVersion); }
			set { Entity.Attributes[Fields.RestoredFromVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tóm tắt nội dung thay đổi hệ thống</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SystemChangeSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.SystemChangeSummary); }
			set { Entity.Attributes[Fields.SystemChangeSummary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian đi vào hoạt động chính thức</para>
		/// <para><strong>Description</strong>: Thời gian hoạt động chính thức tính bằng giây.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}