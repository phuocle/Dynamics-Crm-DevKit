//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:26
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ImageDescriptorOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ImageDescriptor : EntityBase
	{
		public struct Fields
		{
			public const string ColorDepthBits = "colordepthbits";
			public const string FileId = "fileid";
			public const string FileId_name = "fileid_name";
			public const string FileLocation = "filelocation";
			public const string FileName = "filename";
			public const string FileSizeBytes = "filesizebytes";
			public const string FileType = "filetype";
			public const string FullImageURL = "fullimageurl";
			public const string ImageDescription = "imagedescription";
			public const string ImageDescriptorId = "imagedescriptorid";
			public const string ImagePixelHeight = "imagepixelheight";
			public const string ImagePixelWidth = "imagepixelwidth";
			public const string ImageTags = "imagetags";
			public const string ImageTimestamp = "imagetimestamp";
			public const string ImageURL = "imageurl";
			public const string MimeType = "mimetype";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string Size = "size";
			public const string Title = "title";
			public const string versionnumber = "versionnumber";
		}
		public const string EntityLogicalName = "imagedescriptor";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1007;
		public const string EntityCollectionSchemaName = "ImageDescriptors";
		public const string EntityDisplayCollectionName = "Ký hiệu mô tả Hình ảnh";
		public const string DisplayName = "Ký hiệu mô tả Hình ảnh";
		public const string EntitySetName = "imagedescriptors";
		public const string EntityLogicalCollectionName = "imagedescriptors";
		public const string EntityPrimaryIdAttribute = "imagedescriptorid";
		public const string EntityPrimaryImageAttribute = "fullimagedata";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "ImageDescriptor";
		[DebuggerNonUserCode()]
		public ImageDescriptor()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImageDescriptor(Guid ImageDescriptorId)
		{
			Entity = new Entity(EntityLogicalName, ImageDescriptorId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImageDescriptor(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImageDescriptor"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ImageDescriptor(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImageDescriptor"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ImageDescriptor(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ImageDescriptor(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImageDescriptor"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ImageDescriptor(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ImageDescriptor(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImageDescriptor(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ColorDepthBits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ColorDepthBits); }
			set { Entity.Attributes[Fields.ColorDepthBits] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FileId</para>
		/// <para><strong>Description</strong>: Tra cứu FileAttachment</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileId_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileId_name); }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileLocation); }
			set { Entity.Attributes[Fields.FileLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}
		/// <summary>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSizeBytes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSizeBytes); }
			set { Entity.Attributes[Fields.FileSizeBytes] = value; }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
			set { Entity.Attributes[Fields.FileType] = value; }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullImageURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullImageURL); }
			set { Entity.Attributes[Fields.FullImageURL] = value; }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageDescription); }
			set { Entity.Attributes[Fields.ImageDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ImageDescriptorId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ImageDescriptorId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImagePixelHeight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImagePixelHeight); }
			set { Entity.Attributes[Fields.ImagePixelHeight] = value; }
		}
		/// <summary>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImagePixelWidth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImagePixelWidth); }
			set { Entity.Attributes[Fields.ImagePixelWidth] = value; }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageTags
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageTags); }
			set { Entity.Attributes[Fields.ImageTags] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? ImageTimestamp
		{
			get { return Entity.GetAttributeValue<long?>(Fields.ImageTimestamp); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageURL); }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ObjectId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Size
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Size); }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of Image descriptor.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? versionnumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.versionnumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("fullimagedata"); }
			set { Entity.Attributes["fullimagedata"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("fullimagedata_url"); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] ImageData
		{
			get { return Entity.GetAttributeValue<byte[]>("imagedata"); }
			set { Entity.Attributes["imagedata"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageDataUrl
		{
			get { return Entity.GetAttributeValue<string>("imagedata_url"); }
		}
	}
}