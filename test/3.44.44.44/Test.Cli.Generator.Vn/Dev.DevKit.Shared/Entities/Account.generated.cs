//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:02
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.AccountOptionSets
{
	public enum AccountCategoryCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuẩn</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Chuan = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng Ưu tiên</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khach_hang_Uu_tien = 1
	}
	public enum AccountClassificationCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum AccountRatingCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Chinh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khac = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận hàng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nhan_hang = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận hóa đơn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nhan_hoa_don = 1
	}
	public enum Address1_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảng giao hàng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cang_giao_hang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Miễn phí</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mien_phi = 2
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ đặt hàng trước</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Ban_le_dat_hang_truoc = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyên chở bằng máy bay</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chuyen_cho_bang_may_bay = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầy tải</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Day_tai = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DHL</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		DHL = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FedEx</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư gửi bưu điện</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu_gui_buu_dien = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: UPS</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		UPS = 4
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address2_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum BusinessTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum CustomerSizeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum CustomerTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Báo chí</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Bao_chi = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đại lý</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Dai_ly = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đối tác</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Doi_tac = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đối thủ cạnh tranh</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Doi_thu_canh_tranh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Khac = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khach_hang = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng triển vọng</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Khach_hang_trien_vong = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người ảnh hưởng</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Nguoi_anh_huong = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà bán lẻ</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Nha_ban_le = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà cung cấp</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Nha_cung_cap = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà đầu tư</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Nha_dau_tu = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tư vấn viên</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tu_van_vien = 2
	}
	public enum IndustryCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán buôn</para>
		/// <para><strong>Value</strong>: 33</para>
		/// </summary>
		Ban_buon = 33,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ Dịch vụ</para>
		/// <para><strong>Value</strong>: 25</para>
		/// </summary>
		Ban_le_Dich_vu = 25,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ Dịch vụ Cấp nước trong Tòa nhà</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Ban_le_Dich_vu_Cap_nuoc_trong_Toa_nha = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ Dịch vụ Giải trí</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Ban_le_Dich_vu_Giai_tri = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ Hàng hóa Không lâu bền</para>
		/// <para><strong>Value</strong>: 22</para>
		/// </summary>
		Ban_le_Hang_hoa_Khong_lau_ben = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ Phương tiện</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Ban_le_Phuong_tien = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bảo hiểm</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Bao_hiem = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bất động sản Đặc biệt</para>
		/// <para><strong>Value</strong>: 29</para>
		/// </summary>
		Bat_dong_san_Dac_biet = 29,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế biến Thực phẩm và Thuốc lá</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Che_bien_Thuc_pham_va_Thuoc_la = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chi nhánh SIG</para>
		/// <para><strong>Value</strong>: 26</para>
		/// </summary>
		Chi_nhanh_SIG = 26,
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa điểm Ăn Uống</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Dia_diem_An_Uong = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dịch vụ Kinh doanh</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Dich_vu_Kinh_doanh = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dịch vụ Pháp lý</para>
		/// <para><strong>Value</strong>: 21</para>
		/// </summary>
		Dich_vu_Phap_ly = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dịch vụ Tiêu dùng</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Dich_vu_Tieu_dung = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dịch vụ Tiêu dùng Bên ngoài</para>
		/// <para><strong>Value</strong>: 23</para>
		/// </summary>
		Dich_vu_Tieu_dung_Ben_ngoai = 23,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dịch vụ Xã hội</para>
		/// <para><strong>Value</strong>: 27</para>
		/// </summary>
		Dich_vu_Xa_hoi = 27,
		/// <summary>
		/// <para><strong>Display Name</strong>: In và Xuất bản Truyền thông</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		In_va_Xuat_ban_Truyen_thong = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kế toán</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ke_toan = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà môi giới</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Nha_moi_gioi = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà phân phối, Người điều vận và Nhà chế biến</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Nha_phan_phoi_Nguoi_dieu_van_va_Nha_che_bien = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà thầu Giao dịch Bên ngoài Đặc biệt</para>
		/// <para><strong>Value</strong>: 28</para>
		/// </summary>
		Nha_thau_Giao_dich_Ben_ngoai_Dac_biet = 28,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nông nghiệp và Trích xuất Tài nguyên Thiên nhiên Không Dầu</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nong_nghiep_va_Trich_xuat_Tai_nguyen_Thien_nhien_Khong_Dau = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quản lý Thiết kế, Chỉ đạo và Quảng cáo</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Quan_ly_Thiet_ke_Chi_dao_va_Quang_cao = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sản xuất Lâu bền</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		San_xuat_Lau_ben = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa chữa và Bảo dưỡng Chuyển đến</para>
		/// <para><strong>Value</strong>: 19</para>
		/// </summary>
		Sua_chua_va_Bao_duong_Chuyen_den = 19,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài chính</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Tai_chinh = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo và Phân phối Tiện ích</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Tao_va_Phan_phoi_Tien_ich = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thuê và Cho thuê Thiết bị</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Thue_va_Cho_thue_Thiet_bi = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trích xuất và Phân phối Hóa dầu</para>
		/// <para><strong>Value</strong>: 24</para>
		/// </summary>
		Trich_xuat_va_Phan_phoi_Hoa_dau = 24,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tư vấn</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Tu_van = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn phòng và Phòng khám Bác sĩ</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Van_phong_va_Phong_kham_Bac_si = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vận tải</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Van_tai = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xử lý Dựa vào Nhiều vốn Chuyển về</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Xu_ly_Dua_vao_Nhieu_von_Chuyen_ve = 18
	}
	public enum OwnershipCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Công khai</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cong_khai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Công ty con</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Cong_ty_con = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khac = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Riêng tư</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Rieng_tu = 2
	}
	public enum PaymentTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 2% 10, Tổng 30</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_2_10_Tong_30 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng 30</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tong_30 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng 45</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tong_45 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng 60</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Tong_60 = 4
	}
	public enum PreferredAppointmentDayCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ Nhật</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chu_Nhat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Ba</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thu_Ba = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Bảy</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Thu_Bay = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Hai</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thu_Hai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Năm</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thu_Nam = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Sáu</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu_Sau = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Tư</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thu_Tu = 3
	}
	public enum PreferredAppointmentTimeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Buổi chiều</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Buoi_chieu = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Buổi sáng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Buoi_sang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Buổi tối</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Buoi_toi = 3
	}
	public enum PreferredContactMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bất kỳ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bat_ky = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Dien_thoai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Fax = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu = 5
	}
	public enum ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
	public enum TerritoryCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Account : EntityBase
	{
		public struct Fields
		{
			public const string AccountCategoryCode = "accountcategorycode";
			public const string AccountClassificationCode = "accountclassificationcode";
			public const string AccountId = "accountid";
			public const string AccountNumber = "accountnumber";
			public const string AccountRatingCode = "accountratingcode";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_FreightTermsCode = "address1_freighttermscode";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_PrimaryContactName = "address1_primarycontactname";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_FreightTermsCode = "address2_freighttermscode";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_PrimaryContactName = "address2_primarycontactname";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string Adx_CreatedByIPAddress = "adx_createdbyipaddress";
			public const string Adx_CreatedByUsername = "adx_createdbyusername";
			public const string Adx_ModifiedByIPAddress = "adx_modifiedbyipaddress";
			public const string Adx_ModifiedByUsername = "adx_modifiedbyusername";
			public const string Aging30 = "aging30";
			public const string Aging30_Base = "aging30_base";
			public const string Aging60 = "aging60";
			public const string Aging60_Base = "aging60_base";
			public const string Aging90 = "aging90";
			public const string Aging90_Base = "aging90_base";
			public const string BusinessTypeCode = "businesstypecode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string CreditLimit_Base = "creditlimit_base";
			public const string CreditOnHold = "creditonhold";
			public const string CustomerSizeCode = "customersizecode";
			public const string CustomerTypeCode = "customertypecode";
			public const string Description = "description";
			public const string DoNotBulkEMail = "donotbulkemail";
			public const string DoNotBulkPostalMail = "donotbulkpostalmail";
			public const string DoNotEMail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string DoNotSendMM = "donotsendmm";
			public const string EMailAddress1 = "emailaddress1";
			public const string EMailAddress2 = "emailaddress2";
			public const string EMailAddress3 = "emailaddress3";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FollowEmail = "followemail";
			public const string FtpSiteURL = "ftpsiteurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IndustryCode = "industrycode";
			public const string IsPrivate = "isprivate";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastUsedInCampaign = "lastusedincampaign";
			public const string MarketCap = "marketcap";
			public const string MarketCap_Base = "marketcap_base";
			public const string MarketingOnly = "marketingonly";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msa_managingpartnerid = "msa_managingpartnerid";
			public const string Name = "name";
			public const string NumberOfEmployees = "numberofemployees";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwnershipCode = "ownershipcode";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentAccountId = "parentaccountid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PreferredAppointmentDayCode = "preferredappointmentdaycode";
			public const string PreferredAppointmentTimeCode = "preferredappointmenttimecode";
			public const string PreferredContactMethodCode = "preferredcontactmethodcode";
			public const string PreferredSystemUserId = "preferredsystemuserid";
			public const string PrimaryContactId = "primarycontactid";
			public const string PrimarySatoriId = "primarysatoriid";
			public const string PrimaryTwitterId = "primarytwitterid";
			public const string ProcessId = "processid";
			public const string Revenue = "revenue";
			public const string Revenue_Base = "revenue_base";
			public const string SharesOutstanding = "sharesoutstanding";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string SIC = "sic";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StockExchange = "stockexchange";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TerritoryCode = "territorycode";
			public const string TickerSymbol = "tickersymbol";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteURL = "websiteurl";
			public const string YomiName = "yominame";
		}
		public const string EntityLogicalName = "account";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1;
		public const string EntityCollectionSchemaName = "Accounts";
		public const string EntityDisplayCollectionName = "Tài khoản";
		public const string DisplayName = "Tài khoản";
		public const string EntitySetName = "accounts";
		public const string EntityLogicalCollectionName = "accounts";
		public const string EntityPrimaryIdAttribute = "accountid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Account";
		[DebuggerNonUserCode()]
		public Account()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Account(Guid AccountId)
		{
			Entity = new Entity(EntityLogicalName, AccountId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Account(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Account"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Account(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Account"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Account(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Account(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Account"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Account(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Account(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Account(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại</para>
		/// <para><strong>Description</strong>: Chọn một thể loại để cho biết tài khoản khách hàng là tiêu chuẩn hay là ưu tiên.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode? AccountCategoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountCategoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountCategoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountCategoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountCategoryCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phân loại</para>
		/// <para><strong>Description</strong>: Chọn mã phân loại để biểu thị giá trị tiềm năng của tài khoản khách hàng dựa trên Hệ số thu nhập trên đầu tư (ROI) dự toán, mức độ hợp tác, độ dài chu kỳ bán hàng hoặc tiêu chí khác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode? AccountClassificationCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountClassificationCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountClassificationCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountClassificationCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountClassificationCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tài khoản.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AccountId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AccountId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Tài khoản</para>
		/// <para><strong>Description</strong>: Nhập số ID hoặc mã cho tài khoản để nhanh chóng tìm kiếm và xác định tài khoản trong dạng xem hệ thống.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AccountNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.AccountNumber); }
			set { Entity.Attributes[Fields.AccountNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng Tài khoản</para>
		/// <para><strong>Description</strong>: Chọn một mức xếp hạng để biểu thị giá trị của tài khoản khách hàng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode? AccountRatingCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountRatingCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.AccountRatingCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountRatingCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountRatingCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Chọn loại địa chỉ chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Thành phố</para>
		/// <para><strong>Description</strong>: Nhập thành phố cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ chính đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: Nhập quốc gia hoặc khu vực cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Hạt</para>
		/// <para><strong>Description</strong>: Nhập hạt cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điều khoản Vận chuyển hàng hóa</para>
		/// <para><strong>Description</strong>: Chọn điều khoản vận chuyển hàng hóa cho địa chỉ chính để đảm bảo yêu cầu giao hàng được xử lý chính xác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode? Address1_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Vĩ độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị vĩ độ cho địa chỉ chính để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phố 1</para>
		/// <para><strong>Description</strong>: Nhập dòng đầu tiên của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phố 2</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ hai của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phố 3</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ ba của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Kinh độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị kinh độ cho địa chỉ chính để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên mô tả cho địa chỉ chính, chẳng hạn như Trụ sở chính của Tập đoàn.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Nhập Mã ZIP hoặc mã bưu điện cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Hòm Thư</para>
		/// <para><strong>Description</strong>: Nhập số hòm thư của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Tên Người liên hệ Chính</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ chính tại địa chỉ chính của tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address1_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: Nhập bang hoặc tỉnh của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại theo Địa chỉ</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Vùng UPS</para>
		/// <para><strong>Description</strong>: Nhập vùng UPS của địa chỉ chính để đảm bảo phí vận chuyển được tính chính xác và hàng được giao kịp thời nếu giao bằng UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Chọn múi giờ hoặc phần bù UTC cho địa chỉ này để người khác có thể tham chiếu khi họ liên hệ với người trong địa chỉ này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Chọn loại địa chỉ phụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Thành phố</para>
		/// <para><strong>Description</strong>: Nhập thành phố cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ phụ đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: Nhập quốc gia hoặc khu vực cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Hạt</para>
		/// <para><strong>Description</strong>: Nhập hạt cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điều khoản Vận chuyển hàng hóa</para>
		/// <para><strong>Description</strong>: Chọn điều khoản vận chuyển hàng hóa cho địa chỉ phụ để đảm bảo yêu cầu giao hàng được xử lý chính xác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode? Address2_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Vĩ độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị vĩ độ cho địa chỉ phụ để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phố 1</para>
		/// <para><strong>Description</strong>: Nhập dòng đầu tiên của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phố 2</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ hai của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phố 3</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ ba của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Kinh độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị kinh độ cho địa chỉ phụ để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên mô tả cho địa chỉ phụ, chẳng hạn như Trụ sở chính của Tập đoàn.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Nhập Mã ZIP hoặc mã bưu điện cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Hòm Thư</para>
		/// <para><strong>Description</strong>: Nhập số hòm thư của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Tên Người liên hệ Chính</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ chính tại địa chỉ phụ của tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address2_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: Nhập bang hoặc tỉnh của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 1</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Vùng UPS</para>
		/// <para><strong>Description</strong>: Nhập vùng UPS của địa chỉ phụ để đảm bảo phí vận chuyển được tính chính xác và hàng được giao kịp thời nếu giao bằng UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Chọn múi giờ hoặc phần bù UTC cho địa chỉ này để người khác có thể tham chiếu khi họ liên hệ với người trong địa chỉ này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (IP Address)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_CreatedByIPAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (User Name)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByUsername); }
			set { Entity.Attributes[Fields.Adx_CreatedByUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (IP Address)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_ModifiedByIPAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (User Name)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByUsername); }
			set { Entity.Attributes[Fields.Adx_ModifiedByUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 30</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 30 (Gốc)</para>
		/// <para><strong>Description</strong>: Giá trị tương đương theo loại tiền gốc của trường tuổi nợ 30.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 60</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 60 (Gốc)</para>
		/// <para><strong>Description</strong>: Giá trị tương đương theo loại tiền gốc của trường tuổi nợ 60.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 90</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 90 (Gốc)</para>
		/// <para><strong>Description</strong>: Giá trị tương đương theo loại tiền gốc của trường tuổi nợ 90.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Doanh nghiệp</para>
		/// <para><strong>Description</strong>: Chọn chỉ định pháp lý hoặc loại doanh nghiệp khác của tài khoản dành cho hợp đồng hoặc mục đích báo cáo.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode? BusinessTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BusinessTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.BusinessTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BusinessTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BusinessTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Bên ngoài)</para>
		/// <para><strong>Description</strong>: Hiển thị bên ngoài đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới hạn Tín dụng</para>
		/// <para><strong>Description</strong>: Nhập giới hạn tín dụng của tài khoản. Đây là tham chiếu hữu ích khi bạn xử lý các vấn đề về hóa đơn và kế toán với khách hàng.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreditLimit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CreditLimit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới hạn Tín dụng (Gốc)</para>
		/// <para><strong>Description</strong>: Cho biết giới hạn tín dụng được chuyển sang loại tiền gốc mặc định của hệ thống dành cho mục đích báo cáo.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Treo Tín dụng</para>
		/// <para><strong>Description</strong>: Chọn trạng thái tín dụng cho tài khoản có đang treo hay không. Đây là tham chiếu hữu ích khi xử lý các vấn đề về hóa đơn và kế toán với khách hàng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CreditOnHold
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CreditOnHold); }
			set { Entity.Attributes[Fields.CreditOnHold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy mô Khách hàng</para>
		/// <para><strong>Description</strong>: Chọn loại quy mô hoặc phạm vi của tài khoản dành cho mục đích báo cáo và phân khúc.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode? CustomerSizeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSizeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerSizeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerSizeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerSizeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Mối quan hệ</para>
		/// <para><strong>Description</strong>: Chọn loại mô tả đúng nhất mối quan hệ giữa khách hàng và tổ chức của bạn.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode? CustomerTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.CustomerTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập thông tin bổ sung để mô tả tài khoản, chẳng hạn như một đoạn trích từ trang web của công ty.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Email Hàng loạt</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có cho phép gửi email hàng loạt qua chiến dịch hay không. Nếu chọn Không Cho phép thì có thể thêm tài khoản vào danh sách khách hàng tiếp thị, nhưng sẽ loại trừ khỏi email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
			set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Thư Hàng loạt</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có cho phép gửi thư bưu điện hàng loạt qua chiến dịch tiếp thị hoặc chiến dịch nhanh gọn hay không. Nếu chọn Không Cho phép thì có thể thêm tài khoản vào danh sách khách hàng tiếp thị, nhưng sẽ loại trừ khỏi thư bưu điện.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkPostalMail); }
			set { Entity.Attributes[Fields.DoNotBulkPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Email</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có cho phép gửi email trực tiếp từ Microsoft Dynamics 365 hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
			set { Entity.Attributes[Fields.DoNotEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Fax</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có cho phép gửi fax hay không. Nếu chọn Không Cho phép thì tài khoản sẽ bị loại trừ khỏi các hoạt động fax được phân phối trong chiến dịch tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
			set { Entity.Attributes[Fields.DoNotFax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Gọi điện</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có cho phép gọi điện hay không. Nếu chọn Không Cho phép thì tài khoản sẽ bị loại trừ khỏi các hoạt động gọi điện được phân phối trong chiến dịch tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
			set { Entity.Attributes[Fields.DoNotPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Thư</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có cho phép gửi thư trực tiếp hay không. Nếu chọn Không Cho phép thì tài khoản sẽ bị loại trừ khỏi các hoạt động gửi thư được phân phối trong chiến dịch tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
			set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gửi Tài liệu Tiếp thị</para>
		/// <para><strong>Description</strong>: Chọn tài khoản có chấp nhận các tài liệu tiếp thị hay không, chẳng hạn như sách quảng cáo hoặc danh mục sản phẩm.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không Gửi</strong>]: true - [<strong>Gửi</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Gửi</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendMM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
			set { Entity.Attributes[Fields.DoNotSendMM] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email chính cho tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress1
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
			set { Entity.Attributes[Fields.EMailAddress1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Email 2</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email phụ cho tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
			set { Entity.Attributes[Fields.EMailAddress2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Email 3</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email thay thế cho tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress3
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
			set { Entity.Attributes[Fields.EMailAddress3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax cho tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Theo dõi Hoạt động Email</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng cho phép theo dõi hoạt động email như hoạt động mở, xem tệp đính kèm và bấm vào liên kết đối với những email gửi tới khách hàng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Cho phép</strong>]: true - [<strong>Không cho phép</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Cho phép</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
			set { Entity.Attributes[Fields.FollowEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang web FTP</para>
		/// <para><strong>Description</strong>: Nhập URL cho trang web FTP của tài khoản để cho phép người dùng truy cập dữ liệu và chia sẻ tài liệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FtpSiteURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.FtpSiteURL); }
			set { Entity.Attributes[Fields.FtpSiteURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngành</para>
		/// <para><strong>Description</strong>: Chọn ngành chính của tài khoản để sử dụng trong phân khúc tiếp thị và phân tích nhân khẩu học.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode? IndustryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IndustryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.IndustryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IndustryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IndustryCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạm giữ Gần đây nhất</para>
		/// <para><strong>Description</strong>: Chứa nhãn ngày và giờ của lần tạm giữ gần đây nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Sau cùng được Bao gồm trong Chiến dịch</para>
		/// <para><strong>Description</strong>: Cho biết ngày tài khoản được bao gồm lần cuối cùng trong chiến dịch tiếp thị hoặc chiến dịch nhanh gọn.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedInCampaignUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
			set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vốn hóa Thị trường</para>
		/// <para><strong>Description</strong>: Nhập giá trị vốn hóa thị trường của tài khoản để xác định vốn cổ phần của công ty được sử dụng làm chỉ số trong phân tích hoạt động tài chính.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MarketCap
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.MarketCap);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MarketCap] = new Money(value.Value);
				else
					Entity.Attributes[Fields.MarketCap] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vốn hóa Thị trường (Gốc)</para>
		/// <para><strong>Description</strong>: Cho biết giá trị vốn hóa thị trường được đổi sang loại tiền gốc mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MarketCap_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.MarketCap_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ dành cho Tiếp thị</para>
		/// <para><strong>Description</strong>: Xem có chỉ dành riêng cho tiếp thị hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? MarketingOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.MarketingOnly); }
			set { Entity.Attributes[Fields.MarketingOnly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Tổng thể</para>
		/// <para><strong>Description</strong>: Cho biết tài khoản tổng thể hợp nhất với tài khoản này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp nhất</para>
		/// <para><strong>Description</strong>: Cho biết tài khoản có được hợp nhất với tài khoản khác hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Bên ngoài)</para>
		/// <para><strong>Description</strong>: Hiển thị bên ngoài đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Managing Partner</para>
		/// <para><strong>Description</strong>: Unique identifier for Account associated with Account.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msa_managingpartnerid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msa_managingpartnerid); }
			set { Entity.Attributes[Fields.msa_managingpartnerid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Tài khoản</para>
		/// <para><strong>Description</strong>: Nhập tên công ty hoặc doanh nghiệp.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Nhân viên</para>
		/// <para><strong>Description</strong>: Nhập số lượng nhân viên làm việc tại tài khoản để sử dụng trong phân khúc tiếp thị và phân tích nhân khẩu học.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfEmployees
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfEmployees); }
			set { Entity.Attributes[Fields.NumberOfEmployees] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạm giữ (Phút)</para>
		/// <para><strong>Description</strong>: Hiển thị khoảng thời gian tính bằng phút mà bản ghi bị tạm giữ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quyền sở hữu</para>
		/// <para><strong>Description</strong>: Chọn cơ cấu quyền sở hữu của tài khoản, chẳng hạn như công khai hoặc riêng tư.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode? OwnershipCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OwnershipCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.OwnershipCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OwnershipCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OwnershipCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Cho biết đơn vị kinh doanh của chủ sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu tài khoản.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu tài khoản.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản Mẹ</para>
		/// <para><strong>Description</strong>: Chọn tài khoản mẹ liên kết với tài khoản này để cho biết doanh nghiệp mẹ và con trong báo cáo và phân tích.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
			set { Entity.Attributes[Fields.ParentAccountId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham gia trong Quy trình làm việc</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống. Dữ liệu quy trình làm việc Microsoft Dynamics CRM 3.0 cũ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điều khoản Thanh toán</para>
		/// <para><strong>Description</strong>: Chọn điều khoản thanh toán để biểu thị thời điểm khách hàng cần thanh toán tổng số tiền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode? PaymentTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PaymentTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn ngày ưu tiên trong tuần cho cuộc hẹn dịch vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode? PreferredAppointmentDayCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentDayCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentDayCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giờ ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn giờ ưu tiên trong ngày cho cuộc hẹn dịch vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode? PreferredAppointmentTimeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentTimeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredAppointmentTimeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức Liên hệ Ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn phương thức liên hệ ưu tiên.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode.Bat_ky"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.PreferredContactMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredContactMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn người đại diện dịch vụ ưu tiên để tham chiếu khi bạn lên lịch các hoạt động dịch vụ cho tài khoản.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreferredSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredSystemUserId); }
			set { Entity.Attributes[Fields.PreferredSystemUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ Chính</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ chính cho tài khoản để cung cấp truy cập nhanh vào chi tiết liên hệ.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PrimaryContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryContactId); }
			set { Entity.Attributes[Fields.PrimaryContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Satori Chính</para>
		/// <para><strong>Description</strong>: ID Satori Chính của Tài khoản</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimarySatoriId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimarySatoriId); }
			set { Entity.Attributes[Fields.PrimarySatoriId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Twitter Chính</para>
		/// <para><strong>Description</strong>: ID Twitter Chính của Tài khoản</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryTwitterId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryTwitterId); }
			set { Entity.Attributes[Fields.PrimaryTwitterId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Doanh thu Hàng năm</para>
		/// <para><strong>Description</strong>: Nhập giá trị doanh thu hàng năm của tài khoản được sử dụng làm chỉ số trong phân tích hoạt động tài chính.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Revenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Revenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Doanh thu Hàng năm (Gốc)</para>
		/// <para><strong>Description</strong>: Cho biết doanh thu hàng năm được đổi sang loại tiền gốc mặc định của hệ thống. Các phép tính sử dụng tỷ giá được chỉ định trong vùng Loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cổ phiếu Lưu hành</para>
		/// <para><strong>Description</strong>: Nhập số lượng cổ phiếu hiện ra công chúng của tài khoản. Con số này được sử dụng làm chỉ số trong phân tích hoạt động tài chính.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SharesOutstanding
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SharesOutstanding); }
			set { Entity.Attributes[Fields.SharesOutstanding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn phương thức giao hàng cho hàng hóa được gửi đến địa chỉ của tài khoản để chỉ định hãng vận chuyển ưu tiên hoặc tùy chọn giao hàng khác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã SIC</para>
		/// <para><strong>Description</strong>: Nhập mã Hệ thống Phân ngành Kinh doanh Tiêu chuẩn (SIC) cho biết ngành kinh doanh chính của tài khoản, để sử dụng trong phân khúc tiếp thị và phân tích nhân khẩu học.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SIC
		{
			get { return Entity.GetAttributeValue<string>(Fields.SIC); }
			set { Entity.Attributes[Fields.SIC] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận Cấp độ Dịch vụ</para>
		/// <para><strong>Description</strong>: Chọn thỏa thuận cấp độ dịch vụ (SLA) mà bạn muốn áp dụng cho bản ghi Khách hàng.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận Cấp độ Dịch vụ cuối cùng đã áp dụng</para>
		/// <para><strong>Description</strong>: Thỏa thuận Cấp độ Dịch vụ lần cuối đã được áp dụng cho trường hợp này. Chỉ sử dụng nội bộ trường này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Giai đoạn Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của giai đoạn.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết tài khoản hiện hoạt hay không hoạt động. Các tài khoản không hoạt động ở trạng thái chỉ đọc và không chỉnh sửa được trừ khi chúng được kích hoạt lại.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của tài khoản.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sở giao dịch Chứng khoán</para>
		/// <para><strong>Description</strong>: Nhập sở giao dịch chứng khoán có tài khoản được niêm yết để theo dõi cổ phiếu và hoạt động tài chính của công ty.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StockExchange
		{
			get { return Entity.GetAttributeValue<string>(Fields.StockExchange); }
			set { Entity.Attributes[Fields.StockExchange] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Chính</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính cho tài khoản này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Khác</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai cho tài khoản này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba cho tài khoản này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Vùng lãnh thổ</para>
		/// <para><strong>Description</strong>: Chọn khu vực hoặc vùng lãnh thổ của tài khoản để sử dụng trong phân khúc và phân tích.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode? TerritoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TerritoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AccountOptionSets.TerritoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TerritoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TerritoryCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ký hiệu Chứng khoán</para>
		/// <para><strong>Description</strong>: Nhập ký hiệu sở giao dịch chứng khoán cho tài khoản để theo dõi hoạt động tài chính của công ty. Bạn có thể bấm vào mã được nhập trong trường này để truy cập thông tin thương mại mới nhất từ Tài chính trên MSN.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TickerSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.TickerSymbol); }
			set { Entity.Attributes[Fields.TickerSymbol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tôi sử dụng</para>
		/// <para><strong>Description</strong>: Tổng thời gian mà tôi dành cho các email (đọc và viết) cùng các cuộc họp liên quan đến bản ghi khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Đường ngang</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của tài khoản.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang web</para>
		/// <para><strong>Description</strong>: Nhập URL trang web của tài khoản để truy cập chi tiết nhanh về hồ sơ công ty.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteURL); }
			set { Entity.Attributes[Fields.WebSiteURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Tài khoản Yomi</para>
		/// <para><strong>Description</strong>: Nhập cách phát âm tên công ty nếu được chỉ định trong tiếng Nhật, nhằm đảm bảo tên được phát âm đúng trong các cuộc gọi điện thoại và các liên lạc khác.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiName); }
			set { Entity.Attributes[Fields.YomiName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}