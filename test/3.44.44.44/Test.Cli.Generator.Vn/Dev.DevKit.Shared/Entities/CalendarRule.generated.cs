//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:06
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.CalendarRuleOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CalendarRule : EntityBase
	{
		public struct Fields
		{
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CalendarRuleId = "calendarruleid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string EffectiveIntervalEnd = "effectiveintervalend";
			public const string EffectiveIntervalStart = "effectiveintervalstart";
			public const string Effort = "effort";
			public const string EndTime = "endtime";
			public const string ExtentCode = "extentcode";
			public const string GroupDesignator = "groupdesignator";
			public const string InnerCalendarId = "innercalendarid";
			public const string IsModified = "ismodified";
			public const string IsSelected = "isselected";
			public const string IsSimple = "issimple";
			public const string IsVaried = "isvaried";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string Offset = "offset";
			public const string OrganizationId = "organizationid";
			public const string Pattern = "pattern";
			public const string Rank = "rank";
			public const string StartTime = "starttime";
			public const string SubCode = "subcode";
			public const string TimeCode = "timecode";
			public const string TimeZoneCode = "timezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "calendarrule";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4004;
		public const string EntityCollectionSchemaName = "CalendarRules";
		public const string EntityDisplayCollectionName = "Quy tắc Lịch";
		public const string DisplayName = "Quy tắc Lịch";
		public const string EntitySetName = "calendarrules";
		public const string EntityLogicalCollectionName = "calendarrules";
		public const string EntityPrimaryIdAttribute = "calendarruleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "CalendarRule";
		[DebuggerNonUserCode()]
		public CalendarRule()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CalendarRule(Guid CalendarRuleId)
		{
			Entity = new Entity(EntityLogicalName, CalendarRuleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CalendarRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CalendarRule"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public CalendarRule(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CalendarRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CalendarRule(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CalendarRule(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CalendarRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CalendarRule(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CalendarRule(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CalendarRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh có quy tắc lịch được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BusinessUnitId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BusinessUnitId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lịch</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của lịch có quy tắc lịch được liên kết.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc Lịch</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quy tắc lịch.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CalendarRuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CalendarRuleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo quy tắc lịch.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo quy tắc lịch.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo calendarrule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Xác định thời gian rảnh/bận cho dịch vụ và cho nguồn lực hoặc nhóm nguồn lực, chẳng hạn như làm việc, không làm việc, ngày nghỉ và đã chặn.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian</para>
		/// <para><strong>Description</strong>: Khoảng thời gian của quy tắc lịch tính bằng phút.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc Khoảng thời gian Hiệu lực</para>
		/// <para><strong>Description</strong>: Kết thúc khoảng thời gian hiệu lực của quy tắc lịch.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveIntervalEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveIntervalEnd); }
			set { Entity.Attributes[Fields.EffectiveIntervalEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu Khoảng thời gian Hiệu lực</para>
		/// <para><strong>Description</strong>: Bắt đầu khoảng thời gian hiệu lực của quy tắc lịch.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveIntervalStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveIntervalStart); }
			set { Entity.Attributes[Fields.EffectiveIntervalStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nỗ lực</para>
		/// <para><strong>Description</strong>: Nỗ lực hiện có cho một nguồn lực trong thời gian theo mô tả của quy tắc lịch.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Effort
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Effort); }
			set { Entity.Attributes[Fields.Effort] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Phạm vi</para>
		/// <para><strong>Description</strong>: Phạm vi của quy tắc lịch.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExtentCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExtentCode); }
			set { Entity.Attributes[Fields.ExtentCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã chỉ định Nhóm</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 36</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupDesignator); }
			set { Entity.Attributes[Fields.GroupDesignator] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lịch Nội bộ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của lịch nội bộ cho quy tắc lịch không phải là lá.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference InnerCalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.InnerCalendarId); }
			set { Entity.Attributes[Fields.InnerCalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được Sửa đổi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsModified
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsModified); }
			set { Entity.Attributes[Fields.IsModified] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được Chọn</para>
		/// <para><strong>Description</strong>: Cờ được dùng trong quy tắc lịch thay đổi theo ngày.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSelected
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSelected); }
			set { Entity.Attributes[Fields.IsSelected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn giản</para>
		/// <para><strong>Description</strong>: Cờ được dùng trong quy tắc lịch thay đổi theo ngày.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSimple
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSimple); }
			set { Entity.Attributes[Fields.IsSimple] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thay đổi</para>
		/// <para><strong>Description</strong>: Cờ được dùng trong quy tắc lá không lặp lại.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsVaried
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsVaried); }
			set { Entity.Attributes[Fields.IsVaried] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi quy tắc lịch lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi quy tắc lịch lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi calendarrule lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của quy tắc lịch.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng bù</para>
		/// <para><strong>Description</strong>: Khoảng bù bắt đầu cho quy tắc lá không lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Offset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Offset); }
			set { Entity.Attributes[Fields.Offset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức có quy tắc lịch được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểu Lặp lại</para>
		/// <para><strong>Description</strong>: Kiểu lặp lại của quy tắc.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Pattern
		{
			get { return Entity.GetAttributeValue<string>(Fields.Pattern); }
			set { Entity.Attributes[Fields.Pattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng</para>
		/// <para><strong>Description</strong>: Xếp hạng quy tắc lịch.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
			set { Entity.Attributes[Fields.Rank] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu cho quy tắc.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Phụ</para>
		/// <para><strong>Description</strong>: Loại phụ của quy tắc lịch.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubCode); }
			set { Entity.Attributes[Fields.SubCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại</para>
		/// <para><strong>Description</strong>: Loại quy tắc lịch chẳng hạn như giờ làm việc, giờ nghỉ, ngày nghỉ lễ hoặc thời gian nghỉ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeCode); }
			set { Entity.Attributes[Fields.TimeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Múi giờ</para>
		/// <para><strong>Description</strong>: Múi giờ địa phương cho quy tắc lịch.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneCode); }
			set { Entity.Attributes[Fields.TimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}