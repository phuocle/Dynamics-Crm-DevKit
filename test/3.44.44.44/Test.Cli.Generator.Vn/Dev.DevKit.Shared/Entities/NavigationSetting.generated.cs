//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:49
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.NavigationSettingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum SettingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết lập Cơ bản</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thiet_lap_Co_ban = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết lập Nâng cao</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thiet_lap_Nang_cao = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tóm tắt Thiết lập Cơ bản</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tom_tat_Thiet_lap_Co_ban = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tóm tắt Thiết lập Nâng cao</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tom_tat_Thiet_lap_Nang_cao = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class NavigationSetting : EntityBase
	{
		public struct Fields
		{
			public const string AdvancedSettingOrder = "advancedsettingorder";
			public const string AppConfigId = "appconfigid";
			public const string AppConfigIdUnique = "appconfigidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string GroupName = "groupname";
			public const string IconResourceId = "iconresourceid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NavigationSettingId = "navigationsettingid";
			public const string NavigationSettingIdUnique = "navigationsettingidunique";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string PageUrl = "pageurl";
			public const string ParentNavigationSettingId = "parentnavigationsettingid";
			public const string Privileges = "privileges";
			public const string ProgressState = "progressstate";
			public const string QuickSettingOrder = "quicksettingorder";
			public const string ResourceId = "resourceid";
			public const string SettingType = "settingtype";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
		}
		public const string EntityLogicalName = "navigationsetting";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9900;
		public const string EntityCollectionSchemaName = "NavigationSettings";
		public const string EntityDisplayCollectionName = "Thiết đặt Điều hướng";
		public const string DisplayName = "Thiết đặt Điều hướng";
		public const string EntitySetName = "navigationsettings";
		public const string EntityLogicalCollectionName = "navigationsettings";
		public const string EntityPrimaryIdAttribute = "navigationsettingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "NavigationSetting";
		[DebuggerNonUserCode()]
		public NavigationSetting()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public NavigationSetting(Guid NavigationSettingId)
		{
			Entity = new Entity(EntityLogicalName, NavigationSettingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public NavigationSetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="NavigationSetting"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public NavigationSetting(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="NavigationSetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public NavigationSetting(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new NavigationSetting(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="NavigationSetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public NavigationSetting(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new NavigationSetting(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public NavigationSetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AdvancedOrder</para>
		/// <para><strong>Description</strong>: Nhập vị trí của NavigationSetting này theo như cách hiển thị trong nhóm của thiết đặt điều hướng đó tại menu Thiết lập Nâng cao.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AdvancedSettingOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AdvancedSettingOrder); }
			set { Entity.Attributes[Fields.AdvancedSettingOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AppConfigId</para>
		/// <para><strong>Description</strong>: Nhập bản ghi Thiết đặt Ứng dụng liên kết với Thiết đặt Điều hướng này.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="appmodule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppConfigId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppConfigId); }
			set { Entity.Attributes[Fields.AppConfigId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AppConfigIdUnique</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppConfigIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppConfigIdUnique); }
			set { Entity.Attributes[Fields.AppConfigIdUnique] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics CRM.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập một mô tả để diễn tả chi tiết Thiết đặt Điều hướng đó.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Nhóm</para>
		/// <para><strong>Description</strong>: Nhập tên của nhóm mà bản ghi Thiết đặt Điều hướng này thể hiện.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupName); }
			set { Entity.Attributes[Fields.GroupName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IconResourceId</para>
		/// <para><strong>Description</strong>: Mã định danh tài nguyên web của biểu tượng được dùng cho khu vực hoặc khu vực con thiết đặt điều hướng.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IconResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IconResourceId); }
			set { Entity.Attributes[Fields.IconResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc di chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản được đưa vào</para>
		/// <para><strong>Description</strong>: Phiên bản trong đó quy tắc tương tự được đưa vào.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được quản lý</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics CRM.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Nhập tiêu đề hoặc tên mô tả Thiết đặt Điều hướng để có thể nhận diện thiết đặt đó trong các dạng xem Dynamics CRM.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NavigationSettingId</para>
		/// <para><strong>Description</strong>: Xác định một trang hay nhóm các trang thiết đặt được định cấu hình để sử dụng trong một ứng dụng đơn.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid NavigationSettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.NavigationSettingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NavigationSettingIdUnique</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? NavigationSettingIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.NavigationSettingIdUnique); }
			set { Entity.Attributes[Fields.NavigationSettingIdUnique] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityObjectTypeCode</para>
		/// <para><strong>Description</strong>: Nhập Mã Loại Đối tượng của thực thể liên kết có trang được thể hiện bằng bản ghi Thiết đặt Điều hướng này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Trường do hệ thống điền để xác định tổ chức sở hữu bản ghi Thiết đặt Điều hướng này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian ghi đè bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Trang</para>
		/// <para><strong>Description</strong>: Nhập URL xác định vị trí của trang được liên kết với bản ghi Thiết đặt Điều hướng này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PageUrl); }
			set { Entity.Attributes[Fields.PageUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Thiết đặt Điều hướng Mẹ</para>
		/// <para><strong>Description</strong>: Bản ghi Thiết đặt Điều hướng thể hiện nhóm có chứa bản ghi này.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentNavigationSettingId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentNavigationSettingId); }
			set { Entity.Attributes[Fields.ParentNavigationSettingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đặc quyền</para>
		/// <para><strong>Description</strong>: Nhập Mặt nạ Đặc quyền cho thực thể liên kết với trang thiết đặt điều hướng này, đây sẽ là yêu cầu tối thiểu để trang khả dụng với một người dùng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Privileges
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Privileges); }
			set { Entity.Attributes[Fields.Privileges] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Tiến độ</para>
		/// <para><strong>Description</strong>: Chọn mức độ hoàn thành thiết lập cho trang Thiết đặt Điều hướng này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đã truy cập</strong>]: true - [<strong>Không truy cập</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không truy cập</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProgressState
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProgressState); }
			set { Entity.Attributes[Fields.ProgressState] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: QuickOrder</para>
		/// <para><strong>Description</strong>: Nhập vị trí của NavigationSetting này theo như cách hiển thị trong menu Thiết lập Nhanh.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QuickSettingOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QuickSettingOrder); }
			set { Entity.Attributes[Fields.QuickSettingOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID tài nguyên</para>
		/// <para><strong>Description</strong>: Tài nguyên Web sẽ được liên kết với bản ghi Thiết đặt Điều hướng này.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ResourceId); }
			set { Entity.Attributes[Fields.ResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Nhóm</para>
		/// <para><strong>Description</strong>: Chọn loại nhóm mà bản ghi Thiết đặt Điều hướng này biểu thị. Điều này sẽ xác định menu nào trong số ba menu tùy chỉnh trong ứng dụng sẽ chứa nhóm này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.SettingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.SettingType? SettingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SettingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.NavigationSettingOptionSets.SettingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SettingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SettingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
	}
}