//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:06
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.BusinessDataLocalizedLabelOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BusinessDataLocalizedLabel : EntityBase
	{
		public struct Fields
		{
			public const string BusinessDataLocalizedLabelId = "businessdatalocalizedlabelid";
			public const string Label = "label";
			public const string LanguageId = "languageid";
			public const string ObjectColumnName = "objectcolumnname";
			public const string ObjectColumnNumber = "objectcolumnnumber";
			public const string ObjectId = "objectid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "businessdatalocalizedlabel";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4232;
		public const string EntityCollectionSchemaName = "BusinessDataLocalizedLabels";
		public const string EntityDisplayCollectionName = "Nhãn Bản địa hóa Dữ liệu Doanh nghiệp";
		public const string DisplayName = "Nhãn Bản địa hóa Dữ liệu Doanh nghiệp";
		public const string EntitySetName = "businessdatalocalizedlabels";
		public const string EntityLogicalCollectionName = "businessdatalocalizedlabels";
		public const string EntityPrimaryIdAttribute = "businessdatalocalizedlabelid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "BusinessDataLocalizedLabel";
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel(Guid BusinessDataLocalizedLabelId)
		{
			Entity = new Entity(EntityLogicalName, BusinessDataLocalizedLabelId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BusinessDataLocalizedLabel"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BusinessDataLocalizedLabel"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BusinessDataLocalizedLabel(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BusinessDataLocalizedLabel"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BusinessDataLocalizedLabel(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BusinessDataLocalizedLabel(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Nhãn Bản địa hóa Dữ liệu Doanh nghiệp.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BusinessDataLocalizedLabelId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BusinessDataLocalizedLabelId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Nhãn</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Label
		{
			get { return Entity.GetAttributeValue<string>(Fields.Label); }
			set { Entity.Attributes[Fields.Label] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Id Ngôn ngữ</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageId); }
			set { Entity.Attributes[Fields.LanguageId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Tên Cột Đối tượng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectColumnName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectColumnName); }
			set { Entity.Attributes[Fields.ObjectColumnName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Số Cột Đối tượng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectColumnNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectColumnNumber); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Id Đối tượng</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}