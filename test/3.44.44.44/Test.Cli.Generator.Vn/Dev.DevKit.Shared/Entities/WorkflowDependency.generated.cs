//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:25
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets
{
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ đuôi sdk</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bo_duoi_sdk = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Định nghĩa thực thể tùy chỉnh mà quy trình làm việc phụ thuộc vào đó</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Dinh_nghia_thuc_the_tuy_chinh_ma_quy_trinh_lam_viec_phu_thuoc_vao_do = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Định nghĩa thuộc tính mà quy trình làm việc phụ thuộc vào đó</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Dinh_nghia_thuoc_tinh_ma_quy_trinh_lam_viec_phu_thuoc_vao_do = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham số cục bộ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tham_so_cuc_bo = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể chính</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thuc_the_chinh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể chính - sau thao tác SDK</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thuc_the_chinh_sau_thao_tac_SDK = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể chính - trước thao tác SDK</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thuc_the_chinh_truoc_thao_tac_SDK = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể đối số mà quy trình làm việc phụ thuộc vào đó</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Thuc_the_doi_so_ma_quy_trinh_lam_viec_phu_thuoc_vao_do = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể liên quan</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Thuc_the_lien_quan = 6
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class WorkflowDependency : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomEntityName = "customentityname";
			public const string DependentAttributeName = "dependentattributename";
			public const string DependentEntityName = "dependententityname";
			public const string EntityAttributes = "entityattributes";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ParameterName = "parametername";
			public const string ParameterType = "parametertype";
			public const string RelatedAttributeName = "relatedattributename";
			public const string RelatedEntityName = "relatedentityname";
			public const string SdkMessageId = "sdkmessageid";
			public const string Type = "type";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowDependencyId = "workflowdependencyid";
			public const string WorkflowId = "workflowid";
		}
		public const string EntityLogicalName = "workflowdependency";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4704;
		public const string EntityCollectionSchemaName = "WorkflowDependencies";
		public const string EntityDisplayCollectionName = "Các quan hệ phụ thuộc quy trình";
		public const string DisplayName = "Quan hệ phụ thuộc quy trình";
		public const string EntitySetName = "workflowdependencies";
		public const string EntityLogicalCollectionName = "workflowdependencies";
		public const string EntityPrimaryIdAttribute = "workflowdependencyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "WorkflowDependency";
		[DebuggerNonUserCode()]
		public WorkflowDependency()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public WorkflowDependency(Guid WorkflowDependencyId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowDependencyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public WorkflowDependency(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="WorkflowDependency"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public WorkflowDependency(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="WorkflowDependency"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public WorkflowDependency(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new WorkflowDependency(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="WorkflowDependency"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public WorkflowDependency(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new WorkflowDependency(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public WorkflowDependency(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể tùy chỉnh</para>
		/// <para><strong>Description</strong>: Tên của thực thể đã dùng trong quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomEntityName); }
			set { Entity.Attributes[Fields.CustomEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên thuộc tính phụ thuộc</para>
		/// <para><strong>Description</strong>: Tên của thuộc tính đã dùng trong quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DependentAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DependentAttributeName); }
			set { Entity.Attributes[Fields.DependentAttributeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên thực thể phụ thuộc</para>
		/// <para><strong>Description</strong>: Tên của thực thể đã dùng trong quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DependentEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DependentEntityName); }
			set { Entity.Attributes[Fields.DependentEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Danh sách các thuộc tính được phân tách bằng dấu phẩy sẽ được chuyển đến phiên bản quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityAttributes); }
			set { Entity.Attributes[Fields.EntityAttributes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi quan hệ phụ thuộc quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi quan hệ phụ thuộc quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa quan hệ phụ thuộc quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu phiên bản quy trình làm việc mẹ.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningUser
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Tên của tham số quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParameterName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParameterName); }
			set { Entity.Attributes[Fields.ParameterName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Tên hoàn toàn hợp lệ của loại CRL của tham số cục bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParameterType
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParameterType); }
			set { Entity.Attributes[Fields.ParameterType] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Thuộc tính của thực thể chính chỉ định thực thể liên quan.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedAttributeName); }
			set { Entity.Attributes[Fields.RelatedAttributeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể liên quan</para>
		/// <para><strong>Description</strong>: Tên của thực thể liên quan.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedEntityName); }
			set { Entity.Attributes[Fields.RelatedEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của thông báo SDK.</para>
		/// <para><strong>Lookup</strong>: <see cref="sdkmessage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageId); }
			set { Entity.Attributes[Fields.SdkMessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại</para>
		/// <para><strong>Description</strong>: Loại quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets.Type.Tham_so_cuc_bo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowDependencyOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quan hệ phụ thuộc quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quan hệ phụ thuộc quy trình.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowDependencyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowDependencyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quy trình liên kết với quan hệ phụ thuộc.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowId); }
			set { Entity.Attributes[Fields.WorkflowId] = value; }
		}
	}
}