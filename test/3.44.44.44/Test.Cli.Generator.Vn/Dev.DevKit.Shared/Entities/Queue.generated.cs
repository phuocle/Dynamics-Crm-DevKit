//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:53
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.QueueOptionSets
{
	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bi_tu_choi = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phê chuẩn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_phe_chuan = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ Phê duyệt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_cho_Phe_duyet = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trống</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Trong = 0
	}
	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ hoặc Bộ định tuyến Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dong_bo_phia_May_chu_hoac_Bo_dinh_tuyen_Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư chuyển tiếp</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hop_thu_chuyen_tiep = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0
	}
	public enum IncomingEmailFilteringMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Email khi trả lời email Dynamics 365</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Email_khi_tra_loi_email_Dynamics_365 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email từ bản ghi Dynamics 365 có bật email</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Email_tu_ban_ghi_Dynamics_365_co_bat_email = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email từ Khách hàng tiềm năng, Người liên hệ và Khách hàng Dynamics 365</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email_tu_Khach_hang_tiem_nang_Nguoi_lien_he_va_Khach_hang_Dynamics_365 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có email</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khong_co_email = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tất cả thư email</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tat_ca_thu_email = 0
	}
	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ hoặc Bộ định tuyến Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dong_bo_phia_May_chu_hoac_Bo_dinh_tuyen_Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0
	}
	public enum QueueTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum QueueViewType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Công khai</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Cong_khai = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Riêng tư</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Rieng_tu = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Queue : EntityBase
	{
		public struct Fields
		{
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string AllowEmailCredentials = "allowemailcredentials";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string BusinessUnitId = "businessunitid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultMailbox = "defaultmailbox";
			public const string Description = "description";
			public const string EMailAddress = "emailaddress";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string EmailPassword = "emailpassword";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string EmailUsername = "emailusername";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string IsFaxQueue = "isfaxqueue";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NumberOfItems = "numberofitems";
			public const string NumberOfMembers = "numberofmembers";
			public const string OrganizationId = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string PrimaryUserId = "primaryuserid";
			public const string QueueId = "queueid";
			public const string QueueTypeCode = "queuetypecode";
			public const string QueueViewType = "queueviewtype";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "queue";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2020;
		public const string EntityCollectionSchemaName = "Queues";
		public const string EntityDisplayCollectionName = "Hàng đợi";
		public const string DisplayName = "Hàng đợi";
		public const string EntitySetName = "queues";
		public const string EntityLogicalCollectionName = "queues";
		public const string EntityPrimaryIdAttribute = "queueid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Queue";
		[DebuggerNonUserCode()]
		public Queue()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Queue(Guid QueueId)
		{
			Entity = new Entity(EntityLogicalName, QueueId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Queue(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Queue"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Queue(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Queue"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Queue(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Queue(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Queue"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Queue(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Queue(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Queue(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận dùng thông tin đăng nhập để xử lý email (lỗi thời)</para>
		/// <para><strong>Description</strong>: Hệ thống không còn dùng thuộc tính này. Dữ liệu giờ nằm trong thuộc tính Mailbox.AllowEmailConnectorToUseCredentials.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public bool? AllowEmailCredentials
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEmailCredentials); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh có liên kết với hàng đợi.</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư</para>
		/// <para><strong>Description</strong>: Chọn hộp thư liên kết với hàng đợi này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMailbox
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMailbox); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả hàng đợi.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Đến</para>
		/// <para><strong>Description</strong>: Địa chỉ email có liên kết với hàng đợi này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress); }
			set { Entity.Attributes[Fields.EMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mật khẩu (lỗi thời)</para>
		/// <para><strong>Description</strong>: Hệ thống không còn dùng thuộc tính này. Dữ liệu giờ nằm trong thuộc tính Mailbox.Password.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public string EmailPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailPassword); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái email chính</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái của địa chỉ email chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval.Trong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên người dùng (lỗi thời)</para>
		/// <para><strong>Description</strong>: Hệ thống không còn dùng thuộc tính này. Dữ liệu giờ nằm trong thuộc tính Mailbox.UserName.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public string EmailUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailUsername); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền liên kết với hàng đợi theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi thành hoạt động email</para>
		/// <para><strong>Description</strong>: Thông tin xác định khả năng hàng đợi định bỏ qua thư không mong muốn (không còn dùng).</para>
		/// <para><strong>Two Option</strong> - [<strong>Chỉ email cụ thể</strong>]: true - [<strong>Tất cả email đến</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Tất cả email đến</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreUnsolicitedEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreUnsolicitedEmail); }
			set { Entity.Attributes[Fields.IgnoreUnsolicitedEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức chuyển giao email đến</para>
		/// <para><strong>Description</strong>: Phương thức chuyển giao email đến cho hàng đợi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi email đến thành hoạt động</para>
		/// <para><strong>Description</strong>: Chuyển đổi email đến thành hoạt động</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod.Tat_ca_thu_email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod? IncomingEmailFilteringMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailFilteringMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Phê duyệt của Quản trị viên O365 về Địa chỉ Email</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái phê duyệt về địa chỉ email của Quản trị viên O365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng đợi fax</para>
		/// <para><strong>Description</strong>: Chỉ định hàng đợi có phải là hàng đợi chuyển giao fax hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Hàng đợi fax</strong>]: true - [<strong>Hàng đợi không phải fax</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Hàng đợi không phải fax</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public bool? IsFaxQueue
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFaxQueue); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi hàng đợi lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi hàng đợi lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa hàng đợi lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của hàng đợi.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục trong hàng đợi</para>
		/// <para><strong>Description</strong>: Số lượng Mục trong hàng đợi đã liên kết với hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfItems
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfItems); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng thành viên</para>
		/// <para><strong>Description</strong>: Số lượng thành viên đã liên kết với hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfMembers
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfMembers); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức có liên kết với hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức chuyển giao email đi</para>
		/// <para><strong>Description</strong>: Phương thức chuyển giao email đi cho hàng đợi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu hàng đợi.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu (không còn dùng)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của chủ sở hữu hàng đợi.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public EntityReference PrimaryUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryUserId); }
			set { Entity.Attributes[Fields.PrimaryUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng đợi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hàng đợi.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid QueueId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.QueueId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại hàng đợi</para>
		/// <para><strong>Description</strong>: Loại hàng đợi được tự động gán khi tạo người dùng hay hàng đợi. Loại này có thể là công khai, riêng tư hoặc đang thực hiện.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode? QueueTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QueueTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại</para>
		/// <para><strong>Description</strong>: Chọn xem hàng đợi ở chế độ công khai hay riêng tư. Tất cả mọi người đều có thể xem hàng đợi công khai. Chỉ các thành viên được thêm vào hàng đợi mới có thể xem hàng đợi riêng tư.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType.Cong_khai"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType? QueueViewType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QueueViewType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.QueueViewType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.QueueViewType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của hàng đợi.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Lý do cho trạng thái của hàng đợi.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của loại tiền liên kết với hàng đợi.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của hàng đợi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}