//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:02
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ActivityPartyOptionSets
{
	public enum InstanceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản ghi chủ Lặp lại</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ban_ghi_chu_Lap_lai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Lặp lại</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Lap_lai = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ Lặp lại</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ngoai_le_Lap_lai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ Tương lai Lặp lại</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Ngoai_le_Tuong_lai_Lap_lai = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Lặp lại</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Phien_ban_Lap_lai = 2
	}
	public enum ParticipationTypeMask
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Chu_so_huu = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Có liên quan</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Co_lien_quan = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Khach_hang = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Liên quan đến</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Lien_quan_den = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người gửi</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nguoi_gui = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người nhận trong mục BCC</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Nguoi_nhan_trong_muc_BCC = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người nhận trong mục CC</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Nguoi_nhan_trong_muc_CC = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người nhận trong mục Đến</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nguoi_nhan_trong_muc_Den = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia bắt buộc</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Nguoi_tham_gia_bat_buoc = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia cuộc trò chuyện</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Nguoi_tham_gia_cuoc_tro_chuyen = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia không bắt buộc</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Nguoi_tham_gia_khong_bat_buoc = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tổ chức</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Nguoi_to_chuc = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn lực</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Nguon_luc = 10
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ActivityParty : EntityBase
	{
		public struct Fields
		{
			public const string ActivityId = "activityid";
			public const string ActivityPartyId = "activitypartyid";
			public const string AddressUsed = "addressused";
			public const string AddressUsedEmailColumnNumber = "addressusedemailcolumnnumber";
			public const string DoNotEmail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string Effort = "effort";
			public const string ExchangeEntryId = "exchangeentryid";
			public const string InstanceTypeCode = "instancetypecode";
			public const string IsPartyDeleted = "ispartydeleted";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ParticipationTypeMask = "participationtypemask";
			public const string PartyId = "partyid";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string UnresolvedPartyName = "unresolvedpartyname";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "activityparty";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 135;
		public const string EntityCollectionSchemaName = "ActivityParties";
		public const string EntityDisplayCollectionName = "Bên Hoạt động";
		public const string DisplayName = "Bên Hoạt động";
		public const string EntitySetName = "activityparties";
		public const string EntityLogicalCollectionName = "activityparties";
		public const string EntityPrimaryIdAttribute = "activitypartyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "partyidname";
		public const string EntitySchemaName = "ActivityParty";
		[DebuggerNonUserCode()]
		public ActivityParty()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ActivityParty(Guid ActivityPartyId)
		{
			Entity = new Entity(EntityLogicalName, ActivityPartyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ActivityParty(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ActivityParty"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ActivityParty(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ActivityParty"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ActivityParty(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ActivityParty(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ActivityParty"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ActivityParty(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ActivityParty(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ActivityParty(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hoạt động liên kết với bên hoạt động. (Một &quot;bên&quot; là bất kỳ cá nhân nào được liên kết với một hoạt động).</para>
		/// <para><strong>Lookup</strong>: <see cref="activitypointer"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bên Hoạt động</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bên hoạt động.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ActivityPartyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ActivityPartyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ</para>
		/// <para><strong>Description</strong>: Địa chỉ email dùng để nhận email và liên kết với thực thể đích.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AddressUsed
		{
			get { return Entity.GetAttributeValue<string>(Fields.AddressUsed); }
			set { Entity.Attributes[Fields.AddressUsed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số cột email của bên</para>
		/// <para><strong>Description</strong>: Số cột địa chỉ email từ bên được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AddressUsedEmailColumnNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AddressUsedEmailColumnNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Email</para>
		/// <para><strong>Description</strong>: Thông tin về việc có cho phép gửi email đến bên hoạt động hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEmail); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Fax</para>
		/// <para><strong>Description</strong>: Thông tin về việc có cho phép gửi fax đến bên hoạt động hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Gọi điện</para>
		/// <para><strong>Description</strong>: Thông tin về việc có cho phép gọi điện thoại cho khách hàng tiềm năng hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Thư Bưu điện</para>
		/// <para><strong>Description</strong>: Thông tin về việc có cho phép gửi thư bưu điện đến khách hàng tiềm năng hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nỗ lực</para>
		/// <para><strong>Description</strong>: Số lần nỗ lực được nguồn lực sử dụng trong hoạt động lên hẹn dịch vụ.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Effort
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Effort); }
			set { Entity.Attributes[Fields.Effort] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục nhập Chứng khoán</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeEntryId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeEntryId); }
			set { Entity.Attributes[Fields.ExchangeEntryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Cuộc hẹn</para>
		/// <para><strong>Description</strong>: Loại phiên bản của chuỗi lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.InstanceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.InstanceTypeCode.Khong_Lap_lai"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.InstanceTypeCode? InstanceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.InstanceTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bên bị Xóa</para>
		/// <para><strong>Description</strong>: Thông tin về việc xóa bản ghi thực thể phụ thuộc hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPartyDeleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPartyDeleted); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu activity_party.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningUser
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tham gia</para>
		/// <para><strong>Description</strong>: Vai trò của cá nhân trong hoạt động, chẳng hạn như người gửi, người nhận, cc, bcc, bắt buộc, không bắt buộc, người tổ chức, lưu ý hoặc chủ sở hữu.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.ParticipationTypeMask"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.ParticipationTypeMask? ParticipationTypeMask
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ParticipationTypeMask);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ActivityPartyOptionSets.ParticipationTypeMask)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ParticipationTypeMask] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ParticipationTypeMask] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bên</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bên được liên kết với hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PartyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PartyId); }
			set { Entity.Attributes[Fields.PartyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc Theo lịch</para>
		/// <para><strong>Description</strong>: Thời gian kết thúc theo lịch của hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu Theo lịch</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu theo lịch của hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên của bên chưa được giải quyết</para>
		/// <para><strong>Description</strong>: Tên của bên được sử dụng khi bên đó không được giải quyết thành một thực thể.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UnresolvedPartyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UnresolvedPartyName); }
			set { Entity.Attributes[Fields.UnresolvedPartyName] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}