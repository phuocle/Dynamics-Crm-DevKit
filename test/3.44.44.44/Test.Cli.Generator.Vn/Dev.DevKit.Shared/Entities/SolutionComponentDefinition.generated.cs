//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:20
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum RemoveActiveCustomizationsBehavior
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không phân tầng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_phan_tang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phân tầng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Phan_tang = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SolutionComponentDefinition : EntityBase
	{
		public struct Fields
		{
			public const string AllowDeleteBaseSolutionRowAndFakeDelete = "allowdeletebasesolutionrowandfakedelete";
			public const string AllowOverwriteCustomizations = "allowoverwritecustomizations";
			public const string AllowRecreateForLogicallyDeletedRow = "allowrecreateforlogicallydeletedrow";
			public const string AlwaysRemoveActiveCustomizationsOnUninstall = "alwaysremoveactivecustomizationsonuninstall";
			public const string CanBeAddedToSolutionComponents = "canbeaddedtosolutioncomponents";
			public const string CanBeHidden = "canbehidden";
			public const string ComponentState = "componentstate";
			public const string ComponentXPath = "componentxpath";
			public const string DescendentIsViewableComponent = "descendentisviewablecomponent";
			public const string GroupParentComponentAttributeName = "groupparentcomponentattributename";
			public const string GroupParentComponentType = "groupparentcomponenttype";
			public const string HasIsRenameableAttribute = "hasisrenameableattribute";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsDependencyDisabled = "isdependencydisabled";
			public const string IsDisplayable = "isdisplayable";
			public const string IsManaged = "ismanaged";
			public const string IsMergeable = "ismergeable";
			public const string IsMetadata = "ismetadata";
			public const string IsViewable = "isviewable";
			public const string LabelTypeCode = "labeltypecode";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string ParentAttributeName = "parentattributename";
			public const string PrimaryEntityName = "primaryentityname";
			public const string RemoveActiveCustomizationsBehavior = "removeactivecustomizationsbehavior";
			public const string RootAttributeName = "rootattributename";
			public const string RootComponent = "rootcomponent";
			public const string SolutionComponentDefinitionId = "solutioncomponentdefinitionid";
			public const string SolutionComponentDefinitionIdUnique = "solutioncomponentdefinitionidunique";
			public const string SolutionComponentType = "solutioncomponenttype";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string UseForceDeleteForSolutionUpdate = "useforcedeleteforsolutionupdate";
			public const string UseForceUpdateAlways = "useforceupdatealways";
			public const string UseSentinelRowInBaseSolution = "usesentinelrowinbasesolution";
			public const string ViewableDescendentComponentType = "viewabledescendentcomponenttype";
		}
		public const string EntityLogicalName = "solutioncomponentdefinition";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 7104;
		public const string EntityCollectionSchemaName = "SolutionComponentDefinitions";
		public const string EntityDisplayCollectionName = "Định nghĩa Thành phần Giải pháp";
		public const string DisplayName = "Định nghĩa Thành phần Giải pháp";
		public const string EntitySetName = "solutioncomponentdefinitions";
		public const string EntityLogicalCollectionName = "solutioncomponentdefinitions";
		public const string EntityPrimaryIdAttribute = "solutioncomponentdefinitionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SolutionComponentDefinition";
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition(Guid SolutionComponentDefinitionId)
		{
			Entity = new Entity(EntityLogicalName, SolutionComponentDefinitionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SolutionComponentDefinition"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SolutionComponentDefinition"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SolutionComponentDefinition(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SolutionComponentDefinition"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SolutionComponentDefinition(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SolutionComponentDefinition(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AllowDeleteBaseSolutionRowAndFakeDeleteInSolutionUpgrade</para>
		/// <para><strong>Description</strong>: Mã định danh Boolean cho việc dùng tính năng xóa các lớp cơ sở.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowDeleteBaseSolutionRowAndFakeDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowDeleteBaseSolutionRowAndFakeDelete); }
			set { Entity.Attributes[Fields.AllowDeleteBaseSolutionRowAndFakeDelete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AllowOverwriteCustomizations</para>
		/// <para><strong>Description</strong>: Liệu thành phần này có cho phép Ghi đè Tùy chỉnh khi cập nhật giải pháp được quản lý hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đúng</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowOverwriteCustomizations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowOverwriteCustomizations); }
			set { Entity.Attributes[Fields.AllowOverwriteCustomizations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AllowRecreateForLogicallyDeletedRowInActiveSolution</para>
		/// <para><strong>Description</strong>: Mã định danh Boolean cho một hàng được đánh dấu là đã xóa logic trong giải pháp Hiện hoạt và cần được tạo ngược trở lại</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowRecreateForLogicallyDeletedRow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowRecreateForLogicallyDeletedRow); }
			set { Entity.Attributes[Fields.AllowRecreateForLogicallyDeletedRow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AlwaysRemoveActiveCustomizationsOnUninstall</para>
		/// <para><strong>Description</strong>: Cờ được dùng để cho biết liệu thành phần này có luôn loại bỏ các tùy chỉnh hiện hoạt khi dỡ cài đặt hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AlwaysRemoveActiveCustomizationsOnUninstall
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AlwaysRemoveActiveCustomizationsOnUninstall); }
			set { Entity.Attributes[Fields.AlwaysRemoveActiveCustomizationsOnUninstall] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có thể được Thêm vào Thành phần Giải pháp</para>
		/// <para><strong>Description</strong>: Cờ cho biết liệu có thể thêm thành phần phụ trực tiếp vào bảng Thành phần Giải pháp không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeAddedToSolutionComponents
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeAddedToSolutionComponents); }
			set { Entity.Attributes[Fields.CanBeAddedToSolutionComponents] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CanBeHidden</para>
		/// <para><strong>Description</strong>: Liệu thành phần này có được ẩn bằng cách dùng thuộc tính được quản lý IsHidden hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeHidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeHidden); }
			set { Entity.Attributes[Fields.CanBeHidden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phần XPath</para>
		/// <para><strong>Description</strong>: Đường dẫn tới nút XML của thành phần</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComponentXPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComponentXPath); }
			set { Entity.Attributes[Fields.ComponentXPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hậu duệ là một Thành phần Có thể xem được</para>
		/// <para><strong>Description</strong>: Cờ cho biết liệu thành phần này có dùng hậu duệ của nó làm thành phần có thể xem được hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DescendentIsViewableComponent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DescendentIsViewableComponent); }
			set { Entity.Attributes[Fields.DescendentIsViewableComponent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Thuộc tính Thành phần Mẹ của Nhóm</para>
		/// <para><strong>Description</strong>: Tên Thuộc tính Thành phần Mẹ của Nhóm</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupParentComponentAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupParentComponentAttributeName); }
			set { Entity.Attributes[Fields.GroupParentComponentAttributeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Thành phần Mẹ của Nhóm</para>
		/// <para><strong>Description</strong>: Loại Thành phần Mẹ của Nhóm</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GroupParentComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GroupParentComponentType); }
			set { Entity.Attributes[Fields.GroupParentComponentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HasIsRenameableAttribute</para>
		/// <para><strong>Description</strong>: Boolean cho biết liệu thành phần có thuộc tính có thể đặt tên lại hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? HasIsRenameableAttribute
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.HasIsRenameableAttribute); }
			set { Entity.Attributes[Fields.HasIsRenameableAttribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc di chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản được giới thiệu</para>
		/// <para><strong>Description</strong>: Phiên bản có thành phần được đưa vào.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tắt Quan hệ phụ thuộc</para>
		/// <para><strong>Description</strong>: Quan hệ phụ thuộc bị tắt đối với thành phần</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDependencyDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDependencyDisabled); }
			set { Entity.Attributes[Fields.IsDependencyDisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có thể hiển thị</para>
		/// <para><strong>Description</strong>: Boolean cho biết liệu thành phần có bật giao diện người dùng không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisplayable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisplayable); }
			set { Entity.Attributes[Fields.IsDisplayable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được quản lý</para>
		/// <para><strong>Description</strong>: Boolean cho biết liệu thành phần có thuộc tính có quản lý được không</para>
		/// <para><strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
			set { Entity.Attributes[Fields.IsManaged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có thể hợp nhất được</para>
		/// <para><strong>Description</strong>: Liệu thành phần này là một thành phần có thể hợp nhất được, hay là một phần của một thành phần có thể hợp nhất được</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMergeable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMergeable); }
			set { Entity.Attributes[Fields.IsMergeable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu</para>
		/// <para><strong>Description</strong>: Mã định danh Boolean cho thành phần siêu dữ liệu</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMetadata
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMetadata); }
			set { Entity.Attributes[Fields.IsMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có thể xem được</para>
		/// <para><strong>Description</strong>: Liệu có thể xem được thành phần này trong SDK và UI hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsViewable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsViewable); }
			set { Entity.Attributes[Fields.IsViewable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại Nhãn</para>
		/// <para><strong>Description</strong>: Mã loại Nhãn</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LabelTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LabelTypeCode); }
			set { Entity.Attributes[Fields.LabelTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại Đối tượng</para>
		/// <para><strong>Description</strong>: Mã loại Đối tượng</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Ghi đè Bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên thuộc tính Mẹ</para>
		/// <para><strong>Description</strong>: Tên thuộc tính của thuộc tính mẹ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParentAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParentAttributeName); }
			set { Entity.Attributes[Fields.ParentAttributeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Lôgic của Thực thể</para>
		/// <para><strong>Description</strong>: Tên logic của Thực thể Thành phần</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntityName); }
			set { Entity.Attributes[Fields.PrimaryEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hành vi Loại bỏ các Tùy chỉnh Hiện hoạt</para>
		/// <para><strong>Description</strong>: Hành vi Loại bỏ các Tùy chỉnh Hiện hoạt.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.RemoveActiveCustomizationsBehavior"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.RemoveActiveCustomizationsBehavior.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.RemoveActiveCustomizationsBehavior? RemoveActiveCustomizationsBehavior
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RemoveActiveCustomizationsBehavior);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionComponentDefinitionOptionSets.RemoveActiveCustomizationsBehavior)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RemoveActiveCustomizationsBehavior] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RemoveActiveCustomizationsBehavior] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Loại Thành phần Giải pháp Gốc</para>
		/// <para><strong>Description</strong>: Tên Loại Thành phần Giải pháp Gốc</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RootAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RootAttributeName); }
			set { Entity.Attributes[Fields.RootAttributeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Thành phần Giải pháp Gốc</para>
		/// <para><strong>Description</strong>: Loại Thành phần Giải pháp Gốc</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RootComponent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RootComponent); }
			set { Entity.Attributes[Fields.RootComponent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định nghĩa Thành phần Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của định nghĩa thành phần giải pháp</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SolutionComponentDefinitionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SolutionComponentDefinitionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Duy nhất</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionComponentDefinitionIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionComponentDefinitionIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Thành phần Giải pháp</para>
		/// <para><strong>Description</strong>: Loại Thành phần Giải pháp</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SolutionComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SolutionComponentType); }
			set { Entity.Attributes[Fields.SolutionComponentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp Hỗ trợ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UseForceDeleteForSolutionUpdate</para>
		/// <para><strong>Description</strong>: Mã định danh Boolean để bắt buộc xóa đối với cập nhật giải pháp.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseForceDeleteForSolutionUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseForceDeleteForSolutionUpdate); }
			set { Entity.Attributes[Fields.UseForceDeleteForSolutionUpdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UseForceUpdateAlways</para>
		/// <para><strong>Description</strong>: Mã định danh Boolean để buộc luôn cập nhật.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseForceUpdateAlways
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseForceUpdateAlways); }
			set { Entity.Attributes[Fields.UseForceUpdateAlways] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UseSentinelRowInBaseSolution</para>
		/// <para><strong>Description</strong>: Mã định danh Boolean cho việc dùng các hàng giá trị canh.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đúng</strong>]: true - [<strong>Sai</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Sai</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSentinelRowInBaseSolution
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSentinelRowInBaseSolution); }
			set { Entity.Attributes[Fields.UseSentinelRowInBaseSolution] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại thành phần Hậu duệ Có thể xem được</para>
		/// <para><strong>Description</strong>: Loại thành phần có thể là hậu duệ có thể xem được</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ViewableDescendentComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ViewableDescendentComponentType); }
			set { Entity.Attributes[Fields.ViewableDescendentComponentType] = value; }
		}
	}
}