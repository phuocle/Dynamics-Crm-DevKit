//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.MailboxOptionSets
{
	public enum ACTDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dong_bo_phia_May_chu = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Khong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 dành cho Outlook</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Microsoft_Dynamics_365_danh_cho_Outlook = 0
	}
	public enum ACTStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Chạy</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Chay = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Loi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bi_tu_choi = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phê chuẩn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_phe_chuan = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ Phê duyệt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_cho_Phe_duyet = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trống</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Trong = 0
	}
	public enum ExchangeContactsImportStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Imported</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Imported = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ImportFailed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ImportFailed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotImported</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NotImported = 0
	}
	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ hoặc Bộ định tuyến Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dong_bo_phia_May_chu_hoac_Bo_dinh_tuyen_Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư chuyển tiếp</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hop_thu_chuyen_tiep = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 dành cho Outlook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Microsoft_Dynamics_365_danh_cho_Outlook = 1
	}
	public enum IncomingEmailStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Chạy</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Chay = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Loi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum MailboxStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Chạy</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Chay = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Loi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum OfficeAppsDeploymentStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã cài đặt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_cai_dat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: InstallFailed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		InstallFailed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotInstalled</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NotInstalled = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: UninstallFailed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		UninstallFailed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: UpgradeRequired</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		UpgradeRequired = 4
	}
	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ hoặc Bộ định tuyến Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dong_bo_phia_May_chu_hoac_Bo_dinh_tuyen_Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 dành cho Outlook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Microsoft_Dynamics_365_danh_cho_Outlook = 1
	}
	public enum OutgoingEmailStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Chạy</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Chay = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Loi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thanh_cong = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Mailbox : EntityBase
	{
		public struct Fields
		{
			public const string ACTDeliveryMethod = "actdeliverymethod";
			public const string ACTStatus = "actstatus";
			public const string AllowEmailConnectorToUseCredentials = "allowemailconnectortousecredentials";
			public const string AverageTotalDuration = "averagetotalduration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EmailAddress = "emailaddress";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmailServerProfile = "emailserverprofile";
			public const string EnabledForACT = "enabledforact";
			public const string EnabledForIncomingEmail = "enabledforincomingemail";
			public const string EnabledForOutgoingEmail = "enabledforoutgoingemail";
			public const string EntityImageId = "entityimageid";
			public const string EWSURL = "ewsurl";
			public const string ExchangeContactsImportCompletedOn = "exchangecontactsimportcompletedon";
			public const string ExchangeContactsImportStatus = "exchangecontactsimportstatus";
			public const string ExchangeSyncStateXml = "exchangesyncstatexml";
			public const string ExchangeSyncStateXmlFileRef = "exchangesyncstatexmlfileref";
			public const string ExchangeSyncStateXmlFileRef_name = "exchangesyncstatexmlfileref_name";
			public const string FolderHierarchy = "folderhierarchy";
			public const string ForcedUnlockCount = "forcedunlockcount";
			public const string HostId = "hostid";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string IncomingEmailStatus = "incomingemailstatus";
			public const string IsACTSyncOrgFlagSet = "isactsyncorgflagset";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string IsExchangeContactsImportScheduled = "isexchangecontactsimportscheduled";
			public const string IsForwardMailbox = "isforwardmailbox";
			public const string IsOauthAccessTokenSet = "isoauthaccesstokenset";
			public const string IsOauthRefreshTokenSet = "isoauthrefreshtokenset";
			public const string IsPasswordSet = "ispasswordset";
			public const string IsServiceAccount = "isserviceaccount";
			public const string ItemsFailedForLastSync = "itemsfailedforlastsync";
			public const string ItemsProcessedForLastSync = "itemsprocessedforlastsync";
			public const string LastActiveOn = "lastactiveon";
			public const string LastAutoDiscoveredOn = "lastautodiscoveredon";
			public const string LastDuration = "lastduration";
			public const string LastMailboxForcedUnlockOccurredOn = "lastmailboxforcedunlockoccurredon";
			public const string LastMessageId = "lastmessageid";
			public const string LastSuccessfulSyncCompletedOn = "lastsuccessfulsynccompletedon";
			public const string LastSyncError = "lastsyncerror";
			public const string LastSyncErrorCode = "lastsyncerrorcode";
			public const string LastSyncErrorCount = "lastsyncerrorcount";
			public const string LastSyncErrorMachineName = "lastsyncerrormachinename";
			public const string LastSyncErrorOccurredOn = "lastsyncerroroccurredon";
			public const string LastSyncStartedOn = "lastsyncstartedon";
			public const string LastTagCompletedOn = "lasttagcompletedon";
			public const string LastTaggedMessageId = "lasttaggedmessageid";
			public const string LastTagProcessedMaxItems = "lasttagprocessedmaxitems";
			public const string MailboxId = "mailboxid";
			public const string MailboxProcessingContext = "mailboxprocessingcontext";
			public const string MailboxStatus = "mailboxstatus";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NextScheduledACTSyncInSeconds = "nextscheduledactsyncinseconds";
			public const string NoACTCount = "noactcount";
			public const string NoEmailCount = "noemailcount";
			public const string OauthAccessToken = "oauthaccesstoken";
			public const string OauthRefreshToken = "oauthrefreshtoken";
			public const string OauthTokenExpiresOn = "oauthtokenexpireson";
			public const string OfficeAppsDeploymentCompleteOn = "officeappsdeploymentcompleteon";
			public const string OfficeAppsDeploymentError = "officeappsdeploymenterror";
			public const string OfficeAppsDeploymentScheduled = "officeappsdeploymentscheduled";
			public const string OfficeAppsDeploymentStatus = "officeappsdeploymentstatus";
			public const string OrganizationId = "organizationid";
			public const string OrgMarkedAsPrimaryForExchangeSync = "orgmarkedasprimaryforexchangesync";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OutgoingEmailStatus = "outgoingemailstatus";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Password = "password";
			public const string PostponeMailboxProcessingUntil = "postponemailboxprocessinguntil";
			public const string PostponeOfficeAppsDeploymentUntil = "postponeofficeappsdeploymentuntil";
			public const string PostponeSendingUntil = "postponesendinguntil";
			public const string PostponeTestEmailConfigurationUntil = "postponetestemailconfigurationuntil";
			public const string ProcessAndDeleteEmails = "processanddeleteemails";
			public const string ProcessedTimes = "processedtimes";
			public const string ProcessEmailReceivedAfter = "processemailreceivedafter";
			public const string ProcessingLastAttemptedOn = "processinglastattemptedon";
			public const string ProcessingStateCode = "processingstatecode";
			public const string ReceivingPostponedUntil = "receivingpostponeduntil";
			public const string ReceivingPostponedUntilForACT = "receivingpostponeduntilforact";
			public const string RegardingObjectId = "regardingobjectid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TagEmailsAfter = "tagemailsafter";
			public const string TestEmailConfigurationRetryCount = "testemailconfigurationretrycount";
			public const string TestEmailConfigurationScheduled = "testemailconfigurationscheduled";
			public const string TestMailboxAccessCompletedOn = "testmailboxaccesscompletedon";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransientFailureCount = "transientfailurecount";
			public const string UndeliverableFolder = "undeliverablefolder";
			public const string Username = "username";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VerboseLoggingEnabled = "verboseloggingenabled";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "mailbox";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9606;
		public const string EntityCollectionSchemaName = "Mailboxes";
		public const string EntityDisplayCollectionName = "Hộp thư";
		public const string DisplayName = "Hộp thư";
		public const string EntitySetName = "mailboxes";
		public const string EntityLogicalCollectionName = "mailboxes";
		public const string EntityPrimaryIdAttribute = "mailboxid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Mailbox";
		[DebuggerNonUserCode()]
		public Mailbox()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Mailbox(Guid MailboxId)
		{
			Entity = new Entity(EntityLogicalName, MailboxId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Mailbox(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Mailbox"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Mailbox(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Mailbox"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Mailbox(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Mailbox(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Mailbox"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Mailbox(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Mailbox(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Mailbox(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn, Liên hệ và Nhiệm vụ</para>
		/// <para><strong>Description</strong>: Chọn phương thức gửi cho hộp thư của cuộc hẹn, liên hệ và nhiệm vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTDeliveryMethod.Microsoft_Dynamics_365_danh_cho_Outlook"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTDeliveryMethod? ACTDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ACTDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ACTDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ACTDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái của Cuộc hẹn, Liên hệ và Nhiệm vụ</para>
		/// <para><strong>Description</strong>: Trạng thái của Cuộc hẹn, Liên hệ và Nhiệm vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTStatus.Khong_Chay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTStatus? ACTStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ACTStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.ACTStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ACTStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ACTStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép Sử dụng Thông tin đăng nhập để Xử lý Email</para>
		/// <para><strong>Description</strong>: Chọn xem có cho phép bộ kết nối email sử dụng thông tin đăng nhập không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowEmailConnectorToUseCredentials
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEmailConnectorToUseCredentials); }
			set { Entity.Attributes[Fields.AllowEmailConnectorToUseCredentials] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giám sát Tổng Hiệu suất</para>
		/// <para><strong>Description</strong>: Tổng Lượng thời gian Trung bình của Hộp thư</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AverageTotalDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AverageTotalDuration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Email</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email của hộp thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Địa chỉ Email</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái của địa chỉ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.EmailRouterAccessApproval"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.EmailRouterAccessApproval.Trong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Máy chủ</para>
		/// <para><strong>Description</strong>: Chọn cấu hình máy chủ email của hộp thư.</para>
		/// <para><strong>Lookup</strong>: <see cref="emailserverprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EmailServerProfile
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EmailServerProfile); }
			set { Entity.Attributes[Fields.EmailServerProfile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật cho Cuộc hẹn, Liên hệ và Nhiệm vụ</para>
		/// <para><strong>Description</strong>: Cho biết có bật hộp thư cho Cuộc hẹn, Liên hệ và Nhiệm vụ không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForACT
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForACT); }
			set { Entity.Attributes[Fields.EnabledForACT] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật cho Email Đến</para>
		/// <para><strong>Description</strong>: Chọn xem có bật hộp thư cho email nhận không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForIncomingEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForIncomingEmail); }
			set { Entity.Attributes[Fields.EnabledForIncomingEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật cho Email Đi</para>
		/// <para><strong>Description</strong>: Chọn xem có bật hộp thư cho email gửi không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForOutgoingEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForOutgoingEmail); }
			set { Entity.Attributes[Fields.EnabledForOutgoingEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Dịch vụ Web Exchange</para>
		/// <para><strong>Description</strong>: URL điểm cuối dịch vụ web Exchange cho hộp thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,084</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EWSURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.EWSURL); }
			set { Entity.Attributes[Fields.EWSURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Hoàn thành Nhập Người liên hệ Exchange</para>
		/// <para><strong>Description</strong>: Ngày và giờ hoàn thành việc nhập người liên hệ Exchange lần cuối cho bản ghi hộp thư.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExchangeContactsImportCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExchangeContactsImportCompletedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Nhập Người liên hệ Exchange</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái nhập người liên hệ Exchange cho bản ghi hộp thư.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.ExchangeContactsImportStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.ExchangeContactsImportStatus.NotImported"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.ExchangeContactsImportStatus? ExchangeContactsImportStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExchangeContactsImportStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.ExchangeContactsImportStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExchangeContactsImportStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExchangeContactsImportStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái đồng bộ Exchange</para>
		/// <para><strong>Description</strong>: Bao gồm trạng thái đồng bộ Exchange ở định dạng XML.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeSyncStateXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeSyncStateXml); }
			set { Entity.Attributes[Fields.ExchangeSyncStateXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin tham chiếu tệp ExchangeSyncStateXml</para>
		/// <para><strong>Description</strong>: Tham chiếu đến tệp ExchangeSyncStateXml trên Azure.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeSyncStateXmlFileRef_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeSyncStateXmlFileRef_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hệ thống cấp bậc của thư mục</para>
		/// <para><strong>Description</strong>: Chứa hệ thống cấp bậc của các thư mục bên dưới hộp thư đến ở định dạng XML.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FolderHierarchy
		{
			get { return Entity.GetAttributeValue<string>(Fields.FolderHierarchy); }
			set { Entity.Attributes[Fields.FolderHierarchy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần hộp thư buộc bị mở khóa</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ForcedUnlockCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ForcedUnlockCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Máy chủ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của máy chủ không đồng bộ đang xử lý hộp thư này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HostId
		{
			get { return Entity.GetAttributeValue<string>(Fields.HostId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Đến</para>
		/// <para><strong>Description</strong>: Chọn cách gửi email đến vào hộp thư.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Email Đến</para>
		/// <para><strong>Description</strong>: Chọn trạng thái sẽ gán cho email đến.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailStatus.Khong_Chay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailStatus? IncomingEmailStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.IncomingEmailStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đặt Tổ chức Hiện tại là Tổ chức Đồng bộ</para>
		/// <para><strong>Description</strong>: Đặt tổ chức hiện tại là tổ chức đồng bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsACTSyncOrgFlagSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsACTSyncOrgFlagSet); }
			set { Entity.Attributes[Fields.IsACTSyncOrgFlagSet] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Phê duyệt của Quản trị viên O365 về Địa chỉ Email</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái phê duyệt về địa chỉ email của Quản trị viên O365.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
			set { Entity.Attributes[Fields.IsEmailAddressApprovedByO365Admin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã Lập lịch trình Nhập Người liên hệ Exchange.</para>
		/// <para><strong>Description</strong>: Đã Lập lịch trình Nhập Người liên hệ Exchange.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsExchangeContactsImportScheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsExchangeContactsImportScheduled); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là Hộp thư Chuyển tiếp</para>
		/// <para><strong>Description</strong>: Chọn xem hộp thư có là hộp thư chuyển tiếp hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsForwardMailbox
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsForwardMailbox); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOauthAccessTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOauthAccessTokenSet); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOauthRefreshTokenSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOauthRefreshTokenSet); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPasswordSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là Tài khoản Dịch vụ</para>
		/// <para><strong>Description</strong>: Chọn xem hộp thư có phản hồi cho một tài khoản dịch vụ không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsServiceAccount
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsServiceAccount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Các mục bị Lỗi khi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsFailedForLastSync
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsFailedForLastSync); }
			set { Entity.Attributes[Fields.ItemsFailedForLastSync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Các mục được Xử lý khi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsProcessedForLastSync
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsProcessedForLastSync); }
			set { Entity.Attributes[Fields.ItemsProcessedForLastSync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt Lần cuối vào</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastActiveOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastActiveOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động Phát hiện Lần cuối vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ phát hiện lần cuối URL dịch vụ web Exchange bằng dịch vụ AutoDiscover.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastAutoDiscoveredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastAutoDiscoveredOn); }
			set { Entity.Attributes[Fields.LastAutoDiscoveredOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giám sát Hiệu suất lượng thời gian cuối cùng</para>
		/// <para><strong>Description</strong>: Lượng thời gian Cuối cùng cho hộp thư</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastDuration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày và Giờ Cuối cùng khi hộp thư buộc bị mở khóa</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastMailboxForcedUnlockOccurredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastMailboxForcedUnlockOccurredOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID của thư trước</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của thư trước.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastMessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastMessageId); }
			set { Entity.Attributes[Fields.LastMessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Đồng bộ Thành công Lần cuối</para>
		/// <para><strong>Description</strong>: Thời gian Đồng bộ Thành công Lần cuối</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSuccessfulSyncCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSuccessfulSyncCompletedOn); }
			set { Entity.Attributes[Fields.LastSuccessfulSyncCompletedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngăn xếp Lỗi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncError
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncError); }
			set { Entity.Attributes[Fields.LastSyncError] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Lỗi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastSyncErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastSyncErrorCode); }
			set { Entity.Attributes[Fields.LastSyncErrorCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Lỗi Liên tiếp khi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LastSyncErrorCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LastSyncErrorCount); }
			set { Entity.Attributes[Fields.LastSyncErrorCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Máy bị Lỗi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncErrorMachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncErrorMachineName); }
			set { Entity.Attributes[Fields.LastSyncErrorMachineName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Lỗi Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncErrorOccurredOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncErrorOccurredOn); }
			set { Entity.Attributes[Fields.LastSyncErrorOccurredOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Bắt đầu Đồng bộ Lần cuối</para>
		/// <para><strong>Description</strong>: Thời gian Bắt đầu Đồng bộ Lần cuối</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncStartedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Tag Completed On</para>
		/// <para><strong>Description</strong>: Identifies the timestamp when tagging last completed. For internal use only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastTagCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastTagCompletedOn); }
			set { Entity.Attributes[Fields.LastTagCompletedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MessageId được gắn thẻ cuối cùng</para>
		/// <para><strong>Description</strong>: Xác định MessageId cuối cùng đã được xử lý để gắn thẻ trong hệ thống từ xa.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastTaggedMessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastTaggedMessageId); }
			set { Entity.Attributes[Fields.LastTaggedMessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Tag Processed Max Items</para>
		/// <para><strong>Description</strong>: Indicates if the last tagging cycle processed the maximum number of items. For internal use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? LastTagProcessedMaxItems
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.LastTagProcessedMaxItems); }
			set { Entity.Attributes[Fields.LastTagProcessedMaxItems] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hộp thư.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid MailboxId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.MailboxId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngữ cảnh Xử lý của Hộp thư</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MailboxProcessingContext
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MailboxProcessingContext); }
			set { Entity.Attributes[Fields.MailboxProcessingContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái của Hộp thư</para>
		/// <para><strong>Description</strong>: Trạng thái Đồng bộ hóa Lần cuối đối với toàn bộ nội dung Đi, Đến và ACT.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.MailboxStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.MailboxStatus.Khong_Chay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.MailboxStatus? MailboxStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MailboxStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.MailboxStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên hộp thư.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ trễ đồng bộ hóa ACT được lên lịch tiếp theo, tính bằng giây</para>
		/// <para><strong>Description</strong>: Độ trễ đồng bộ hóa ACT được lên lịch tiếp theo, tính bằng giây, để áp dụng cho hộp thư.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextScheduledACTSyncInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextScheduledACTSyncInSeconds); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng cuộc hẹn, liên hệ, nhiệm vụ bằng 0 cho hộp thư</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NoACTCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NoACTCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng email bằng 0 cho hộp thư</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NoEmailCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NoEmailCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo truy cập Oauth</para>
		/// <para><strong>Description</strong>: Nhập mã thông báo truy cập Oauth cho hộp thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthAccessToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthAccessToken); }
			set { Entity.Attributes[Fields.OauthAccessToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo làm mới Oauth</para>
		/// <para><strong>Description</strong>: Nhập mã thông báo làm mới Oauth cho hộp thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OauthRefreshToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.OauthRefreshToken); }
			set { Entity.Attributes[Fields.OauthRefreshToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày giờ hết hạn mã thông báo Oauth</para>
		/// <para><strong>Description</strong>: Ngày giờ khi mã thông báo Oauth hết hạn</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OauthTokenExpiresOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OauthTokenExpiresOn); }
			set { Entity.Attributes[Fields.OauthTokenExpiresOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành Triển khai Ứng dụng Office Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ hoàn thành lần triển khai ứng dụng Office cuối cùng cho bản ghi hộp thư.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OfficeAppsDeploymentCompleteOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OfficeAppsDeploymentCompleteOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi Triển khai Ứng dụng Office</para>
		/// <para><strong>Description</strong>: Lỗi triển khai Ứng dụng Office.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfficeAppsDeploymentError
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfficeAppsDeploymentError); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Triển khai Ứng dụng Office Đã được lên lịch</para>
		/// <para><strong>Description</strong>: Cho biết quá trình triển khai ứng dụng Office đã được lên lịch cho bản ghi hộp thư hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OfficeAppsDeploymentScheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OfficeAppsDeploymentScheduled); }
			set { Entity.Attributes[Fields.OfficeAppsDeploymentScheduled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Triển khai Ứng dụng Office</para>
		/// <para><strong>Description</strong>: Cho biết loại triển khai ứng dụng Office cho bản ghi hộp thư.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.OfficeAppsDeploymentStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.OfficeAppsDeploymentStatus.NotInstalled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.OfficeAppsDeploymentStatus? OfficeAppsDeploymentStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OfficeAppsDeploymentStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.OfficeAppsDeploymentStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OfficeAppsDeploymentStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OfficeAppsDeploymentStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức được liên kết với bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đánh dấu Tổ chức Crm là Tổ chức Chính cho Hộp thư Exchange</para>
		/// <para><strong>Description</strong>: Cho biết tổ chức crm có được đánh dấu là tổ chức đồng bộ chính cho bản ghi hộp thư hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OrgMarkedAsPrimaryForExchangeSync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OrgMarkedAsPrimaryForExchangeSync); }
			set { Entity.Attributes[Fields.OrgMarkedAsPrimaryForExchangeSync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Đi</para>
		/// <para><strong>Description</strong>: Chọn cách gửi email đi từ hộp thư.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Email Đi</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của email đi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailStatus.Khong_Chay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailStatus? OutgoingEmailStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.OutgoingEmailStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Chọn đơn vị kinh doanh sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mật khẩu</para>
		/// <para><strong>Description</strong>: Nhập mật khẩu cho hộp thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Password
		{
			get { return Entity.GetAttributeValue<string>(Fields.Password); }
			set { Entity.Attributes[Fields.Password] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn Xử lý Hộp thư Cho đến</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ bắt đầu xử lý trên hộp thư này.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeMailboxProcessingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeMailboxProcessingUntil); }
			set { Entity.Attributes[Fields.PostponeMailboxProcessingUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn Cài đặt Ứng dụng Thư Outlook Cho tới khi</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ chạy quá trình cài đặt ứng dụng thư outlook tiếp theo cho bản ghi hộp thư.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeOfficeAppsDeploymentUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeOfficeAppsDeploymentUntil); }
			set { Entity.Attributes[Fields.PostponeOfficeAppsDeploymentUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn Gửi Cho đến</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ hộp thư có thể bắt đầu gửi email.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeSendingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeSendingUntil); }
			set { Entity.Attributes[Fields.PostponeSendingUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn Kiểm tra Cấu hình Email Cho đến</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ chạy quá trình kiểm tra cấu hình email tiếp theo cho bản ghi hộp thư.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeTestEmailConfigurationUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeTestEmailConfigurationUntil); }
			set { Entity.Attributes[Fields.PostponeTestEmailConfigurationUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xóa Email sau khi Xử lý</para>
		/// <para><strong>Description</strong>: Chọn xem có xóa email khỏi hộp thư sau khi xử lý không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProcessAndDeleteEmails
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProcessAndDeleteEmails); }
			set { Entity.Attributes[Fields.ProcessAndDeleteEmails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giám sát Hiệu suất</para>
		/// <para><strong>Description</strong>: Số lần xử lý hộp thư</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessedTimes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessedTimes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xử lý Email Nhận được sau</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ bắt đầu xử lý email mà hộp thư nhận được.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessEmailReceivedAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessEmailReceivedAfter); }
			set { Entity.Attributes[Fields.ProcessEmailReceivedAfter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày xử lý gần đây nhất</para>
		/// <para><strong>Description</strong>: Ngày và giờ gần đây nhất xử lý hộp thư.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessingLastAttemptedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessingLastAttemptedOn); }
			set { Entity.Attributes[Fields.ProcessingLastAttemptedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Xử lý Hộp thư</para>
		/// <para><strong>Description</strong>: Thông tin cho biết có xử lý email cho hộp thư này hay không</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessingStateCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessingStateCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn nhận email cho hộp thư cho đến ngày và giờ đã chỉ định.</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ReceivingPostponedUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ReceivingPostponedUntil); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn xử lý Cuộc hẹn, Liên hệ và Nhiệm vụ cho hộp thư cho đến ngày và giờ đã chỉ định.</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ReceivingPostponedUntilForACTUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ReceivingPostponedUntilForACT); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Chọn người dùng được liên kết với hộp thư.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết hộp thư ở trạng thái đang hiện hoạt hay không hoạt động.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của hộp thư.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gắn thẻ email sau</para>
		/// <para><strong>Description</strong>: Xác định dấu thời gian mà sau đó email sẽ được gắn thẻ trong hệ thống từ xa.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? TagEmailsAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.TagEmailsAfter); }
			set { Entity.Attributes[Fields.TagEmailsAfter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Thử lại Quá trình Kiểm tra Cấu hình Email</para>
		/// <para><strong>Description</strong>: Cho biết số lần thực hiện quá trình kiểm tra cấu hình email.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TestEmailConfigurationRetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TestEmailConfigurationRetryCount); }
			set { Entity.Attributes[Fields.TestEmailConfigurationRetryCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lên lịch Kiểm tra Cấu hình Email</para>
		/// <para><strong>Description</strong>: Cho biết quá trình kiểm tra cấu hình email đã được lên lịch cho bản ghi hộp thư hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TestEmailConfigurationScheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TestEmailConfigurationScheduled); }
			set { Entity.Attributes[Fields.TestEmailConfigurationScheduled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành Kiểm tra Hộp thư vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ hoàn thành quá trình kiểm tra cấu hình email cuối cùng cho bản ghi hộp thư.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? TestMailboxAccessCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.TestMailboxAccessCompletedOn); }
			set { Entity.Attributes[Fields.TestMailboxAccessCompletedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Lỗi Nhất thời</para>
		/// <para><strong>Description</strong>: Ghép chuỗi số lần lỗi nhất thời của tất cả thao tác với hộp thư.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TransientFailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TransientFailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư mục Không gửi được</para>
		/// <para><strong>Description</strong>: Cho biết ID của thư mục Không gửi được trong hộp thư do Microsoft Exchange quản lý.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UndeliverableFolder
		{
			get { return Entity.GetAttributeValue<string>(Fields.UndeliverableFolder); }
			set { Entity.Attributes[Fields.UndeliverableFolder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người dùng</para>
		/// <para><strong>Description</strong>: Nhập tên người dùng được sử dụng cho xác thực hộp thư.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Username
		{
			get { return Entity.GetAttributeValue<string>(Fields.Username); }
			set { Entity.Attributes[Fields.Username] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ghi nhật ký diễn giải</para>
		/// <para><strong>Description</strong>: Cho biết có cần phải kích hoạt theo dõi diễn giải cho hộp thư này không.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? VerboseLoggingEnabled
		{
			get { return Entity.GetAttributeValue<int?>(Fields.VerboseLoggingEnabled); }
			set { Entity.Attributes[Fields.VerboseLoggingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của hộp thư.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}