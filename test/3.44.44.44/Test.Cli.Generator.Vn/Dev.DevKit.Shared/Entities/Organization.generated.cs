//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:50
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.OrganizationOptionSets
{
	public enum ApplicationBasedAccessControlMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AuditMode</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		AuditMode = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Disabled = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Enabled = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled for roles</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Enabled_for_roles = 3
	}
	public enum CurrencyDisplayOption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ký hiệu loại tiền</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ky_hieu_loai_tien = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại tiền</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ma_loai_tien = 1
	}
	public enum CurrencyFormatCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: $123</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		_123_0 = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: 123$</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		_123_1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: $ 123</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_123_2 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: 123 $</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		_123_3 = 3
	}
	public enum DefaultRecurrenceEndRangeType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có Ngày Kết thúc</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_co_Ngay_Ket_thuc = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày kết thúc</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ngay_ket_thuc = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Xảy ra</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		So_lan_Xay_ra = 2
	}
	public enum DesktopFlowRunActionLogsStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_bat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tắt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_tat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nếu không thành công</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Neu_khong_thanh_cong = 1
	}
	public enum DesktopFlowRunActionLogVersion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AdditionalContext</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		AdditionalContext = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: AdditionalContextAndFlowLogs</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		AdditionalContextAndFlowLogs = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FlowLogs</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FlowLogs = 1
	}
	public enum DiscountCalculationMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hạng mục</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hang_muc = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mỗi đơn vị</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Moi_don_vi = 1
	}
	public enum EmailConnectionChannel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ định tuyến Email Microsoft Dynamics 365</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bo_dinh_tuyen_Email_Microsoft_Dynamics_365 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dong_bo_phia_May_chu = 0
	}
	public enum FiscalPeriodFormatPeriod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ {0}</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ky_0 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ sáu tháng {0}</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Ky_sau_thang_0 = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Q{0}</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Q0 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quý {0}</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quy_0 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Tháng</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Ten_Thang = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng {0}</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thang_0_4 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng {0}</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thang_0_5 = 5
	}
	public enum FiscalYearFormatPrefix
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nam_Tai_chinh = 1
	}
	public enum FiscalYearFormatSuffix
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nam_Tai_chinh_1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>:  Năm Tài chính</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nam_Tai_chinh_2 = 2
	}
	public enum FiscalYearFormatYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: GGYY</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		GGYY = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: YY</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		YY = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: YYYY</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		YYYY = 1
	}
	public enum FullNameConventionCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ, dấu cách, Tên</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Ho_dau_cach_Ten = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ, không có dấu cách, Tên</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Ho_khong_co_dau_cach_Ten = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ, Tên</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ho_Ten = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ, Tên, Tên đệm</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Ho_Ten_Ten_dem = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ, Tên, Viết tắt Tên đệm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ho_Ten_Viet_tat_Ten_dem = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ten = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên, Tên đệm, Họ</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Ten_Ten_dem_Ho = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên, Viết tắt Tên đệm, Họ</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ten_Viet_tat_Ten_dem_Ho = 3
	}
	public enum IpBasedStorageAccessSignatureMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: IP Binding and IP Firewall</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		IP_Binding_and_IP_Firewall = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: IP Binding only</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		IP_Binding_only = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: IP Binding or IP Firewall</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		IP_Binding_or_IP_Firewall = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: IP Firewall only</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		IP_Firewall_only = 1
	}
	public enum ISVIntegrationCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outlook</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Outlook = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tất cả</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Tat_ca = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ứng dụng khách Máy tính xách tay Outlook</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Ung_dung_khach_May_tinh_xach_tay_Outlook = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ứng dụng khách Máy trạm Outlook</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ung_dung_khach_May_tram_Outlook = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Web = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web; Ứng dụng khách Máy tính xách tay Outlook</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Web_Ung_dung_khach_May_tinh_xach_tay_Outlook = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web; Ứng dụng khách Máy trạm Outlook</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Web_Ung_dung_khach_May_tram_Outlook = 3
	}
	public enum LegacyAppToggle
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tắt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tu_dong = 0
	}
	public enum NegativeFormatCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu cách cộng với Dấu gạch Đuôi</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Dau_cach_cong_voi_Dau_gach_Duoi = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu gạch</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dau_gach = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu gạch cộng với Dấu cách</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dau_gach_cong_voi_Dau_cach = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu gạch Đuôi</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Dau_gach_Duoi = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu ngoặc</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dau_ngoac = 0
	}
	public enum OrganizationState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang cập nhật</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_cap_nhat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang nâng cấp</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_nang_cap = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tạo</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dang_tao = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hien_hoat = 3
	}
	public enum PluginTraceLogSetting
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ngoai_le = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tắt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tất cả</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tat_ca = 2
	}
	public enum ReleaseChannel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Kênh bán niên</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Kenh_ban_nien = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kênh hàng tháng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Kenh_hang_thang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kênh nội bộ của Microsoft</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Kenh_noi_bo_cua_Microsoft = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tu_dong = 0
	}
	public enum ReportScriptErrors
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không bao giờ gửi báo cáo lỗi tới Microsoft về Microsoft Dynamics 365</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khong_bao_gio_gui_bao_cao_loi_toi_Microsoft_ve_Microsoft_Dynamics_365 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có tùy chọn gửi báo cáo lỗi tới Microsoft về Microsoft Dynamics 365</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co_tuy_chon_gui_bao_cao_loi_toi_Microsoft_ve_Microsoft_Dynamics_365 = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động gửi báo cáo lỗi đến Microsoft mà không xin phép tôi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tu_dong_gui_bao_cao_loi_den_Microsoft_ma_khong_xin_phep_toi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xin phép tôi khi gửi báo cáo lỗi đến Microsoft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Xin_phep_toi_khi_gui_bao_cao_loi_den_Microsoft = 1
	}
	public enum SameSiteModeForSessionCookie
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lax</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lax = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Strict</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Strict = 3
	}
	public enum SharePointDeploymentType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tại chỗ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tai_cho = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trực tuyến</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Truc_tuyen = 0
	}
	public enum SyncOptInSelectionStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã qua</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_qua = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang xử lý</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_xu_ly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khong_thanh_cong = 3
	}
	public enum ValidationMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảnh báo</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Canh_bao = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chặn</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Chan = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tắt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tat = 0
	}
	public enum YammerPostMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Công khai</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Cong_khai = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Riêng tư</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Rieng_tu = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Organization : EntityBase
	{
		public struct Fields
		{
			public const string ACIWebEndpointUrl = "aciwebendpointurl";
			public const string AcknowledgementTemplateId = "acknowledgementtemplateid";
			public const string ActivityTypeFilter = "activitytypefilter";
			public const string ActivityTypeFilterV2 = "activitytypefilterv2";
			public const string AdvancedColumnEditorEnabled = "advancedcolumneditorenabled";
			public const string AdvancedColumnFilteringEnabled = "advancedcolumnfilteringenabled";
			public const string AdvancedFilteringEnabled = "advancedfilteringenabled";
			public const string AdvancedLookupEnabled = "advancedlookupenabled";
			public const string AdvancedLookupInEditFilter = "advancedlookupineditfilter";
			public const string AiPromptsEnabled = "aipromptsenabled";
			public const string AllowAddressBookSyncs = "allowaddressbooksyncs";
			public const string AllowApplicationUserAccess = "allowapplicationuseraccess";
			public const string AllowAutoResponseCreation = "allowautoresponsecreation";
			public const string AllowAutoUnsubscribe = "allowautounsubscribe";
			public const string AllowAutoUnsubscribeAcknowledgement = "allowautounsubscribeacknowledgement";
			public const string AllowClientMessageBarAd = "allowclientmessagebarad";
			public const string AllowConnectorsOnPowerFXActions = "allowconnectorsonpowerfxactions";
			public const string AllowedApplicationsForDVAccess = "allowedapplicationsfordvaccess";
			public const string AllowedIpRangeForFirewall = "allowediprangeforfirewall";
			public const string AllowedIpRangeForStorageAccessSignatures = "allowediprangeforstorageaccesssignatures";
			public const string AllowedMimeTypes = "allowedmimetypes";
			public const string AllowedServiceTagsForFirewall = "allowedservicetagsforfirewall";
			public const string AllowEntityOnlyAudit = "allowentityonlyaudit";
			public const string AllowLeadingWildcardsInGridSearch = "allowleadingwildcardsingridsearch";
			public const string AllowLeadingWildcardsInQuickFind = "allowleadingwildcardsinquickfind";
			public const string AllowLegacyClientExperience = "allowlegacyclientexperience";
			public const string AllowLegacyDialogsEmbedding = "allowlegacydialogsembedding";
			public const string AllowMarketingEmailExecution = "allowmarketingemailexecution";
			public const string AllowMicrosoftTrustedServiceTags = "allowmicrosofttrustedservicetags";
			public const string AllowOfflineScheduledSyncs = "allowofflinescheduledsyncs";
			public const string AllowOutlookScheduledSyncs = "allowoutlookscheduledsyncs";
			public const string AllowRedirectAdminSettingsToModernUI = "allowredirectadminsettingstomodernui";
			public const string AllowUnresolvedPartiesOnEmailSend = "allowunresolvedpartiesonemailsend";
			public const string AllowUserFormModePreference = "allowuserformmodepreference";
			public const string AllowUsersHidingSystemViews = "allowusershidingsystemviews";
			public const string AllowUsersSeeAppdownloadMessage = "allowusersseeappdownloadmessage";
			public const string AllowWebExcelExport = "allowwebexcelexport";
			public const string AMDesignator = "amdesignator";
			public const string AppDesignerExperienceEnabled = "appdesignerexperienceenabled";
			public const string ApplicationBasedAccessControlMode = "applicationbasedaccesscontrolmode";
			public const string AppointmentRichEditorExperience = "appointmentricheditorexperience";
			public const string AppointmentWithTeamsMeeting = "appointmentwithteamsmeeting";
			public const string AppointmentWithTeamsMeetingV2 = "appointmentwithteamsmeetingv2";
			public const string AuditRetentionPeriod = "auditretentionperiod";
			public const string AuditRetentionPeriodV2 = "auditretentionperiodv2";
			public const string AuditSettings = "auditsettings";
			public const string AutoApplyDefaultonCaseCreate = "autoapplydefaultoncasecreate";
			public const string AutoApplyDefaultonCaseUpdate = "autoapplydefaultoncaseupdate";
			public const string AutoApplySLA = "autoapplysla";
			public const string AzureSchedulerJobCollectionName = "azureschedulerjobcollectionname";
			public const string BaseCurrencyId = "basecurrencyid";
			public const string BaseCurrencyPrecision = "basecurrencyprecision";
			public const string BaseCurrencySymbol = "basecurrencysymbol";
			public const string BaseISOCurrencyCode = "baseisocurrencycode";
			public const string BingMapsApiKey = "bingmapsapikey";
			public const string BlockedApplicationsForDVAccess = "blockedapplicationsfordvaccess";
			public const string BlockedAttachments = "blockedattachments";
			public const string BlockedMimeTypes = "blockedmimetypes";
			public const string BoundDashboardDefaultCardExpanded = "bounddashboarddefaultcardexpanded";
			public const string BulkOperationPrefix = "bulkoperationprefix";
			public const string BusinessCardOptions = "businesscardoptions";
			public const string BusinessClosureCalendarId = "businessclosurecalendarid";
			public const string CalendarType = "calendartype";
			public const string CampaignPrefix = "campaignprefix";
			public const string CanOptOutNewSearchExperience = "canoptoutnewsearchexperience";
			public const string CascadeStatusUpdate = "cascadestatusupdate";
			public const string CasePrefix = "caseprefix";
			public const string CategoryPrefix = "categoryprefix";
			public const string ClientFeatureSet = "clientfeatureset";
			public const string ContentSecurityPolicyConfiguration = "contentsecuritypolicyconfiguration";
			public const string ContentSecurityPolicyConfigurationForCanvas = "contentsecuritypolicyconfigurationforcanvas";
			public const string ContentSecurityPolicyOptions = "contentsecuritypolicyoptions";
			public const string ContentSecurityPolicyReportUri = "contentsecuritypolicyreporturi";
			public const string ContractPrefix = "contractprefix";
			public const string CopresenceRefreshRate = "copresencerefreshrate";
			public const string CortanaProactiveExperienceEnabled = "cortanaproactiveexperienceenabled";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreateProductsWithoutParentInActiveState = "createproductswithoutparentinactivestate";
			public const string CurrencyDecimalPrecision = "currencydecimalprecision";
			public const string CurrencyDisplayOption = "currencydisplayoption";
			public const string CurrencyFormatCode = "currencyformatcode";
			public const string CurrencySymbol = "currencysymbol";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentBulkOperationNumber = "currentbulkoperationnumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentCampaignNumber = "currentcampaignnumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentCaseNumber = "currentcasenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentCategoryNumber = "currentcategorynumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentContractNumber = "currentcontractnumber";
			public const string CurrentImportSequenceNumber = "currentimportsequencenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentInvoiceNumber = "currentinvoicenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentKaNumber = "currentkanumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentKbNumber = "currentkbnumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentOrderNumber = "currentordernumber";
			public const string CurrentParsedTableNumber = "currentparsedtablenumber";
			[System.Obsolete("Deprecated from version: 9.0.0.0")]
			public const string CurrentQuoteNumber = "currentquotenumber";
			public const string DateFormatString = "dateformatstring";
			public const string DateSeparator = "dateseparator";
			public const string DaysBeforeEmailDescriptionIsMigrated = "daysbeforeemaildescriptionismigrated";
			public const string DaysBeforeInactiveTeamsChatSyncDisabled = "daysbeforeinactiveteamschatsyncdisabled";
			public const string DaysSinceRecordLastModifiedMaxValue = "dayssincerecordlastmodifiedmaxvalue";
			public const string DecimalSymbol = "decimalsymbol";
			public const string DefaultCountryCode = "defaultcountrycode";
			public const string DefaultCrmCustomName = "defaultcrmcustomname";
			public const string DefaultEmailServerProfileId = "defaultemailserverprofileid";
			public const string DefaultEmailSettings = "defaultemailsettings";
			public const string DefaultMobileOfflineProfileId = "defaultmobileofflineprofileid";
			public const string DefaultRecurrenceEndRangeType = "defaultrecurrenceendrangetype";
			public const string DefaultThemeData = "defaultthemedata";
			public const string DelegatedAdminUserId = "delegatedadminuserid";
			public const string DesktopFlowQueueLogsTtlInMinutes = "desktopflowqueuelogsttlinminutes";
			public const string DesktopFlowRunActionLogsStatus = "desktopflowrunactionlogsstatus";
			public const string DesktopFlowRunActionLogVersion = "desktopflowrunactionlogversion";
			public const string DisabledReason = "disabledreason";
			public const string DisableSocialCare = "disablesocialcare";
			public const string DisableSystemLabelsCacheSharing = "disablesystemlabelscachesharing";
			public const string DiscountCalculationMethod = "discountcalculationmethod";
			public const string DisplayNavigationTour = "displaynavigationtour";
			public const string EmailConnectionChannel = "emailconnectionchannel";
			public const string EmailCorrelationEnabled = "emailcorrelationenabled";
			public const string EmailSendPollingPeriod = "emailsendpollingperiod";
			public const string EnableAsyncMergeAPIForUCI = "enableasyncmergeapiforuci";
			public const string EnableBingMapsIntegration = "enablebingmapsintegration";
			public const string EnableCanvasAppsInSolutionsByDefault = "enablecanvasappsinsolutionsbydefault";
			public const string EnableFlowsInSolutionByDefault = "enableflowsinsolutionbydefault";
			public const string EnableFlowsInSolutionByDefaultGracePeriod = "enableflowsinsolutionbydefaultgraceperiod";
			public const string EnableImmersiveSkypeIntegration = "enableimmersiveskypeintegration";
			public const string EnableIpBasedCookieBinding = "enableipbasedcookiebinding";
			public const string EnableIpBasedFirewallRule = "enableipbasedfirewallrule";
			public const string EnableIpBasedFirewallRuleInAuditMode = "enableipbasedfirewallruleinauditmode";
			public const string EnableIpBasedStorageAccessSignatureRule = "enableipbasedstorageaccesssignaturerule";
			public const string EnableLivePersonaCardUCI = "enablelivepersonacarduci";
			public const string EnableLivePersonCardIntegrationInOffice = "enablelivepersoncardintegrationinoffice";
			public const string EnableLPAuthoring = "enablelpauthoring";
			public const string EnableMakerSwitchToClassic = "enablemakerswitchtoclassic";
			public const string EnableMicrosoftFlowIntegration = "enablemicrosoftflowintegration";
			public const string EnablePricingOnCreate = "enablepricingoncreate";
			public const string EnableSmartMatching = "enablesmartmatching";
			public const string EnableUnifiedClientCDN = "enableunifiedclientcdn";
			public const string EnableUnifiedInterfaceShellRefresh = "enableunifiedinterfaceshellrefresh";
			public const string EnforceReadOnlyPlugins = "enforcereadonlyplugins";
			public const string EntityImageId = "entityimageid";
			public const string ExpireChangeTrackingInDays = "expirechangetrackingindays";
			public const string ExpireSubscriptionsInDays = "expiresubscriptionsindays";
			public const string ExternalBaseUrl = "externalbaseurl";
			public const string ExternalPartyCorrelationKeys = "externalpartycorrelationkeys";
			public const string ExternalPartyEntitySettings = "externalpartyentitysettings";
			public const string FeatureSet = "featureset";
			public const string FiscalCalendarStart = "fiscalcalendarstart";
			public const string FiscalPeriodFormat = "fiscalperiodformat";
			public const string FiscalPeriodFormatPeriod = "fiscalperiodformatperiod";
			public const string FiscalPeriodType = "fiscalperiodtype";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string FiscalSettingsUpdated = "fiscalsettingsupdated";
			public const string FiscalYearDisplayCode = "fiscalyeardisplaycode";
			public const string FiscalYearFormat = "fiscalyearformat";
			public const string FiscalYearFormatPrefix = "fiscalyearformatprefix";
			public const string FiscalYearFormatSuffix = "fiscalyearformatsuffix";
			public const string FiscalYearFormatYear = "fiscalyearformatyear";
			public const string FiscalYearPeriodConnect = "fiscalyearperiodconnect";
			public const string FlowLogsTtlInMinutes = "flowlogsttlinminutes";
			public const string FlowRunTimeToLiveInSeconds = "flowruntimetoliveinseconds";
			public const string FullNameConventionCode = "fullnameconventioncode";
			public const string FutureExpansionWindow = "futureexpansionwindow";
			public const string GenerateAlertsForErrors = "generatealertsforerrors";
			public const string GenerateAlertsForInformation = "generatealertsforinformation";
			public const string GenerateAlertsForWarnings = "generatealertsforwarnings";
			public const string GetStartedPaneContentEnabled = "getstartedpanecontentenabled";
			public const string GlobalAppendUrlParametersEnabled = "globalappendurlparametersenabled";
			public const string GlobalHelpUrl = "globalhelpurl";
			public const string GlobalHelpUrlEnabled = "globalhelpurlenabled";
			public const string GoalRollupExpiryTime = "goalrollupexpirytime";
			public const string GoalRollupFrequency = "goalrollupfrequency";
			public const string GrantAccessToNetworkService = "grantaccesstonetworkservice";
			public const string HashDeltaSubjectCount = "hashdeltasubjectcount";
			public const string HashFilterKeywords = "hashfilterkeywords";
			public const string HashMaxCount = "hashmaxcount";
			public const string HashMinAddressCount = "hashminaddresscount";
			public const string HighContrastThemeData = "highcontrastthemedata";
			public const string IgnoreInternalEmail = "ignoreinternalemail";
			public const string ImproveSearchLoggingEnabled = "improvesearchloggingenabled";
			public const string InactivityTimeoutEnabled = "inactivitytimeoutenabled";
			public const string InactivityTimeoutInMins = "inactivitytimeoutinmins";
			public const string InactivityTimeoutReminderInMins = "inactivitytimeoutreminderinmins";
			public const string IncomingEmailExchangeEmailRetrievalBatchSize = "incomingemailexchangeemailretrievalbatchsize";
			public const string InitialVersion = "initialversion";
			public const string IntegrationUserId = "integrationuserid";
			public const string InvoicePrefix = "invoiceprefix";
			public const string IpBasedStorageAccessSignatureMode = "ipbasedstorageaccesssignaturemode";
			public const string IsActionCardEnabled = "isactioncardenabled";
			public const string IsActionSupportFeatureEnabled = "isactionsupportfeatureenabled";
			public const string IsActivityAnalysisEnabled = "isactivityanalysisenabled";
			public const string IsAllMoneyDecimal = "isallmoneydecimal";
			public const string IsAppMode = "isappmode";
			public const string IsAppointmentAttachmentSyncEnabled = "isappointmentattachmentsyncenabled";
			public const string IsAssignedTasksSyncEnabled = "isassignedtaskssyncenabled";
			public const string IsAuditEnabled = "isauditenabled";
			public const string IsAutoDataCaptureEnabled = "isautodatacaptureenabled";
			public const string IsAutoDataCaptureV2Enabled = "isautodatacapturev2enabled";
			public const string IsAutoInstallAppForD365InTeamsEnabled = "isautoinstallappford365inteamsenabled";
			public const string IsAutoSaveEnabled = "isautosaveenabled";
			public const string IsBaseCardStaticFieldDataEnabled = "isbasecardstaticfielddataenabled";
			public const string IsBasicGeospatialIntegrationEnabled = "isbasicgeospatialintegrationenabled";
			public const string IsBPFEntityCustomizationFeatureEnabled = "isbpfentitycustomizationfeatureenabled";
			public const string IsCollaborationExperienceEnabled = "iscollaborationexperienceenabled";
			public const string IsConflictDetectionEnabledForMobileClient = "isconflictdetectionenabledformobileclient";
			public const string IsContactMailingAddressSyncEnabled = "iscontactmailingaddresssyncenabled";
			public const string IsContentSecurityPolicyEnabled = "iscontentsecuritypolicyenabled";
			public const string IsContentSecurityPolicyEnabledForCanvas = "iscontentsecuritypolicyenabledforcanvas";
			public const string IsContextualEmailEnabled = "iscontextualemailenabled";
			public const string IsContextualHelpEnabled = "iscontextualhelpenabled";
			public const string IsCopilotFeedbackEnabled = "iscopilotfeedbackenabled";
			public const string IsCustomControlsInCanvasAppsEnabled = "iscustomcontrolsincanvasappsenabled";
			public const string IsDefaultCountryCodeCheckEnabled = "isdefaultcountrycodecheckenabled";
			public const string IsDelegateAccessEnabled = "isdelegateaccessenabled";
			public const string IsDelveActionHubIntegrationEnabled = "isdelveactionhubintegrationenabled";
			public const string IsDesktopFlowConnectionEmbeddingEnabled = "isdesktopflowconnectionembeddingenabled";
			public const string IsDesktopFlowRuntimeRepairAttendedEnabled = "isdesktopflowruntimerepairattendedenabled";
			public const string IsDesktopFlowRuntimeRepairUnattendedEnabled = "isdesktopflowruntimerepairunattendedenabled";
			public const string IsDesktopFlowSchemaV2Enabled = "isdesktopflowschemav2enabled";
			public const string IsDisabled = "isdisabled";
			public const string IsDuplicateDetectionEnabled = "isduplicatedetectionenabled";
			public const string IsDuplicateDetectionEnabledForImport = "isduplicatedetectionenabledforimport";
			public const string IsDuplicateDetectionEnabledForOfflineSync = "isduplicatedetectionenabledforofflinesync";
			public const string IsDuplicateDetectionEnabledForOnlineCreateUpdate = "isduplicatedetectionenabledforonlinecreateupdate";
			public const string IsEmailAddressValidationEnabled = "isemailaddressvalidationenabled";
			public const string IsEmailMonitoringAllowed = "isemailmonitoringallowed";
			public const string IsEmailServerProfileContentFilteringEnabled = "isemailserverprofilecontentfilteringenabled";
			public const string IsEnabledForAllRoles = "isenabledforallroles";
			public const string IsExternalFileStorageEnabled = "isexternalfilestorageenabled";
			public const string IsExternalSearchIndexEnabled = "isexternalsearchindexenabled";
			public const string IsFiscalPeriodMonthBased = "isfiscalperiodmonthbased";
			public const string IsFolderAutoCreatedonSP = "isfolderautocreatedonsp";
			public const string IsFolderBasedTrackingEnabled = "isfolderbasedtrackingenabled";
			public const string IsFullTextSearchEnabled = "isfulltextsearchenabled";
			public const string IsGeospatialAzureMapsIntegrationEnabled = "isgeospatialazuremapsintegrationenabled";
			public const string IsHierarchicalSecurityModelEnabled = "ishierarchicalsecuritymodelenabled";
			public const string IsIdeasDataCollectionEnabled = "isideasdatacollectionenabled";
			public const string IsLUISEnabledforD365Bot = "isluisenabledford365bot";
			public const string IsMailboxForcedUnlockingEnabled = "ismailboxforcedunlockingenabled";
			public const string IsMailboxInactiveBackoffEnabled = "ismailboxinactivebackoffenabled";
			public const string IsManualSalesForecastingEnabled = "ismanualsalesforecastingenabled";
			public const string IsMobileClientOnDemandSyncEnabled = "ismobileclientondemandsyncenabled";
			public const string IsMobileOfflineEnabled = "ismobileofflineenabled";
			public const string IsModelDrivenAppsInMSTeamsEnabled = "ismodeldrivenappsinmsteamsenabled";
			public const string IsMSTeamsCollaborationEnabled = "ismsteamscollaborationenabled";
			public const string IsMSTeamsEnabled = "ismsteamsenabled";
			public const string IsMSTeamsSettingChangedByUser = "ismsteamssettingchangedbyuser";
			public const string IsMSTeamsUserSyncEnabled = "ismsteamsusersyncenabled";
			public const string IsNewAddProductExperienceEnabled = "isnewaddproductexperienceenabled";
			public const string IsNotesAnalysisEnabled = "isnotesanalysisenabled";
			public const string IsNotificationForD365InTeamsEnabled = "isnotificationford365inteamsenabled";
			public const string IsOfficeGraphEnabled = "isofficegraphenabled";
			public const string IsOneDriveEnabled = "isonedriveenabled";
			public const string IsPAIEnabled = "ispaienabled";
			public const string IsPDFGenerationEnabled = "ispdfgenerationenabled";
			public const string IsPerProcessCapacityOverageEnabled = "isperprocesscapacityoverageenabled";
			public const string IsPlaybookEnabled = "isplaybookenabled";
			public const string IsPresenceEnabled = "ispresenceenabled";
			public const string IsPreviewEnabledForActionCard = "ispreviewenabledforactioncard";
			public const string IsPreviewForAutoCaptureEnabled = "ispreviewforautocaptureenabled";
			public const string IsPreviewForEmailMonitoringAllowed = "ispreviewforemailmonitoringallowed";
			public const string IsPriceListMandatory = "ispricelistmandatory";
			public const string IsQuickCreateEnabledForOpportunityClose = "isquickcreateenabledforopportunityclose";
			public const string IsReadAuditEnabled = "isreadauditenabled";
			public const string IsRelationshipInsightsEnabled = "isrelationshipinsightsenabled";
			public const string IsResourceBookingExchangeSyncEnabled = "isresourcebookingexchangesyncenabled";
			public const string IsRichTextNotesEnabled = "isrichtextnotesenabled";
			public const string IsRpaAutoscaleAadJoinEnabled = "isrpaautoscaleaadjoinenabled";
			public const string IsRpaAutoscaleEnabled = "isrpaautoscaleenabled";
			public const string IsRpaBoxCrossGeoEnabled = "isrpaboxcrossgeoenabled";
			public const string IsRpaBoxEnabled = "isrpaboxenabled";
			public const string IsRpaUnattendedEnabled = "isrpaunattendedenabled";
			public const string IsSalesAssistantEnabled = "issalesassistantenabled";
			public const string IsSharingInOrgAllowed = "issharinginorgallowed";
			public const string IsSOPIntegrationEnabled = "issopintegrationenabled";
			public const string IsTextWrapEnabled = "istextwrapenabled";
			public const string IsUserAccessAuditEnabled = "isuseraccessauditenabled";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string ISVIntegrationCode = "isvintegrationcode";
			public const string IsWriteInProductsAllowed = "iswriteinproductsallowed";
			public const string KaPrefix = "kaprefix";
			public const string KbPrefix = "kbprefix";
			public const string KMSettings = "kmsettings";
			public const string LanguageCode = "languagecode";
			public const string LegacyAppToggle = "legacyapptoggle";
			public const string LocaleId = "localeid";
			public const string LongDateFormatCode = "longdateformatcode";
			public const string LookupCharacterCountBeforeResolve = "lookupcharactercountbeforeresolve";
			public const string LookupResolveDelayMS = "lookupresolvedelayms";
			public const string MailboxIntermittentIssueMinRange = "mailboxintermittentissueminrange";
			public const string MailboxPermanentIssueMinRange = "mailboxpermanentissueminrange";
			public const string MaxActionStepsInBPF = "maxactionstepsinbpf";
			public const string MaxAllowedPendingRollupJobCount = "maxallowedpendingrollupjobcount";
			public const string MaxAllowedPendingRollupJobPercentage = "maxallowedpendingrollupjobpercentage";
			public const string MaxAppointmentDurationDays = "maxappointmentdurationdays";
			public const string MaxConditionsForMobileOfflineFilters = "maxconditionsformobileofflinefilters";
			public const string MaxDepthForHierarchicalSecurityModel = "maxdepthforhierarchicalsecuritymodel";
			public const string MaxFolderBasedTrackingMappings = "maxfolderbasedtrackingmappings";
			public const string MaximumActiveBusinessProcessFlowsAllowedPerEntity = "maximumactivebusinessprocessflowsallowedperentity";
			public const string MaximumDynamicPropertiesAllowed = "maximumdynamicpropertiesallowed";
			public const string MaximumEntitiesWithActiveSLA = "maximumentitieswithactivesla";
			public const string MaximumSLAKPIPerEntityWithActiveSLA = "maximumslakpiperentitywithactivesla";
			public const string MaximumTrackingNumber = "maximumtrackingnumber";
			public const string MaxProductsInBundle = "maxproductsinbundle";
			public const string MaxRecordsForExportToExcel = "maxrecordsforexporttoexcel";
			public const string MaxRecordsForLookupFilters = "maxrecordsforlookupfilters";
			public const string MaxRollupFieldsPerEntity = "maxrollupfieldsperentity";
			public const string MaxRollupFieldsPerOrg = "maxrollupfieldsperorg";
			public const string MaxSLAItemsPerSLA = "maxslaitemspersla";
			public const string MaxSupportedInternetExplorerVersion = "maxsupportedinternetexplorerversion";
			public const string MaxUploadFileSize = "maxuploadfilesize";
			public const string MaxVerboseLoggingMailbox = "maxverboseloggingmailbox";
			public const string MaxVerboseLoggingSyncCycles = "maxverboseloggingsynccycles";
			public const string MetadataSyncLastTimeOfNeverExpiredDeletedObjects = "metadatasynclasttimeofneverexpireddeletedobjects";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string MetadataSyncTimestamp = "metadatasynctimestamp";
			public const string MicrosoftFlowEnvironment = "microsoftflowenvironment";
			public const string MinAddressBookSyncInterval = "minaddressbooksyncinterval";
			public const string MinOfflineSyncInterval = "minofflinesyncinterval";
			public const string MinOutlookSyncInterval = "minoutlooksyncinterval";
			public const string MobileOfflineMinLicenseProd = "mobileofflineminlicenseprod";
			public const string MobileOfflineMinLicenseTrial = "mobileofflineminlicensetrial";
			public const string MobileOfflineSyncInterval = "mobileofflinesyncinterval";
			public const string ModernAdvancedFindFiltering = "modernadvancedfindfiltering";
			public const string ModernAppDesignerCoauthoringEnabled = "modernappdesignercoauthoringenabled";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MultiColumnSortEnabled = "multicolumnsortenabled";
			public const string Name = "name";
			public const string NaturalLanguageAssistFilter = "naturallanguageassistfilter";
			public const string NegativeCurrencyFormatCode = "negativecurrencyformatcode";
			public const string NegativeFormatCode = "negativeformatcode";
			public const string NewSearchExperienceEnabled = "newsearchexperienceenabled";
			public const string NextCustomObjectTypeCode = "nextcustomobjecttypecode";
			public const string NextTrackingNumber = "nexttrackingnumber";
			public const string NotifyMailboxOwnerOfEmailServerLevelAlerts = "notifymailboxownerofemailserverlevelalerts";
			public const string NumberFormat = "numberformat";
			public const string NumberGroupFormat = "numbergroupformat";
			public const string NumberSeparator = "numberseparator";
			public const string OfficeAppsAutoDeploymentEnabled = "officeappsautodeploymentenabled";
			public const string OfficeGraphDelveUrl = "officegraphdelveurl";
			public const string OOBPriceCalculationEnabled = "oobpricecalculationenabled";
			public const string OptOutSchemaV2EnabledByDefault = "optoutschemav2enabledbydefault";
			public const string OrderPrefix = "orderprefix";
			public const string OrganizationId = "organizationid";
			public const string OrganizationState = "organizationstate";
			public const string OrgDbOrgSettings = "orgdborgsettings";
			public const string OrgInsightsEnabled = "orginsightsenabled";
			public const string PaiPreviewScenarioEnabled = "paipreviewscenarioenabled";
			public const string ParsedTableColumnPrefix = "parsedtablecolumnprefix";
			public const string ParsedTablePrefix = "parsedtableprefix";
			public const string PastExpansionWindow = "pastexpansionwindow";
			public const string PcfDatasetGridEnabled = "pcfdatasetgridenabled";
			public const string PerformACTSyncAfter = "performactsyncafter";
			public const string Picture = "picture";
			public const string PinpointLanguageCode = "pinpointlanguagecode";
			public const string PluginTraceLogSetting = "plugintracelogsetting";
			public const string PMDesignator = "pmdesignator";
			public const string PostMessageWhitelistDomains = "postmessagewhitelistdomains";
			public const string PowerAppsMakerBotEnabled = "powerappsmakerbotenabled";
			public const string PowerBIAllowCrossRegionOperations = "powerbiallowcrossregionoperations";
			public const string PowerBIAutomaticPermissionsAssignment = "powerbiautomaticpermissionsassignment";
			public const string PowerBIComponentsCreate = "powerbicomponentscreate";
			public const string PowerBiFeatureEnabled = "powerbifeatureenabled";
			public const string PricingDecimalPrecision = "pricingdecimalprecision";
			public const string PrivacyStatementUrl = "privacystatementurl";
			public const string PrivilegeUserGroupId = "privilegeusergroupid";
			public const string PrivReportingGroupId = "privreportinggroupid";
			public const string PrivReportingGroupName = "privreportinggroupname";
			public const string ProductRecommendationsEnabled = "productrecommendationsenabled";
			public const string QualifyLeadAdditionalOptions = "qualifyleadadditionaloptions";
			public const string QuickActionToOpenRecordsInSidePaneEnabled = "quickactiontoopenrecordsinsidepaneenabled";
			public const string QuickFindRecordLimitEnabled = "quickfindrecordlimitenabled";
			public const string QuotePrefix = "quoteprefix";
			public const string RecalculateSLA = "recalculatesla";
			public const string RecurrenceDefaultNumberOfOccurrences = "recurrencedefaultnumberofoccurrences";
			public const string RecurrenceExpansionJobBatchInterval = "recurrenceexpansionjobbatchinterval";
			public const string RecurrenceExpansionJobBatchSize = "recurrenceexpansionjobbatchsize";
			public const string RecurrenceExpansionSynchCreateMax = "recurrenceexpansionsynchcreatemax";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string ReferenceSiteMapXml = "referencesitemapxml";
			public const string ReleaseCadence = "releasecadence";
			public const string ReleaseChannel = "releasechannel";
			public const string ReleaseWaveName = "releasewavename";
			public const string RelevanceSearchEnabledByPlatform = "relevancesearchenabledbyplatform";
			public const string RelevanceSearchModifiedOn = "relevancesearchmodifiedon";
			public const string RenderSecureIFrameForEmail = "rendersecureiframeforemail";
			public const string ReportingGroupId = "reportinggroupid";
			public const string ReportingGroupName = "reportinggroupname";
			public const string ReportScriptErrors = "reportscripterrors";
			public const string RequireApprovalForQueueEmail = "requireapprovalforqueueemail";
			public const string RequireApprovalForUserEmail = "requireapprovalforuseremail";
			public const string ResolveSimilarUnresolvedEmailAddress = "resolvesimilarunresolvedemailaddress";
			public const string RestrictGuestUserAccess = "restrictGuestUserAccess";
			public const string RestrictStatusUpdate = "restrictstatusupdate";
			public const string ReverseProxyIpAddresses = "reverseproxyipaddresses";
			public const string RiErrorStatus = "rierrorstatus";
			public const string SameSiteModeForSessionCookie = "samesitemodeforsessioncookie";
			public const string SampleDataImportId = "sampledataimportid";
			public const string SchemaNamePrefix = "schemanameprefix";
			public const string SendBulkEmailInUCI = "sendbulkemailinuci";
			public const string ServeStaticResourcesFromAzureCDN = "servestaticresourcesfromazurecdn";
			public const string SessionRecordingEnabled = "sessionrecordingenabled";
			public const string SessionTimeoutEnabled = "sessiontimeoutenabled";
			public const string SessionTimeoutInMins = "sessiontimeoutinmins";
			public const string SessionTimeoutReminderInMins = "sessiontimeoutreminderinmins";
			public const string SharePointDeploymentType = "sharepointdeploymenttype";
			public const string ShareToPreviousOwnerOnAssign = "sharetopreviousowneronassign";
			public const string ShowKBArticleDeprecationNotification = "showkbarticledeprecationnotification";
			public const string ShowWeekNumber = "showweeknumber";
			public const string SignupOutlookDownloadFWLink = "signupoutlookdownloadfwlink";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string SiteMapXml = "sitemapxml";
			public const string SlaPauseStates = "slapausestates";
			public const string SocialInsightsEnabled = "socialinsightsenabled";
			public const string SocialInsightsInstance = "socialinsightsinstance";
			public const string SocialInsightsTermsAccepted = "socialinsightstermsaccepted";
			public const string SortId = "sortid";
			public const string SqlAccessGroupId = "sqlaccessgroupid";
			public const string SqlAccessGroupName = "sqlaccessgroupname";
			public const string SQMEnabled = "sqmenabled";
			public const string SupportUserId = "supportuserid";
			public const string SuppressSLA = "suppresssla";
			public const string SuppressValidationEmails = "suppressvalidationemails";
			public const string SyncBulkOperationBatchSize = "syncbulkoperationbatchsize";
			public const string SyncBulkOperationMaxLimit = "syncbulkoperationmaxlimit";
			public const string SyncOptInSelection = "syncoptinselection";
			public const string SyncOptInSelectionStatus = "syncoptinselectionstatus";
			public const string SystemUserId = "systemuserid";
			public const string TableScopedDVSearchInApps = "tablescopeddvsearchinapps";
			public const string TagMaxAggressiveCycles = "tagmaxaggressivecycles";
			public const string TagPollingPeriod = "tagpollingperiod";
			public const string TaskBasedFlowEnabled = "taskbasedflowenabled";
			public const string TeamsChatDataSync = "teamschatdatasync";
			public const string TelemetryInstrumentationKey = "telemetryinstrumentationkey";
			public const string TextAnalyticsEnabled = "textanalyticsenabled";
			public const string TimeFormatString = "timeformatstring";
			public const string TimeSeparator = "timeseparator";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TokenExpiry = "tokenexpiry";
			public const string TokenKey = "tokenkey";
			public const string TraceLogMaximumAgeInDays = "tracelogmaximumageindays";
			public const string TrackingPrefix = "trackingprefix";
			public const string TrackingTokenIdBase = "trackingtokenidbase";
			public const string TrackingTokenIdDigits = "trackingtokeniddigits";
			public const string UniqueSpecifierLength = "uniquespecifierlength";
			public const string UnresolveEmailAddressIfMultipleMatch = "unresolveemailaddressifmultiplematch";
			public const string UseInbuiltRuleForDefaultPricelistSelection = "useinbuiltrulefordefaultpricelistselection";
			public const string UseLegacyRendering = "uselegacyrendering";
			public const string UsePositionHierarchy = "usepositionhierarchy";
			public const string UseQuickFindViewForGridSearch = "usequickfindviewforgridsearch";
			public const string UserAccessAuditingInterval = "useraccessauditinginterval";
			public const string UseReadForm = "usereadform";
			public const string UserGroupId = "usergroupid";
			public const string UserRatingEnabled = "userratingenabled";
			public const string UseSkypeProtocol = "useskypeprotocol";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string V3CalloutConfigHash = "v3calloutconfighash";
			public const string ValidationMode = "validationmode";
			public const string VersionNumber = "versionnumber";
			public const string WebResourceHash = "webresourcehash";
			public const string WidgetProperties = "widgetproperties";
			public const string YammerGroupId = "yammergroupid";
			public const string YammerNetworkPermalink = "yammernetworkpermalink";
			public const string YammerOAuthAccessTokenExpired = "yammeroauthaccesstokenexpired";
			public const string YammerPostMethod = "yammerpostmethod";
			public const string YearStartWeekCode = "yearstartweekcode";
		}
		public const string EntityLogicalName = "organization";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1019;
		public const string EntityCollectionSchemaName = "Organizations";
		public const string EntityDisplayCollectionName = "Tổ chức";
		public const string DisplayName = "Tổ chức";
		public const string EntitySetName = "organizations";
		public const string EntityLogicalCollectionName = "organizations";
		public const string EntityPrimaryIdAttribute = "organizationid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Organization";
		[DebuggerNonUserCode()]
		public Organization()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Organization(Guid OrganizationId)
		{
			Entity = new Entity(EntityLogicalName, OrganizationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Organization(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Organization"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Organization(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Organization"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Organization(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Organization(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Organization"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Organization(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Organization(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Organization(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Đối tượng thuê ACI.</para>
		/// <para><strong>Description</strong>: URL Điểm cuối Web ACI.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ACIWebEndpointUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ACIWebEndpointUrl); }
			set { Entity.Attributes[Fields.ACIWebEndpointUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mẫu xác nhận</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mẫu dùng cho xác nhận khi người dùng dừng đăng ký.</para>
		/// <para><strong>Lookup</strong>: <see cref="template"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AcknowledgementTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AcknowledgementTemplateId); }
			set { Entity.Attributes[Fields.AcknowledgementTemplateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật trải nghiệm soạn thảo văn bản đa dạng thức cho cuộc hẹn</para>
		/// <para><strong>Description</strong>: Thông tin cho biết có lọc hoạt động dựa trên thực thể trong ứng dụng hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ActivityTypeFilter
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ActivityTypeFilter); }
			set { Entity.Attributes[Fields.ActivityTypeFilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ hiển thị những hoạt động được đặt định cấu hình trong ứng dụng khi truy cập vào nút "Hoạt động mới"</para>
		/// <para><strong>Description</strong>: Liệu chỉ hiển thị những hoạt động được đặt cấu hình trong ứng dụng này hay tất cả các hoạt động trong nút &quot;Hoạt động mới&quot;.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ActivityTypeFilterV2
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ActivityTypeFilterV2); }
			set { Entity.Attributes[Fields.ActivityTypeFilterV2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật trình chỉnh sửa cột nâng cao</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu có bật các tùy chọn cột hiển thị trên một dạng xem trong ứng dụng dựa trên mô hình hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedColumnEditorEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedColumnEditorEnabled); }
			set { Entity.Attributes[Fields.AdvancedColumnEditorEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật tính năng lọc cột nâng cao</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu có bật tính năng lọc cột nâng cao trong một dạng xem trong ứng dụng dựa trên mô hình hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedColumnFilteringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedColumnFilteringEnabled); }
			set { Entity.Attributes[Fields.AdvancedColumnFilteringEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật tính năng lọc nâng cao</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu có bật tính năng lọc nâng cao trên tất cả các bảng trong một ứng dụng dựa trên mô hình hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedFilteringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedFilteringEnabled); }
			set { Entity.Attributes[Fields.AdvancedFilteringEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Tra cứu nâng cao</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu tính năng Tra cứu nâng cao có được bật cho các kiểm soát tra cứu hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdvancedLookupEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdvancedLookupEnabled); }
			set { Entity.Attributes[Fields.AdvancedLookupEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép tra cứu nâng cao trong bộ lọc chỉnh sửa</para>
		/// <para><strong>Description</strong>: Cho phép tra cứu nâng cao trong bảng điều khiển bộ lọc chỉnh sửa lưới</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AdvancedLookupInEditFilter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AdvancedLookupInEditFilter); }
			set { Entity.Attributes[Fields.AdvancedLookupInEditFilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable AI Prompts.</para>
		/// <para><strong>Description</strong>: Indicates whether AI Prompts feature is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AiPromptsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AiPromptsEnabled); }
			set { Entity.Attributes[Fields.AiPromptsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận đồng bộ sổ địa chỉ</para>
		/// <para><strong>Description</strong>: Cho biết có chấp nhận đồng bộ sổ địa chỉ dạng chạy ẩn trong Microsoft Office Outlook không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAddressBookSyncs
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAddressBookSyncs); }
			set { Entity.Attributes[Fields.AllowAddressBookSyncs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow All Application Users Access.</para>
		/// <para><strong>Description</strong>: Information that specifies whether all application users are allowed to access the environment</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowApplicationUserAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowApplicationUserAccess); }
			set { Entity.Attributes[Fields.AllowApplicationUserAccess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận tạo phản hồi tự động</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận tạo phản hồi tự động.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAutoResponseCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAutoResponseCreation); }
			set { Entity.Attributes[Fields.AllowAutoResponseCreation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận dừng đăng ký tự động</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận dừng đăng ký tự động.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAutoUnsubscribe
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAutoUnsubscribe); }
			set { Entity.Attributes[Fields.AllowAutoUnsubscribe] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận xác nhận dừng đăng ký tự động</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận gửi email xác nhận dừng đăng ký tự động.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowAutoUnsubscribeAcknowledgement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowAutoUnsubscribeAcknowledgement); }
			set { Entity.Attributes[Fields.AllowAutoUnsubscribeAcknowledgement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận quảng cáo trên thanh thư của ứng dụng khách Outlook</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận quảng cáo trên thanh thư của ứng dụng khách Outlook.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowClientMessageBarAd
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowClientMessageBarAd); }
			set { Entity.Attributes[Fields.AllowClientMessageBarAd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable connectors on power fx actions.</para>
		/// <para><strong>Description</strong>: Information on whether connectors on power fx actions is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowConnectorsOnPowerFXActions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowConnectorsOnPowerFXActions); }
			set { Entity.Attributes[Fields.AllowConnectorsOnPowerFXActions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of Applications that are in allow list for the accessing DV resources.</para>
		/// <para><strong>Description</strong>: Information that specifies the Applications that are in allow list for the accessing DV resources.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AllowedApplicationsForDVAccess
		{
			get { return Entity.GetAttributeValue<string>(Fields.AllowedApplicationsForDVAccess); }
			set { Entity.Attributes[Fields.AllowedApplicationsForDVAccess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of IP Ranges to be allowed by the firewall rule</para>
		/// <para><strong>Description</strong>: Information that specifies the range of IP addresses that are in allow list for the firewall.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AllowedIpRangeForFirewall
		{
			get { return Entity.GetAttributeValue<string>(Fields.AllowedIpRangeForFirewall); }
			set { Entity.Attributes[Fields.AllowedIpRangeForFirewall] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of IP Ranges to be allowed for generating the SAS URIs.</para>
		/// <para><strong>Description</strong>: Information that specifies the range of IP addresses that are in allowed list for generating the SAS URIs.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AllowedIpRangeForStorageAccessSignatures
		{
			get { return Entity.GetAttributeValue<string>(Fields.AllowedIpRangeForStorageAccessSignatures); }
			set { Entity.Attributes[Fields.AllowedIpRangeForStorageAccessSignatures] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of allowed mime types.</para>
		/// <para><strong>Description</strong>: Allow upload or download of certain mime types.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AllowedMimeTypes
		{
			get { return Entity.GetAttributeValue<string>(Fields.AllowedMimeTypes); }
			set { Entity.Attributes[Fields.AllowedMimeTypes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of Service Tags to be allowed by the firewall rule</para>
		/// <para><strong>Description</strong>: Information that specifies the List of Service Tags that should be allowed by the firewall.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AllowedServiceTagsForFirewall
		{
			get { return Entity.GetAttributeValue<string>(Fields.AllowedServiceTagsForFirewall); }
			set { Entity.Attributes[Fields.AllowedServiceTagsForFirewall] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận kiểm tra ở cấp độ thực thể</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận kiểm tra thay đổi đối với thực thể khi không đổi thuộc tính.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowEntityOnlyAudit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEntityOnlyAudit); }
			set { Entity.Attributes[Fields.AllowEntityOnlyAudit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép các ký tự đại diện phía trước trong tìm kiếm lưới</para>
		/// <para><strong>Description</strong>: Cho phép kiểu tìm kiếm “kết thúc bằng” trong các lưới bằng việc sử dụng ký tự đại diện hàng đầu trên tất cả các bảng trong môi trường</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowLeadingWildcardsInGridSearch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowLeadingWildcardsInGridSearch); }
			set { Entity.Attributes[Fields.AllowLeadingWildcardsInGridSearch] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép các ký tự đại diện phía trước trong Tìm nhanh</para>
		/// <para><strong>Description</strong>: Cho phép kiểu tìm kiếm “kết thúc bằng” trong các lưới bằng việc sử dụng ký tự đại diện hàng đầu trên tất cả các bảng trong môi trường</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AllowLeadingWildcardsInQuickFind
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AllowLeadingWildcardsInQuickFind); }
			set { Entity.Attributes[Fields.AllowLeadingWildcardsInQuickFind] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật quyền truy cập vào UI máy khách web cũ</para>
		/// <para><strong>Description</strong>: Bật quyền truy cập vào UI máy khách web cũ</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowLegacyClientExperience
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowLegacyClientExperience); }
			set { Entity.Attributes[Fields.AllowLegacyClientExperience] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép nhúng một số hộp thoại cũ trong máy khách trình duyệt Giao diện Hợp nhất</para>
		/// <para><strong>Description</strong>: Cho phép nhúng một số hộp thoại cũ trong máy khách trình duyệt Giao diện Hợp nhất</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowLegacyDialogsEmbedding
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowLegacyDialogsEmbedding); }
			set { Entity.Attributes[Fields.AllowLegacyDialogsEmbedding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận thực thi email tiếp thị</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận thực thi email tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowMarketingEmailExecution
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowMarketingEmailExecution); }
			set { Entity.Attributes[Fields.AllowMarketingEmailExecution] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Microsoft Trusted Service Tags</para>
		/// <para><strong>Description</strong>: Information that specifies whether Microsoft Trusted Service Tags are allowed</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowMicrosoftTrustedServiceTags
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowMicrosoftTrustedServiceTags); }
			set { Entity.Attributes[Fields.AllowMicrosoftTrustedServiceTags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận đồng bộ ngoại tuyến theo lịch</para>
		/// <para><strong>Description</strong>: Cho biết có chấp nhận đồng bộ ngoại tuyến dạng chạy ẩn trong Microsoft Office Outlook không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowOfflineScheduledSyncs
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowOfflineScheduledSyncs); }
			set { Entity.Attributes[Fields.AllowOfflineScheduledSyncs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận đồng bộ theo lịch</para>
		/// <para><strong>Description</strong>: Cho biết có chấp nhận đồng bộ theo lịch với Outlook không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowOutlookScheduledSyncs
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowOutlookScheduledSyncs); }
			set { Entity.Attributes[Fields.AllowOutlookScheduledSyncs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép chuyển hướng thiết đặt quản trị cũ sang giao diện người dùng hiện đại</para>
		/// <para><strong>Description</strong>: Kiểm soát xem tổ chức có Cho phép chuyển hướng thiết đặt quản trị cũ sang giao diện người dùng hiện đại hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowRedirectAdminSettingsToModernUI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowRedirectAdminSettingsToModernUI); }
			set { Entity.Attributes[Fields.AllowRedirectAdminSettingsToModernUI] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận gửi email đến địa chỉ không phân giải</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận người dùng gửi email đến bên không được giải quyết (các bên vẫn phải có địa chỉ email).</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUnresolvedPartiesOnEmailSend
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUnresolvedPartiesOnEmailSend); }
			set { Entity.Attributes[Fields.AllowUnresolvedPartiesOnEmailSend] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận tùy chọn dạng biểu mẫu của người dùng</para>
		/// <para><strong>Description</strong>: Cho biết khả năng cá nhân có thể chọn tùy chọn chế độ biểu mẫu của họ trong tùy chọn cá nhân.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUserFormModePreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUserFormModePreference); }
			set { Entity.Attributes[Fields.AllowUserFormModePreference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép người dùng ẩn dạng xem hệ thống</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu có bật tính năng cho phép người dùng cuối ẩn dạng xem hệ thống trong các ứng dụng dựa trên mô hình hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUsersHidingSystemViews
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUsersHidingSystemViews); }
			set { Entity.Attributes[Fields.AllowUsersHidingSystemViews] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận hiện thanh thông báo ứng dụng máy tính bảng trong trình duyệt.</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận hiện thanh thông báo ứng dụng máy tính bảng trong trình duyệt.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUsersSeeAppdownloadMessage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUsersSeeAppdownloadMessage); }
			set { Entity.Attributes[Fields.AllowUsersSeeAppdownloadMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận xuất ra Excel</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chấp nhận xuất lưới chạy trên web ra Microsoft Office Excel.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowWebExcelExport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowWebExcelExport); }
			set { Entity.Attributes[Fields.AllowWebExcelExport] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ chỉ định SA</para>
		/// <para><strong>Description</strong>: Bộ chỉ định SA để dùng trong toàn Microsoft Dynamics CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AMDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.AMDesignator); }
			set { Entity.Attributes[Fields.AMDesignator] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Trải nghiệm Công cụ thiết kế Ứng dụng cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết appDesignerExperience đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppDesignerExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppDesignerExperienceEnabled); }
			set { Entity.Attributes[Fields.AppDesignerExperienceEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application Based Access Control Mode</para>
		/// <para><strong>Description</strong>: Application Based Access Control Mode. 0 is Disabled, 1 is audit mode , 2 is enforcement mode</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ApplicationBasedAccessControlMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ApplicationBasedAccessControlMode.Disabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ApplicationBasedAccessControlMode? ApplicationBasedAccessControlMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ApplicationBasedAccessControlMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ApplicationBasedAccessControlMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ApplicationBasedAccessControlMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ApplicationBasedAccessControlMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Rich Editing Experience for Appointment</para>
		/// <para><strong>Description</strong>: Information on whether rich editing experience for Appointment is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppointmentRichEditorExperience
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppointmentRichEditorExperience); }
			set { Entity.Attributes[Fields.AppointmentRichEditorExperience] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật trải nghiệm cuộc họp Teams cho cuộc hẹn</para>
		/// <para><strong>Description</strong>: Thông tin cho biết có bật trải nghiệm cuộc họp Teams cho Cuộc hẹn hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppointmentWithTeamsMeeting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppointmentWithTeamsMeeting); }
			set { Entity.Attributes[Fields.AppointmentWithTeamsMeeting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật trải nghiệm họp qua Teams cho cuộc hẹn</para>
		/// <para><strong>Description</strong>: Liệu trải nghiệm họp qua Teams cho cuộc hẹn có được bật không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AppointmentWithTeamsMeetingV2
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AppointmentWithTeamsMeetingV2); }
			set { Entity.Attributes[Fields.AppointmentWithTeamsMeetingV2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt Thời gian Duy trì Kiểm toán</para>
		/// <para><strong>Description</strong>: Thiết đặt Thời kỳ Duy trì Kiểm toán đã lưu trong Cơ sở dữ liệu Tổ chức.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 30 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AuditRetentionPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AuditRetentionPeriod); }
			set { Entity.Attributes[Fields.AuditRetentionPeriod] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt Thời kỳ duy trì nội dung kiểm tra</para>
		/// <para><strong>Description</strong>: Thiết đặt Thời kỳ duy trì nội dung kiểm tra đã lưu trong Cơ sở dữ liệu tổ chức.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AuditRetentionPeriodV2
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AuditRetentionPeriodV2); }
			set { Entity.Attributes[Fields.AuditRetentionPeriodV2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Audit Settings of the organization</para>
		/// <para><strong>Description</strong>: Audit Settings of the organization</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuditSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuditSettings); }
			set { Entity.Attributes[Fields.AuditSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Áp dụng Tự động Quyền được hưởng Mặc định khi Tạo Trường hợp</para>
		/// <para><strong>Description</strong>: Chọn có áp dụng tự động quyền được hưởng mặc định của khách hàng khi tạo trường hợp hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoApplyDefaultonCaseCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoApplyDefaultonCaseCreate); }
			set { Entity.Attributes[Fields.AutoApplyDefaultonCaseCreate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Áp dụng Tự động Quyền được hưởng Mặc định khi Cập nhật Trường hợp</para>
		/// <para><strong>Description</strong>: Chọn có áp dụng tự động quyền được hưởng mặc định của khách hàng khi cập nhật trường hợp hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoApplyDefaultonCaseUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoApplyDefaultonCaseUpdate); }
			set { Entity.Attributes[Fields.AutoApplyDefaultonCaseUpdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có Tự động áp dụng Thỏa thuận Cấp độ Dịch vụ sau khi Ghi đè Theo cách thủ công</para>
		/// <para><strong>Description</strong>: Cho biết có tự động áp dụng Thỏa thuận Cấp độ Dịch vụ trong bản cập nhật bản ghi trường hợp sau khi Thỏa thuận Cấp độ Dịch vụ được áp dụng theo cách thủ công.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AutoApplySLA
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AutoApplySLA); }
			set { Entity.Attributes[Fields.AutoApplySLA] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AzureSchedulerJobCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AzureSchedulerJobCollectionName); }
			set { Entity.Attributes[Fields.AzureSchedulerJobCollectionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của loại tiền cơ sở của tổ chức.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BaseCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BaseCurrencyId); }
			set { Entity.Attributes[Fields.BaseCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ chính xác của loại tiền cơ sở</para>
		/// <para><strong>Description</strong>: Số chữ số sau dấu thập phân có thể dùng cho loại tiền cơ sở.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BaseCurrencyPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BaseCurrencyPrecision); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ký hiệu loại tiền cơ sở</para>
		/// <para><strong>Description</strong>: Ký hiệu dùng cho loại tiền cơ sở.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseCurrencySymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseCurrencySymbol); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại tiền ISO cơ sở</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseISOCurrencyCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseISOCurrencyCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa API của Bing Bản đồ</para>
		/// <para><strong>Description</strong>: Khóa api dùng trong yêu cầu đến dịch vụ Bing Bản đồ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BingMapsApiKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.BingMapsApiKey); }
			set { Entity.Attributes[Fields.BingMapsApiKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of Applications that are in block list for the accessing DV resources.</para>
		/// <para><strong>Description</strong>: Information that specifies the Applications that are in block list for the accessing DV resources.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BlockedApplicationsForDVAccess
		{
			get { return Entity.GetAttributeValue<string>(Fields.BlockedApplicationsForDVAccess); }
			set { Entity.Attributes[Fields.BlockedApplicationsForDVAccess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chặn đính kèm</para>
		/// <para><strong>Description</strong>: Ngăn tải lên hay tải xuống loại đính kèm cụ thể, được coi là nguy hiểm.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BlockedAttachments
		{
			get { return Entity.GetAttributeValue<string>(Fields.BlockedAttachments); }
			set { Entity.Attributes[Fields.BlockedAttachments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of blocked mime types.</para>
		/// <para><strong>Description</strong>: Prevent upload or download of certain mime types that are considered dangerous.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BlockedMimeTypes
		{
			get { return Entity.GetAttributeValue<string>(Fields.BlockedMimeTypes); }
			set { Entity.Attributes[Fields.BlockedMimeTypes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị thẻ theo trạng thái mở rộng đối với Bảng thông tin Tương tác</para>
		/// <para><strong>Description</strong>: Hiển thị thẻ theo trạng thái mở rộng đối với bảng thông tin tương tác</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BoundDashboardDefaultCardExpanded
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BoundDashboardDefaultCardExpanded); }
			set { Entity.Attributes[Fields.BoundDashboardDefaultCardExpanded] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố thao tác hàng loạt</para>
		/// <para><strong>Description</strong>: Tiền tố dùng trong thao tác đánh số hàng loạt.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BulkOperationPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.BulkOperationPrefix); }
			set { Entity.Attributes[Fields.BulkOperationPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật BusinessCardOptions mới</para>
		/// <para><strong>Description</strong>: BusinessCardOptions</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCardOptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCardOptions); }
			set { Entity.Attributes[Fields.BusinessCardOptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lịch đóng cửa</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của lịch đóng cửa của tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BusinessClosureCalendarId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BusinessClosureCalendarId); }
			set { Entity.Attributes[Fields.BusinessClosureCalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại lịch</para>
		/// <para><strong>Description</strong>: Loại lịch dành cho hệ thống. Đặt là dương lịch của Mỹ theo mặc định.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CalendarType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CalendarType); }
			set { Entity.Attributes[Fields.CalendarType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố cho chiến dịch</para>
		/// <para><strong>Description</strong>: Tiền tố dùng khi đánh số chiến dịch.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CampaignPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.CampaignPrefix); }
			set { Entity.Attributes[Fields.CampaignPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có thể tắt trải nghiệm Tìm kiếm phát hành vào tháng 10/2020</para>
		/// <para><strong>Description</strong>: Cho biết liệu tổ chức có thể chọn không tham gia trải nghiệm Tìm kiếm liên quan mới (phát hành vào tháng 10/2020) hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanOptOutNewSearchExperience
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanOptOutNewSearchExperience); }
			set { Entity.Attributes[Fields.CanOptOutNewSearchExperience] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phân tầng cập nhật trạng thái</para>
		/// <para><strong>Description</strong>: Dựng cờ phân tầng Cập nhật cho sự việc.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CascadeStatusUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CascadeStatusUpdate); }
			set { Entity.Attributes[Fields.CascadeStatusUpdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố cho trường hợp</para>
		/// <para><strong>Description</strong>: Tiền tố để dùng cho mọi trường hợp trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CasePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.CasePrefix); }
			set { Entity.Attributes[Fields.CasePrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố Thể loại</para>
		/// <para><strong>Description</strong>: Nhập tiền tố để dùng cho mọi thể loại trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CategoryPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.CategoryPrefix); }
			set { Entity.Attributes[Fields.CategoryPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đặt Tính năng Máy khách</para>
		/// <para><strong>Description</strong>: Tính năng Máy khách để bật làm XML BLOB.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientFeatureSet
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientFeatureSet); }
			set { Entity.Attributes[Fields.ClientFeatureSet] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Chính sách Bảo mật Nội dung</para>
		/// <para><strong>Description</strong>: Cấu hình chính sách cho CSP</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentSecurityPolicyConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentSecurityPolicyConfiguration); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Chính sách bảo mật nội dung cho Các ứng dụng canvas</para>
		/// <para><strong>Description</strong>: Cấu hình chính sách bảo mật nội dung cho Các ứng dụng canvas.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentSecurityPolicyConfigurationForCanvas
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentSecurityPolicyConfigurationForCanvas); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyConfigurationForCanvas] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content Security Policy Options</para>
		/// <para><strong>Description</strong>: Content Security Policy Options.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ContentSecurityPolicyOptions
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ContentSecurityPolicyOptions); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyOptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Uri báo cáo chính sách bảo mật nội dung</para>
		/// <para><strong>Description</strong>: Uri báo cáo chính sách bảo mật nội dung.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentSecurityPolicyReportUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentSecurityPolicyReportUri); }
			set { Entity.Attributes[Fields.ContentSecurityPolicyReportUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố liên hệ</para>
		/// <para><strong>Description</strong>: Tiền tố để dùng cho mọi hợp đồng trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractPrefix); }
			set { Entity.Attributes[Fields.ContractPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CopresenceRefreshRate</para>
		/// <para><strong>Description</strong>: Tốc độ làm mới dữ liệu hiện diện đồng thời tính bằng giây.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 30 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CopresenceRefreshRate
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CopresenceRefreshRate); }
			set { Entity.Attributes[Fields.CopresenceRefreshRate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật quy trình Luồng Trải nghiệm Chủ động Cortana cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết xem liệu có nên bật tính năng quy trình Dòng CortanaProactiveExperience cho tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CortanaProactiveExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CortanaProactiveExperienceEnabled); }
			set { Entity.Attributes[Fields.CortanaProactiveExperienceEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Trạng thái Sản phẩm Ban đầu Hiện hoạt</para>
		/// <para><strong>Description</strong>: Bật trạng thái Ban đầu của sản phẩm mới được tạo ở Hiện hoạt thay vì Bản nháp</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CreateProductsWithoutParentInActiveState
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CreateProductsWithoutParentInActiveState); }
			set { Entity.Attributes[Fields.CreateProductsWithoutParentInActiveState] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ chính xác thập phân của loại tiền</para>
		/// <para><strong>Description</strong>: Số chữ số sau dấu thập phân có thể dùng cho loại tiền.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrencyDecimalPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrencyDecimalPrecision); }
			set { Entity.Attributes[Fields.CurrencyDecimalPrecision] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị loại tiền bằng cách dùng</para>
		/// <para><strong>Description</strong>: Cho biết khả năng hiển thị trường tiền với mã loại tiền hay ký hiệu loại tiền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyDisplayOption"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyDisplayOption.Ky_hieu_loai_tien"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyDisplayOption? CurrencyDisplayOption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CurrencyDisplayOption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyDisplayOption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrencyDisplayOption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CurrencyDisplayOption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã định dạng loại tiền</para>
		/// <para><strong>Description</strong>: Thông tin về cách đặt ký hiệu loại tiền trong toàn Microsoft Dynamics CRM.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyFormatCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyFormatCode._123_0"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyFormatCode? CurrencyFormatCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CurrencyFormatCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.CurrencyFormatCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrencyFormatCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CurrencyFormatCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ký hiệu loại tiền</para>
		/// <para><strong>Description</strong>: Ký hiệu dùng cho loại tiền trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 13</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CurrencySymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.CurrencySymbol); }
			set { Entity.Attributes[Fields.CurrencySymbol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thao tác hàng loạt hiện tại</para>
		/// <para><strong>Description</strong>: Số thao tác hàng loạt hiện tại. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentBulkOperationNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentBulkOperationNumber); }
			set { Entity.Attributes[Fields.CurrentBulkOperationNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số chiến dịch hiện tại</para>
		/// <para><strong>Description</strong>: Số chiến dịch hiện tại. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentCampaignNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentCampaignNumber); }
			set { Entity.Attributes[Fields.CurrentCampaignNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số hiệu trường hợp hiện tại</para>
		/// <para><strong>Description</strong>: Số hiệu trường hợp đầu tiên để dùng. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentCaseNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentCaseNumber); }
			set { Entity.Attributes[Fields.CurrentCaseNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thể loại Hiện tại</para>
		/// <para><strong>Description</strong>: Nhập số đầu tiên để dùng cho Thể loại. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentCategoryNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentCategoryNumber); }
			set { Entity.Attributes[Fields.CurrentCategoryNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số liên hệ hiện tại</para>
		/// <para><strong>Description</strong>: Số hiệu hợp đồng đầu tiên để dùng. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentContractNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentContractNumber); }
			set { Entity.Attributes[Fields.CurrentContractNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự nhập hiện tại</para>
		/// <para><strong>Description</strong>: Thứ tự chuỗi nhập để dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrentImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentImportSequenceNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã số hóa đơn hiện tại</para>
		/// <para><strong>Description</strong>: Số hiệu hóa đơn đầu tiên để dùng. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentInvoiceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentInvoiceNumber); }
			set { Entity.Attributes[Fields.CurrentInvoiceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số hiệu Bài viết Hiện tại trong Cơ sở kiến thức</para>
		/// <para><strong>Description</strong>: Nhập số đầu tiên để dùng cho bài viết trong cơ sở kiến thức. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentKaNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentKaNumber); }
			set { Entity.Attributes[Fields.CurrentKaNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số hiệu bài viết hiện tại</para>
		/// <para><strong>Description</strong>: Số hiệu bài viết đầu tiên để dùng. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentKbNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentKbNumber); }
			set { Entity.Attributes[Fields.CurrentKbNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã số đơn hàng hiện tại</para>
		/// <para><strong>Description</strong>: Số hiệu đơn hàng đầu tiên để dùng. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentOrderNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentOrderNumber); }
			set { Entity.Attributes[Fields.CurrentOrderNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số bảng đã phân tách hiện tại</para>
		/// <para><strong>Description</strong>: Số bảng đã phân tách đầu tiên để dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CurrentParsedTableNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentParsedTableNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã số báo giá hiện tại</para>
		/// <para><strong>Description</strong>: Số hiệu báo giá đầu tiên để dùng. Không còn dùng. Dùng thông báo SetAutoNumberSeed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.0.0.0")]
		public int? CurrentQuoteNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CurrentQuoteNumber); }
			set { Entity.Attributes[Fields.CurrentQuoteNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuỗi định dạng ngày</para>
		/// <para><strong>Description</strong>: Chuỗi cho thấy cách hiển thị ngày trong toàn Microsoft CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateFormatString
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateFormatString); }
			set { Entity.Attributes[Fields.DateFormatString] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu phân tách ngày</para>
		/// <para><strong>Description</strong>: Ký tự dùng để phân tách tháng, ngày và năm trong ngày tháng, trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateSeparator); }
			set { Entity.Attributes[Fields.DateSeparator] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of days before we migrate email description to blob.</para>
		/// <para><strong>Description</strong>: Number of days before we migrate email description to blob.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysBeforeEmailDescriptionIsMigrated
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysBeforeEmailDescriptionIsMigrated); }
			set { Entity.Attributes[Fields.DaysBeforeEmailDescriptionIsMigrated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số ngày trước khi chức năng Đồng bộ hóa cuộc trò chuyện Teams không hoạt động bị tắt</para>
		/// <para><strong>Description</strong>: Số ngày không hoạt động trước khi chức năng đồng bộ hóa bị tắt đối với Cuộc trò chuyện Teams.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 28</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysBeforeInactiveTeamsChatSyncDisabled
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysBeforeInactiveTeamsChatSyncDisabled); }
			set { Entity.Attributes[Fields.DaysBeforeInactiveTeamsChatSyncDisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị Ngày tối đa kể từ lần cuối sửa đổi bản ghi</para>
		/// <para><strong>Description</strong>: Giá trị tối đa cho Ngày thiết đặt Mobile Offline kể từ lần cuối sửa đổi bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysSinceRecordLastModifiedMaxValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysSinceRecordLastModifiedMaxValue); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ký hiệu thập phân</para>
		/// <para><strong>Description</strong>: Ký hiệu dùng cho dấu thập phân trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DecimalSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.DecimalSymbol); }
			set { Entity.Attributes[Fields.DecimalSymbol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã quốc gia mặc định</para>
		/// <para><strong>Description</strong>: Khu vực văn bản để nhập mã quốc gia mặc định.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 30</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultCountryCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultCountryCode); }
			set { Entity.Attributes[Fields.DefaultCountryCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên của ứng dụng mặc định</para>
		/// <para><strong>Description</strong>: Tên của crm custom mặc định.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultCrmCustomName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultCrmCustomName); }
			set { Entity.Attributes[Fields.DefaultCrmCustomName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Máy chủ Email</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho cấu hình máy chủ email mặc định.</para>
		/// <para><strong>Lookup</strong>: <see cref="emailserverprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultEmailServerProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultEmailServerProfileId); }
			set { Entity.Attributes[Fields.DefaultEmailServerProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt email mặc định</para>
		/// <para><strong>Description</strong>: Chuỗi XML chứa thiết đặt email mặc định, áp dụng khi tạo người dùng hay hàng đợi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultEmailSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultEmailSettings); }
			set { Entity.Attributes[Fields.DefaultEmailSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Mobile Offline Mặc định</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của cấu hình Mobile Offline mặc định.</para>
		/// <para><strong>Lookup</strong>: <see cref="mobileofflineprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMobileOfflineProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMobileOfflineProfileId); }
			set { Entity.Attributes[Fields.DefaultMobileOfflineProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại phạm vi kết thúc lặp lại mặc định</para>
		/// <para><strong>Description</strong>: Loại của ngày phạm vi kết thúc lặp lại mặc định.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DefaultRecurrenceEndRangeType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.DefaultRecurrenceEndRangeType? DefaultRecurrenceEndRangeType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DefaultRecurrenceEndRangeType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.DefaultRecurrenceEndRangeType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DefaultRecurrenceEndRangeType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DefaultRecurrenceEndRangeType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu Chủ đề Mặc định</para>
		/// <para><strong>Description</strong>: Dữ liệu chủ đề mặc định dành cho tổ chức.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultThemeData
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultThemeData); }
			set { Entity.Attributes[Fields.DefaultThemeData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quản trị viên đại diện</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng quản trị viên đại diện cho tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DelegatedAdminUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DelegatedAdminUserId); }
			set { Entity.Attributes[Fields.DelegatedAdminUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tồn tại cho bản ghi nhật ký hàng đợi dòng màn hình nền mới.</para>
		/// <para><strong>Description</strong>: Thời gian tồn tại mặc định tính bằng phút đối với bản ghi nhật ký hàng đợi dòng màn hình nền mới.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 33,554,432</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DesktopFlowQueueLogsTtlInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DesktopFlowQueueLogsTtlInMinutes); }
			set { Entity.Attributes[Fields.DesktopFlowQueueLogsTtlInMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái nhật ký hành động Chạy dòng màn hình nền</para>
		/// <para><strong>Description</strong>: Kích hoạt/Hủy kích hoạt nhật ký hành động chạy Dòng màn hình nền Power Automate.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogsStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogsStatus.Da_bat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogsStatus? DesktopFlowRunActionLogsStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DesktopFlowRunActionLogsStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogsStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DesktopFlowRunActionLogsStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DesktopFlowRunActionLogsStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản nhật ký hành động chạy dòng màn hình nền</para>
		/// <para><strong>Description</strong>: Nơi lưu trữ nhật ký hành động chạy dòng màn hình nền Power Automate.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogVersion"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogVersion.AdditionalContext"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogVersion? DesktopFlowRunActionLogVersion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DesktopFlowRunActionLogVersion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.DesktopFlowRunActionLogVersion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DesktopFlowRunActionLogVersion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DesktopFlowRunActionLogVersion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do tắt</para>
		/// <para><strong>Description</strong>: Lý do tắt tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisabledReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisabledReason); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có tắt chăm sóc mạng xã hội</para>
		/// <para><strong>Description</strong>: Cho biết có tắt Chăm sóc mạng xã hội hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisableSocialCare
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisableSocialCare); }
			set { Entity.Attributes[Fields.DisableSocialCare] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tắt tính năng Chia sẻ bộ đệm ẩn chứa nhãn hệ thống.</para>
		/// <para><strong>Description</strong>: Tắt tính năng chia sẻ nhãn hệ thống cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisableSystemLabelsCacheSharing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisableSystemLabelsCacheSharing); }
			set { Entity.Attributes[Fields.DisableSystemLabelsCacheSharing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương pháp tính giảm giá</para>
		/// <para><strong>Description</strong>: Phương pháp tính giảm giá cho sản phẩm QOOI.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DiscountCalculationMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.DiscountCalculationMethod.Hang_muc"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.DiscountCalculationMethod? DiscountCalculationMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DiscountCalculationMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.DiscountCalculationMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DiscountCalculationMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DiscountCalculationMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị Hướng dẫn Điều hướng</para>
		/// <para><strong>Description</strong>: Cho biết hiển thị hay không hiển thị hướng dẫn điều hướng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisplayNavigationTour
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisplayNavigationTour); }
			set { Entity.Attributes[Fields.DisplayNavigationTour] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kênh kết nối email</para>
		/// <para><strong>Description</strong>: Chọn nếu bạn muốn dùng Bộ định tuyến email hay đồng bộ hóa phía máy chủ khi xử lý email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailConnectionChannel"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailConnectionChannel.Dong_bo_phia_May_chu"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailConnectionChannel? EmailConnectionChannel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailConnectionChannel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.EmailConnectionChannel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailConnectionChannel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailConnectionChannel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dùng tương quan email</para>
		/// <para><strong>Description</strong>: Gắn cờ để bật hoặc tắt tương quan email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EmailCorrelationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EmailCorrelationEnabled); }
			set { Entity.Attributes[Fields.EmailCorrelationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tần số bỏ phiếu gửi email</para>
		/// <para><strong>Description</strong>: Tần số bỏ phiếu thông thường, dùng khi gửi email trong Microsoft Office Outlook.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? EmailSendPollingPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.EmailSendPollingPeriod); }
			set { Entity.Attributes[Fields.EmailSendPollingPeriod] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp nhất không đồng thời đã được bật cho UCI</para>
		/// <para><strong>Description</strong>: Xác định xem các bản ghi được hợp nhất thông qua hộp thoại hợp nhất trong UCI có được hợp nhất theo cách không đồng thời hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableAsyncMergeAPIForUCI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableAsyncMergeAPIForUCI); }
			set { Entity.Attributes[Fields.EnableAsyncMergeAPIForUCI] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tích hợp với Bing Bản đồ</para>
		/// <para><strong>Description</strong>: Bật tích hợp với Bing Bản đồ</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableBingMapsIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableBingMapsIntegration); }
			set { Entity.Attributes[Fields.EnableBingMapsIntegration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép tạo ứng dụng Canvas trong Dataverse/Giải pháp theo mặc định</para>
		/// <para><strong>Description</strong>: Lưu ý: Bằng cách bật tính năng này, bạn cũng sẽ tự động tạo các biến môi trường khi thêm nguồn dữ liệu cho ứng dụng của mình.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableCanvasAppsInSolutionsByDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableCanvasAppsInSolutionsByDefault); }
			set { Entity.Attributes[Fields.EnableCanvasAppsInSolutionsByDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép tạo các dòng quy trình trong một giải pháp theo mặc định.</para>
		/// <para><strong>Description</strong>: Cho biết liệu việc tạo dòng quy trình có nằm trong một giải pháp theo mặc định cho tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableFlowsInSolutionByDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableFlowsInSolutionByDefault); }
			set { Entity.Attributes[Fields.EnableFlowsInSolutionByDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết liệu tổ chức có được gia hạn để tự động bật chức năng 'tạo các dòng trong giải pháp theo mặc định' hay không.</para>
		/// <para><strong>Description</strong>: Những tổ chức có thuộc tính này được đặt thành True sẽ được gia hạn và chưa được sử dụng chức năng &apos;tạo các dòng trong giải pháp theo mặc định&apos; khi chức năng này bắt đầu được bật trên toàn thế giới. Sau khi hết thời gian gia hạn, chức năng này sẽ được bật trong tổ chức của bạn.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableFlowsInSolutionByDefaultGracePeriod
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableFlowsInSolutionByDefaultGracePeriod); }
			set { Entity.Attributes[Fields.EnableFlowsInSolutionByDefaultGracePeriod] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Tích hợp với Skype Chân thực</para>
		/// <para><strong>Description</strong>: Bật Tích hợp với Skype Chân thực</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableImmersiveSkypeIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableImmersiveSkypeIntegration); }
			set { Entity.Attributes[Fields.EnableImmersiveSkypeIntegration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable IP Address Based Cookie Binding</para>
		/// <para><strong>Description</strong>: Information that specifies whether IP based cookie binding is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableIpBasedCookieBinding
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableIpBasedCookieBinding); }
			set { Entity.Attributes[Fields.EnableIpBasedCookieBinding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable IP Range based Firewall</para>
		/// <para><strong>Description</strong>: Information that specifies whether IP based firewall rule is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableIpBasedFirewallRule
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableIpBasedFirewallRule); }
			set { Entity.Attributes[Fields.EnableIpBasedFirewallRule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable IP Range based Firewall In Audit Only Mode</para>
		/// <para><strong>Description</strong>: Information that specifies whether IP based firewall rule is enabled in Audit Only Mode</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableIpBasedFirewallRuleInAuditMode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableIpBasedFirewallRuleInAuditMode); }
			set { Entity.Attributes[Fields.EnableIpBasedFirewallRuleInAuditMode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable IP SAS URI generation rule</para>
		/// <para><strong>Description</strong>: Information that specifies whether IP based SAS URI generation rule is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong></strong>]: true - [<strong></strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong></strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableIpBasedStorageAccessSignatureRule
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableIpBasedStorageAccessSignatureRule); }
			set { Entity.Attributes[Fields.EnableIpBasedStorageAccessSignatureRule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết người dùng đã bật hay tắt tính năng Thẻ Persona Trực tiếp trong UCI.</para>
		/// <para><strong>Description</strong>: Cho biết người dùng đã bật hay tắt tính năng Thẻ Persona Trực tiếp trong UCI.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableLivePersonaCardUCI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableLivePersonaCardUCI); }
			set { Entity.Attributes[Fields.EnableLivePersonaCardUCI] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết người dùng đã bật hay tắt LivePersonCardIntegration trong Office.</para>
		/// <para><strong>Description</strong>: Cho biết người dùng đã bật hay tắt LivePersonCardIntegration trong Office.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableLivePersonCardIntegrationInOffice
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableLivePersonCardIntegrationInOffice); }
			set { Entity.Attributes[Fields.EnableLivePersonCardIntegrationInOffice] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Tác giả Hướng dẫn Học tập</para>
		/// <para><strong>Description</strong>: Chọn bật tác giả hướng dẫn học tập.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableLPAuthoring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableLPAuthoring); }
			set { Entity.Attributes[Fields.EnableLPAuthoring] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển đổi Maker Portal sang phiên bản cũ</para>
		/// <para><strong>Description</strong>: Kiểm soát xem tổ chức có Chuyển đổi Maker Portal sang phiên bản cũ hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableMakerSwitchToClassic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableMakerSwitchToClassic); }
			set { Entity.Attributes[Fields.EnableMakerSwitchToClassic] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Tích hợp với Microsoft Flow</para>
		/// <para><strong>Description</strong>: Bật Tích hợp với Microsoft Flow</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableMicrosoftFlowIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableMicrosoftFlowIntegration); }
			set { Entity.Attributes[Fields.EnableMicrosoftFlowIntegration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật định giá khi tạo</para>
		/// <para><strong>Description</strong>: Bật tính định giá khi gọi ra lệnh Tạo.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnablePricingOnCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnablePricingOnCreate); }
			set { Entity.Attributes[Fields.EnablePricingOnCreate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật kết nối tương quan thông minh</para>
		/// <para><strong>Description</strong>: Dùng kết nối tương quan thông minh.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableSmartMatching
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableSmartMatching); }
			set { Entity.Attributes[Fields.EnableSmartMatching] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật UCI CDN cho tổ chức</para>
		/// <para><strong>Description</strong>: Để trống để sử dụng thiết đặt mặc định. Đặt thành bật/tắt để bật/tắt CDN cho UCI.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableUnifiedClientCDN
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableUnifiedClientCDN); }
			set { Entity.Attributes[Fields.EnableUnifiedClientCDN] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật sơ đồ trang web và cập nhật lệnh</para>
		/// <para><strong>Description</strong>: Bật sơ đồ trang web và cập nhật lệnh</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableUnifiedInterfaceShellRefresh
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableUnifiedInterfaceShellRefresh); }
			set { Entity.Attributes[Fields.EnableUnifiedInterfaceShellRefresh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt tổ chức để thực thi phần bổ trợ chỉ đọc.</para>
		/// <para><strong>Description</strong>: Thiết đặt tổ chức để thực thi phần bổ trợ chỉ đọc.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnforceReadOnlyPlugins
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnforceReadOnlyPlugins); }
			set { Entity.Attributes[Fields.EnforceReadOnlyPlugins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số ngày Hết hạn Theo dõi Thay đổi đối với Bản ghi Đã xóa</para>
		/// <para><strong>Description</strong>: Số ngày tối đa để theo dõi thay đổi đối với bản ghi đã xóa</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 365</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpireChangeTrackingInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpireChangeTrackingInDays); }
			set { Entity.Attributes[Fields.ExpireChangeTrackingInDays] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số ngày hết hạn đăng ký</para>
		/// <para><strong>Description</strong>: Số ngày tối đa trước khi xóa đăng ký không hoạt động.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpireSubscriptionsInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpireSubscriptionsInDays); }
			set { Entity.Attributes[Fields.ExpireSubscriptionsInDays] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Gốc Bên ngoài</para>
		/// <para><strong>Description</strong>: Chỉ định URL gốc dùng để tìm kiếm gợi ý tài liệu bên ngoài.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalBaseUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalBaseUrl); }
			set { Entity.Attributes[Fields.ExternalBaseUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa tương quan của Thực thể đã Kích hoạt Bên Ngoài</para>
		/// <para><strong>Description</strong>: Chuỗi XML chứa khóa tương quan của thực thể đã kích hoạt bên ngoài để liên kết các thực thể phiên bản Bên ngoài hiện có với các thực thể đã Kích hoạt Bên ngoài mới tạo. Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalPartyCorrelationKeys
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalPartyCorrelationKeys); }
			set { Entity.Attributes[Fields.ExternalPartyCorrelationKeys] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt thực thể ExternalPartyEnabled. Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Description</strong>: Chuỗi XML chứa thiết đặt thực thể đã kích hoạt bên ngoài.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalPartyEntitySettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalPartyEntitySettings); }
			set { Entity.Attributes[Fields.ExternalPartyEntitySettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật tính năng</para>
		/// <para><strong>Description</strong>: Tính năng để bật làm XML BLOB.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FeatureSet
		{
			get { return Entity.GetAttributeValue<string>(Fields.FeatureSet); }
			set { Entity.Attributes[Fields.FeatureSet] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu tài khóa</para>
		/// <para><strong>Description</strong>: Ngày bắt đầu cho kỳ tài chính dùng trong toàn bộ Microsoft CRM.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FiscalCalendarStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FiscalCalendarStart); }
			set { Entity.Attributes[Fields.FiscalCalendarStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng kỳ tài chính</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách hiển thị tên của kỳ tài chính trong toàn Microsoft CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FiscalPeriodFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.FiscalPeriodFormat); }
			set { Entity.Attributes[Fields.FiscalPeriodFormat] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng dành cho kỳ tài chính</para>
		/// <para><strong>Description</strong>: Định dạng sẽ hiển thị kỳ tài chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalPeriodFormatPeriod"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalPeriodFormatPeriod? FiscalPeriodFormatPeriod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalPeriodFormatPeriod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalPeriodFormatPeriod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalPeriodFormatPeriod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalPeriodFormatPeriod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại kỳ tài chính</para>
		/// <para><strong>Description</strong>: Loại kỳ tài chính được dùng trong toàn Microsoft CRM.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FiscalPeriodType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FiscalPeriodType); }
			set { Entity.Attributes[Fields.FiscalPeriodType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã cập nhật thiết đặt tài chính</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định trạng thái cập nhật thiết đặt tài chính.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public bool? FiscalSettingsUpdated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FiscalSettingsUpdated); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị năm tài chính</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định việc hiển thị năm tài chính dựa trên ngày bắt đầu hay ngày kết thúc của năm tài chính.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: -1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FiscalYearDisplayCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FiscalYearDisplayCode); }
			set { Entity.Attributes[Fields.FiscalYearDisplayCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng năm tài chính</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách hiển thị tên của năm tài chính trong toàn Microsoft CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FiscalYearFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.FiscalYearFormat); }
			set { Entity.Attributes[Fields.FiscalYearFormat] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố cho năm tài chính</para>
		/// <para><strong>Description</strong>: Tiền tố khi hiển thị năm tài chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatPrefix"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatPrefix? FiscalYearFormatPrefix
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYearFormatPrefix);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatPrefix)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYearFormatPrefix] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYearFormatPrefix] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hậu tố cho năm tài chính</para>
		/// <para><strong>Description</strong>: Hậu tố khi hiển thị năm tài chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatSuffix"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatSuffix? FiscalYearFormatSuffix
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYearFormatSuffix);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatSuffix)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYearFormatSuffix] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYearFormatSuffix] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng năm của năm tài chính</para>
		/// <para><strong>Description</strong>: Định dạng cho năm.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatYear"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatYear? FiscalYearFormatYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYearFormatYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FiscalYearFormatYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYearFormatYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYearFormatYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu kết nối kỳ năm tài chính</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách kết nối tên của năm tài chính và kỳ tài chính khi hiển thị cùng nhau.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FiscalYearPeriodConnect
		{
			get { return Entity.GetAttributeValue<string>(Fields.FiscalYearPeriodConnect); }
			set { Entity.Attributes[Fields.FiscalYearPeriodConnect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TTL cho bản ghi trong thực thể nhật ký dòng.</para>
		/// <para><strong>Description</strong>: Thời gian tồn tại mặc định tính bằng phút đối với các bản ghi mới trong thực thể nhật ký dòng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 33,554,432</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FlowLogsTtlInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FlowLogsTtlInMinutes); }
			set { Entity.Attributes[Fields.FlowLogsTtlInMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian hoạt động (tính bằng giây) cho phiên chạy dòng</para>
		/// <para><strong>Description</strong>: Thời gian hoạt động (tính bằng giây) cho phiên chạy dòng</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FlowRunTimeToLiveInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FlowRunTimeToLiveInSeconds); }
			set { Entity.Attributes[Fields.FlowRunTimeToLiveInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ tự hiển thị tên đầy đủ</para>
		/// <para><strong>Description</strong>: Thứ tự hiển thị tên trong toàn Microsoft CRM.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.FullNameConventionCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.FullNameConventionCode.Ho_Ten"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.FullNameConventionCode? FullNameConventionCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FullNameConventionCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.FullNameConventionCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FullNameConventionCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FullNameConventionCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cửa sổ mở rộng tương lai</para>
		/// <para><strong>Description</strong>: Chỉ định số lượng tháng tối đa trong tương lai để có thể tạo hoạt động lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 140</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FutureExpansionWindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FutureExpansionWindow); }
			set { Entity.Attributes[Fields.FutureExpansionWindow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo cảnh báo cho lỗi</para>
		/// <para><strong>Description</strong>: Cho biết khả năng tạo cảnh báo dành cho lỗi.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GenerateAlertsForErrors
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GenerateAlertsForErrors); }
			set { Entity.Attributes[Fields.GenerateAlertsForErrors] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo cảnh báo cho thông tin</para>
		/// <para><strong>Description</strong>: Cho biết khả năng tạo cảnh báo dành cho thông tin.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GenerateAlertsForInformation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GenerateAlertsForInformation); }
			set { Entity.Attributes[Fields.GenerateAlertsForInformation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo thông báo cho cảnh báo</para>
		/// <para><strong>Description</strong>: Cho biết khả năng tạo thông báo dành cho cảnh báo.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GenerateAlertsForWarnings
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GenerateAlertsForWarnings); }
			set { Entity.Attributes[Fields.GenerateAlertsForWarnings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật nội dung ngăn bắt đầu</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật nội dung Bắt đầu dành cho tổ chức này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GetStartedPaneContentEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GetStartedPaneContentEnabled); }
			set { Entity.Attributes[Fields.GetStartedPaneContentEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật tham số AppendUrl</para>
		/// <para><strong>Description</strong>: Cho biết có bật tham số URL nối vào không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GlobalAppendUrlParametersEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GlobalAppendUrlParametersEnabled); }
			set { Entity.Attributes[Fields.GlobalAppendUrlParametersEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL trợ giúp chung.</para>
		/// <para><strong>Description</strong>: URL cho trợ giúp chung về trang web.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GlobalHelpUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.GlobalHelpUrl); }
			set { Entity.Attributes[Fields.GlobalHelpUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật trợ giúp chung có thể tùy chỉnh</para>
		/// <para><strong>Description</strong>: Cho biết có bật trợ giúp chung có thể tùy chỉnh không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GlobalHelpUrlEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GlobalHelpUrlEnabled); }
			set { Entity.Attributes[Fields.GlobalHelpUrlEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian hết hạn tổng số cho mục đích</para>
		/// <para><strong>Description</strong>: Số lượng ngày sau ngày kết thúc mục đích, sau khi tổng số của mục đích dừng tự động.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GoalRollupExpiryTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GoalRollupExpiryTime); }
			set { Entity.Attributes[Fields.GoalRollupExpiryTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tần số tổng số tự động cho mục đích</para>
		/// <para><strong>Description</strong>: Số lượng giờ giữa các công việc tổng số tự động.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GoalRollupFrequency
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GoalRollupFrequency); }
			set { Entity.Attributes[Fields.GoalRollupFrequency] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấp truy cập vào dịch vụ mạng</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? GrantAccessToNetworkService
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.GrantAccessToNetworkService); }
			set { Entity.Attributes[Fields.GrantAccessToNetworkService] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm chủ đề delta hàm băm</para>
		/// <para><strong>Description</strong>: Chênh lệch tối đa có thể có giữa tổng số đếm từ khóa chủ đề của email với nội dung gửi cần tương quan</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HashDeltaSubjectCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HashDeltaSubjectCount); }
			set { Entity.Attributes[Fields.HashDeltaSubjectCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ khóa lọc hàm băm</para>
		/// <para><strong>Description</strong>: Lọc từ khóa chủ đề</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HashFilterKeywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.HashFilterKeywords); }
			set { Entity.Attributes[Fields.HashFilterKeywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm tối đa hàm băm</para>
		/// <para><strong>Description</strong>: Số lượng từ khóa chủ đề hay người nhận tối đa dùng để tương quan</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HashMaxCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HashMaxCount); }
			set { Entity.Attributes[Fields.HashMaxCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm địa chỉ tối thiểu dạng hàm băm</para>
		/// <para><strong>Description</strong>: Số lượng người nhận tối đa cần thiết để khớp cho email với nội dung gửi cần tương quan</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? HashMinAddressCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.HashMinAddressCount); }
			set { Entity.Attributes[Fields.HashMinAddressCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu Chủ đề có độ tương phản cao</para>
		/// <para><strong>Description</strong>: Dữ liệu chủ đề có độ thương phản cao dành cho tổ chức.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HighContrastThemeData
		{
			get { return Entity.GetAttributeValue<string>(Fields.HighContrastThemeData); }
			set { Entity.Attributes[Fields.HighContrastThemeData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bỏ qua email nội bộ</para>
		/// <para><strong>Description</strong>: Cho biết khả năng theo dõi email đến do người dùng hay hàng đợi Microsoft Dynamics 365 nội bộ gửi đi.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreInternalEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreInternalEmail); }
			set { Entity.Attributes[Fields.IgnoreInternalEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chia sẻ dữ liệu truy vấn tìm kiếm</para>
		/// <para><strong>Description</strong>: Cho biết tổ chức đã đồng ý chia sẻ dữ liệu truy vấn tìm kiếm để giúp cải thiện kết quả tìm kiếm hay chưa</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ImproveSearchLoggingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ImproveSearchLoggingEnabled); }
			set { Entity.Attributes[Fields.ImproveSearchLoggingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật thời gian chờ không hoạt động</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định có bật thời gian chờ Không hoạt động hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? InactivityTimeoutEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.InactivityTimeoutEnabled); }
			set { Entity.Attributes[Fields.InactivityTimeoutEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian chờ không hoạt động tính theo phút</para>
		/// <para><strong>Description</strong>: Thời gian chờ không hoạt động tính theo phút</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InactivityTimeoutInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InactivityTimeoutInMins); }
			set { Entity.Attributes[Fields.InactivityTimeoutInMins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời nhắc thời gian chờ không hoạt động tính theo phút</para>
		/// <para><strong>Description</strong>: Lời nhắc thời gian chờ không hoạt động tính theo phút</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InactivityTimeoutReminderInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InactivityTimeoutReminderInMins); }
			set { Entity.Attributes[Fields.InactivityTimeoutReminderInMins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích thước khối truy xuất email Exchange</para>
		/// <para><strong>Description</strong>: Thiết đặt cho Hàng đợi hộp thư dịch vụ không đồng bộ. Xác định kích thước khối truy xuất của máy chủ exchange.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IncomingEmailExchangeEmailRetrievalBatchSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IncomingEmailExchangeEmailRetrievalBatchSize); }
			set { Entity.Attributes[Fields.IncomingEmailExchangeEmailRetrievalBatchSize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản ban đầu</para>
		/// <para><strong>Description</strong>: Phiên bản ban đầu của tổ chức.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InitialVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.InitialVersion); }
			set { Entity.Attributes[Fields.InitialVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng tích hợp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng tích hợp cho tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IntegrationUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IntegrationUserId); }
			set { Entity.Attributes[Fields.IntegrationUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố hóa đơn</para>
		/// <para><strong>Description</strong>: Tiền tố để dùng cho mọi mã số hóa đơn trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InvoicePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.InvoicePrefix); }
			set { Entity.Attributes[Fields.InvoicePrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IP Based SAS mode</para>
		/// <para><strong>Description</strong>: IP Based SAS mode.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.IpBasedStorageAccessSignatureMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.IpBasedStorageAccessSignatureMode.IP_Binding_only"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.IpBasedStorageAccessSignatureMode? IpBasedStorageAccessSignatureMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IpBasedStorageAccessSignatureMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.IpBasedStorageAccessSignatureMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IpBasedStorageAccessSignatureMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IpBasedStorageAccessSignatureMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Thẻ Hành động cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tính năng Thẻ Hành động cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActionCardEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActionCardEnabled); }
			set { Entity.Attributes[Fields.IsActionCardEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Tính năng Hỗ trợ Hành động</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng bật Tính năng Hỗ trợ Hành động</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActionSupportFeatureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActionSupportFeatureEnabled); }
			set { Entity.Attributes[Fields.IsActionSupportFeatureEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Phân tích Mối quan hệ cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết xem liệu có nên bật tính năng Phân tích Mối quan hệ cho tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActivityAnalysisEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActivityAnalysisEnabled); }
			set { Entity.Attributes[Fields.IsActivityAnalysisEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đặt nếu tất cả các thuộc tính tiền được chuyển đổi thành số thập phân</para>
		/// <para><strong>Description</strong>: Cho biết liệu tất cả các thuộc tính tiền có được chuyển đổi thành số thập phân không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAllMoneyDecimal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAllMoneyDecimal); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật chế độ ứng dụng</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tải Microsoft Dynamics 365 trong cửa sổ trình duyệt không có địa chỉ, công cụ và thanh menu.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAppMode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAppMode); }
			set { Entity.Attributes[Fields.IsAppMode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật đồng bộ tệp đính kèm</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt đồng bộ tệp đính kèm cho Outlook và Exchange.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAppointmentAttachmentSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAppointmentAttachmentSyncEnabled); }
			set { Entity.Attributes[Fields.IsAppointmentAttachmentSyncEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật đồng bộ nhiệm vụ đã gán</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt đồng bộ nhiệm vụ đã gán cho Outlook và Exchange.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAssignedTasksSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAssignedTasksSyncEnabled); }
			set { Entity.Attributes[Fields.IsAssignedTasksSyncEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật kiểm tra</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt kiểm tra thay đổi.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAuditEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAuditEnabled); }
			set { Entity.Attributes[Fields.IsAuditEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Tự động Ghi cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tính năng Tự động Ghi cho tổ chức này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoDataCaptureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoDataCaptureEnabled); }
			set { Entity.Attributes[Fields.IsAutoDataCaptureEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Tự động Ghi V2 cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tính năng V2 của Tự động Ghi cho tổ chức này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoDataCaptureV2Enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoDataCaptureV2Enabled); }
			set { Entity.Attributes[Fields.IsAutoDataCaptureV2Enabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsAutoInstallAppForD365InTeamsEnabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoInstallAppForD365InTeamsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoInstallAppForD365InTeamsEnabled); }
			set { Entity.Attributes[Fields.IsAutoInstallAppForD365InTeamsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật tự động lưu</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng bật tự động lưu.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoSaveEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoSaveEnabled); }
			set { Entity.Attributes[Fields.IsAutoSaveEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsBaseCardStaticFieldDataEnabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBaseCardStaticFieldDataEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBaseCardStaticFieldDataEnabled); }
			set { Entity.Attributes[Fields.IsBaseCardStaticFieldDataEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật các tính năng Không gian địa lý cơ bản trong Ứng dụng canvas</para>
		/// <para><strong>Description</strong>: Xác định xem người dùng có thể sử dụng các tính năng Không gian địa lý cơ bản trong Ứng dụng canvas hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBasicGeospatialIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBasicGeospatialIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsBasicGeospatialIntegrationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Tính năng Tùy chỉnh Thực thể BPF</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng bật Tính năng Tùy chỉnh Thực thể BDF</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBPFEntityCustomizationFeatureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBPFEntityCustomizationFeatureEnabled); }
			set { Entity.Attributes[Fields.IsBPFEntityCustomizationFeatureEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsCollaborationExperienceEnabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCollaborationExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCollaborationExperienceEnabled); }
			set { Entity.Attributes[Fields.IsCollaborationExperienceEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Phát hiện Xung đột cho Máy khách Di động</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng sẽ bật phát hiện xung đột cho máy khách di động.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsConflictDetectionEnabledForMobileClient
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsConflictDetectionEnabledForMobileClient); }
			set { Entity.Attributes[Fields.IsConflictDetectionEnabledForMobileClient] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật đồng bộ địa chỉ gửi thư</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt đồng bộ địa chỉ gửi thư cho Outlook và Exchange.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContactMailingAddressSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContactMailingAddressSyncEnabled); }
			set { Entity.Attributes[Fields.IsContactMailingAddressSyncEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Chính sách Bảo mật Nội dung cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết Chính sách Bảo mật Nội dung đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContentSecurityPolicyEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContentSecurityPolicyEnabled); }
			set { Entity.Attributes[Fields.IsContentSecurityPolicyEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Chính sách bảo mật nội dung cho Các ứng dụng canvas của tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết Chính sách bảo mật nội dung đã được bật cho Các ứng dụng canvas của tổ chức này hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContentSecurityPolicyEnabledForCanvas
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContentSecurityPolicyEnabledForCanvas); }
			set { Entity.Attributes[Fields.IsContentSecurityPolicyEnabledForCanvas] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết Trải nghiệm email theo ngữ cảnh có được bật trên tổ chức này không</para>
		/// <para><strong>Description</strong>: Cho biết Trải nghiệm email theo ngữ cảnh có được bật trên tổ chức này không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContextualEmailEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContextualEmailEnabled); }
			set { Entity.Attributes[Fields.IsContextualEmailEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép Trợ giúp theo Ngữ cảnh trong UCI</para>
		/// <para><strong>Description</strong>: Chọn để bật Trợ giúp theo Ngữ cảnh trong UCI.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsContextualHelpEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsContextualHelpEnabled); }
			set { Entity.Attributes[Fields.IsContextualHelpEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow users to provide feedback to improve Copilot experiences</para>
		/// <para><strong>Description</strong>: Determines whether users can provide feedback Copilot experiences.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCopilotFeedbackEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCopilotFeedbackEnabled); }
			set { Entity.Attributes[Fields.IsCopilotFeedbackEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Kiểm soát Tùy chỉnh trong bảng tùy biến PowerApps cho tổ chức này.</para>
		/// <para><strong>Description</strong>: Cho biết tính năng Kiểm soát Tùy chỉnh trong bảng tùy biến PowerApps đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCustomControlsInCanvasAppsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCustomControlsInCanvasAppsEnabled); }
			set { Entity.Attributes[Fields.IsCustomControlsInCanvasAppsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật hoặc tắt chọn lựa mã quốc gia</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt chọn lựa mã quốc gia.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefaultCountryCodeCheckEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefaultCountryCodeCheckEnabled); }
			set { Entity.Attributes[Fields.IsDefaultCountryCodeCheckEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có Bật Truy cập Ủy quyền Không</para>
		/// <para><strong>Description</strong>: Bật nội dung Truy cập Ủy quyền</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDelegateAccessEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDelegateAccessEnabled); }
			set { Entity.Attributes[Fields.IsDelegateAccessEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Hub Hành động cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết khả năng có thể bật tính năng Hub Hành động cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDelveActionHubIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDelveActionHubIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsDelveActionHubIntegrationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable connection embedding in Desktop Flows for this organization</para>
		/// <para><strong>Description</strong>: Indicates whether connection embedding in Desktop Flows is enabled in this organization.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDesktopFlowConnectionEmbeddingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDesktopFlowConnectionEmbeddingEnabled); }
			set { Entity.Attributes[Fields.IsDesktopFlowConnectionEmbeddingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable the Desktop Flows UI Automation Runtime Repair for Attended feature for this organization</para>
		/// <para><strong>Description</strong>: Indicates whether the Desktop Flows UI Automation Runtime Repair for Attended feature for this organization.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDesktopFlowRuntimeRepairAttendedEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDesktopFlowRuntimeRepairAttendedEnabled); }
			set { Entity.Attributes[Fields.IsDesktopFlowRuntimeRepairAttendedEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable the Desktop Flows UI Automation Runtime Repair for Unattended feature for this organization</para>
		/// <para><strong>Description</strong>: Indicates whether the Desktop Flows UI Automation Runtime Repair for Unattended feature for this organization.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDesktopFlowRuntimeRepairUnattendedEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDesktopFlowRuntimeRepairUnattendedEnabled); }
			set { Entity.Attributes[Fields.IsDesktopFlowRuntimeRepairUnattendedEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật lược đồ v2 cho Dòng màn hình nền trong tổ chức này.</para>
		/// <para><strong>Description</strong>: Cho biết có bật lược đồ v2 cho Dòng màn hình nền trong tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDesktopFlowSchemaV2Enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDesktopFlowSchemaV2Enabled); }
			set { Entity.Attributes[Fields.IsDesktopFlowSchemaV2Enabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tắt tổ chức</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng tắt tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật phát hiện sự trùng lặp</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật phát hiện sự trùng lặp bản ghi.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabled); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật phát hiện sự trùng lặp khi nhập</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật phát hiện sự trùng lặp bản ghi trong khi nhập.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledForImport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledForImport); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledForImport] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật phát hiện sự trùng lặp khi đồng bộ ngoại tuyến</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật phát hiện sự trùng lặp bản ghi trong khi đồng bộ ngoại tuyến.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledForOfflineSync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledForOfflineSync); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledForOfflineSync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật phát hiện sự trùng lặp khi tạo/cập nhật trực tuyến</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật phát hiện sự trùng lặp trong khi tạo hay cập nhật trực tuyến.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateDetectionEnabledForOnlineCreateUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateDetectionEnabledForOnlineCreateUpdate); }
			set { Entity.Attributes[Fields.IsDuplicateDetectionEnabledForOnlineCreateUpdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Smart Email Address Validation.</para>
		/// <para><strong>Description</strong>: Information on whether Smart Email Address Validation is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressValidationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressValidationEnabled); }
			set { Entity.Attributes[Fields.IsEmailAddressValidationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép theo dõi hoạt động của người nhận trên các email đã gửi</para>
		/// <para><strong>Description</strong>: Cho phép theo dõi hoạt động của người nhận trên các email đã gửi.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailMonitoringAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailMonitoringAllowed); }
			set { Entity.Attributes[Fields.IsEmailMonitoringAllowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có Bật Lọc Nội dung Cấu hình Máy chủ Email không</para>
		/// <para><strong>Description</strong>: Bật lọc nội dung Cấu hình Máy chủ Email</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailServerProfileContentFilteringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailServerProfileContentFilteringEnabled); }
			set { Entity.Attributes[Fields.IsEmailServerProfileContentFilteringEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: giá trị bộ tùy chọn cho isenabledforallroles</para>
		/// <para><strong>Description</strong>: Cho biết appmodule đã được bật cho tất cả các vai trò hay chưa</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEnabledForAllRoles
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEnabledForAllRoles); }
			set { Entity.Attributes[Fields.IsEnabledForAllRoles] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích hoạt lưu trữ tệp bên ngoài</para>
		/// <para><strong>Description</strong>: Cho biết các tệp của tổ chức có đang được lưu trữ trong Azure hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsExternalFileStorageEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsExternalFileStorageEnabled); }
			set { Entity.Attributes[Fields.IsExternalFileStorageEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật đồng bộ dữ liệu tìm kiếm bên ngoài</para>
		/// <para><strong>Description</strong>: Chọn khả năng đồng bộ hóa dữ liệu với chỉ mục tìm kiếm bên ngoài.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsExternalSearchIndexEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsExternalSearchIndexEnabled); }
			set { Entity.Attributes[Fields.IsExternalSearchIndexEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là kỳ tài chính hàng tháng</para>
		/// <para><strong>Description</strong>: Cho biết khả năng hiển thị kỳ tài chính ở dạng số tháng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFiscalPeriodMonthBased
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFiscalPeriodMonthBased); }
			set { Entity.Attributes[Fields.IsFiscalPeriodMonthBased] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động tạo thư mục</para>
		/// <para><strong>Description</strong>: Chọn khả năng tạo thư mục tự động trên SharePoint.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFolderAutoCreatedonSP
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFolderAutoCreatedonSP); }
			set { Entity.Attributes[Fields.IsFolderAutoCreatedonSP] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được Bật Theo dõi Dựa trên Thư mục</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt tính năng theo dõi dựa trên thư mục để Đồng bộ Phía Máy chủ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFolderBasedTrackingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFolderBasedTrackingEnabled); }
			set { Entity.Attributes[Fields.IsFolderBasedTrackingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Tìm kiếm văn bản đầy đủ cho Tìm Nhanh</para>
		/// <para><strong>Description</strong>: Cho biết có thể bật thực thể tìm kiếm văn bản đầy đủ cho Tìm Nhanh cho tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFullTextSearchEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFullTextSearchEnabled); }
			set { Entity.Attributes[Fields.IsFullTextSearchEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tích hợp Azure Maps không gian địa lý.</para>
		/// <para><strong>Description</strong>: Cho biết liệu các khả năng không gian địa lý tận dụng Azure Maps có được bật hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsGeospatialAzureMapsIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsGeospatialAzureMapsIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsGeospatialAzureMapsIntegrationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật mô hình bảo mật theo cấp bậc</para>
		/// <para><strong>Description</strong>: Bật mô hình bảo mật theo cấp bậc</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsHierarchicalSecurityModelEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsHierarchicalSecurityModelEnabled); }
			set { Entity.Attributes[Fields.IsHierarchicalSecurityModelEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Ideas data collection.</para>
		/// <para><strong>Description</strong>: Indicates whether data collection for ideas in canvas PowerApps has been enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIdeasDataCollectionEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIdeasDataCollectionEnabled); }
			set { Entity.Attributes[Fields.IsIdeasDataCollectionEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp thuận LUIS cho Bot Dynamics 365</para>
		/// <para><strong>Description</strong>: Cấp chấp thuận sử dụng LUIS trong Bot Dynamics 365</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLUISEnabledforD365Bot
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLUISEnabledforD365Bot); }
			set { Entity.Attributes[Fields.IsLUISEnabledforD365Bot] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tính năng Buộc Mở khóa Hộp thư được bật chưa</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt tính năng buộc mở khóa để Đồng bộ hóa Phía Máy chủ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMailboxForcedUnlockingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMailboxForcedUnlockingEnabled); }
			set { Entity.Attributes[Fields.IsMailboxForcedUnlockingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật Hộp thư Luôn Hoạt động không</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt hộp thư luôn hoạt động đối với Đồng bộ phía máy chủ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMailboxInactiveBackoffEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMailboxInactiveBackoffEnabled); }
			set { Entity.Attributes[Fields.IsMailboxInactiveBackoffEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Dự báo Bán hàng Thủ công cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng Dự báo Bán hàng Thủ công đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManualSalesForecastingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManualSalesForecastingEnabled); }
			set { Entity.Attributes[Fields.IsManualSalesForecastingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Đồng bộ Máy khách Di động theo Yêu cầu</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng sẽ bật đồng bộ máy khách di động theo yêu cầu.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMobileClientOnDemandSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMobileClientOnDemandSyncEnabled); }
			set { Entity.Attributes[Fields.IsMobileClientOnDemandSyncEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Ngoại tuyến trên Thiết bị di động cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tính năng Ngoại tuyến trên Thiết bị di động cho tổ chức này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMobileOfflineEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMobileOfflineEnabled); }
			set { Entity.Attributes[Fields.IsMobileOfflineEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép nhúng Ứng dụng mô hình trong Microsoft Teams</para>
		/// <para><strong>Description</strong>: Cho biết liệu có thể nhúng Ứng dụng mô hình trong Microsoft Teams hay không. Đây là một tính năng thử nghiệm/bản xem trước do quản trị viên đối tượng thuê kiểm soát.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsModelDrivenAppsInMSTeamsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsModelDrivenAppsInMSTeamsEnabled); }
			set { Entity.Attributes[Fields.IsModelDrivenAppsInMSTeamsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Cộng tác Microsoft Teams cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng Cộng tác Microsoft Teams đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsCollaborationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsCollaborationEnabled); }
			set { Entity.Attributes[Fields.IsMSTeamsCollaborationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tích hợp Microsoft Teams</para>
		/// <para><strong>Description</strong>: Cho biết tích hợp Microsoft Teams đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsEnabled); }
			set { Entity.Attributes[Fields.IsMSTeamsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tích hợp Microsoft Teams được người dùng thay đổi</para>
		/// <para><strong>Description</strong>: Cho biết người dùng đã bật hay tắt tích hợp Microsoft Teams.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsSettingChangedByUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsSettingChangedByUser); }
			set { Entity.Attributes[Fields.IsMSTeamsSettingChangedByUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Đồng bộ Người dùng Microsoft Teams cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng Đồng bộ Người dùng Microsoft Teams đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMSTeamsUserSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMSTeamsUserSyncEnabled); }
			set { Entity.Attributes[Fields.IsMSTeamsUserSyncEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết liệu trải nghiệm thêm sản phẩm mới có được bật ở biểu mẫu cơ hội không</para>
		/// <para><strong>Description</strong>: Cho biết liệu trải nghiệm thêm sản phẩm mới có được bật không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNewAddProductExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNewAddProductExperienceEnabled); }
			set { Entity.Attributes[Fields.IsNewAddProductExperienceEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Phân tích Ghi chú cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tính năng Phân tích Ghi chú cho tổ chức này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNotesAnalysisEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNotesAnalysisEnabled); }
			set { Entity.Attributes[Fields.IsNotesAnalysisEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsNotificationForD365InTeamsEnabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNotificationForD365InTeamsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNotificationForD365InTeamsEnabled); }
			set { Entity.Attributes[Fields.IsNotificationForD365InTeamsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Office Graph cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có thể bật tính năng Office Graph cho tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOfficeGraphEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOfficeGraphEnabled); }
			set { Entity.Attributes[Fields.IsOfficeGraphEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật One Drive cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có thể bật tính năng One Drive cho tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOneDriveEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOneDriveEnabled); }
			set { Entity.Attributes[Fields.IsOneDriveEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng PAI cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng PAI đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPAIEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPAIEnabled); }
			set { Entity.Attributes[Fields.IsPAIEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Tạo PDF cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng Tạo PDF đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IsPDFGenerationEnabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.IsPDFGenerationEnabled); }
			set { Entity.Attributes[Fields.IsPDFGenerationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Số dư theo quy trình cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có bật tính năng Số dư theo quy trình trong tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPerProcessCapacityOverageEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPerProcessCapacityOverageEnabled); }
			set { Entity.Attributes[Fields.IsPerProcessCapacityOverageEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng cẩm nang cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng cẩm nang đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPlaybookEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPlaybookEnabled); }
			set { Entity.Attributes[Fields.IsPlaybookEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật hiển thị</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng bật hiển thị IM.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPresenceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPresenceEnabled); }
			set { Entity.Attributes[Fields.IsPresenceEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Xem trước Thẻ Hành động cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tính năng ở giai đoạn Bản xem trước cho Thẻ hành động có được phép bật cho tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewEnabledForActionCard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewEnabledForActionCard); }
			set { Entity.Attributes[Fields.IsPreviewEnabledForActionCard] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Thu nạp Tự động cho Tổ chức này ở Thiết đặt Xem trước</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tính năng Thu nạp Tự động cho tổ chức này ở Thiết đặt Xem trước.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewForAutoCaptureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewForAutoCaptureEnabled); }
			set { Entity.Attributes[Fields.IsPreviewForAutoCaptureEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho phép Xem trước đối với Theo dõi Email</para>
		/// <para><strong>Description</strong>: Cho phép Xem trước đối với Theo dõi Email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewForEmailMonitoringAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewForEmailMonitoringAllowed); }
			set { Entity.Attributes[Fields.IsPreviewForEmailMonitoringAllowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết liệu Bảng giá có bắt buộc đối với việc thêm sản phẩm hiện tại vào các thực thể bán hàng hay không</para>
		/// <para><strong>Description</strong>: Cho biết liệu Bảng giá có bắt buộc đối với việc thêm sản phẩm hiện tại vào các thực thể bán hàng hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPriceListMandatory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPriceListMandatory); }
			set { Entity.Attributes[Fields.IsPriceListMandatory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tạo nhanh biểu mẫu cho tính năng đóng cơ hội đối với tổ chức này</para>
		/// <para><strong>Description</strong>: Chọn sử dụng trải nghiệm Đóng Cơ hội Dùng được ngay tiêu chuẩn hay tham gia trải nghiệm tùy chỉnh.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsQuickCreateEnabledForOpportunityClose
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsQuickCreateEnabledForOpportunityClose); }
			set { Entity.Attributes[Fields.IsQuickCreateEnabledForOpportunityClose] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật tính năng Kiểm tra hoạt động Đọc</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt tính năng kiểm tra hoạt động đọc.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReadAuditEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReadAuditEnabled); }
			set { Entity.Attributes[Fields.IsReadAuditEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Relationship Insights cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết xem liệu có nên bật tính năng Relationship Insights cho tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRelationshipInsightsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRelationshipInsightsEnabled); }
			set { Entity.Attributes[Fields.IsRelationshipInsightsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật đồng bộ hóa đăng ký nguồn lực</para>
		/// <para><strong>Description</strong>: Cho biết liệu việc đồng bộ hóa đăng ký nguồn lực người dùng với Exchange có được bật ở cấp độ tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsResourceBookingExchangeSyncEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsResourceBookingExchangeSyncEnabled); }
			set { Entity.Attributes[Fields.IsResourceBookingExchangeSyncEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết liệu trình chỉnh sửa văn bản phong phú cho trải nghiệm ghi chú có được bật trên tổ chức này không</para>
		/// <para><strong>Description</strong>: Cho biết liệu trình chỉnh sửa văn bản phong phú cho trải nghiệm ghi chú có được bật trên tổ chức này không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRichTextNotesEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRichTextNotesEnabled); }
			set { Entity.Attributes[Fields.IsRichTextNotesEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Liên kết AAD cho tính năng Tự động co giãn RPA cho tổ chức này.</para>
		/// <para><strong>Description</strong>: Cho biết có bật Liên kết AAD cho tính năng Tự động co giãn RPA cho tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRpaAutoscaleAadJoinEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRpaAutoscaleAadJoinEnabled); }
			set { Entity.Attributes[Fields.IsRpaAutoscaleAadJoinEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Tự động điều chỉnh quy mô RPA cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có bật tính năng Tự động điều chỉnh quy mô cho RPA trong tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRpaAutoscaleEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRpaAutoscaleEnabled); }
			set { Entity.Attributes[Fields.IsRpaAutoscaleEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Hộp RPA trên các vị trí địa lý cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết liệu tính năng Hộp RPA có được bật trong tổ chức này ở các vị trí bên ngoài vị trí địa lý của đối tượng thuê hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRpaBoxCrossGeoEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRpaBoxCrossGeoEnabled); }
			set { Entity.Attributes[Fields.IsRpaBoxCrossGeoEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng RPA Box cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có bật tính năng RPA Box trong tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRpaBoxEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRpaBoxEnabled); }
			set { Entity.Attributes[Fields.IsRpaBoxEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng RPA Không giám sát cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có bật tính năng Lần chạy không được giám sát cho RPA trong tổ chức này hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRpaUnattendedEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRpaUnattendedEnabled); }
			set { Entity.Attributes[Fields.IsRpaUnattendedEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật ứng dụng di động Sales Assistant</para>
		/// <para><strong>Description</strong>: Cho biết ứng dụng di động Sales Assistant đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSalesAssistantEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSalesAssistantEnabled); }
			set { Entity.Attributes[Fields.IsSalesAssistantEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsSharingInOrgAllowed</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSharingInOrgAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSharingInOrgAllowed); }
			set { Entity.Attributes[Fields.IsSharingInOrgAllowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật tích hợp xử lý đơn bán hàng</para>
		/// <para><strong>Description</strong>: Bật tích hợp xử lý đơn bán hàng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSOPIntegrationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSOPIntegrationEnabled); }
			set { Entity.Attributes[Fields.IsSOPIntegrationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Ngắt dòng</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng bật ngắt dòng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTextWrapEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTextWrapEnabled); }
			set { Entity.Attributes[Fields.IsTextWrapEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật kiểm tra truy cập người dùng</para>
		/// <para><strong>Description</strong>: Bật hoặc tắt kiểm tra truy cập của người dùng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUserAccessAuditEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUserAccessAuditEnabled); }
			set { Entity.Attributes[Fields.IsUserAccessAuditEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ tích hợp ISV</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật tải Microsoft Dynamics 365 trong cửa sổ trình duyệt không có địa chỉ, công cụ và thanh menu.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ISVIntegrationCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ISVIntegrationCode? ISVIntegrationCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ISVIntegrationCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ISVIntegrationCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ISVIntegrationCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ISVIntegrationCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cho biết liệu có thể thêm Sản phẩm chọn thêm vào Cơ hội/Báo giá/Đơn hàng/Hóa đơn hay không</para>
		/// <para><strong>Description</strong>: Cho biết liệu có thể thêm Sản phẩm chọn thêm vào Cơ hội/Báo giá/Đơn hàng/Hóa đơn hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWriteInProductsAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWriteInProductsAllowed); }
			set { Entity.Attributes[Fields.IsWriteInProductsAllowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố của Bài viết trong Cơ sở kiến thức</para>
		/// <para><strong>Description</strong>: Nhập tiền tố để dùng cho mọi bài viết trong cơ sở kiến thức trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KaPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.KaPrefix); }
			set { Entity.Attributes[Fields.KaPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố bài viết</para>
		/// <para><strong>Description</strong>: Tiền tố để dùng cho mọi bài viết trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KbPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.KbPrefix); }
			set { Entity.Attributes[Fields.KbPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt Quản lý Kiến thức</para>
		/// <para><strong>Description</strong>: Chuỗi XML chứa các thiết đặt Quản lý Kiến thức được áp dụng trong Trình hướng dẫn Quản lý Kiến thức.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KMSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.KMSettings); }
			set { Entity.Attributes[Fields.KMSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ</para>
		/// <para><strong>Description</strong>: Ngôn ngữ ưu tiên cho tổ chức.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị ứng dụng cũ cho quản trị viên</para>
		/// <para><strong>Description</strong>: Hiển thị ứng dụng cũ cho quản trị viên</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.LegacyAppToggle"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.LegacyAppToggle.Tu_dong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.LegacyAppToggle? LegacyAppToggle
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LegacyAppToggle);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.LegacyAppToggle)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LegacyAppToggle] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LegacyAppToggle] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng bản địa</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của vùng bản địa của tổ chức.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LocaleId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LocaleId); }
			set { Entity.Attributes[Fields.LocaleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng ngày dạng dài</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách hiển thị định dạng Ngày dạng dài trong Microsoft Dynamics 365.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LongDateFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LongDateFormatCode); }
			set { Entity.Attributes[Fields.LongDateFormatCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số ký tự tối thiểu trước khi giải quyết các đề xuất trong tính năng tra cứu</para>
		/// <para><strong>Description</strong>: Số ký tự tối thiểu cần nhập vào chức năng kiểm soát tra cứu trước khi giải quyết các đề xuất</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LookupCharacterCountBeforeResolve
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LookupCharacterCountBeforeResolve); }
			set { Entity.Attributes[Fields.LookupCharacterCountBeforeResolve] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ trễ tối thiểu (tính bằng mili giây) để giới hạn thực thi thông tin nhập vào chức năng kiểm soát tra cứu</para>
		/// <para><strong>Description</strong>: Độ trễ tối thiểu (tính bằng mili giây) giữa hai lần nhập liên tiếp trong chức năng kiểm soát tra cứu mà sẽ kích hoạt tìm kiếm đề xuất</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 250 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LookupResolveDelayMS
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LookupResolveDelayMS); }
			set { Entity.Attributes[Fields.LookupResolveDelayMS] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngưỡng Dưới cho Sự cố Gián đoạn Hộp thư</para>
		/// <para><strong>Description</strong>: Ngưỡng Dưới cho Sự cố Gián đoạn Hộp thư.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MailboxIntermittentIssueMinRange
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MailboxIntermittentIssueMinRange); }
			set { Entity.Attributes[Fields.MailboxIntermittentIssueMinRange] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngưỡng Dưới cho Sự cố Vĩnh viễn của Hộp thư.</para>
		/// <para><strong>Description</strong>: Ngưỡng Dưới cho Sự cố Vĩnh viễn của Hộp thư.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MailboxPermanentIssueMinRange
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MailboxPermanentIssueMinRange); }
			set { Entity.Attributes[Fields.MailboxPermanentIssueMinRange] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số actionsteps tối đa được cho phép trong BPF</para>
		/// <para><strong>Description</strong>: Số actionsteps tối đa được cho phép trong BPF</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxActionStepsInBPF
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxActionStepsInBPF); }
			set { Entity.Attributes[Fields.MaxActionStepsInBPF] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MaxAllowedPendingRollupJobCount</para>
		/// <para><strong>Description</strong>: Maximum Allowed Pending Rollup Job Count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxAllowedPendingRollupJobCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxAllowedPendingRollupJobCount); }
			set { Entity.Attributes[Fields.MaxAllowedPendingRollupJobCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MaxAllowedPendingRollupJobPercentage</para>
		/// <para><strong>Description</strong>: Percentage Of Entity Table Size For Kicking Off Bootstrap Job</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxAllowedPendingRollupJobPercentage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxAllowedPendingRollupJobPercentage); }
			set { Entity.Attributes[Fields.MaxAllowedPendingRollupJobPercentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian cuộc hẹn tối đa</para>
		/// <para><strong>Description</strong>: Số lượng ngày tối đa mà cuộc hẹn có thể có.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxAppointmentDurationDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxAppointmentDurationDays); }
			set { Entity.Attributes[Fields.MaxAppointmentDurationDays] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng điều kiện tối đa được phép cho các bộ lọc Mobile Offline</para>
		/// <para><strong>Description</strong>: Số lượng điều kiện tối đa được phép cho các bộ lọc Mobile Offline</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxConditionsForMobileOfflineFilters
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxConditionsForMobileOfflineFilters); }
			set { Entity.Attributes[Fields.MaxConditionsForMobileOfflineFilters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chiều sâu tối đa khi tự động điền bảo mật cho hệ thống cấp bậc.</para>
		/// <para><strong>Description</strong>: Chiều sâu tối đa khi tự động điền bảo mật cho hệ thống cấp bậc.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxDepthForHierarchicalSecurityModel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxDepthForHierarchicalSecurityModel); }
			set { Entity.Attributes[Fields.MaxDepthForHierarchicalSecurityModel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ánh xạ Theo dõi Trên Thư mục Tối đa</para>
		/// <para><strong>Description</strong>: Số ánh xạ Theo dõi Trên Thư mục tối đa mà người dùng có thể thêm</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxFolderBasedTrackingMappings
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxFolderBasedTrackingMappings); }
			set { Entity.Attributes[Fields.MaxFolderBasedTrackingMappings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng dòng quy trình công việc hiện hoạt tối đa cho mỗi thực thể</para>
		/// <para><strong>Description</strong>: Số lượng dòng quy trình công việc hiện hoạt tối đa có thể có cho mỗi thực thể</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumActiveBusinessProcessFlowsAllowedPerEntity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumActiveBusinessProcessFlowsAllowedPerEntity); }
			set { Entity.Attributes[Fields.MaximumActiveBusinessProcessFlowsAllowedPerEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới hạn Mục Thuộc tính Sản phẩm</para>
		/// <para><strong>Description</strong>: Hạn chế số lượng thuộc tính sản phẩm tối đa cho họ/gói sản phẩm</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumDynamicPropertiesAllowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumDynamicPropertiesAllowed); }
			set { Entity.Attributes[Fields.MaximumDynamicPropertiesAllowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng Thỏa thuận Cấp độ Dịch vụ hiện hoạt tối đa được phép trên mỗi thực thể khi ở chế độ trực tuyến</para>
		/// <para><strong>Description</strong>: Số lượng Thỏa thuận Cấp độ Dịch vụ hiện hoạt tối đa được phép trên mỗi thực thể khi ở chế độ trực tuyến</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumEntitiesWithActiveSLA
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumEntitiesWithActiveSLA); }
			set { Entity.Attributes[Fields.MaximumEntitiesWithActiveSLA] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng SLA KPI hiện hoạt tối đa được phép trên mỗi thực thể khi ở chế độ trực tuyến</para>
		/// <para><strong>Description</strong>: Số lượng SLA KPI tối đa cho mỗi SLA hiện hoạt được phép trên mỗi thực thể khi ở chế độ trực tuyến</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumSLAKPIPerEntityWithActiveSLA
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumSLAKPIPerEntityWithActiveSLA); }
			set { Entity.Attributes[Fields.MaximumSLAKPIPerEntityWithActiveSLA] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số theo dõi tối đa</para>
		/// <para><strong>Description</strong>: Số theo dõi tối đa trước khi thực hiện tái chế.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaximumTrackingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaximumTrackingNumber); }
			set { Entity.Attributes[Fields.MaximumTrackingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới hạn mục gói</para>
		/// <para><strong>Description</strong>: Hạn chế số lượng mục tối đa trong gói</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxProductsInBundle
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxProductsInBundle); }
			set { Entity.Attributes[Fields.MaxProductsInBundle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số bản ghi tối đa khi xuất Excel</para>
		/// <para><strong>Description</strong>: Số lượng bản ghi tối đa sẽ xuất ra bảng tính Microsoft Office Excel tĩnh khi xuất từ lưới.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRecordsForExportToExcel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRecordsForExportToExcel); }
			set { Entity.Attributes[Fields.MaxRecordsForExportToExcel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lựa chọn bộ lọc bản ghi tối đa</para>
		/// <para><strong>Description</strong>: Số lượng bản ghi tra cứu và danh sách chọn tối đa mà người dùng có thể chọn khi lọc.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRecordsForLookupFilters
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRecordsForLookupFilters); }
			set { Entity.Attributes[Fields.MaxRecordsForLookupFilters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MaxRollupFieldsPerEntity</para>
		/// <para><strong>Description</strong>: Maximum Rollup Fields Per Entity</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRollupFieldsPerEntity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRollupFieldsPerEntity); }
			set { Entity.Attributes[Fields.MaxRollupFieldsPerEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MaxRollupFieldsPerOrg</para>
		/// <para><strong>Description</strong>: Maximum Rollup Fields Per Organization</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRollupFieldsPerOrg
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRollupFieldsPerOrg); }
			set { Entity.Attributes[Fields.MaxRollupFieldsPerOrg] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Max SLA Items Per SLA</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxSLAItemsPerSLA
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxSLAItemsPerSLA); }
			set { Entity.Attributes[Fields.MaxSLAItemsPerSLA] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản IE cao nhất được hỗ trợ</para>
		/// <para><strong>Description</strong>: Phiên bản IE cao nhất để chạy mô phỏng trình duyệt cho ứng dụng khách Outlook</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxSupportedInternetExplorerVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxSupportedInternetExplorerVersion); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích thước tệp tải lên tối đa</para>
		/// <para><strong>Description</strong>: Kích thước tệp đính kèm tối đa có thể chấp nhận.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxUploadFileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxUploadFileSize); }
			set { Entity.Attributes[Fields.MaxUploadFileSize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng hộp thư tối đa để bật cho ghi nhật ký diễn giải</para>
		/// <para><strong>Description</strong>: Số lượng hộp thư tối đa có thể chuyển đổi cho ghi nhật ký diễn giải</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxVerboseLoggingMailbox
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxVerboseLoggingMailbox); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số chu kỳ đồng bộ tối đa để kích hoạt ghi nhật ký diễn giải theo mặc định</para>
		/// <para><strong>Description</strong>: Số chu kỳ đồng bộ tối đa để kích hoạt ghi nhật ký diễn giải theo mặc định</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxVerboseLoggingSyncCycles
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxVerboseLoggingSyncCycles); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày/giờ cuối cùng dành cho siêu dữ liệu chưa bao giờ hết hạn, theo dõi đối tượng đã xóa</para>
		/// <para><strong>Description</strong>: Ngày/giờ cuối cùng là lúc nào, khi có siêu dữ liệu theo dõi đối tượng đã xóa nhưng đối tượng đó chưa bao giờ nằm ngoài khoảng thời gian hết hạn.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MetadataSyncLastTimeOfNeverExpiredDeletedObjectsUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MetadataSyncLastTimeOfNeverExpiredDeletedObjects); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản đồng bộ siêu dữ liệu</para>
		/// <para><strong>Description</strong>: Chứa số lượng phiên bản tối đa của thuộc tính mà đồng bộ siêu dữ liệu đã đổi sử dụng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public long? MetadataSyncTimestamp
		{
			get { return Entity.GetAttributeValue<long?>(Fields.MetadataSyncTimestamp); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Môi trường đã chọn cho Tích hợp với Microsoft Flow</para>
		/// <para><strong>Description</strong>: (Không còn dùng) Môi trường đã chọn cho Tích hợp với Microsoft Flow</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MicrosoftFlowEnvironment
		{
			get { return Entity.GetAttributeValue<string>(Fields.MicrosoftFlowEnvironment); }
			set { Entity.Attributes[Fields.MicrosoftFlowEnvironment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tần số đồng bộ địa chỉ tối thiểu</para>
		/// <para><strong>Description</strong>: Tần số bỏ phiếu thông thường, dùng đồng bộ sổ địa chỉ trong Microsoft Office Outlook.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinAddressBookSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinAddressBookSyncInterval); }
			set { Entity.Attributes[Fields.MinAddressBookSyncInterval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tần số đồng bộ ngoại tuyến tối thiểu</para>
		/// <para><strong>Description</strong>: Tần số bỏ phiếu thông thường, dùng đồng bộ ngoại tuyến dạng chạy ẩn trong Microsoft Office Outlook.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinOfflineSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinOfflineSyncInterval); }
			set { Entity.Attributes[Fields.MinOfflineSyncInterval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tần số đồng bộ tối thiểu</para>
		/// <para><strong>Description</strong>: Thời gian tối thiểu có thể chấp nhận giữa các lần đồng bộ Outlook theo lịch.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinOutlookSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinOutlookSyncInterval); }
			set { Entity.Attributes[Fields.MinOutlookSyncInterval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yêu cầu số lượng giấy phép người dùng tối thiểu cho dịch vụ Mobile Offline theo tổ chức sản xuất/xem trước</para>
		/// <para><strong>Description</strong>: Yêu cầu số lượng giấy phép người dùng tối thiểu cho dịch vụ Mobile Offline theo tổ chức sản xuất/xem trước</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MobileOfflineMinLicenseProd
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MobileOfflineMinLicenseProd); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yêu cầu số lượng giấy phép người dùng tối thiểu cho dịch vụ Mobile Offline theo tổ chức dùng thử</para>
		/// <para><strong>Description</strong>: Yêu cầu số lượng giấy phép người dùng tối thiểu cho dịch vụ Mobile Offline theo tổ chức dùng thử</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MobileOfflineMinLicenseTrial
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MobileOfflineMinLicenseTrial); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ khoảng thời gian cho mobile offline.</para>
		/// <para><strong>Description</strong>: Đồng bộ khoảng thời gian cho mobile offline.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MobileOfflineSyncInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MobileOfflineSyncInterval); }
			set { Entity.Attributes[Fields.MobileOfflineSyncInterval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lọc tìm kiếm nâng cao tiên tiến</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu có bật tính năng lọc tìm kiếm nâng cao tiên tiến trên tất cả các bảng trong một ứng dụng dựa trên mô hình hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ModernAdvancedFindFiltering
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ModernAdvancedFindFiltering); }
			set { Entity.Attributes[Fields.ModernAdvancedFindFiltering] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Coauthoring in Modern App Designer Enabled</para>
		/// <para><strong>Description</strong>: Indicates whether coauthoring is enabled in modern app designer</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ModernAppDesignerCoauthoringEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ModernAppDesignerCoauthoringEnabled); }
			set { Entity.Attributes[Fields.ModernAppDesignerCoauthoringEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi tổ chức lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi tổ chức lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi tổ chức lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật trình chỉnh sửa sắp xếp nhiều cột trong dạng xem</para>
		/// <para><strong>Description</strong>: Hiện nút sắp xếp theo trên dạng xem</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MultiColumnSortEnabled
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MultiColumnSortEnabled); }
			set { Entity.Attributes[Fields.MultiColumnSortEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên tổ chức</para>
		/// <para><strong>Description</strong>: Tên của tổ chức. Bạn đặt tên khi cài đặt Microsoft CRM và không đổi được tên này.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trợ giúp bằng ngôn ngữ tự nhiên</para>
		/// <para><strong>Description</strong>: Bật bộ lọc hỗ trợ ngôn ngữ tự nhiên.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NaturalLanguageAssistFilter
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NaturalLanguageAssistFilter); }
			set { Entity.Attributes[Fields.NaturalLanguageAssistFilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng loại tiền âm</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách hiển thị số tiền âm trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NegativeCurrencyFormatCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NegativeCurrencyFormatCode); }
			set { Entity.Attributes[Fields.NegativeCurrencyFormatCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng âm</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách hiển thị số âm trong toàn Microsoft CRM.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.NegativeFormatCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.NegativeFormatCode.Dau_ngoac"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.NegativeFormatCode? NegativeFormatCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.NegativeFormatCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.NegativeFormatCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.NegativeFormatCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.NegativeFormatCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật trải nghiệm Tìm kiếm phát hành vào tháng 10/2020</para>
		/// <para><strong>Description</strong>: Cho biết liệu một tổ chức đã bật trải nghiệm Tìm kiếm liên quan mới (phát hành vào tháng 10/2020) cho tổ chức đó hay chưa</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NewSearchExperienceEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NewSearchExperienceEnabled); }
			set { Entity.Attributes[Fields.NewSearchExperienceEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại thực thể tiếp theo</para>
		/// <para><strong>Description</strong>: Mã loại thực thể tiếp theo để dùng cho thực thể tùy chỉnh.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: 10,000 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextCustomObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextCustomObjectTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số theo dõi tiếp theo</para>
		/// <para><strong>Description</strong>: Mã thông báo tiếp theo đặt trên dòng chủ đề của email.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NextTrackingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NextTrackingNumber); }
			set { Entity.Attributes[Fields.NextTrackingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo chủ hộp thư về cảnh báo cấp độ máy chủ email</para>
		/// <para><strong>Description</strong>: Cho biết khả năng sẽ thông báo chủ hộp thư về cảnh báo cấp độ cấu hình máy chủ email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NotifyMailboxOwnerOfEmailServerLevelAlerts
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NotifyMailboxOwnerOfEmailServerLevelAlerts); }
			set { Entity.Attributes[Fields.NotifyMailboxOwnerOfEmailServerLevelAlerts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng số</para>
		/// <para><strong>Description</strong>: Chỉ định cách hiển thị số trong toàn Microsoft CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberFormat); }
			set { Entity.Attributes[Fields.NumberFormat] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng phân nhóm số</para>
		/// <para><strong>Description</strong>: Chỉ định cách phân nhóm số trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberGroupFormat
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberGroupFormat); }
			set { Entity.Attributes[Fields.NumberGroupFormat] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu phân tách số</para>
		/// <para><strong>Description</strong>: Ký hiệu dùng cho dấu phân tách số trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NumberSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.NumberSeparator); }
			set { Entity.Attributes[Fields.NumberSeparator] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Tự động Triển khai Ứng dụng Office cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết tùy chọn tự động triển khai Ứng dụng Office đã được bật cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OfficeAppsAutoDeploymentEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OfficeAppsAutoDeploymentEnabled); }
			set { Entity.Attributes[Fields.OfficeAppsAutoDeploymentEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Url để mở Delve</para>
		/// <para><strong>Description</strong>: Url để mở Delve cho tổ chức.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfficeGraphDelveUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfficeGraphDelveUrl); }
			set { Entity.Attributes[Fields.OfficeGraphDelveUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính giá OOB</para>
		/// <para><strong>Description</strong>: Chấp nhận lôgic tính giá OOB cho thực thể Cơ hội, Báo giá, Đơn hàng và Hóa đơn.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OOBPriceCalculationEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OOBPriceCalculationEnabled); }
			set { Entity.Attributes[Fields.OOBPriceCalculationEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chọn không tự động bật sơ đồ v2 cho tổ chức này.</para>
		/// <para><strong>Description</strong>: Cho biết tổ chức này có chọn không tự động bật sơ đồ v2 trên tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OptOutSchemaV2EnabledByDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OptOutSchemaV2EnabledByDefault); }
			set { Entity.Attributes[Fields.OptOutSchemaV2EnabledByDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố đơn hàng</para>
		/// <para><strong>Description</strong>: Tiền tố để dùng cho mọi đơn hàng trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrderPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrderPrefix); }
			set { Entity.Attributes[Fields.OrderPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OrganizationId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Tổ chức</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái vòng đời của tổ chức</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.OrganizationState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.OrganizationState.Dang_tao"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.OrganizationState? OrganizationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OrganizationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.OrganizationState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt tổ chức về cơ sở dữ liệu tổ chức</para>
		/// <para><strong>Description</strong>: Thiết đặt tổ chức đã lưu trong Cơ sở dữ liệu tổ chức.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrgDbOrgSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrgDbOrgSettings); }
			set { Entity.Attributes[Fields.OrgDbOrgSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật OrgInsights cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Chọn khả năng bật OrgInsights cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OrgInsightsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OrgInsightsEnabled); }
			set { Entity.Attributes[Fields.OrgInsightsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị Tính năng đang ở giai đoạn bản xem trước cho tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết đã bật tính năng ở giai đoạn Bản xem trước cho tổ chức hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PaiPreviewScenarioEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PaiPreviewScenarioEnabled); }
			set { Entity.Attributes[Fields.PaiPreviewScenarioEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố cột đã phân tách trong bảng</para>
		/// <para><strong>Description</strong>: Tiền tố dùng cho cột đã phân tách trong bảng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableColumnPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableColumnPrefix); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố bảng đã phân tách</para>
		/// <para><strong>Description</strong>: Tiền tố dùng cho bảng đã phân tách.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTablePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTablePrefix); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cửa sổ mở rộng quá khứ</para>
		/// <para><strong>Description</strong>: Chỉ định số lượng tháng tối đa trong quá khứ để có thể tạo hoạt động lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 120</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PastExpansionWindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PastExpansionWindow); }
			set { Entity.Attributes[Fields.PastExpansionWindow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật các lưới hiện đại trong ứng dụng dựa trên mô hình</para>
		/// <para><strong>Description</strong>: Để trống để sử dụng thiết đặt mặc định. Đặt thành bật/tắt để cho phép/vô hiệu hóa thay thế lưới mặc định bằng lưới hiện đại trong ứng dụng dựa trên mô hình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 16</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PcfDatasetGridEnabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.PcfDatasetGridEnabled); }
			set { Entity.Attributes[Fields.PcfDatasetGridEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PerformACTSyncAfter</para>
		/// <para><strong>Description</strong>: Thiết đặt này chứa ngày giờ trước khi có thể thực thi thao tác đồng bộ hóa ACT.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PerformACTSyncAfterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PerformACTSyncAfter); }
			set { Entity.Attributes[Fields.PerformACTSyncAfter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hình ảnh</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Picture
		{
			get { return Entity.GetAttributeValue<string>(Fields.Picture); }
			set { Entity.Attributes[Fields.Picture] = value; }
		}
		/// <summary>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PinpointLanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PinpointLanguageCode); }
			set { Entity.Attributes[Fields.PinpointLanguageCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt ghi nhật ký truy vết phần bổ trợ</para>
		/// <para><strong>Description</strong>: Thiết đặt ghi nhật ký truy vết phần bổ trợ cho Tổ chức.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.PluginTraceLogSetting"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.PluginTraceLogSetting.Tat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.PluginTraceLogSetting? PluginTraceLogSetting
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PluginTraceLogSetting);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.PluginTraceLogSetting)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PluginTraceLogSetting] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PluginTraceLogSetting] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ chỉ định CH</para>
		/// <para><strong>Description</strong>: Bộ chỉ định CH để dùng trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PMDesignator
		{
			get { return Entity.GetAttributeValue<string>(Fields.PMDesignator); }
			set { Entity.Attributes[Fields.PMDesignator] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostMessageWhitelistDomains
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostMessageWhitelistDomains); }
			set { Entity.Attributes[Fields.PostMessageWhitelistDomains] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable bot for makers.</para>
		/// <para><strong>Description</strong>: Indicates whether bot for makers is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PowerAppsMakerBotEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PowerAppsMakerBotEnabled); }
			set { Entity.Attributes[Fields.PowerAppsMakerBotEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Power BI cho phép thực hiện các hoạt động liên khu vực</para>
		/// <para><strong>Description</strong>: Cho biết tổ chức có được phép thực hiện các hoạt động liên khu vực hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PowerBIAllowCrossRegionOperations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PowerBIAllowCrossRegionOperations); }
			set { Entity.Attributes[Fields.PowerBIAllowCrossRegionOperations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động gán quyền trong Power BI</para>
		/// <para><strong>Description</strong>: Cho biết tính năng tự động gán quyền cho Power BI đã được bật cho tổ chức hay chưa</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PowerBIAutomaticPermissionsAssignment
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PowerBIAutomaticPermissionsAssignment); }
			set { Entity.Attributes[Fields.PowerBIAutomaticPermissionsAssignment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo thành phần trong Power BI</para>
		/// <para><strong>Description</strong>: Cho biết tính năng tạo thành phần Power BI đã được bật cho tổ chức hay chưa</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PowerBIComponentsCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PowerBIComponentsCreate); }
			set { Entity.Attributes[Fields.PowerBIComponentsCreate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng Power BI cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Cho biết có thể bật tính năng Power BI cho tổ chức hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Bật</strong>]: true - [<strong>Tắt</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Tắt</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PowerBiFeatureEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PowerBiFeatureEnabled); }
			set { Entity.Attributes[Fields.PowerBiFeatureEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ chính xác thập phân cho định giá</para>
		/// <para><strong>Description</strong>: Số chữ số sau dấu thập phân có thể dùng cho giá.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PricingDecimalPrecision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PricingDecimalPrecision); }
			set { Entity.Attributes[Fields.PricingDecimalPrecision] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Tuyên bố về Quyền riêng tư</para>
		/// <para><strong>Description</strong>: URL Tuyên bố về Quyền riêng tư</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrivacyStatementUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrivacyStatementUrl); }
			set { Entity.Attributes[Fields.PrivacyStatementUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm người dùng ưu tiên</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quyền mặc định cho người dùng trong tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrivilegeUserGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrivilegeUserGroupId); }
			set { Entity.Attributes[Fields.PrivilegeUserGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm báo cáo ưu tiên</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrivReportingGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrivReportingGroupId); }
			set { Entity.Attributes[Fields.PrivReportingGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên nhóm báo cáo ưu tiên</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrivReportingGroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrivReportingGroupName); }
			set { Entity.Attributes[Fields.PrivReportingGroupName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Đề xuất Sản phẩm cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Chọn khả năng bật đề xuất sản phẩm cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProductRecommendationsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProductRecommendationsEnabled); }
			set { Entity.Attributes[Fields.ProductRecommendationsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Trải nghiệm Định tính Khách hàng tiềm năng Mới với cấu hình MDD</para>
		/// <para><strong>Description</strong>: Cho biết liệu có hiển thị thông báo nhắc cho Trải nghiệm Định tính Khách hàng tiềm năng mới hay không</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QualifyLeadAdditionalOptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.QualifyLeadAdditionalOptions); }
			set { Entity.Attributes[Fields.QualifyLeadAdditionalOptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật các tác vụ nhanh để mở bản ghi trong ngăn bên tìm kiếm</para>
		/// <para><strong>Description</strong>: Gắn cờ để cho biết liệu có bật tính năng sử dụng thao tác nhanh để mở bản ghi trong ngăn bên tìm kiếm hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? QuickActionToOpenRecordsInSidePaneEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.QuickActionToOpenRecordsInSidePaneEnabled); }
			set { Entity.Attributes[Fields.QuickActionToOpenRecordsInSidePaneEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật giới hạn bản ghi tìm nhanh</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật giới hạn bản ghi tìm nhanh cho tổ chức này (để thực hiện nhanh hơn truy vấn tìm nhanh, nhưng ngăn tìm kiếm quá rộng).</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? QuickFindRecordLimitEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.QuickFindRecordLimitEnabled); }
			set { Entity.Attributes[Fields.QuickFindRecordLimitEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố báo giá</para>
		/// <para><strong>Description</strong>: Tiền tố để dùng cho mọi báo giá trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QuotePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.QuotePrefix); }
			set { Entity.Attributes[Fields.QuotePrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Indicates whether SLA Recalculation has been enabled for the organization</para>
		/// <para><strong>Description</strong>: Indicates whether SLA Recalculation has been enabled for the organization</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RecalculateSLA
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RecalculateSLA); }
			set { Entity.Attributes[Fields.RecalculateSLA] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần xảy ra mặc định cho lặp lại</para>
		/// <para><strong>Description</strong>: Chỉ định giá trị mặc định cho trường số lần xảy ra trong hộp thoại lần lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceDefaultNumberOfOccurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceDefaultNumberOfOccurrences); }
			set { Entity.Attributes[Fields.RecurrenceDefaultNumberOfOccurrences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng khối công việc mở rộng lặp lại</para>
		/// <para><strong>Description</strong>: Chỉ định khoảng (tính bằng giây) cho tạm dừng công việc mở rộng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceExpansionJobBatchInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceExpansionJobBatchInterval); }
			set { Entity.Attributes[Fields.RecurrenceExpansionJobBatchInterval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích thước khối công việc theo yêu cầu cho mở rộng lặp lại</para>
		/// <para><strong>Description</strong>: Chỉ định giá trị cho số lượng phiên bản đã tạo trong công việc theo yêu cầu, tại một thời điểm.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceExpansionJobBatchSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceExpansionJobBatchSize); }
			set { Entity.Attributes[Fields.RecurrenceExpansionJobBatchSize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo tối đa đồng bộ mở rộng lặp lại</para>
		/// <para><strong>Description</strong>: Chỉ định số lượng phiên bản tối đa tạo đồng thời sau khi tạo cuộc hẹn lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecurrenceExpansionSynchCreateMax
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecurrenceExpansionSynchCreateMax); }
			set { Entity.Attributes[Fields.RecurrenceExpansionSynchCreateMax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: XML bản đồ trang web tham chiếu</para>
		/// <para><strong>Description</strong>: Chuỗi XML xác định cấu trúc điều hướng cho ứng dụng. Đây là sơ đồ trang web từ bản nâng cấp trước đây và dùng trong quy trình hợp nhất 3 chiều khi nâng cấp.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public string ReferenceSiteMapXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReferenceSiteMapXml); }
			set { Entity.Attributes[Fields.ReferenceSiteMapXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị nhịp độ phát hành của tổ chức hiện tại</para>
		/// <para><strong>Description</strong>: Giá trị nhịp độ phát hành của tổ chức hiện tại</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ReleaseCadence
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ReleaseCadence); }
			set { Entity.Attributes[Fields.ReleaseCadence] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kênh làm mới ứng dụng mô hình</para>
		/// <para><strong>Description</strong>: Kênh làm mới ứng dụng mô hình</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReleaseChannel"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReleaseChannel.Tu_dong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReleaseChannel? ReleaseChannel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReleaseChannel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReleaseChannel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReleaseChannel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReleaseChannel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đợt phát hành</para>
		/// <para><strong>Description</strong>: Đợt phát hành được áp dụng cho môi trường.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReleaseWaveName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReleaseWaveName); }
			set { Entity.Attributes[Fields.ReleaseWaveName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tìm kiếm theo mức độ liên quan được bật tự động theo Dataverse</para>
		/// <para><strong>Description</strong>: Cho biết liệu tìm kiếm theo mức độ liên quan có được bật cho các môi trường như một phần của tìm kiếm theo mức độ liên quan của Dataverse ở hoạt động quét theo mặc định hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RelevanceSearchEnabledByPlatform
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RelevanceSearchEnabledByPlatform); }
			set { Entity.Attributes[Fields.RelevanceSearchEnabledByPlatform] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RelevanceSearchModifiedOnDate</para>
		/// <para><strong>Description</strong>: Thiết đặt này chứa ngày sửa đổi lần gần nhất cho thiết đặt tìm kiếm theo mức độ liên quan xuất hiện dưới dạng nút chuyển đổi trong PPAC.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RelevanceSearchModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RelevanceSearchModifiedOn); }
			set { Entity.Attributes[Fields.RelevanceSearchModifiedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết xuất khung bảo mật cho email</para>
		/// <para><strong>Description</strong>: Dựng cờ để kết xuất nội dung email trong biểu mẫu web trong IFRAME, đặt thuộc tính security=&apos;restricted&apos;. Đây là tính năng bảo mật thêm, nhưng có thể khiến hệ thống nhắc nhập thông tin đăng nhập.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RenderSecureIFrameForEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RenderSecureIFrameForEmail); }
			set { Entity.Attributes[Fields.RenderSecureIFrameForEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm báo cáo</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ReportingGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ReportingGroupId); }
			set { Entity.Attributes[Fields.ReportingGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên nhóm báo cáo</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportingGroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportingGroupName); }
			set { Entity.Attributes[Fields.ReportingGroupName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Báo cáo lỗi script</para>
		/// <para><strong>Description</strong>: Danh sách chọn để chọn tùy chọn tổ chức khi báo cáo lỗi script.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReportScriptErrors"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReportScriptErrors? ReportScriptErrors
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReportScriptErrors);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ReportScriptErrors)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReportScriptErrors] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReportScriptErrors] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là phê chuẩn cho email hàng đợi bắt buộc</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật quyền Gửi với tư cách là người dùng khác.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RequireApprovalForQueueEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RequireApprovalForQueueEmail); }
			set { Entity.Attributes[Fields.RequireApprovalForQueueEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là phê chuẩn cho email người dùng bắt buộc</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật quyền Gửi với tư cách là người dùng khác.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RequireApprovalForUserEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RequireApprovalForUserEmail); }
			set { Entity.Attributes[Fields.RequireApprovalForUserEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khi tự giải quyết giá trị khớp cho một địa chỉ, áp dụng cùng địa chỉ email cho tất cả các giá trị khớp chưa được giải quyết</para>
		/// <para><strong>Description</strong>: Khi tự giải quyết giá trị khớp cho một địa chỉ, áp dụng cùng địa chỉ email cho tất cả các giá trị khớp chưa được giải quyết</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ResolveSimilarUnresolvedEmailAddress
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ResolveSimilarUnresolvedEmailAddress); }
			set { Entity.Attributes[Fields.ResolveSimilarUnresolvedEmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Restrict guest users access to the organization</para>
		/// <para><strong>Description</strong>: Information that specifies whether guest user restriction is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RestrictGuestUserAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RestrictGuestUserAccess); }
			set { Entity.Attributes[Fields.RestrictGuestUserAccess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hạn chế cập nhật trạng thái</para>
		/// <para><strong>Description</strong>: Dựng cờ hạn chế Cập nhật cho sự việc.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RestrictStatusUpdate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RestrictStatusUpdate); }
			set { Entity.Attributes[Fields.RestrictStatusUpdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of reverse proxy IP addresses to be allowed.</para>
		/// <para><strong>Description</strong>: Information that specifies Reverse Proxy IP addresses from which requests have to be allowed.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReverseProxyIpAddresses
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReverseProxyIpAddresses); }
			set { Entity.Attributes[Fields.ReverseProxyIpAddresses] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái lỗi trong khi cung cấp Relationship Insights.</para>
		/// <para><strong>Description</strong>: Trạng thái lỗi trong khi cung cấp Relationship Insights.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RiErrorStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RiErrorStatus); }
			set { Entity.Attributes[Fields.RiErrorStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Samesite mode for Session Cookie</para>
		/// <para><strong>Description</strong>: Samesite mode for Session Cookie 0 is Default, 1 is None, 2 is Lax , 3 is Strict</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.SameSiteModeForSessionCookie"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.SameSiteModeForSessionCookie.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.SameSiteModeForSessionCookie? SameSiteModeForSessionCookie
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SameSiteModeForSessionCookie);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.SameSiteModeForSessionCookie)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SameSiteModeForSessionCookie] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SameSiteModeForSessionCookie] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập dữ liệu mẫu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho công việc nhập dữ liệu mẫu.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SampleDataImportId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SampleDataImportId); }
			set { Entity.Attributes[Fields.SampleDataImportId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố tên tùy chỉnh</para>
		/// <para><strong>Description</strong>: Tiền tố dùng cho thực thể và thuộc tính tùy chỉnh.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 8</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaNamePrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaNamePrefix); }
			set { Entity.Attributes[Fields.SchemaNamePrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gửi Email Hàng loạt trong UCI</para>
		/// <para><strong>Description</strong>: Cho biết liệu Gửi Email Hàng loạt trong UCI có được bật cho tổ chức không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendBulkEmailInUCI
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendBulkEmailInUCI); }
			set { Entity.Attributes[Fields.SendBulkEmailInUCI] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cung cấp Nội dung Tĩnh từ CDN</para>
		/// <para><strong>Description</strong>: Cung cấp Nội dung Tĩnh từ CDN</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ServeStaticResourcesFromAzureCDN
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ServeStaticResourcesFromAzureCDN); }
			set { Entity.Attributes[Fields.ServeStaticResourcesFromAzureCDN] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng ghi phiên</para>
		/// <para><strong>Description</strong>: Bật tính năng ghi phiên để ghi lại phiên của người dùng trong UCI</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SessionRecordingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SessionRecordingEnabled); }
			set { Entity.Attributes[Fields.SessionRecordingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật thời gian chờ của phiên</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định có bật thời gian chờ của phiên hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SessionTimeoutEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SessionTimeoutEnabled); }
			set { Entity.Attributes[Fields.SessionTimeoutEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian chờ của phiên tính theo phút</para>
		/// <para><strong>Description</strong>: Thời gian chờ của phiên tính theo phút</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SessionTimeoutInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SessionTimeoutInMins); }
			set { Entity.Attributes[Fields.SessionTimeoutInMins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời nhắc thời gian chờ của phiên tính theo phút</para>
		/// <para><strong>Description</strong>: Lời nhắc thời gian chờ của phiên tính theo phút</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SessionTimeoutReminderInMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SessionTimeoutReminderInMins); }
			set { Entity.Attributes[Fields.SessionTimeoutReminderInMins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chọn Loại Triển khai SharePoint</para>
		/// <para><strong>Description</strong>: Cho biết loại triển khai SharePoint được đặt cấu hình cho Máy chủ tới Máy chủ. (Trực tuyến hoặc Tại chỗ)</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.SharePointDeploymentType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.SharePointDeploymentType.Truc_tuyen"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.SharePointDeploymentType? SharePointDeploymentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SharePointDeploymentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.SharePointDeploymentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SharePointDeploymentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SharePointDeploymentType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chia sẻ với chủ sở hữu trước khi gán</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng chia sẻ với chủ sở hữu trước khi gán.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShareToPreviousOwnerOnAssign
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShareToPreviousOwnerOnAssign); }
			set { Entity.Attributes[Fields.ShareToPreviousOwnerOnAssign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị thông báo không dùng Bài viết trong KB cho người dùng</para>
		/// <para><strong>Description</strong>: Chọn khả năng hiển thị cho người dùng về thông báo không dùng bài viết trong KB.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowKBArticleDeprecationNotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowKBArticleDeprecationNotification); }
			set { Entity.Attributes[Fields.ShowKBArticleDeprecationNotification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện số tuần</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng hiển thị số tuần trong lịch hiển thị trong toàn Microsoft CRM.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowWeekNumber
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowWeekNumber); }
			set { Entity.Attributes[Fields.ShowWeekNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CRMForOutlookDownloadURL</para>
		/// <para><strong>Description</strong>: URL tải xuống CRM dành cho Outlook</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SignupOutlookDownloadFWLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.SignupOutlookDownloadFWLink); }
			set { Entity.Attributes[Fields.SignupOutlookDownloadFWLink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: XML bản đồ trang web</para>
		/// <para><strong>Description</strong>: Chuỗi XML xác định cấu trúc điều hướng cho ứng dụng.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public string SiteMapXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.SiteMapXml); }
			set { Entity.Attributes[Fields.SiteMapXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái tạm dừng SLA</para>
		/// <para><strong>Description</strong>: Chứa giá trị trạng thái của trường hợp tạm giữ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SlaPauseStates
		{
			get { return Entity.GetAttributeValue<string>(Fields.SlaPauseStates); }
			set { Entity.Attributes[Fields.SlaPauseStates] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật hiểu biết xã hội</para>
		/// <para><strong>Description</strong>: Cờ hiệu cho việc tổ chức có đang dùng Hiểu biết xã hội hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SocialInsightsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SocialInsightsEnabled); }
			set { Entity.Attributes[Fields.SocialInsightsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã định danh phiên bản hiểu biết xã hội</para>
		/// <para><strong>Description</strong>: Mã định danh cho phiên bản Hiểu biết xã hội của tổ chức.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SocialInsightsInstance
		{
			get { return Entity.GetAttributeValue<string>(Fields.SocialInsightsInstance); }
			set { Entity.Attributes[Fields.SocialInsightsInstance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điều khoản sử dụng hiểu biết xã hội</para>
		/// <para><strong>Description</strong>: Dựng cờ về khả năng tổ chức chấp nhận điều khoản sử dụng cho Hiểu biết xã hội.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SocialInsightsTermsAccepted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SocialInsightsTermsAccepted); }
			set { Entity.Attributes[Fields.SocialInsightsTermsAccepted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sắp xếp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SortId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SortId); }
			set { Entity.Attributes[Fields.SortId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm truy cập SQL</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SqlAccessGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SqlAccessGroupId); }
			set { Entity.Attributes[Fields.SqlAccessGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên nhóm truy cập SQL</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SqlAccessGroupName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SqlAccessGroupName); }
			set { Entity.Attributes[Fields.SqlAccessGroupName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật SQM</para>
		/// <para><strong>Description</strong>: Có bật thiết đặt cho thu thập dữ liệu SQM, 0 là không, 1 là có</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SQMEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SQMEnabled); }
			set { Entity.Attributes[Fields.SQMEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng hỗ trợ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hỗ trợ cho tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportUserId); }
			set { Entity.Attributes[Fields.SupportUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã chặn dùng SLA</para>
		/// <para><strong>Description</strong>: Cho biết khả năng chặn dùng SLA.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SuppressSLA
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SuppressSLA); }
			set { Entity.Attributes[Fields.SuppressSLA] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có gửi email của Quản trị viên hay không khi không xác thực được Trình kiểm tra giải pháp</para>
		/// <para><strong>Description</strong>: Để trống để sử dụng tùy chọn thiết đặt mặc định. Đặt thành bật/tắt để bật/tắt email của Quản trị viên khi không xác thực được Trình kiểm tra giải pháp.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SuppressValidationEmails
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SuppressValidationEmails); }
			set { Entity.Attributes[Fields.SuppressValidationEmails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số bản ghi cần cập nhật trên mỗi thao tác trong Tạm dừng/Tiếp tục/Hủy Đồng bộ Hàng loạt</para>
		/// <para><strong>Description</strong>: Số bản ghi cần cập nhật trên mỗi thao tác trong Tạm dừng/Tiếp tục/Hủy Đồng bộ Hàng loạt</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SyncBulkOperationBatchSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SyncBulkOperationBatchSize); }
			set { Entity.Attributes[Fields.SyncBulkOperationBatchSize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng số bản ghi tối đa cần cập nhật trong cơ sở dữ liệu cho Tạm dừng/Tiếp tục/Hủy Đồng bộ Hàng loạt</para>
		/// <para><strong>Description</strong>: Tổng số bản ghi tối đa cần cập nhật trong cơ sở dữ liệu cho Tạm dừng/Tiếp tục/Hủy Đồng bộ Hàng loạt</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SyncBulkOperationMaxLimit
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SyncBulkOperationMaxLimit); }
			set { Entity.Attributes[Fields.SyncBulkOperationMaxLimit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật khuôn khổ Dynamics 365 azure sync cho tổ chức này.</para>
		/// <para><strong>Description</strong>: Cho biết việc chọn dùng khuôn khổ Dynamics 365 azure sync hay đồng bộ hóa phía máy chủ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Kích hoạt</strong>]: true - [<strong>Vô hiệu hóa</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Vô hiệu hóa</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncOptInSelection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncOptInSelection); }
			set { Entity.Attributes[Fields.SyncOptInSelection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái của hoạt động tham gia hay không tham gia đối với Dynamics 365 azure sync.</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái của hoạt động tham gia hay không tham gia đối với Dynamics 365 azure sync.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.SyncOptInSelectionStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.SyncOptInSelectionStatus? SyncOptInSelectionStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SyncOptInSelectionStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.SyncOptInSelectionStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SyncOptInSelectionStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SyncOptInSelectionStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng hệ thống</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hệ thống cho tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SystemUserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SystemUserId); }
			set { Entity.Attributes[Fields.SystemUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tìm kiếm trong Dataverse theo phạm vi bảng trong ứng dụng</para>
		/// <para><strong>Description</strong>: Kiểm soát sự xuất hiện của tùy chọn để tìm kiếm trên một bảng được lập chỉ mục tìm kiếm trong DV đơn nhất trong tìm kiếm toàn cầu của ứng dụng dựa trên mô hình trong tiêu đề.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TableScopedDVSearchInApps
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TableScopedDVSearchInApps); }
			set { Entity.Attributes[Fields.TableScopedDVSearchInApps] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vòng tối đa khi ghi thẻ tự động</para>
		/// <para><strong>Description</strong>: Số lượng vòng bỏ phiếu linh hoạt tối đa được thực hiện cho ghi thẻ tự động email khi nhận email mới.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: -1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TagMaxAggressiveCycles
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TagMaxAggressiveCycles); }
			set { Entity.Attributes[Fields.TagMaxAggressiveCycles] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng ghi thẻ tự động</para>
		/// <para><strong>Description</strong>: Tần số bỏ phiếu thông thường, dùng khi ghi thẻ tự động lúc nhận email trong outlook.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TagPollingPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TagPollingPeriod); }
			set { Entity.Attributes[Fields.TagPollingPeriod] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật quy trình Dòng Tác vụ cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Chọn khả năng bật dòng tác vụ cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TaskBasedFlowEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TaskBasedFlowEnabled); }
			set { Entity.Attributes[Fields.TaskBasedFlowEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật chức năng Đồng bộ hóa dữ liệu cuộc trò chuyện Teams.</para>
		/// <para><strong>Description</strong>: Thông tin cho biết chức năng Đồng bộ hóa dữ liệu cuộc trò chuyện Teams có được bật hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TeamsChatDataSync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TeamsChatDataSync); }
			set { Entity.Attributes[Fields.TeamsChatDataSync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Telemetry Instrumentation Key</para>
		/// <para><strong>Description</strong>: Instrumentation key for Application Insights used to log plugins telemetry.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TelemetryInstrumentationKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.TelemetryInstrumentationKey); }
			set { Entity.Attributes[Fields.TelemetryInstrumentationKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật Phân tích Văn bản cho Tổ chức này</para>
		/// <para><strong>Description</strong>: Chọn khả năng bật phân tích văn bản cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TextAnalyticsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TextAnalyticsEnabled); }
			set { Entity.Attributes[Fields.TextAnalyticsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuỗi định dạng thời gian</para>
		/// <para><strong>Description</strong>: Văn bản về cách hiển thị thời gian trong Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeFormatString
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeFormatString); }
			set { Entity.Attributes[Fields.TimeFormatString] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu phân tách thời gian</para>
		/// <para><strong>Description</strong>: Văn bản về cách hiển thị dấu phân tách thời gian trong toàn Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSeparator
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSeparator); }
			set { Entity.Attributes[Fields.TimeSeparator] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian hết hạn mã thông báo</para>
		/// <para><strong>Description</strong>: Khoảng thời gian dùng cho hết hạn mã thông báo.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: -1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TokenExpiry
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TokenExpiry); }
			set { Entity.Attributes[Fields.TokenExpiry] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa của mã thông báo</para>
		/// <para><strong>Description</strong>: Khóa của mã thông báo.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TokenKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.TokenKey); }
			set { Entity.Attributes[Fields.TokenKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi tối đa của bản ghi tracelog tính theo ngày</para>
		/// <para><strong>Description</strong>: Tuổi tối đa của bản ghi tracelog tính theo ngày</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceLogMaximumAgeInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceLogMaximumAgeInDays); }
			set { Entity.Attributes[Fields.TraceLogMaximumAgeInDays] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố theo dõi</para>
		/// <para><strong>Description</strong>: Danh sách lịch sử theo dõi tiền tố của mã thông báo.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TrackingPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.TrackingPrefix); }
			set { Entity.Attributes[Fields.TrackingPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cơ sở mã thông báo theo dõi</para>
		/// <para><strong>Description</strong>: Số cơ sở dùng để cấp mã định danh mã thông báo theo dõi riêng cho người dùng thuộc về bản phát triển khác.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TrackingTokenIdBase
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TrackingTokenIdBase); }
			set { Entity.Attributes[Fields.TrackingTokenIdBase] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chữ số mã thông báo theo dõi</para>
		/// <para><strong>Description</strong>: Số lượng chữ số dùng để thể hiện mã định dạng mã thông báo theo dõi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: -1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TrackingTokenIdDigits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TrackingTokenIdDigits); }
			set { Entity.Attributes[Fields.TrackingTokenIdDigits] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ dài chuỗi duy nhất</para>
		/// <para><strong>Description</strong>: Số lượng ký tự nối vào mã số hóa đơn, báo giá và đơn hàng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 4 - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UniqueSpecifierLength
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UniqueSpecifierLength); }
			set { Entity.Attributes[Fields.UniqueSpecifierLength] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đặt các trường Tới, cc, bcc là chưa được phân giải nếu tìm thấy nhiều giá trị khớp</para>
		/// <para><strong>Description</strong>: Cho biết liệu có phải hủy phân giải địa chỉ email nếu tìm thấy nhiều giá trị khớp hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UnresolveEmailAddressIfMultipleMatch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UnresolveEmailAddressIfMultipleMatch); }
			set { Entity.Attributes[Fields.UnresolveEmailAddressIfMultipleMatch] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dùng quy tắc ghép vào cho lựa chọn danh sách chọn mặc định</para>
		/// <para><strong>Description</strong>: Cờ hiệu cho biết khả năng Dùng quy tắc ghép vào cho DefaultPricelist.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseInbuiltRuleForDefaultPricelistSelection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseInbuiltRuleForDefaultPricelistSelection); }
			set { Entity.Attributes[Fields.UseInbuiltRuleForDefaultPricelistSelection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết xuất biểu mẫu cũ</para>
		/// <para><strong>Description</strong>: Chọn có sử dụng kết xuất mẫu cũ hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseLegacyRendering
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseLegacyRendering); }
			set { Entity.Attributes[Fields.UseLegacyRendering] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dùng hệ thống cấp bậc vị trí</para>
		/// <para><strong>Description</strong>: Dùng hệ thống cấp bậc vị trí</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UsePositionHierarchy
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UsePositionHierarchy); }
			set { Entity.Attributes[Fields.UsePositionHierarchy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng dạng xem Tìm nhanh khi tìm kiếm trong lưới</para>
		/// <para><strong>Description</strong>: Cho biết liệu việc tìm kiếm trong lưới có nên sử dụng dạng xem Tìm nhanh cho thực thể hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseQuickFindViewForGridSearch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseQuickFindViewForGridSearch); }
			set { Entity.Attributes[Fields.UseQuickFindViewForGridSearch] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng kiểm tra xác thực người dùng</para>
		/// <para><strong>Description</strong>: Khoảng thời gian kiểm tra truy cập người dùng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UserAccessAuditingInterval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UserAccessAuditingInterval); }
			set { Entity.Attributes[Fields.UserAccessAuditingInterval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sử dụng Biểu mẫu Tối ưu hóa dạng Chỉ đọc</para>
		/// <para><strong>Description</strong>: Cho biết khả năng bật biểu mẫu tối hóa dạng chỉ đọc cho tổ chức này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseReadForm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseReadForm); }
			set { Entity.Attributes[Fields.UseReadForm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm người dùng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm mặc định cho người dùng trong tổ chức.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserGroupId); }
			set { Entity.Attributes[Fields.UserGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bật tính năng xếp hạng người dùng</para>
		/// <para><strong>Description</strong>: Bật tính năng đánh giá của người dùng để hiển thị điểm NSAT và nhận xét cho người tạo</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UserRatingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UserRatingEnabled); }
			set { Entity.Attributes[Fields.UserRatingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao thức Skype người dùng</para>
		/// <para><strong>Description</strong>: Cho biết giao thức mặc định đã chọn cho tổ chức.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSkypeProtocol
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSkypeProtocol); }
			set { Entity.Attributes[Fields.UseSkypeProtocol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàm băm gọi lệnh V3</para>
		/// <para><strong>Description</strong>: Hàm băm của tệp cấu hình gọi lệnh V3.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string V3CalloutConfigHash
		{
			get { return Entity.GetAttributeValue<string>(Fields.V3CalloutConfigHash); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ xác thực cho các ứng dụng trong môi trường này</para>
		/// <para><strong>Description</strong>: Chế độ xác thực cho các ứng dụng trong môi trường này</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.ValidationMode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.ValidationMode? ValidationMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ValidationMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.ValidationMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ValidationMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ValidationMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàm băm của tài nguyên web</para>
		/// <para><strong>Description</strong>: Giá trị hàm băm của tài nguyên web.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebResourceHash
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebResourceHash); }
			set { Entity.Attributes[Fields.WebResourceHash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WidgetProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.WidgetProperties); }
			set { Entity.Attributes[Fields.WidgetProperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id nhóm Yammer</para>
		/// <para><strong>Description</strong>: Biểu thị ID nhóm Yammer</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? YammerGroupId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.YammerGroupId); }
			set { Entity.Attributes[Fields.YammerGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Liên kết cố định của mạng Yammer</para>
		/// <para><strong>Description</strong>: Biểu thị liên kết cố định của mạng Yammer</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerNetworkPermalink
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerNetworkPermalink); }
			set { Entity.Attributes[Fields.YammerNetworkPermalink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo truy cập OAuth Yammer đã hết hạn</para>
		/// <para><strong>Description</strong>: Biểu thị khả năng hết hạn của mã thông báo truy cập OAuth cho mạng Yammer</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? YammerOAuthAccessTokenExpired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.YammerOAuthAccessTokenExpired); }
			set { Entity.Attributes[Fields.YammerOAuthAccessTokenExpired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ Sử dụng Nội bộ</para>
		/// <para><strong>Description</strong>: Chỉ Sử dụng Nội bộ</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.YammerPostMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OrganizationOptionSets.YammerPostMethod.Cong_khai"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OrganizationOptionSets.YammerPostMethod? YammerPostMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.YammerPostMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OrganizationOptionSets.YammerPostMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.YammerPostMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.YammerPostMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã tuần bắt đầu của năm</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định cách chỉ định tuần đầu tiên của năm trong Microsoft Dynamics 365.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? YearStartWeekCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.YearStartWeekCode); }
			set { Entity.Attributes[Fields.YearStartWeekCode] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}