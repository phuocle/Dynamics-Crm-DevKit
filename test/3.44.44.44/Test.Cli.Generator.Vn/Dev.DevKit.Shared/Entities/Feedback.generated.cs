//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:24
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.FeedbackOptionSets
{
	public enum Source
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cổng thông tin</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cong_thong_tin = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội bộ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Noi_bo = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đóng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_dong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mở</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Mo = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Da_dong</strong></para>
		/// </summary>
		Bi_tu_choi = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã chấp nhận</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Da_chap_nhan = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đề xuất</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Da_de_xuat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đóng</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Da_dong</strong></para>
		/// </summary>
		Da_dong = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Feedback : EntityBase
	{
		public struct Fields
		{
			public const string adx_approved = "adx_approved";
			public const string adx_authorurl = "adx_authorurl";
			public const string Adx_ContactEmail = "adx_contactemail";
			public const string Adx_ContactUsername = "adx_contactusername";
			public const string Adx_CreatedByContact = "adx_createdbycontact";
			public const string ClosedBy = "closedby";
			public const string ClosedOn = "closedon";
			public const string Comments = "comments";
			public const string CreatedBy = "createdby";
			public const string CreatedByContact = "createdbycontact";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByContact = "createdonbehalfbycontact";
			public const string ExchangeRate = "exchangerate";
			public const string FeedbackId = "feedbackid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string MaxRating = "maxrating";
			public const string MinRating = "minrating";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ContextObjectId = "msdyn_contextobjectid";
			public const string NormalizedRating = "normalizedrating";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Rating = "rating";
			public const string RegardingObjectId = "regardingobjectid";
			public const string Source = "source";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "feedback";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9958;
		public const string EntityCollectionSchemaName = "Feedback";
		public const string EntityDisplayCollectionName = "Phản hồi";
		public const string DisplayName = "Phản hồi";
		public const string EntitySetName = "feedback";
		public const string EntityLogicalCollectionName = "feedback";
		public const string EntityPrimaryIdAttribute = "feedbackid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "Feedback";
		[DebuggerNonUserCode()]
		public Feedback()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Feedback(Guid FeedbackId)
		{
			Entity = new Entity(EntityLogicalName, FeedbackId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Feedback(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Feedback"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Feedback(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Feedback"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Feedback(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Feedback(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Feedback"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Feedback(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Feedback(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Feedback(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được phát hành lên Web</para>
		/// <para><strong>Description</strong>: Cho biết phản hồi đã được chấp thuận để hiển thị hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_approved
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_approved); }
			set { Entity.Attributes[Fields.adx_approved] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Tác giả</para>
		/// <para><strong>Description</strong>: URL trang chủ/blog của tác giả.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_authorurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_authorurl); }
			set { Entity.Attributes[Fields.adx_authorurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Email của người liên hệ đã tạo bản ghi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ContactEmail
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ContactEmail); }
			set { Entity.Attributes[Fields.Adx_ContactEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên người dùng</para>
		/// <para><strong>Description</strong>: Tên người dùng của người liên hệ đã tạo bản ghi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ContactUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ContactUsername); }
			set { Entity.Attributes[Fields.Adx_ContactUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người Tạo (Người liên hệ)</para>
		/// <para><strong>Description</strong>: Tên của người liên hệ đã tạo bản ghi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByContact
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByContact); }
			set { Entity.Attributes[Fields.Adx_CreatedByContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người đóng</para>
		/// <para><strong>Description</strong>: Cho biết người đóng bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ClosedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ClosedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày đóng</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ đóng bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ClosedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ClosedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận xét</para>
		/// <para><strong>Description</strong>: Nhập nhận xét phản hồi.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Comments
		{
			get { return Entity.GetAttributeValue<string>(Fields.Comments); }
			set { Entity.Attributes[Fields.Comments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Người liên hệ)</para>
		/// <para><strong>Description</strong>: Hiển thị người liên hệ đã tạo bản ghi.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByContact); }
			set { Entity.Attributes[Fields.CreatedByContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạo OnBelhalfBy (Người liên hệ)</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfByContact); }
			set { Entity.Attributes[Fields.CreatedOnBehalfByContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để chuyển đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phản hồi</para>
		/// <para><strong>Description</strong>: FeedbackId</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid FeedbackId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.FeedbackId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc di chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng tối đa</para>
		/// <para><strong>Description</strong>: Nhập giá trị xếp hạng tối đa.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxRating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxRating); }
			set { Entity.Attributes[Fields.MaxRating] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng tối thiểu</para>
		/// <para><strong>Description</strong>: Nhập giá trị xếp hạng tối thiểu.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinRating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinRating); }
			set { Entity.Attributes[Fields.MinRating] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Context</para>
		/// <para><strong>Description</strong>: Shows the record in context of which feedback rating is being provided.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContextObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContextObjectId); }
			set { Entity.Attributes[Fields.msdyn_ContextObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng được chuẩn hóa</para>
		/// <para><strong>Description</strong>: Hiển thị xếp hạng được chia theo thang đo giá trị giữa 0 và 1 dựa trên xếp hạng tối thiểu và tối đa.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? NormalizedRating
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.NormalizedRating); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu dạng xem bài viết trong cơ sở kiến thức.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu dạng xem bài viết trong cơ sở kiến thức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu phản hồi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu phản hồi này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng</para>
		/// <para><strong>Description</strong>: Cho biết mức độ có ích của bản ghi liên quan.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating); }
			set { Entity.Attributes[Fields.Rating] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Liên quan</para>
		/// <para><strong>Description</strong>: Hiển thị bản ghi liên kết với phản hồi.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/>, <see cref="feedback"/>, <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn thông tin</para>
		/// <para><strong>Description</strong>: Hiển thị nơi gửi phản hồi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.FeedbackOptionSets.Source"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FeedbackOptionSets.Source.Noi_bo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FeedbackOptionSets.Source? Source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FeedbackOptionSets.Source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Source] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Hiển thị xem phản hồi còn mở, bị từ chối hay đã đóng.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.FeedbackOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FeedbackOptionSets.StateCode.Mo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FeedbackOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FeedbackOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của phản hồi.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.FeedbackOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FeedbackOptionSets.StatusCode.Da_de_xuat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FeedbackOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FeedbackOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Nhập tiêu đề cho phản hồi.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 155</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị tiền tệ</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của phản hồi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}