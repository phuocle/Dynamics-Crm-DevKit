//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:51
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum powerpagecomponenttype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu cơ bản</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Bieu_mau_co_ban = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu nâng cao</para>
		/// <para><strong>Value</strong>: 19</para>
		/// </summary>
		Bieu_mau_nang_cao = 19,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ liên kết web</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Bo_lien_ket_web = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bước biểu mẫu nâng cao</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Buoc_bieu_mau_nang_cao = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyển hướng</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Chuyen_huong = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Công cụ đánh dấu trang</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Cong_cu_danh_dau_trang = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danh sách</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Danh_sach = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đoạn nội dung</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Doan_noi_dung = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng đám mây</para>
		/// <para><strong>Value</strong>: 33</para>
		/// </summary>
		Dong_dam_may = 33,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hồ sơ quyền đối với cột</para>
		/// <para><strong>Value</strong>: 28</para>
		/// </summary>
		Ho_so_quyen_doi_voi_cot = 28,
		/// <summary>
		/// <para><strong>Display Name</strong>: Liên kết web</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Lien_ket_web = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lối tắt</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Loi_tat = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mẫu trang</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Mau_trang = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mẫu web</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Mau_web = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tiêu dùng bot</para>
		/// <para><strong>Value</strong>: 27</para>
		/// </summary>
		Nguoi_tieu_dung_bot = 27,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc chuyển tiếp trạng thái phát hành</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Quy_tac_chuyen_tiep_trang_thai_phat_hanh = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc kiểm soát quyền truy cập trang web</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Quy_tac_kiem_soat_quyen_truy_cap_trang_web = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quyền đối với bảng</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Quyen_doi_voi_bang = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quyền đối với cột</para>
		/// <para><strong>Value</strong>: 29</para>
		/// </summary>
		Quyen_doi_voi_cot = 29,
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu biểu mẫu cơ bản</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Sieu_du_lieu_bieu_mau_co_ban = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu biểu mẫu nâng cao</para>
		/// <para><strong>Value</strong>: 21</para>
		/// </summary>
		Sieu_du_lieu_bieu_mau_nang_cao = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tệp web</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tep_web = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phần UX</para>
		/// <para><strong>Value</strong>: 34</para>
		/// </summary>
		Thanh_phan_UX = 34,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt trang</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Thiet_dat_trang = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Trang_thai_phat_hanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang web</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Trang_web = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy cập website</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Truy_cap_website = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vai trò web</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Vai_tro_web = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí quảng cáo</para>
		/// <para><strong>Value</strong>: 26</para>
		/// </summary>
		Vi_tri_quang_cao = 26,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí thăm dò ý kiến</para>
		/// <para><strong>Value</strong>: 24</para>
		/// </summary>
		Vi_tri_tham_do_y_kien = 24
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class powerpagecomponent : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string filecontent = "filecontent";
			public const string filecontent_name = "filecontent_name";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string powerpagecomponentId = "powerpagecomponentid";
			public const string powerpagecomponenttype = "powerpagecomponenttype";
			public const string powerpagesiteid = "powerpagesiteid";
			public const string powerpagesitelanguageid = "powerpagesitelanguageid";
			public const string searchcontent = "searchcontent";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "powerpagecomponent";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10302;
		public const string EntityCollectionSchemaName = "powerpagecomponents";
		public const string EntityDisplayCollectionName = "Thành phần trang web";
		public const string DisplayName = "Thành phần trang web";
		public const string EntitySetName = "powerpagecomponents";
		public const string EntityLogicalCollectionName = "powerpagecomponents";
		public const string EntityPrimaryIdAttribute = "powerpagecomponentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "powerpagecomponent";
		[DebuggerNonUserCode()]
		public powerpagecomponent()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public powerpagecomponent(Guid powerpagecomponentId)
		{
			Entity = new Entity(EntityLogicalName, powerpagecomponentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public powerpagecomponent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="powerpagecomponent"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public powerpagecomponent(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="powerpagecomponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public powerpagecomponent(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new powerpagecomponent(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="powerpagecomponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public powerpagecomponent(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new powerpagecomponent(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public powerpagecomponent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội dung</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string content
		{
			get { return Entity.GetAttributeValue<string>(Fields.content); }
			set { Entity.Attributes[Fields.content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội dung tệp</para>
		/// <para><strong>Description</strong>: Cột nội dung tệp chứa các tệp web cổng thông tin, ví dụ: png, css, v.v.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string filecontent_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.filecontent_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của thực thể tùy chỉnh.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phần Power Pages</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid powerpagecomponentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.powerpagecomponentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại thành phần</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.powerpagecomponenttype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.powerpagecomponenttype? powerpagecomponenttype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.powerpagecomponenttype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.powerpagecomponenttype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.powerpagecomponenttype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.powerpagecomponenttype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID site Power Pages</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="powerpagesite"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference powerpagesiteid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.powerpagesiteid); }
			set { Entity.Attributes[Fields.powerpagesiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID ngôn ngữ site Power Pages</para>
		/// <para><strong>Lookup</strong>: <see cref="powerpagesitelanguage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference powerpagesitelanguageid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.powerpagesitelanguageid); }
			set { Entity.Attributes[Fields.powerpagesitelanguageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tìm kiếm nội dung</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string searchcontent
		{
			get { return Entity.GetAttributeValue<string>(Fields.searchcontent); }
			set { Entity.Attributes[Fields.searchcontent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của thành phần Power Pages</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của thành phần Power Pages</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.powerpagecomponentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi theo UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}