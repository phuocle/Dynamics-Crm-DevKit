//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:24
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.FileAttachmentOptionSets
{
	public enum ObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khach_hang = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class FileAttachment : EntityBase
	{
		public struct Fields
		{
			public const string Body = "body";
			public const string CreatedOn = "createdon";
			public const string FileAttachmentId = "fileattachmentid";
			public const string FileName = "filename";
			public const string FilePointer = "filepointer";
			public const string FileSizeInBytes = "filesizeinbytes";
			public const string IsCommitted = "iscommitted";
			public const string MimeType = "mimetype";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string Prefix = "prefix";
			public const string RegardingFieldName = "regardingfieldname";
			public const string StoragePointer = "storagepointer";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "fileattachment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 55;
		public const string EntityCollectionSchemaName = "FileAttachments";
		public const string EntityDisplayCollectionName = "FileAttachments";
		public const string DisplayName = "FileAttachment";
		public const string EntitySetName = "fileattachments";
		public const string EntityLogicalCollectionName = "fileattachments";
		public const string EntityPrimaryIdAttribute = "fileattachmentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "filename";
		public const string EntitySchemaName = "FileAttachment";
		[DebuggerNonUserCode()]
		public FileAttachment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public FileAttachment(Guid FileAttachmentId)
		{
			Entity = new Entity(EntityLogicalName, FileAttachmentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public FileAttachment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="FileAttachment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public FileAttachment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="FileAttachment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public FileAttachment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new FileAttachment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="FileAttachment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public FileAttachment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new FileAttachment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public FileAttachment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Body</para>
		/// <para><strong>Description</strong>: Body</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Body
		{
			get { return Entity.GetAttributeValue<string>(Fields.Body); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo tệp đính kèm.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FileAttachmentId</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tệp đính kèm.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid FileAttachmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.FileAttachmentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Tệp</para>
		/// <para><strong>Description</strong>: Tên tệp đính kèm.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Con trỏ Tệp</para>
		/// <para><strong>Description</strong>: Con trỏ tệp đính kèm.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FilePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.FilePointer); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích thước tệp (Byte)</para>
		/// <para><strong>Description</strong>: Kích thước của tệp đính kèm tính theo byte.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? FileSizeInBytes
		{
			get { return Entity.GetAttributeValue<long?>(Fields.FileSizeInBytes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsCommitted</para>
		/// <para><strong>Description</strong>: IsCommitted</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCommitted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCommitted); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại MIME</para>
		/// <para><strong>Description</strong>: Loại MIME của tệp đính kèm.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đối tượng có tệp đính kèm được liên kết.</para>
		/// <para><strong>Lookup</strong>: <see cref="activityfileattachment"/>, <see cref="activitypointer"/>, <see cref="asyncoperation"/>, <see cref="botcomponent"/>, <see cref="canvasapp"/>, <see cref="cascadegrantrevokeaccessrecordstracker"/>, <see cref="deleteditemreference"/>, <see cref="desktopflowbinary"/>, <see cref="desktopflowmodule"/>, <see cref="email"/>, <see cref="exportedexcel"/>, <see cref="exportsolutionupload"/>, <see cref="flowsession"/>, <see cref="imagedescriptor"/>, <see cref="knowledgearticle"/>, <see cref="mailbox"/>, <see cref="msdyn_aibfeedbackloop"/>, <see cref="msdyn_aibfile"/>, <see cref="msdyn_aiconfiguration"/>, <see cref="msdyn_analysisjob"/>, <see cref="msdyn_fileupload"/>, <see cref="msdyn_integratedsearchprovider"/>, <see cref="msdyn_kbattachment"/>, <see cref="msdyn_knowledgearticleimage"/>, <see cref="msdyn_mobileapp"/>, <see cref="msdyn_pminferredtask"/>, <see cref="msdyn_richtextfile"/>, <see cref="mspcat_catalogsubmissionfiles"/>, <see cref="mspcat_packagestore"/>, <see cref="package"/>, <see cref="packagehistory"/>, <see cref="pluginpackage"/>, <see cref="powerbidataset"/>, <see cref="powerbireport"/>, <see cref="powerpagecomponent"/>, <see cref="powerpagesitepublished"/>, <see cref="powerpagesscanreport"/>, <see cref="report"/>, <see cref="retaineddataexcel"/>, <see cref="revokeinheritedaccessrecordstracker"/>, <see cref="ribbonclientmetadata"/>, <see cref="searchcustomanalyzer"/>, <see cref="solution"/>, <see cref="stagesolutionupload"/>, <see cref="webresource"/>, <see cref="workflowbinary"/>, <see cref="workflowlog"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Đối tượng</para>
		/// <para><strong>Description</strong>: Loại thực thể liên kết với tệp đính kèm.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiền tố</para>
		/// <para><strong>Description</strong>: Tiền tố của con trỏ tệp trong lưu trữ blob.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Prefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Prefix); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Sơ đồ Thuộc tính Bản lưu ý</para>
		/// <para><strong>Description</strong>: Tên sơ đồ thuộc tính bản lưu ý của tệp đính kèm.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RegardingFieldName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RegardingFieldName); }
			set { Entity.Attributes[Fields.RegardingFieldName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Con trỏ Lưu trữ</para>
		/// <para><strong>Description</strong>: Con trỏ lưu trữ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StoragePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.StoragePointer); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của tệp đính kèm.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}