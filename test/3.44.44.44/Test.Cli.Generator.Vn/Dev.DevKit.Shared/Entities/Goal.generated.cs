//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:26
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.GoalOptionSets
{
	public enum AmountDataType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Loai_tien = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Số nguyên</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		So_nguyen = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thập phân</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thap_phan = 1
	}
	public enum FiscalPeriod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng năm</para>
		/// <para><strong>Value</strong>: 301</para>
		/// </summary>
		Hang_nam = 301,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 1</para>
		/// <para><strong>Value</strong>: 401</para>
		/// </summary>
		Ky_1 = 401,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 10</para>
		/// <para><strong>Value</strong>: 410</para>
		/// </summary>
		Ky_10 = 410,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 11</para>
		/// <para><strong>Value</strong>: 411</para>
		/// </summary>
		Ky_11 = 411,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 12</para>
		/// <para><strong>Value</strong>: 412</para>
		/// </summary>
		Ky_12 = 412,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 13</para>
		/// <para><strong>Value</strong>: 413</para>
		/// </summary>
		Ky_13 = 413,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 2</para>
		/// <para><strong>Value</strong>: 402</para>
		/// </summary>
		Ky_2 = 402,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 3</para>
		/// <para><strong>Value</strong>: 403</para>
		/// </summary>
		Ky_3 = 403,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 4</para>
		/// <para><strong>Value</strong>: 404</para>
		/// </summary>
		Ky_4 = 404,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 5</para>
		/// <para><strong>Value</strong>: 405</para>
		/// </summary>
		Ky_5 = 405,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 6</para>
		/// <para><strong>Value</strong>: 406</para>
		/// </summary>
		Ky_6 = 406,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 7</para>
		/// <para><strong>Value</strong>: 407</para>
		/// </summary>
		Ky_7 = 407,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 8</para>
		/// <para><strong>Value</strong>: 408</para>
		/// </summary>
		Ky_8 = 408,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ 9</para>
		/// <para><strong>Value</strong>: 409</para>
		/// </summary>
		Ky_9 = 409,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ sáu tháng 1</para>
		/// <para><strong>Value</strong>: 201</para>
		/// </summary>
		Ky_sau_thang_1 = 201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ sáu tháng 2</para>
		/// <para><strong>Value</strong>: 202</para>
		/// </summary>
		Ky_sau_thang_2 = 202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quý 1</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quy_1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quý 2</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Quy_2 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quý 3</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Quy_3 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quý 4</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Quy_4 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 1</para>
		/// <para><strong>Value</strong>: 101</para>
		/// </summary>
		Thang_1 = 101,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 10</para>
		/// <para><strong>Value</strong>: 110</para>
		/// </summary>
		Thang_10 = 110,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 11</para>
		/// <para><strong>Value</strong>: 111</para>
		/// </summary>
		Thang_11 = 111,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 12</para>
		/// <para><strong>Value</strong>: 112</para>
		/// </summary>
		Thang_12 = 112,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 2</para>
		/// <para><strong>Value</strong>: 102</para>
		/// </summary>
		Thang_2 = 102,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 3</para>
		/// <para><strong>Value</strong>: 103</para>
		/// </summary>
		Thang_3 = 103,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 4</para>
		/// <para><strong>Value</strong>: 104</para>
		/// </summary>
		Thang_4 = 104,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 5</para>
		/// <para><strong>Value</strong>: 105</para>
		/// </summary>
		Thang_5 = 105,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 6</para>
		/// <para><strong>Value</strong>: 106</para>
		/// </summary>
		Thang_6 = 106,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 7</para>
		/// <para><strong>Value</strong>: 107</para>
		/// </summary>
		Thang_7 = 107,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 8</para>
		/// <para><strong>Value</strong>: 108</para>
		/// </summary>
		Thang_8 = 108,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 9</para>
		/// <para><strong>Value</strong>: 109</para>
		/// </summary>
		Thang_9 = 109
	}
	public enum FiscalYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1970</para>
		/// <para><strong>Value</strong>: 1,970</para>
		/// </summary>
		Nam_Tai_chinh1970 = 1_970,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1971</para>
		/// <para><strong>Value</strong>: 1,971</para>
		/// </summary>
		Nam_Tai_chinh1971 = 1_971,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1972</para>
		/// <para><strong>Value</strong>: 1,972</para>
		/// </summary>
		Nam_Tai_chinh1972 = 1_972,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1973</para>
		/// <para><strong>Value</strong>: 1,973</para>
		/// </summary>
		Nam_Tai_chinh1973 = 1_973,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1974</para>
		/// <para><strong>Value</strong>: 1,974</para>
		/// </summary>
		Nam_Tai_chinh1974 = 1_974,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1975</para>
		/// <para><strong>Value</strong>: 1,975</para>
		/// </summary>
		Nam_Tai_chinh1975 = 1_975,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1976</para>
		/// <para><strong>Value</strong>: 1,976</para>
		/// </summary>
		Nam_Tai_chinh1976 = 1_976,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1977</para>
		/// <para><strong>Value</strong>: 1,977</para>
		/// </summary>
		Nam_Tai_chinh1977 = 1_977,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1978</para>
		/// <para><strong>Value</strong>: 1,978</para>
		/// </summary>
		Nam_Tai_chinh1978 = 1_978,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1979</para>
		/// <para><strong>Value</strong>: 1,979</para>
		/// </summary>
		Nam_Tai_chinh1979 = 1_979,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1980</para>
		/// <para><strong>Value</strong>: 1,980</para>
		/// </summary>
		Nam_Tai_chinh1980 = 1_980,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1981</para>
		/// <para><strong>Value</strong>: 1,981</para>
		/// </summary>
		Nam_Tai_chinh1981 = 1_981,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1982</para>
		/// <para><strong>Value</strong>: 1,982</para>
		/// </summary>
		Nam_Tai_chinh1982 = 1_982,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1983</para>
		/// <para><strong>Value</strong>: 1,983</para>
		/// </summary>
		Nam_Tai_chinh1983 = 1_983,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1984</para>
		/// <para><strong>Value</strong>: 1,984</para>
		/// </summary>
		Nam_Tai_chinh1984 = 1_984,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1985</para>
		/// <para><strong>Value</strong>: 1,985</para>
		/// </summary>
		Nam_Tai_chinh1985 = 1_985,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1986</para>
		/// <para><strong>Value</strong>: 1,986</para>
		/// </summary>
		Nam_Tai_chinh1986 = 1_986,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1987</para>
		/// <para><strong>Value</strong>: 1,987</para>
		/// </summary>
		Nam_Tai_chinh1987 = 1_987,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1988</para>
		/// <para><strong>Value</strong>: 1,988</para>
		/// </summary>
		Nam_Tai_chinh1988 = 1_988,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1989</para>
		/// <para><strong>Value</strong>: 1,989</para>
		/// </summary>
		Nam_Tai_chinh1989 = 1_989,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1990</para>
		/// <para><strong>Value</strong>: 1,990</para>
		/// </summary>
		Nam_Tai_chinh1990 = 1_990,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1991</para>
		/// <para><strong>Value</strong>: 1,991</para>
		/// </summary>
		Nam_Tai_chinh1991 = 1_991,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1992</para>
		/// <para><strong>Value</strong>: 1,992</para>
		/// </summary>
		Nam_Tai_chinh1992 = 1_992,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1993</para>
		/// <para><strong>Value</strong>: 1,993</para>
		/// </summary>
		Nam_Tai_chinh1993 = 1_993,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1994</para>
		/// <para><strong>Value</strong>: 1,994</para>
		/// </summary>
		Nam_Tai_chinh1994 = 1_994,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1995</para>
		/// <para><strong>Value</strong>: 1,995</para>
		/// </summary>
		Nam_Tai_chinh1995 = 1_995,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1996</para>
		/// <para><strong>Value</strong>: 1,996</para>
		/// </summary>
		Nam_Tai_chinh1996 = 1_996,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1997</para>
		/// <para><strong>Value</strong>: 1,997</para>
		/// </summary>
		Nam_Tai_chinh1997 = 1_997,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1998</para>
		/// <para><strong>Value</strong>: 1,998</para>
		/// </summary>
		Nam_Tai_chinh1998 = 1_998,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính1999</para>
		/// <para><strong>Value</strong>: 1,999</para>
		/// </summary>
		Nam_Tai_chinh1999 = 1_999,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2000</para>
		/// <para><strong>Value</strong>: 2,000</para>
		/// </summary>
		Nam_Tai_chinh2000 = 2_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2001</para>
		/// <para><strong>Value</strong>: 2,001</para>
		/// </summary>
		Nam_Tai_chinh2001 = 2_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2002</para>
		/// <para><strong>Value</strong>: 2,002</para>
		/// </summary>
		Nam_Tai_chinh2002 = 2_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2003</para>
		/// <para><strong>Value</strong>: 2,003</para>
		/// </summary>
		Nam_Tai_chinh2003 = 2_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2004</para>
		/// <para><strong>Value</strong>: 2,004</para>
		/// </summary>
		Nam_Tai_chinh2004 = 2_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2005</para>
		/// <para><strong>Value</strong>: 2,005</para>
		/// </summary>
		Nam_Tai_chinh2005 = 2_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2006</para>
		/// <para><strong>Value</strong>: 2,006</para>
		/// </summary>
		Nam_Tai_chinh2006 = 2_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2007</para>
		/// <para><strong>Value</strong>: 2,007</para>
		/// </summary>
		Nam_Tai_chinh2007 = 2_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2008</para>
		/// <para><strong>Value</strong>: 2,008</para>
		/// </summary>
		Nam_Tai_chinh2008 = 2_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2009</para>
		/// <para><strong>Value</strong>: 2,009</para>
		/// </summary>
		Nam_Tai_chinh2009 = 2_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2010</para>
		/// <para><strong>Value</strong>: 2,010</para>
		/// </summary>
		Nam_Tai_chinh2010 = 2_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2011</para>
		/// <para><strong>Value</strong>: 2,011</para>
		/// </summary>
		Nam_Tai_chinh2011 = 2_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2012</para>
		/// <para><strong>Value</strong>: 2,012</para>
		/// </summary>
		Nam_Tai_chinh2012 = 2_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2013</para>
		/// <para><strong>Value</strong>: 2,013</para>
		/// </summary>
		Nam_Tai_chinh2013 = 2_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2014</para>
		/// <para><strong>Value</strong>: 2,014</para>
		/// </summary>
		Nam_Tai_chinh2014 = 2_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2015</para>
		/// <para><strong>Value</strong>: 2,015</para>
		/// </summary>
		Nam_Tai_chinh2015 = 2_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2016</para>
		/// <para><strong>Value</strong>: 2,016</para>
		/// </summary>
		Nam_Tai_chinh2016 = 2_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2017</para>
		/// <para><strong>Value</strong>: 2,017</para>
		/// </summary>
		Nam_Tai_chinh2017 = 2_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2018</para>
		/// <para><strong>Value</strong>: 2,018</para>
		/// </summary>
		Nam_Tai_chinh2018 = 2_018,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2019</para>
		/// <para><strong>Value</strong>: 2,019</para>
		/// </summary>
		Nam_Tai_chinh2019 = 2_019,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2020</para>
		/// <para><strong>Value</strong>: 2,020</para>
		/// </summary>
		Nam_Tai_chinh2020 = 2_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2021</para>
		/// <para><strong>Value</strong>: 2,021</para>
		/// </summary>
		Nam_Tai_chinh2021 = 2_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2022</para>
		/// <para><strong>Value</strong>: 2,022</para>
		/// </summary>
		Nam_Tai_chinh2022 = 2_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2023</para>
		/// <para><strong>Value</strong>: 2,023</para>
		/// </summary>
		Nam_Tai_chinh2023 = 2_023,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2024</para>
		/// <para><strong>Value</strong>: 2,024</para>
		/// </summary>
		Nam_Tai_chinh2024 = 2_024,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2025</para>
		/// <para><strong>Value</strong>: 2,025</para>
		/// </summary>
		Nam_Tai_chinh2025 = 2_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2026</para>
		/// <para><strong>Value</strong>: 2,026</para>
		/// </summary>
		Nam_Tai_chinh2026 = 2_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2027</para>
		/// <para><strong>Value</strong>: 2,027</para>
		/// </summary>
		Nam_Tai_chinh2027 = 2_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2028</para>
		/// <para><strong>Value</strong>: 2,028</para>
		/// </summary>
		Nam_Tai_chinh2028 = 2_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2029</para>
		/// <para><strong>Value</strong>: 2,029</para>
		/// </summary>
		Nam_Tai_chinh2029 = 2_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2030</para>
		/// <para><strong>Value</strong>: 2,030</para>
		/// </summary>
		Nam_Tai_chinh2030 = 2_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2031</para>
		/// <para><strong>Value</strong>: 2,031</para>
		/// </summary>
		Nam_Tai_chinh2031 = 2_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2032</para>
		/// <para><strong>Value</strong>: 2,032</para>
		/// </summary>
		Nam_Tai_chinh2032 = 2_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2033</para>
		/// <para><strong>Value</strong>: 2,033</para>
		/// </summary>
		Nam_Tai_chinh2033 = 2_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2034</para>
		/// <para><strong>Value</strong>: 2,034</para>
		/// </summary>
		Nam_Tai_chinh2034 = 2_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2035</para>
		/// <para><strong>Value</strong>: 2,035</para>
		/// </summary>
		Nam_Tai_chinh2035 = 2_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2036</para>
		/// <para><strong>Value</strong>: 2,036</para>
		/// </summary>
		Nam_Tai_chinh2036 = 2_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2037</para>
		/// <para><strong>Value</strong>: 2,037</para>
		/// </summary>
		Nam_Tai_chinh2037 = 2_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính2038</para>
		/// <para><strong>Value</strong>: 2,038</para>
		/// </summary>
		Nam_Tai_chinh2038 = 2_038
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đóng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Da_dong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã loại bỏ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Da_loai_bo = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mở</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Mo = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Goal : EntityBase
	{
		public struct Fields
		{
			public const string ActualDecimal = "actualdecimal";
			public const string ActualInteger = "actualinteger";
			public const string ActualMoney = "actualmoney";
			public const string ActualMoney_Base = "actualmoney_base";
			public const string ActualString = "actualstring";
			public const string AmountDataType = "amountdatatype";
			public const string ComputedTargetAsOfTodayDecimal = "computedtargetasoftodaydecimal";
			public const string ComputedTargetAsOfTodayInteger = "computedtargetasoftodayinteger";
			public const string ComputedTargetAsOfTodayMoney = "computedtargetasoftodaymoney";
			public const string ComputedTargetAsOfTodayMoney_Base = "computedtargetasoftodaymoney_base";
			public const string ComputedTargetAsOfTodayPercentageAchieved = "computedtargetasoftodaypercentageachieved";
			public const string ConsiderOnlyGoalOwnersRecords = "consideronlygoalownersrecords";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomRollupFieldDecimal = "customrollupfielddecimal";
			public const string CustomRollupFieldInteger = "customrollupfieldinteger";
			public const string CustomRollupFieldMoney = "customrollupfieldmoney";
			public const string CustomRollupFieldMoney_Base = "customrollupfieldmoney_base";
			public const string CustomRollupFieldString = "customrollupfieldstring";
			public const string Depth = "depth";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FiscalPeriod = "fiscalperiod";
			public const string FiscalYear = "fiscalyear";
			public const string GoalEndDate = "goalenddate";
			public const string GoalId = "goalid";
			public const string GoalOwnerId = "goalownerid";
			public const string GoalStartDate = "goalstartdate";
			public const string GoalWithErrorId = "goalwitherrorid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InProgressDecimal = "inprogressdecimal";
			public const string InProgressInteger = "inprogressinteger";
			public const string InProgressMoney = "inprogressmoney";
			public const string InProgressMoney_Base = "inprogressmoney_base";
			public const string InProgressString = "inprogressstring";
			public const string IsAmount = "isamount";
			public const string IsFiscalPeriodGoal = "isfiscalperiodgoal";
			public const string IsOverridden = "isoverridden";
			public const string IsOverride = "isoverride";
			public const string LastRolledupDate = "lastrolledupdate";
			public const string MetricId = "metricid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentGoalId = "parentgoalid";
			public const string Percentage = "percentage";
			public const string RollupErrorCode = "rolluperrorcode";
			public const string RollupOnlyFromChildGoals = "rolluponlyfromchildgoals";
			public const string RollUpQueryActualDecimalId = "rollupqueryactualdecimalid";
			public const string RollupQueryActualIntegerId = "rollupqueryactualintegerid";
			public const string RollUpQueryActualMoneyId = "rollupqueryactualmoneyid";
			public const string RollUpQueryCustomDecimalId = "rollupquerycustomdecimalid";
			public const string RollUpQueryCustomIntegerId = "rollupquerycustomintegerid";
			public const string RollUpQueryCustomMoneyId = "rollupquerycustommoneyid";
			public const string RollUpQueryInprogressDecimalId = "rollupqueryinprogressdecimalid";
			public const string RollUpQueryInprogressIntegerId = "rollupqueryinprogressintegerid";
			public const string RollUpQueryInprogressMoneyId = "rollupqueryinprogressmoneyid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StretchTargetDecimal = "stretchtargetdecimal";
			public const string StretchTargetInteger = "stretchtargetinteger";
			public const string StretchTargetMoney = "stretchtargetmoney";
			public const string StretchTargetMoney_Base = "stretchtargetmoney_base";
			public const string StretchTargetString = "stretchtargetstring";
			public const string TargetDecimal = "targetdecimal";
			public const string TargetInteger = "targetinteger";
			public const string TargetMoney = "targetmoney";
			public const string TargetMoney_Base = "targetmoney_base";
			public const string TargetString = "targetstring";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TreeId = "treeid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "goal";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9600;
		public const string EntityCollectionSchemaName = "Goals";
		public const string EntityDisplayCollectionName = "Mục tiêu";
		public const string DisplayName = "Mục tiêu";
		public const string EntitySetName = "goals";
		public const string EntityLogicalCollectionName = "goals";
		public const string EntityPrimaryIdAttribute = "goalid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "Goal";
		[DebuggerNonUserCode()]
		public Goal()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Goal(Guid GoalId)
		{
			Entity = new Entity(EntityLogicalName, GoalId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Goal(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Goal"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Goal(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Goal"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Goal(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Goal(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Goal"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Goal(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Goal(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Goal(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực tế (Thập phân)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị thực tế (loại Thập phân) đã đạt được hướng tới giá trị đích kể từ ngày tính tổng số lần cuối. Trường này hiển thị khi loại số liệu của mục tiêu là Số tiền và loại dữ liệu số tiền là Thập phân.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ActualDecimal); }
			set { Entity.Attributes[Fields.ActualDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực tế (Số nguyên)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị thực tế (số nguyên) đã đạt được hướng tới giá trị đích kể từ ngày tính tổng số lần cuối. Trường này hiển thị khi loại số liệu của mục tiêu là Số tiền hoặc Số lượng và loại dữ liệu số tiền là Số nguyên.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualInteger); }
			set { Entity.Attributes[Fields.ActualInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực tế (Tiền)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị thực tế (loại Tiền) đã đạt được hướng tới giá trị đích kể từ ngày tính tổng số lần cuối. Trường này hiển thị khi loại số liệu của mục tiêu là Số tiền và loại dữ liệu số tiền là Tiền.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ActualMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ActualMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực tế (Tiền) (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị thực tế (loại tiền) tính theo loại tiền gốc để theo dõi các kết quả mục tiêu so với đích đề ra.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực tế</para>
		/// <para><strong>Description</strong>: Giá trị Thực tế theo mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActualString
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActualString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Dữ liệu Số tiền</para>
		/// <para><strong>Description</strong>: Loại dữ liệu của số tiền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType.Thap_phan"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType? AmountDataType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AmountDataType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AmountDataType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AmountDataType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích của Ngày hôm nay (Thập phân)</para>
		/// <para><strong>Description</strong>: Hiển thị số tiền dự kiến cho giá trị thực tế (loại thập phân) so với giá trị mục tiêu đích.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ComputedTargetAsOfTodayDecimal); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích của Ngày hôm nay (Số nguyên)</para>
		/// <para><strong>Description</strong>: Hiển thị số tiền dự kiến cho giá trị thực tế (loại số nguyên) so với giá trị mục tiêu đích kể từ ngày hiện tại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComputedTargetAsOfTodayInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComputedTargetAsOfTodayInteger); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích của Ngày hôm nay (Tiền)</para>
		/// <para><strong>Description</strong>: Hiển thị số tiền dự kiến cho giá trị thực tế (loại tiền) so với giá trị mục tiêu đích kể từ ngày hiện tại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ComputedTargetAsOfTodayMoney);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích của Ngày hôm nay (Tiền) (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị số tiền dự kiến tính theo loại tiền gốc cho giá trị thực tế (loại tiền) so với giá trị mục tiêu đích kể từ ngày hiện tại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ComputedTargetAsOfTodayMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích của Ngày hôm nay (Phần trăm Đạt được)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị dự kiến cho phần trăm đạt được so với giá trị mục tiêu đích kể từ ngày hiện tại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayPercentageAchieved
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ComputedTargetAsOfTodayPercentageAchieved); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Bản ghi để tính Tổng số</para>
		/// <para><strong>Description</strong>: Chọn liệu chỉ các bản ghi của chủ sở hữu mục tiêu hay tất cả các bản ghi sẽ được tính tổng cho kết quả mục tiêu.</para>
		/// <para><strong>Two Option</strong> - [<strong>Thuộc sở hữu của chủ sở hữu mục tiêu</strong>]: true - [<strong>Tất cả</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Thuộc sở hữu của chủ sở hữu mục tiêu</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConsiderOnlyGoalOwnersRecords
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConsiderOnlyGoalOwnersRecords); }
			set { Entity.Attributes[Fields.ConsiderOnlyGoalOwnersRecords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường Tổng số Tùy chỉnh (Thập phân)</para>
		/// <para><strong>Description</strong>: Chỉ ra trường tổng số giữ chỗ cho giá trị thập phân để theo dõi loại kết quả thứ ba không phải là các kết quả thực tế và các kết quả ở trạng thái đang tiến hành.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.CustomRollupFieldDecimal); }
			set { Entity.Attributes[Fields.CustomRollupFieldDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường Tổng số Tùy chỉnh (Số nguyên)</para>
		/// <para><strong>Description</strong>: Chỉ ra trường tổng số giữ chỗ cho giá trị số nguyên để theo dõi loại kết quả thứ ba không phải là các kết quả thực tế và các kết quả ở trạng thái đang tiến hành.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomRollupFieldInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomRollupFieldInteger); }
			set { Entity.Attributes[Fields.CustomRollupFieldInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường Tổng số Tùy chỉnh (Tiền)</para>
		/// <para><strong>Description</strong>: Chỉ ra trường tổng số giữ chỗ cho giá trị tiền để theo dõi loại kết quả thứ ba không phải là các kết quả thực tế và các kết quả ở trạng thái đang tiến hành.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CustomRollupFieldMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomRollupFieldMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CustomRollupFieldMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường Tổng số Tùy chỉnh (Tiền) (Gốc)</para>
		/// <para><strong>Description</strong>: Chỉ ra trường tổng số giữ chỗ cho giá trị tiền theo loại tiền gốc để theo dõi loại kết quả thứ ba không phải là các kết quả thực tế và các kết quả ở trạng thái đang tiến hành.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CustomRollupFieldMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường Tổng số Tùy chỉnh</para>
		/// <para><strong>Description</strong>: Trường tổng số giữ chỗ cho mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomRollupFieldString
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomRollupFieldString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ sâu</para>
		/// <para><strong>Description</strong>: Độ sâu của mục tiêu trong cây.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Depth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Depth); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỳ Tài chính</para>
		/// <para><strong>Description</strong>: Chọn kỳ tài chính cho mục tiêu.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod? FiscalPeriod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalPeriod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalPeriod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalPeriod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Năm Tài chính</para>
		/// <para><strong>Description</strong>: Chọn năm tài chính cho mục tiêu đang được theo dõi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear? FiscalYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tới</para>
		/// <para><strong>Description</strong>: Nhập ngày kết thúc mục tiêu.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? GoalEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.GoalEndDate); }
			set { Entity.Attributes[Fields.GoalEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục tiêu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mục tiêu.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid GoalId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.GoalId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu Mục tiêu</para>
		/// <para><strong>Description</strong>: Chọn người dùng hoặc nhóm chịu trách nhiệm đạt được mục tiêu.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GoalOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GoalOwnerId); }
			set { Entity.Attributes[Fields.GoalOwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ</para>
		/// <para><strong>Description</strong>: Nhập ngày và giờ bắt đầu thời gian theo dõi mục tiêu.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? GoalStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.GoalStartDate); }
			set { Entity.Attributes[Fields.GoalStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục tiêu có Lỗi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mục tiêu gây ra lỗi trong trường tổng số của hệ thống cấp bậc mục tiêu.</para>
		/// <para><strong>Lookup</strong>: <see cref="goal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GoalWithErrorId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GoalWithErrorId); }
			set { Entity.Attributes[Fields.GoalWithErrorId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành (Thập phân)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị ở trạng thái đang tiến hành (thập phân) so với giá trị đích. Giá trị này có thể đóng góp vào mục tiêu nhưng chưa được tính là giá trị thực tế.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.InProgressDecimal); }
			set { Entity.Attributes[Fields.InProgressDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành (Số nguyên)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị ở trạng thái đang tiến hành (số nguyên) so với giá trị đích. Giá trị này có thể đóng góp vào mục tiêu nhưng chưa được tính là giá trị thực tế.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InProgressInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InProgressInteger); }
			set { Entity.Attributes[Fields.InProgressInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành (Tiền)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị ở trạng thái đang tiến hành (số tiền) so với giá trị đích. Giá trị này có thể đóng góp vào mục tiêu nhưng chưa được tính là giá trị thực tế.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.InProgressMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InProgressMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.InProgressMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành (Tiền) (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị giá trị ở trạng thái đang tiến hành (tiền) tính theo loại tiền gốc để theo dõi các kết quả mục tiêu so với giá trị đích.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.InProgressMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Description</strong>: Giá trị ở trạng thái đang tiến hành theo mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InProgressString
		{
			get { return Entity.GetAttributeValue<string>(Fields.InProgressString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Số liệu</para>
		/// <para><strong>Description</strong>: Cho biết loại số liệu là Số lượng hay Số tiền.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Số tiền</strong>]: true - [<strong>Tổng đếm</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Số tiền</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAmount
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAmount); }
			set { Entity.Attributes[Fields.IsAmount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Kỳ Mục tiêu</para>
		/// <para><strong>Description</strong>: Chọn liệu kỳ mục tiêu là kỳ tài chính hay kỳ tùy chỉnh.</para>
		/// <para><strong>Two Option</strong> - [<strong>Kỳ Tài chính</strong>]: true - [<strong>Kỳ Tùy chỉnh</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Kỳ Tài chính</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFiscalPeriodGoal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFiscalPeriodGoal); }
			set { Entity.Attributes[Fields.IsFiscalPeriodGoal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã thay thế</para>
		/// <para><strong>Description</strong>: Chọn liệu có cập nhật các trường tổng số hệ thống hay không. Nếu được đặt thành Có, lần tính tổng số hệ thống tiếp theo sẽ không cập nhật giá trị của các trường tổng số với giá trị được tính toán của hệ thống.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverridden); }
			set { Entity.Attributes[Fields.IsOverridden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thay thế</para>
		/// <para><strong>Description</strong>: Cho biết liệu có thể cập nhật giá trị của trường tổng số hệ thống hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverride
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverride); }
			set { Entity.Attributes[Fields.IsOverride] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Tính tổng số Lần cuối</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tính tổng số lần cuối mục tiêu. Ngày và giờ được hiển thị theo múi giờ đã chọn trong tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastRolledupDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastRolledupDate); }
			set { Entity.Attributes[Fields.LastRolledupDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số liệu Mục tiêu</para>
		/// <para><strong>Description</strong>: Chọn số liệu cho mục tiêu. Số liệu này xác định cách mục tiêu được theo dõi.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="metric"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MetricId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MetricId); }
			set { Entity.Attributes[Fields.MetricId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người quản lý</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục tiêu Cha</para>
		/// <para><strong>Description</strong>: Chọn mục tiêu cha nếu mục tiêu hiện tại là mục tiêu con. Tùy chọn này thiết lập mối quan hệ cha-con cho báo cáo và phân tích.</para>
		/// <para><strong>Lookup</strong>: <see cref="goal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentGoalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentGoalId); }
			set { Entity.Attributes[Fields.ParentGoalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phần trăm Đã đạt</para>
		/// <para><strong>Description</strong>: Hiển thị phần trăm đã đạt so với mục tiêu đích.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Percentage); }
			set { Entity.Attributes[Fields.Percentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Lỗi Trường Tổng số</para>
		/// <para><strong>Description</strong>: Mã lỗi được liên kết với trường tổng số.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RollupErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RollupErrorCode); }
			set { Entity.Attributes[Fields.RollupErrorCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ tính Tổng số của Mục tiêu Con</para>
		/// <para><strong>Description</strong>: Chọn liệu có chỉ tính tổng số dữ liệu của các mục tiêu con hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RollupOnlyFromChildGoals
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RollupOnlyFromChildGoals); }
			set { Entity.Attributes[Fields.RollupOnlyFromChildGoals] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Thực tế (Thập phân)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu thực tế cho mục tiêu (thập phân).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryActualDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryActualDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryActualDecimalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Thực tế (Số nguyên)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu thực tế cho mục tiêu (số nguyên).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollupQueryActualIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollupQueryActualIntegerId); }
			set { Entity.Attributes[Fields.RollupQueryActualIntegerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Thực tế (Tiền)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu thực tế cho mục tiêu (tiền).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryActualMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryActualMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryActualMoneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Trường Tổng số Tùy chỉnh (Thập phân)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu cho trường tổng số tùy chỉnh (thập phân).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomDecimalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Trường Tổng số Tùy chỉnh (Số nguyên)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu cho trường tổng số tùy chỉnh (số nguyên).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomIntegerId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomIntegerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Trường Tổng số Tùy chỉnh (Tiền)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu cho trường tổng số tùy chỉnh (tiền).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomMoneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Đang tiến hành (Thập phân)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu cho trường tổng số ở trạng thái đang tiến hành (thập phân).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressDecimalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Đang tiến hành (Số nguyên)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu cho trường tổng số ở trạng thái đang tiến hành (số nguyên).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressIntegerId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressIntegerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Tính tổng số - Đang tiến hành (Tiền)</para>
		/// <para><strong>Description</strong>: Chọn truy vấn sẽ được sử dụng để tính toán dữ liệu cho trường tổng số ở trạng thái đang tiến hành (tiền).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressMoneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết mục tiêu đang ở trạng thái mở, đã hoàn thành hay bị hủy. Các mục tiêu đã hoàn thành và bị hủy ở trạng thái chỉ đọc và không chỉnh sửa được.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của mục tiêu.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích Dài hạn (Thập phân)</para>
		/// <para><strong>Description</strong>: Chọn đích dài hạn (thập phân) của mục tiêu để xác định cấp độ mục tiêu khó hoặc cao hơn thông thường.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StretchTargetDecimal); }
			set { Entity.Attributes[Fields.StretchTargetDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích Dài hạn (Số nguyên)</para>
		/// <para><strong>Description</strong>: Chọn đích dài hạn (số nguyên) của mục tiêu để xác định cấp độ mục tiêu khó hoặc cao hơn thông thường.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StretchTargetInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StretchTargetInteger); }
			set { Entity.Attributes[Fields.StretchTargetInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích Dài hạn (Tiền)</para>
		/// <para><strong>Description</strong>: Chọn đích dài hạn (tiền) để xác định cấp độ mục tiêu khó hoặc cao hơn thông thường.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StretchTargetMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StretchTargetMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.StretchTargetMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích Dài hạn (Tiền) (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị đích dài hạn (tiền) theo loại tiền gốc để chỉ ra cấp độ mục tiêu khó hoặc cao hơn thông thường.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StretchTargetMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích Dài hạn</para>
		/// <para><strong>Description</strong>: Giá trị đích dài hạn cho tất cả các loại dữ liệu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StretchTargetString
		{
			get { return Entity.GetAttributeValue<string>(Fields.StretchTargetString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích (Thập phân)</para>
		/// <para><strong>Description</strong>: Chọn đích theo mục tiêu thuộc loại thập phân để theo dõi các dữ liệu bao gồm một phần số, chẳng hạn như số cân nặng đã bán của sản phẩm được bán theo trọng lượng.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.TargetDecimal); }
			set { Entity.Attributes[Fields.TargetDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích (Số nguyên)</para>
		/// <para><strong>Description</strong>: Chọn đích theo mục tiêu thuộc loại số nguyên để theo dõi bất kỳ dữ liệu nào có thể tính theo số nguyên, chẳng hạn số chiếc đã bán.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TargetInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TargetInteger); }
			set { Entity.Attributes[Fields.TargetInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích (Tiền)</para>
		/// <para><strong>Description</strong>: Chọn đích theo mục tiêu (tiền) để theo dõi số tiền chẳng hạn như doanh thu từ một sản phẩm.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TargetMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TargetMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TargetMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích (Tiền) (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị đích theo mục tiêu của loại tiền, tính theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TargetMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đích</para>
		/// <para><strong>Description</strong>: Giá trị đích của mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TargetString
		{
			get { return Entity.GetAttributeValue<string>(Fields.TargetString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Nhập tiêu đề hoặc tên mô tả mục tiêu.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Cây</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của cây mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TreeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TreeId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}