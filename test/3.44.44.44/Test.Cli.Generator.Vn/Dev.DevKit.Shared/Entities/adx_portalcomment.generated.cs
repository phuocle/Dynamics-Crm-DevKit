//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:03
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc gọi điện thoại</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Cuoc_goi_dien_thoai = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Cuoc_hen = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn lặp lại</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Cuoc_hen_lap_lai = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận xét Cổng thông tin</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Nhan_xet_Cong_thong_tin = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhiệm vụ</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Nhiem_vu = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy đổi Lời mời</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Quy_doi_Loi_moi = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư tín</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Thu_tin = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trò chuyện qua Teams</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Tro_chuyen_qua_Teams = 10_185
	}
	public enum adx_PortalCommentDirectionCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đến</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Den = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Di = 2
	}
	public enum Community
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Facebook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khac = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Twitter = 2
	}
	public enum DeliveryPriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bình thường</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Binh_thuong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cao</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thấp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thap = 0
	}
	public enum InstanceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản ghi chủ Lặp lại</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ban_ghi_chu_Lap_lai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Lặp lại</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Lap_lai = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ Lặp lại</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ngoai_le_Lap_lai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ Tương lai Lặp lại</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Ngoai_le_Tuong_lai_Lap_lai = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Lặp lại</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Phien_ban_Lap_lai = 2
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bình thường</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Binh_thuong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cao</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thấp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thap = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn tất</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_hoan_tat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_huy = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lên lịch</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_len_lich = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mở</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Mo = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã gửi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Da_hoan_tat</strong></para>
		/// </summary>
		Da_gui = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Da_huy</strong></para>
		/// </summary>
		Da_huy = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lên lịch</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Da_len_lich</strong></para>
		/// </summary>
		Da_len_lich = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã nhận</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Da_hoan_tat</strong></para>
		/// </summary>
		Da_nhan = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mở</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Mo = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class adx_portalcomment : EntityBase
	{
		public struct Fields
		{
			public const string ActivityAdditionalParams = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActualDurationMinutes = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string adx_PortalCommentDirectionCode = "adx_portalcommentdirectioncode";
			public const string BCC = "bcc";
			public const string CC = "cc";
			public const string Community = "community";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Customers = "customers";
			public const string DeliveryLastAttemptedOn = "deliverylastattemptedon";
			public const string DeliveryPriorityCode = "deliveryprioritycode";
			public const string Description = "description";
			public const string ExchangeItemId = "exchangeitemid";
			public const string ExchangeRate = "exchangerate";
			public const string ExchangeWebLink = "exchangeweblink";
			public const string From = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InstanceTypeCode = "instancetypecode";
			public const string IsBilled = "isbilled";
			public const string IsMapiPrivate = "ismapiprivate";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LeftVoiceMail = "leftvoicemail";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OnHoldTime = "onholdtime";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Partners = "partners";
			public const string PostponeActivityProcessingUntil = "postponeactivityprocessinguntil";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RequiredAttendees = "requiredattendees";
			public const string Resources = "resources";
			public const string ScheduledDurationMinutes = "scheduleddurationminutes";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SenderMailboxId = "sendermailboxid";
			public const string SentOn = "senton";
			public const string SeriesId = "seriesid";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subject = "subject";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string To = "to";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "adx_portalcomment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10311;
		public const string EntityCollectionSchemaName = "adx_portalcomments";
		public const string EntityDisplayCollectionName = "Nhận xét Cổng thông tin";
		public const string DisplayName = "Nhận xét Cổng thông tin";
		public const string EntitySetName = "adx_portalcomments";
		public const string EntityLogicalCollectionName = "adx_portalcomments";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "adx_portalcomment";
		[DebuggerNonUserCode()]
		public adx_portalcomment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public adx_portalcomment(Guid adx_portalcommentId)
		{
			Entity = new Entity(EntityLogicalName, adx_portalcommentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public adx_portalcomment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="adx_portalcomment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public adx_portalcomment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="adx_portalcomment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public adx_portalcomment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new adx_portalcomment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="adx_portalcomment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public adx_portalcomment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new adx_portalcomment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public adx_portalcomment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham số bổ sung của hoạt động</para>
		/// <para><strong>Description</strong>: Thông tin bổ sung được cung cấp bởi ứng dụng bên ngoài dưới dạng JSON. Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
			set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hoạt động.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Hoạt động</para>
		/// <para><strong>Description</strong>: Loại hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian Thực tế</para>
		/// <para><strong>Description</strong>: Khoảng thời gian thực tế của hoạt động tính bằng phút.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
			set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc Thực tế</para>
		/// <para><strong>Description</strong>: Thời gian kết thúc thực tế của hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu Thực tế</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu thực tế của hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hướng</para>
		/// <para><strong>Description</strong>: Cho biết Hoạt động web là do Người dùng cổng thông tin hay Người dùng Dynamics 365 tạo.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.adx_PortalCommentDirectionCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.adx_PortalCommentDirectionCode.Den"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.adx_PortalCommentDirectionCode? adx_PortalCommentDirectionCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adx_PortalCommentDirectionCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.adx_PortalCommentDirectionCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adx_PortalCommentDirectionCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adx_PortalCommentDirectionCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BCC</para>
		/// <para><strong>Description</strong>: Người nhận bản sao ẩn (bcc) của hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> BCC
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.BCC).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.BCC] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CC</para>
		/// <para><strong>Description</strong>: Người nhận bản sao (cc) của hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> CC
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.CC).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.CC] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kênh Xã hội</para>
		/// <para><strong>Description</strong>: Cho biết nguồn gốc của người liên hệ về hoạt động xã hội, chẳng hạn như từ Twitter hay Facebook. Đây là trường chỉ đọc.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.Community"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.Community? Community
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Community);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.Community)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Community] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Community] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo activitypointer.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng</para>
		/// <para><strong>Description</strong>: Khách hàng có hoạt động được liên kết.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Customers
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Customers).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Customers] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày đã thử gửi gần đây nhất</para>
		/// <para><strong>Description</strong>: Ngày và giờ của lần gửi hoạt động cuối cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DeliveryLastAttemptedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DeliveryLastAttemptedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ưu tiên Gửi</para>
		/// <para><strong>Description</strong>: Ưu tiên gửi hoạt động đến máy chủ email.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.DeliveryPriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.DeliveryPriorityCode.Binh_thuong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.DeliveryPriorityCode? DeliveryPriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeliveryPriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.DeliveryPriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeliveryPriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeliveryPriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả hoạt động.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID mục Exchange</para>
		/// <para><strong>Description</strong>: ID thông báo của hoạt động được trả về từ Exchange Server.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeItemId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeItemId); }
			set { Entity.Attributes[Fields.ExchangeItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền liên kết với activitypointer theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange WebLink</para>
		/// <para><strong>Description</strong>: Hiển thị đường liên kết web của Hoạt động thuộc loại email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeWebLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeWebLink); }
			set { Entity.Attributes[Fields.ExchangeWebLink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ</para>
		/// <para><strong>Description</strong>: Người bắt đầu hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> From
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.From).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.From] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự của lượt nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Phiên bản Lặp lại</para>
		/// <para><strong>Description</strong>: Loại phiên bản của chuỗi lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.InstanceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.InstanceTypeCode.Khong_Lap_lai"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.InstanceTypeCode? InstanceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.InstanceTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được lập hóa đơn</para>
		/// <para><strong>Description</strong>: Thông tin về việc hoạt động có được lập hóa đơn như một phần trong việc giải quyết trường hợp hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Riêng tư</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMapiPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMapiPrivate); }
			set { Entity.Attributes[Fields.IsMapiPrivate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động Thông thường</para>
		/// <para><strong>Description</strong>: Thông tin về việc hoạt động là loại hoạt động thông thường hay loại sự kiện.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình làm việc Được tạo</para>
		/// <para><strong>Description</strong>: Thông tin về việc hoạt động có được tạo từ quy tắc quy trình làm việc hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tạm giữ gần đây nhất</para>
		/// <para><strong>Description</strong>: Chứa nhãn ngày và giờ của lần tạm giữ gần đây nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Để lại Thư Thoại</para>
		/// <para><strong>Description</strong>: Đã để lại thư thoại</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? LeftVoiceMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.LeftVoiceMail); }
			set { Entity.Attributes[Fields.LeftVoiceMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi hoạt động lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cập nhật Lần cuối</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi hoạt động lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi activitypointer lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tạm giữ (phút)</para>
		/// <para><strong>Description</strong>: Hiển thị khoảng thời gian tính bằng phút mà bản ghi bị tạm giữ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia Tùy chọn</para>
		/// <para><strong>Description</strong>: Danh sách người tham dự tùy chọn cho hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> OptionalAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.OptionalAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.OptionalAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tổ chức</para>
		/// <para><strong>Description</strong>: Người tổ chức hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Organizer
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Organizer).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Organizer] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà cung cấp Thuê ngoài</para>
		/// <para><strong>Description</strong>: Nhà cung cấp thuê ngoài có hoạt động được liên kết.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Partners
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Partners).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Partners] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn xử lý hoạt động cho đến</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeActivityProcessingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeActivityProcessingUntil); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ưu tiên</para>
		/// <para><strong>Description</strong>: Mức ưu tiên của hoạt động.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.PriorityCode.Binh_thuong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đối tượng có hoạt động được liên kết.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="contact"/>, <see cref="interactionforemail"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia Bắt buộc</para>
		/// <para><strong>Description</strong>: Danh sách người tham dự bắt buộc cho hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> RequiredAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.RequiredAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.RequiredAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn lực</para>
		/// <para><strong>Description</strong>: Người dùng hoặc cơ sở/thiết bị cần thiết cho hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Resources
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Resources).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Resources] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian Theo lịch</para>
		/// <para><strong>Description</strong>: Khoảng thời gian theo lịch của hoạt động, tính bằng phút.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
			set { Entity.Attributes[Fields.ScheduledDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Hết hạn</para>
		/// <para><strong>Description</strong>: Thời gian kết thúc theo lịch của hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Bắt đầu</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu theo lịch của hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư của Người gửi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hộp thư liên kết với người gửi thư email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SenderMailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SenderMailboxId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Gửi</para>
		/// <para><strong>Description</strong>: Ngày và giờ gửi hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SentOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SentOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Chuỗi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất chỉ định ID chuỗi lặp lại của phiên bản.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SeriesId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SeriesId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận cấp độ dịch vụ</para>
		/// <para><strong>Description</strong>: Chọn thỏa thuận cấp độ dịch vụ (SLA) mà bạn muốn áp dụng cho bản ghi trường hợp.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận cấp độ dịch vụ đã áp dụng gần nhất</para>
		/// <para><strong>Description</strong>: Thỏa thuận cấp độ dịch vụ gần đây nhất đã được áp dụng cho trường hợp này. Đây là trường chỉ dùng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sắp xếp ngày</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ sắp xếp hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giai đoạn của Quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Giai đoạn.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Hoạt động</para>
		/// <para><strong>Description</strong>: Trạng thái của hoạt động.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StateCode.Mo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của hoạt động.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.adx_portalcommentOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Description</strong>: Chủ đề liên kết với hoạt động.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tới</para>
		/// <para><strong>Description</strong>: Người nhận hoạt động.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> To
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.To).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.To] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của loại tiền liên kết với activitypointer.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường ngang</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}