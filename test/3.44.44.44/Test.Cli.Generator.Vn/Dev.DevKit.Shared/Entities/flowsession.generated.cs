//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:26
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.flowsessionOptionSets
{
	public enum RunMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Có giám sát</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Co_giam_sat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cục bộ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Cuc_bo = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không giám sát</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Khong_giam_sat = 2
	}
	public enum RunSessionMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hình trong hình</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hinh_trong_hinh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thể áp dụng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_the_ap_dung = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Mac_dinh = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị lỗi</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Bi_loi = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bỏ qua</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_bo_qua_12 = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bỏ qua</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_bo_qua_5 = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã chấm dứt</para>
		/// <para><strong>Value</strong>: 14</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Da_cham_dut = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hết thời gian chờ</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_het_thoi_gian_cho = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_huy = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy bỏ</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_huy_bo = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạm dừng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_tam_dung = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã thành công</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_thanh_cong = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã treo</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_treo = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 13</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Da_xoa = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chạy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Dang_chay = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Dang_cho = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không chỉ định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_chi_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Khong_thanh_cong = 8
	}
	public enum TriggerType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiFlow</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		ApiFlow = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cục bộ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cuc_bo = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlow</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DesktopFlow = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: RunDesktopFlowDataverseApi</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		RunDesktopFlowDataverseApi = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class flowsession : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalContext = "additionalcontext";
			public const string AdditionalContext_name = "additionalcontext_name";
			public const string CallbackUrl = "callbackurl";
			public const string CompletedOn = "completedon";
			public const string ConnectionId = "connectionid";
			public const string Context = "context";
			public const string CorrelationId = "correlationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorCode = "errorcode";
			public const string ErrorDetails = "errordetails";
			public const string ErrorInnerError = "errorinnererror";
			public const string ErrorMessage = "errormessage";
			public const string flowsessionId = "flowsessionid";
			public const string Gateway = "gateway";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Inputs = "inputs";
			public const string Inputs_name = "inputs_name";
			public const string MachineGroupId = "machinegroupid";
			public const string MachineId = "machineid";
			public const string MachinePercentCpuUsage = "machinepercentcpuusage";
			public const string MachinePercentRamUsage = "machinepercentramusage";
			public const string MachineRamUsage = "machineramusage";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string Outputs = "outputs";
			public const string Outputs_name = "outputs_name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentCloudFlowRunSequenceId = "parentcloudflowrunsequenceid";
			public const string ParentWorkflowId = "parentworkflowid";
			public const string ProcessVersion = "processversion";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RunDetails = "rundetails";
			public const string RunDuration = "runduration";
			public const string RunExecutionDuration = "runexecutionduration";
			public const string RunMode = "runmode";
			public const string RunSessionMode = "runsessionmode";
			public const string RunWaitDuration = "runwaitduration";
			public const string SessionUsername = "sessionusername";
			public const string SessionUserSID = "sessionusersid";
			public const string StartedOn = "startedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TriggerType = "triggertype";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "flowsession";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4720;
		public const string EntityCollectionSchemaName = "flowsessions";
		public const string EntityDisplayCollectionName = "Phiên dòng";
		public const string DisplayName = "Phiên dòng";
		public const string EntitySetName = "flowsessions";
		public const string EntityLogicalCollectionName = "flowsessions";
		public const string EntityPrimaryIdAttribute = "flowsessionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "flowsession";
		[DebuggerNonUserCode()]
		public flowsession()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowsession(Guid flowsessionId)
		{
			Entity = new Entity(EntityLogicalName, flowsessionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowsession(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowsession"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public flowsession(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowsession"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowsession(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowsession(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowsession"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowsession(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowsession(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowsession(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AdditionalContext</para>
		/// <para><strong>Description</strong>: Ngữ cảnh bổ sung về phiên dòng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalContext_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalContext_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL cuộc gọi lại</para>
		/// <para><strong>Description</strong>: URL sẽ được gọi sau khi phiên dòng quy trình hoàn tất.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CallbackUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.CallbackUrl); }
			set { Entity.Attributes[Fields.CallbackUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoàn thành vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ hoàn thành phiên dòng.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
			set { Entity.Attributes[Fields.CompletedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID kết nối</para>
		/// <para><strong>Description</strong>: ID của kết nối được sử dụng trong lần chạy dòng màn hình nền.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectionId); }
			set { Entity.Attributes[Fields.ConnectionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngữ cảnh</para>
		/// <para><strong>Description</strong>: Ngữ cảnh về phiên dòng.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Context
		{
			get { return Entity.GetAttributeValue<string>(Fields.Context); }
			set { Entity.Attributes[Fields.Context] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CorrelationId</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất được dùng để xét tương quan giữa nhiều yêu cầu SDK và hoạt động thực thi quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạo vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ErrorCode</para>
		/// <para><strong>Description</strong>: Mã lỗi mô tả sự cố khi thực thi phiên dòng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ErrorDetails</para>
		/// <para><strong>Description</strong>: Chi tiết sự cố khi thực thi phiên dòng.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDetails); }
			set { Entity.Attributes[Fields.ErrorDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ErrorInnerError</para>
		/// <para><strong>Description</strong>: Thông tin cụ thể về lỗi trong quá trình thực thi phiên dòng quy trình.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorInnerError
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorInnerError); }
			set { Entity.Attributes[Fields.ErrorInnerError] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ErrorMessage</para>
		/// <para><strong>Description</strong>: Thông báo mô tả sự cố khi thực thi phiên dòng.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorMessage); }
			set { Entity.Attributes[Fields.ErrorMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên dòng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid flowsessionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.flowsessionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cổng kết nối</para>
		/// <para><strong>Description</strong>: Tên của cổng kết nối được sử dụng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Gateway
		{
			get { return Entity.GetAttributeValue<string>(Fields.Gateway); }
			set { Entity.Attributes[Fields.Gateway] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu vào</para>
		/// <para><strong>Description</strong>: Đầu vào được tạo từ hoạt động thực thi phiên dòng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Inputs_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Inputs_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm máy trong dòng quy trình</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachinegroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MachineGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MachineGroupId); }
			set { Entity.Attributes[Fields.MachineGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Máy trong dòng quy trình</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachine"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MachineId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MachineId); }
			set { Entity.Attributes[Fields.MachineId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ lệ sử dụng CPU của máy</para>
		/// <para><strong>Description</strong>: Tỷ lệ sử dụng CPU của máy</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? MachinePercentCpuUsage
		{
			get { return Entity.GetAttributeValue<double?>(Fields.MachinePercentCpuUsage); }
			set { Entity.Attributes[Fields.MachinePercentCpuUsage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ lệ sử dụng RAM của máy</para>
		/// <para><strong>Description</strong>: Tỷ lệ sử dụng RAM của máy</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? MachinePercentRamUsage
		{
			get { return Entity.GetAttributeValue<double?>(Fields.MachinePercentRamUsage); }
			set { Entity.Attributes[Fields.MachinePercentRamUsage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mức sử dụng RAM của máy</para>
		/// <para><strong>Description</strong>: Mức sử dụng RAM của máy ở Mo</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MachineRamUsage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MachineRamUsage); }
			set { Entity.Attributes[Fields.MachineRamUsage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên thực thể tùy chỉnh.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu ra</para>
		/// <para><strong>Description</strong>: Đầu ra được tạo từ hoạt động thực thi phiên dòng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Outputs_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Outputs_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo bản ghi vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID Chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID trình tự phiên chạy dòng đám mây gốc</para>
		/// <para><strong>Description</strong>: ID trình tự của phiên chạy dòng đám mây gốc, chỉ sử dụng khi Dòng màn hình nền được chạy bằng một dòng đám mây.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParentCloudFlowRunSequenceId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParentCloudFlowRunSequenceId); }
			set { Entity.Attributes[Fields.ParentCloudFlowRunSequenceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ParentWorkflowId</para>
		/// <para><strong>Description</strong>: Id of the parent workflow, cloud flow or desktop flow.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParentWorkflowId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParentWorkflowId); }
			set { Entity.Attributes[Fields.ParentWorkflowId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản quy trình</para>
		/// <para><strong>Description</strong>: Phiên bản của quy trình được liên kết với phiên dòng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessVersion); }
			set { Entity.Attributes[Fields.ProcessVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Về</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quy trình được liên kết với phiên dòng.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RunDetails</para>
		/// <para><strong>Description</strong>: Chi tiết về phiên chạy.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RunDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.RunDetails); }
			set { Entity.Attributes[Fields.RunDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RunDuration</para>
		/// <para><strong>Description</strong>: Thời lượng phiên chạy.</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RunDuration
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RunDuration); }
			set { Entity.Attributes[Fields.RunDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RunExecutionDuration</para>
		/// <para><strong>Description</strong>: Thời lượng thực thi phiên chạy.</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RunExecutionDuration
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RunExecutionDuration); }
			set { Entity.Attributes[Fields.RunExecutionDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ chạy</para>
		/// <para><strong>Description</strong>: Cho biết chế độ chạy của lượt chạy dòng màn hình nền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunMode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunMode? RunMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RunMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RunMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RunMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ phiên chạy</para>
		/// <para><strong>Description</strong>: Cho biết chế độ phiên chạy của dòng màn hình nền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunSessionMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunSessionMode.Khong_the_ap_dung"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunSessionMode? RunSessionMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RunSessionMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.RunSessionMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RunSessionMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RunSessionMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RunWaitDuration</para>
		/// <para><strong>Description</strong>: Thời gian mà phiên chạy đã dành để chờ đợi.</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RunWaitDuration
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RunWaitDuration); }
			set { Entity.Attributes[Fields.RunWaitDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên người dùng phiên</para>
		/// <para><strong>Description</strong>: Tên người dùng được sử dụng trong lượt chạy Dòng màn hình nền.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SessionUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.SessionUsername); }
			set { Entity.Attributes[Fields.SessionUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SID người dùng phiên</para>
		/// <para><strong>Description</strong>: SID của người dùng được sử dụng trong lượt chạy Dòng màn hình nền.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SessionUserSID
		{
			get { return Entity.GetAttributeValue<string>(Fields.SessionUserSID); }
			set { Entity.Attributes[Fields.SessionUserSID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ bắt đầu phiên dòng.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
			set { Entity.Attributes[Fields.StartedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái phiên dòng</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.flowsessionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của phiên dòng</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.flowsessionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản của quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại trình kích hoạt</para>
		/// <para><strong>Description</strong>: Cho biết loại trình kích hoạt được sử dụng để chạy dòng màn hình nền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowsessionOptionSets.TriggerType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowsessionOptionSets.TriggerType? TriggerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TriggerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowsessionOptionSets.TriggerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TriggerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TriggerType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}