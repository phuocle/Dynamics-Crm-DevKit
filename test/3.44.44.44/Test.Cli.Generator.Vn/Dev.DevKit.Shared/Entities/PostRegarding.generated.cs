//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:51
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PostRegardingOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PostRegarding : EntityBase
	{
		public struct Fields
		{
			public const string LatestAutoPostModifiedOn = "latestautopostmodifiedon";
			public const string LatestManualPostModifiedOn = "latestmanualpostmodifiedon";
			public const string PostRegardingId = "postregardingid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectOwnerId = "regardingobjectownerid";
			public const string RegardingObjectOwningBusinessUnit = "regardingobjectowningbusinessunit";
			public const string RegardingObjectTypeCodeForSharing = "regardingobjecttypecodeforsharing";
		}
		public const string EntityLogicalName = "postregarding";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8002;
		public const string EntityCollectionSchemaName = "PostRegardings";
		public const string EntityDisplayCollectionName = "Bản lưu ý bài đăng";
		public const string DisplayName = "Bản lưu ý bài đăng";
		public const string EntitySetName = "postregardings";
		public const string EntityLogicalCollectionName = "postregardings";
		public const string EntityPrimaryIdAttribute = "postregardingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "PostRegarding";
		[DebuggerNonUserCode()]
		public PostRegarding()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PostRegarding(Guid PostRegardingId)
		{
			Entity = new Entity(EntityLogicalName, PostRegardingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PostRegarding(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PostRegarding"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PostRegarding(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PostRegarding"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PostRegarding(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PostRegarding(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PostRegarding"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PostRegarding(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PostRegarding(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PostRegarding(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài đăng tự động lần cuối</para>
		/// <para><strong>Description</strong>: Ngày cuối cùng đăng bài tự động về thực thể liên quan</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestAutoPostModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestAutoPostModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài đăng thủ công lần cuối</para>
		/// <para><strong>Description</strong>: Ngày cuối cùng đăng bài thủ công về thực thể liên quan</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestManualPostModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestManualPostModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PostRegardingId</para>
		/// <para><strong>Description</strong>: Hiện ID của bản ghi mà bài đăng tham chiếu đến.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PostRegardingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PostRegardingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RegardingObjectId</para>
		/// <para><strong>Description</strong>: Chọn bản ghi liên quan đến bài đăng.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="appointment"/>, <see cref="contact"/>, <see cref="externalparty"/>, <see cref="knowledgearticle"/>, <see cref="phonecall"/>, <see cref="processsession"/>, <see cref="queue"/>, <see cref="recurringappointmentmaster"/>, <see cref="systemuser"/>, <see cref="task"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu đối tượng liên quan.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwnerId); }
			set { Entity.Attributes[Fields.RegardingObjectOwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đối tượng liên quan sở hữu bơn vị kinh doanh</para>
		/// <para><strong>Description</strong>: Chọn đơn vị kinh doanh sở hữu đối tượng liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RegardingObjectTypeCodeForSharing</para>
		/// <para><strong>Description</strong>: Chỉ định loại thực thể của đối tượng liên quan để chia sẻ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RegardingObjectTypeCodeForSharing
		{
			get { return Entity.GetAttributeValue<string>(Fields.RegardingObjectTypeCodeForSharing); }
		}
	}
}