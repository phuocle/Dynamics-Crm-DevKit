//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:19
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SocialInsightsConfigurationOptionSets
{
	public enum FormTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu hệ thống</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Bieu_mau_he_thong = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu người dùng</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		Bieu_mau_nguoi_dung = 1_031
	}
	public enum SocialDataItemType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lớp</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lop = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục tìm kiếm</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Muc_tim_kiem = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SocialInsightsConfiguration : EntityBase
	{
		public struct Fields
		{
			public const string ControlId = "controlid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string FormId = "formid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string SocialDataItemId = "socialdataitemid";
			public const string SocialDataItemType = "socialdataitemtype";
			public const string SocialDataParameters = "socialdataparameters";
			public const string SocialInsightsConfigurationId = "socialinsightsconfigurationid";
		}
		public const string EntityLogicalName = "socialinsightsconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1300;
		public const string EntityCollectionSchemaName = "SocialInsightsConfigurations";
		public const string EntityDisplayCollectionName = "SocialInsightsConfigurations";
		public const string DisplayName = "SocialInsightsConfiguration";
		public const string EntitySetName = "socialinsightsconfigurations";
		public const string EntityLogicalCollectionName = "socialinsightsconfigurations";
		public const string EntityPrimaryIdAttribute = "socialinsightsconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "SocialInsightsConfiguration";
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration(Guid SocialInsightsConfigurationId)
		{
			Entity = new Entity(EntityLogicalName, SocialInsightsConfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SocialInsightsConfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SocialInsightsConfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SocialInsightsConfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SocialInsightsConfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SocialInsightsConfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SocialInsightsConfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id kiểm soát</para>
		/// <para><strong>Description</strong>: Id của kiểm soát.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ControlId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ControlId); }
			set { Entity.Attributes[Fields.ControlId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu đã liên kết</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của biểu mẫu có liên kết với lượt thích.</para>
		/// <para><strong>Lookup</strong>: <see cref="post"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FormId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FormId); }
			set { Entity.Attributes[Fields.FormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản ghi đã liên kết.</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id mục dữ liệu mạng xã hội</para>
		/// <para><strong>Description</strong>: Id mục dữ liệu cho dữ liệu trên mạng xã hội.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SocialDataItemId
		{
			get { return Entity.GetAttributeValue<string>(Fields.SocialDataItemId); }
			set { Entity.Attributes[Fields.SocialDataItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại mục dữ liệu mạng xã hội</para>
		/// <para><strong>Description</strong>: Loại của mục dữ liệu trên mạng xã hội.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialInsightsConfigurationOptionSets.SocialDataItemType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialInsightsConfigurationOptionSets.SocialDataItemType.Muc_tim_kiem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialInsightsConfigurationOptionSets.SocialDataItemType? SocialDataItemType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SocialDataItemType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialInsightsConfigurationOptionSets.SocialDataItemType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SocialDataItemType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SocialDataItemType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham số dữ liệu mạng xã hội</para>
		/// <para><strong>Description</strong>: Tham số dùng để kết xuất dữ liệu trên mạng xã hội.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SocialDataParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.SocialDataParameters); }
			set { Entity.Attributes[Fields.SocialDataParameters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SocialInsightsConfigurationId</para>
		/// <para><strong>Description</strong>: Hiện ID của cấu hình hiểu biết xã hội.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SocialInsightsConfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SocialInsightsConfigurationId] = value;
				Entity.Id = value;
			}
		}
	}
}