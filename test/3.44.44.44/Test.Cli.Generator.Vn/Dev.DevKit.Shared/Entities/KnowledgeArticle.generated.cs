//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets
{
	public enum ExpiredReviewOptions
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cần cập nhật</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Can_cap_nhat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lưu trữ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Luu_tru = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xuất bản lại</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Xuat_ban_lai = 1
	}
	public enum msdyn_agentreviewstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Reviewed</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Not_Reviewed = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reviewed By Agent</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Reviewed_By_Agent = 100_000_001
	}
	public enum msdyn_compliancestatecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliant</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Compliant = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non Compliant</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Non_Compliant = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Pending = 100_000_002
	}
	public enum Review
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bi_tu_choi = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phê duyệt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phe_duyet = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ban_nhap = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hết hạn</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Da_het_han = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lên lịch</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_len_lich = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã loại bỏ</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Da_loai_bo = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lưu trữ</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Da_luu_tru = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phê duyệt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_phe_duyet = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xuất bản</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xuat_ban = 3
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Ban_nhap</strong></para>
		/// </summary>
		Ban_nhap = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Da_het_han</strong></para>
		/// </summary>
		Bi_tu_choi_11 = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 14</para>
		/// <para><strong>StateCode.Da_loai_bo</strong></para>
		/// </summary>
		Bi_tu_choi_14 = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cần đánh giá</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Ban_nhap</strong></para>
		/// </summary>
		Can_danh_gia_3 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cần đánh giá</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Da_xuat_ban</strong></para>
		/// </summary>
		Can_danh_gia_8 = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã đề xuất</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Ban_nhap</strong></para>
		/// </summary>
		Da_de_xuat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hết hạn</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Da_het_han</strong></para>
		/// </summary>
		Da_het_han = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lên lịch</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Da_len_lich</strong></para>
		/// </summary>
		Da_len_lich = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã loại bỏ</para>
		/// <para><strong>Value</strong>: 13</para>
		/// <para><strong>StateCode.Da_loai_bo</strong></para>
		/// </summary>
		Da_loai_bo = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lưu trữ</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Da_luu_tru</strong></para>
		/// </summary>
		Da_luu_tru = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phê duyệt</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Da_phe_duyet</strong></para>
		/// </summary>
		Da_phe_duyet = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xuất bản</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Da_xuat_ban</strong></para>
		/// </summary>
		Da_xuat_ban = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang cập nhật</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Da_xuat_ban</strong></para>
		/// </summary>
		Dang_cap_nhat = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang được đánh giá</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Ban_nhap</strong></para>
		/// </summary>
		Dang_duoc_danh_gia = 4
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class KnowledgeArticle : EntityBase
	{
		public struct Fields
		{
			public const string ArticlePublicNumber = "articlepublicnumber";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string ExpirationDate = "expirationdate";
			public const string ExpirationStateId = "expirationstateid";
			public const string ExpirationStatusId = "expirationstatusid";
			public const string ExpiredReviewOptions = "expiredreviewoptions";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsInternal = "isinternal";
			public const string IsLatestVersion = "islatestversion";
			public const string IsPrimary = "isprimary";
			public const string IsRootArticle = "isrootarticle";
			public const string Keywords = "keywords";
			public const string knowledgearticleId = "knowledgearticleid";
			public const string KnowledgeArticleViews = "knowledgearticleviews";
			public const string KnowledgeArticleViews_Date = "knowledgearticleviews_date";
			public const string KnowledgeArticleViews_State = "knowledgearticleviews_state";
			public const string LanguageLocaleId = "languagelocaleid";
			public const string MajorVersionNumber = "majorversionnumber";
			public const string MinorVersionNumber = "minorversionnumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentreviewstatus = "msdyn_agentreviewstatus";
			public const string msdyn_compliancestatecode = "msdyn_compliancestatecode";
			public const string msdyn_contentstore = "msdyn_contentstore";
			public const string msdyn_contentstore_name = "msdyn_contentstore_name";
			public const string msdyn_externalreferenceid = "msdyn_externalreferenceid";
			public const string msdyn_ingestedarticleurl = "msdyn_ingestedarticleurl";
			public const string msdyn_integratedsearchproviderid = "msdyn_integratedsearchproviderid";
			public const string msdyn_iscontentsyncedtostore = "msdyn_iscontentsyncedtostore";
			public const string msdyn_isingestedarticle = "msdyn_isingestedarticle";
			public const string msdyn_keywordsdescsuggestioncontrol = "msdyn_keywordsdescsuggestioncontrol";
			public const string msdyn_languagecode = "msdyn_languagecode";
			public const string msdyn_retrycountformigrationtocontentstore = "msdyn_retrycountformigrationtocontentstore";
			public const string msdyn_totalcasesimpacted = "msdyn_totalcasesimpacted";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentArticleContentId = "parentarticlecontentid";
			public const string PreviousArticleContentId = "previousarticlecontentid";
			public const string primaryauthorid = "primaryauthorid";
			public const string processid = "processid";
			public const string PublishOn = "publishon";
			public const string PublishStatusId = "publishstatusid";
			public const string Rating = "rating";
			public const string Rating_Count = "rating_count";
			public const string Rating_Date = "rating_date";
			public const string Rating_State = "rating_state";
			public const string Rating_Sum = "rating_sum";
			public const string ReadyForReview = "readyforreview";
			public const string Review = "review";
			public const string RootArticleId = "rootarticleid";
			public const string ScheduledStatusId = "scheduledstatusid";
			public const string SetCategoryAssociations = "setcategoryassociations";
			public const string stageid = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UpdateContent = "updatecontent";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "knowledgearticle";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9953;
		public const string EntityCollectionSchemaName = "KnowledgeArticles";
		public const string EntityDisplayCollectionName = "Bài viết trong cơ sở kiến thức";
		public const string DisplayName = "Bài viết trong cơ sở kiến thức";
		public const string EntitySetName = "knowledgearticles";
		public const string EntityLogicalCollectionName = "knowledgearticles";
		public const string EntityPrimaryIdAttribute = "knowledgearticleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "KnowledgeArticle";
		[DebuggerNonUserCode()]
		public KnowledgeArticle()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Guid KnowledgeArticleId)
		{
			Entity = new Entity(EntityLogicalName, KnowledgeArticleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public KnowledgeArticle(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="KnowledgeArticle"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="KnowledgeArticle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new KnowledgeArticle(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="KnowledgeArticle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new KnowledgeArticle(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public KnowledgeArticle(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số hiệu Bài viết Hiện hoạt</para>
		/// <para><strong>Description</strong>: Hiển thị ID được tạo tự động hiển thị cho khách hàng, đối tác và người dùng bên ngoài khác để tham chiếu cũng như tra cứu các bài viết.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ArticlePublicNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ArticlePublicNumber); }
			set { Entity.Attributes[Fields.ArticlePublicNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội dung</para>
		/// <para><strong>Description</strong>: Hiển thị nội dung của bài viết được lưu trữ ở định dạng HTML.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Tổng quan ngắn về bài viết, được sử dụng chủ yếu trong các kết quả tìm kiếm cũng như để tối ưu hóa công cụ tìm kiếm.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 155</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền được liên kết với KnowledgeArticle theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Hết hạn</para>
		/// <para><strong>Description</strong>: Nhập ngày hết hạn của bài viết. Hãy để trống trường này nếu không có ngày hết hạn.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpirationDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpirationDate); }
			set { Entity.Attributes[Fields.ExpirationDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Trạng thái Hết hạn</para>
		/// <para><strong>Description</strong>: Chứa id trạng thái hết hạn của thực thể.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpirationStateId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpirationStateId); }
			set { Entity.Attributes[Fields.ExpirationStateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Đã hết hạn</para>
		/// <para><strong>Description</strong>: Chứa id của trạng thái hết hạn của thực thể.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpirationStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpirationStatusId); }
			set { Entity.Attributes[Fields.ExpirationStatusId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tùy chọn đánh giá đã hết hạn</para>
		/// <para><strong>Description</strong>: Tùy chọn đánh giá đã hết hạn</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions? ExpiredReviewOptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExpiredReviewOptions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExpiredReviewOptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExpiredReviewOptions] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội bộ</para>
		/// <para><strong>Description</strong>: Cho biết bài viết này chỉ có thể xem trong nội bộ hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsInternal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsInternal); }
			set { Entity.Attributes[Fields.IsInternal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là phiên bản mới nhất</para>
		/// <para><strong>Description</strong>: Cho biết phiên bản nào của bài viết trong cơ sở kiến thức là phiên bản mới nhất.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLatestVersion
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLatestVersion); }
			set { Entity.Attributes[Fields.IsLatestVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài viết Chính</para>
		/// <para><strong>Description</strong>: Chọn xem bài viết có phải là bài viết chính hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrimary
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrimary); }
			set { Entity.Attributes[Fields.IsPrimary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài viết gốc</para>
		/// <para><strong>Description</strong>: Chọn xem bài viết có phải là bài viết gốc hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRootArticle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRootArticle); }
			set { Entity.Attributes[Fields.IsRootArticle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ khóa</para>
		/// <para><strong>Description</strong>: Nhập từ khóa được sử dụng cho các tìm kiếm trong bài viết trên cơ sở kiến thức. Phân tách các từ khóa bằng cách sử dụng các dấu phẩy.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.Keywords); }
			set { Entity.Attributes[Fields.Keywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài viết trong cơ sở kiến thức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid knowledgearticleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.knowledgearticleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dạng xem Bài viết trong Cơ sở kiến thức</para>
		/// <para><strong>Description</strong>: Hiển thị tổng số lượt xem bài viết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KnowledgeArticleViews
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KnowledgeArticleViews); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dạng xem Bài viết trong Cơ sở kiến thức (Thời gian Cập nhật Lần cuối)</para>
		/// <para><strong>Description</strong>: Ngày và giờ của Dạng xem Bài viết trong Cơ sở kiến thức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? KnowledgeArticleViews_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.KnowledgeArticleViews_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dạng xem Bài viết trong Cơ sở kiến thức (Trạng thái)</para>
		/// <para><strong>Description</strong>: Trạng thái của Dạng xem Bài viết trong Cơ sở kiến thức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KnowledgeArticleViews_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KnowledgeArticleViews_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ</para>
		/// <para><strong>Description</strong>: Chọn ngôn ngữ của nội dung bài viết.</para>
		/// <para><strong>Lookup</strong>: <see cref="languagelocale"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference LanguageLocaleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.LanguageLocaleId); }
			set { Entity.Attributes[Fields.LanguageLocaleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Chính</para>
		/// <para><strong>Description</strong>: Hiển thị số phiên bản chính của nội dung bài viết này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MajorVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MajorVersionNumber); }
			set { Entity.Attributes[Fields.MajorVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Phụ</para>
		/// <para><strong>Description</strong>: Hiển thị số phiên bản phụ của nội dung bài viết này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinorVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinorVersionNumber); }
			set { Entity.Attributes[Fields.MinorVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Review Status</para>
		/// <para><strong>Description</strong>: field to indicate the agent review status of the article</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus.Not_Reviewed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus? msdyn_agentreviewstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_agentreviewstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_agentreviewstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_agentreviewstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliance State</para>
		/// <para><strong>Description</strong>: field to indicate the compliance state of an article</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_compliancestatecode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_compliancestatecode? msdyn_compliancestatecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_compliancestatecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_compliancestatecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_compliancestatecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_compliancestatecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File storage content reference</para>
		/// <para><strong>Description</strong>: Stores the reference to content in file store</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_contentstore_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_contentstore_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Reference Id</para>
		/// <para><strong>Description</strong>: External Reference Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externalreferenceid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externalreferenceid); }
			set { Entity.Attributes[Fields.msdyn_externalreferenceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ingested Article URL</para>
		/// <para><strong>Description</strong>: Ingested article URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ingestedarticleurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ingestedarticleurl); }
			set { Entity.Attributes[Fields.msdyn_ingestedarticleurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Integrated Search Dataprovider Id</para>
		/// <para><strong>Description</strong>: Integrated Search Dataprovider Id</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_integratedsearchprovider"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_integratedsearchproviderid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_integratedsearchproviderid); }
			set { Entity.Attributes[Fields.msdyn_integratedsearchproviderid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is content synced to file storage</para>
		/// <para><strong>Description</strong>: Sets whether the article content is synced to file storage</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_iscontentsyncedtostore
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_iscontentsyncedtostore); }
			set { Entity.Attributes[Fields.msdyn_iscontentsyncedtostore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Ingested Article</para>
		/// <para><strong>Description</strong>: Value is true for all Ingested articles</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isingestedarticle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isingestedarticle); }
			set { Entity.Attributes[Fields.msdyn_isingestedarticle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords and Description Suggestion control</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_keywordsdescsuggestioncontrol
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_keywordsdescsuggestioncontrol); }
			set { Entity.Attributes[Fields.msdyn_keywordsdescsuggestioncontrol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language Code</para>
		/// <para><strong>Description</strong>: The Language Code that the article&apos;s content is in.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_languagecode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_languagecode); }
			set { Entity.Attributes[Fields.msdyn_languagecode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File storage migration retry count</para>
		/// <para><strong>Description</strong>: Displays the number of times migration to file storage retry is attempted for an article</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_retrycountformigrationtocontentstore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_retrycountformigrationtocontentstore); }
			set { Entity.Attributes[Fields.msdyn_retrycountformigrationtocontentstore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cases Impacted</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totalcasesimpacted
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totalcasesimpacted); }
			set { Entity.Attributes[Fields.msdyn_totalcasesimpacted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu bản ghi.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Nội dung Bài viết Mẹ</para>
		/// <para><strong>Description</strong>: Chứa id của nội dung bài viết mẹ được liên kết với thực thể.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentArticleContentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentArticleContentId); }
			set { Entity.Attributes[Fields.ParentArticleContentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Nội dung Bài viết Trước</para>
		/// <para><strong>Description</strong>: Hiển thị phiên bản lưu trữ bài viết hiện tại.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreviousArticleContentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreviousArticleContentId); }
			set { Entity.Attributes[Fields.PreviousArticleContentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Tác giả Chính</para>
		/// <para><strong>Description</strong>: Chứa id của tác giả chính được liên kết với bài viết.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference primaryauthorid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.primaryauthorid); }
			set { Entity.Attributes[Fields.primaryauthorid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID quy trình</para>
		/// <para><strong>Description</strong>: Chứa id của quy trình được liên kết với thực thể.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xuất bản vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ xuất bản bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PublishOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PublishOn); }
			set { Entity.Attributes[Fields.PublishOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Đã xuất bản</para>
		/// <para><strong>Description</strong>: Trạng thái xuất bản của bài viết.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PublishStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PublishStatusId); }
			set { Entity.Attributes[Fields.PublishStatusId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng</para>
		/// <para><strong>Description</strong>: Thông tin cho biết mức độ có ích của bản ghi liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rating
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Rating); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng(Số lượng)</para>
		/// <para><strong>Description</strong>: Số lượng xếp hạng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating_Count
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating_Count); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng(Thời gian cập nhật gần nhất)</para>
		/// <para><strong>Description</strong>: Ngày và giờ cho Xếp hạng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? Rating_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Rating_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng(Trạng thái)</para>
		/// <para><strong>Description</strong>: Trạng thái xếp hạng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng(tổng)</para>
		/// <para><strong>Description</strong>: Tổng số Xếp hạng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rating_Sum
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Rating_Sum); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sẵn sàng đánh giá</para>
		/// <para><strong>Description</strong>: Sẵn sàng đánh giá</para>
		/// <para><strong>Two Option</strong> - [<strong>Đã hoàn thành</strong>]: true - [<strong>Đánh dấu hoàn thành</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đánh dấu hoàn thành</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReadyForReview
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReadyForReview); }
			set { Entity.Attributes[Fields.ReadyForReview] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đánh giá</para>
		/// <para><strong>Description</strong>: Đánh giá</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review? Review
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Review);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Review] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Review] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Bài viết Gốc</para>
		/// <para><strong>Description</strong>: Chứa id của bài viết gốc.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RootArticleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RootArticleId); }
			set { Entity.Attributes[Fields.RootArticleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Theo lịch</para>
		/// <para><strong>Description</strong>: Chứa id của trạng thái theo lịch của thực thể.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledStatusId); }
			set { Entity.Attributes[Fields.ScheduledStatusId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đặt liên kết của thể loại</para>
		/// <para><strong>Description</strong>: Cho biết đã đặt các liên kết của thể loại hay chưa</para>
		/// <para><strong>Two Option</strong> - [<strong>Đã hoàn thành</strong>]: true - [<strong>Đánh dấu hoàn thành</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đánh dấu hoàn thành</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetCategoryAssociations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetCategoryAssociations); }
			set { Entity.Attributes[Fields.SetCategoryAssociations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id giai đoạn</para>
		/// <para><strong>Description</strong>: Chứa id của giai đoạn có thực thể được đặt.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết bài viết là bản nháp hay được xuất bản, được lưu trữ hoặc bị hủy bỏ. Bài viết nháp không sẵn có bên ngoài và có thể chỉnh sửa được. Bài viết đã xuất bản sẵn có bên ngoài, dựa trên các quyền hiện hành, nhưng không thể chỉnh sửa được. Tất cả các thay đổi về siêu dữ liệu sẽ được phản ánh trong phiên bản được xuất bản. Các bài viết được lưu trữ và bị hủy bỏ không sẵn có bên ngoài và không thể chỉnh sửa được.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode.Ban_nhap"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của bài viết.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Description</strong>: Chọn chủ đề của bài viết để hỗ trợ việc tìm kiếm bài viết. Bạn có thể đặt cấu hình chủ đề bên dưới Quản lý Doanh nghiệp trong vùng Thiết đặt.</para>
		/// <para><strong>Lookup</strong>: <see cref="subject"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Nhập tiêu đề cho bài viết.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền được liên kết với KnowledgeArticle theo loại tiền gốc.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Đường ngang</para>
		/// <para><strong>Description</strong>: Một danh sách các giá trị chuỗi phân tách bằng dấu phẩy cho biết mã định danh duy nhất của các giai đoạn trong Phiên bản dòng quy trình công việc theo thứ tự xuất hiện.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cập nhật nội dung</para>
		/// <para><strong>Description</strong>: Cập nhật nội dung</para>
		/// <para><strong>Two Option</strong> - [<strong>Nội dung được cập nhật</strong>]: true - [<strong>Đánh dấu khi hoàn thành</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đánh dấu khi hoàn thành</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UpdateContent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UpdateContent); }
			set { Entity.Attributes[Fields.UpdateContent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}