//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:26
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum DomainSetting
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tham gia AAD</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_tham_gia_AAD = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co = 0
	}
	public enum FlowGroupType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không dùng khóa</para>
		/// <para><strong>Value</strong>: 545,940,000</para>
		/// </summary>
		Khong_dung_khoa = 545_940_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặc định</para>
		/// <para><strong>Value</strong>: 545,940,002</para>
		/// </summary>
		Mac_dinh = 545_940_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu chuẩn</para>
		/// <para><strong>Value</strong>: 545,940,001</para>
		/// </summary>
		Tieu_chuan = 545_940_001
	}
	public enum ManagementType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Được quản lý</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Duoc_quan_ly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khach_hang = 0
	}
	public enum PreferredQueuingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ExtendedQueuePrioritization</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ExtendedQueuePrioritization = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: FIFO</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		FIFO = 0
	}
	public enum ProvisioningState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã cung cấp</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_cung_cap = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạo</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_tao = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang cung cấp</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_cung_cap = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Loi = 3
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bảo trì</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bao_tri = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã cách ly</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Bao_tri</strong></para>
		/// </summary>
		Da_cach_ly = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: HmgCmkOperation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Bao_tri</strong></para>
		/// </summary>
		HmgCmkOperation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: HmgIslandMove</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Bao_tri</strong></para>
		/// </summary>
		HmgIslandMove = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: KeyExpired</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		KeyExpired = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ManualMaintenance</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Bao_tri</strong></para>
		/// </summary>
		ManualMaintenance = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class flowmachinegroup : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string DomainSetting = "domainsetting";
			public const string FlowGroupType = "flowgrouptype";
			public const string flowmachinegroupId = "flowmachinegroupid";
			public const string flowmachineimage = "flowmachineimage";
			public const string flowmachinenetwork = "flowmachinenetwork";
			public const string GroupMetadata = "groupmetadata";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string KeyCreationDate = "keycreationdate";
			public const string KeyExpiryGracePeriod = "keyexpirygraceperiod";
			public const string KeyValidityPeriod = "keyvalidityperiod";
			public const string ManagementType = "managementtype";
			public const string MaxManagedMachineCount = "maxmanagedmachinecount";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PasswordChangedBy = "passwordchangedby";
			public const string PasswordChangedDate = "passwordchangeddate";
			public const string PreferredQueuingType = "preferredqueuingtype";
			public const string PrimaryKeyPackage = "primarykeypackage";
			public const string PrimaryPublicKey = "primarypublickey";
			public const string ProvisioningError = "provisioningerror";
			public const string ProvisioningState = "provisioningstate";
			public const string RotationStartedBy = "rotationstartedby";
			public const string SecondaryKeyPackage = "secondarykeypackage";
			public const string SecondaryPublicKey = "secondarypublickey";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string trytoreusewindowssession = "trytoreusewindowssession";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "flowmachinegroup";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10083;
		public const string EntityCollectionSchemaName = "flowmachinegroups";
		public const string EntityDisplayCollectionName = "Nhóm máy trong dòng quy trình";
		public const string DisplayName = "Nhóm máy trong dòng quy trình";
		public const string EntitySetName = "flowmachinegroups";
		public const string EntityLogicalCollectionName = "flowmachinegroups";
		public const string EntityPrimaryIdAttribute = "flowmachinegroupid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "flowmachinegroup";
		[DebuggerNonUserCode()]
		public flowmachinegroup()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowmachinegroup(Guid flowmachinegroupId)
		{
			Entity = new Entity(EntityLogicalName, flowmachinegroupId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowmachinegroup(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowmachinegroup"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public flowmachinegroup(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowmachinegroup"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowmachinegroup(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowmachinegroup(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowmachinegroup"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowmachinegroup(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowmachinegroup(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowmachinegroup(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả về Nhóm máy trong dòng quy trình này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết đặt miền</para>
		/// <para><strong>Description</strong>: Thiết đặt cho việc tham gia miền của các máy trong nhóm này.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.DomainSetting"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.DomainSetting.Khong_co"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.DomainSetting? DomainSetting
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DomainSetting);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.DomainSetting)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DomainSetting] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DomainSetting] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại nhóm dòng quy trình</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.FlowGroupType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.FlowGroupType.Khong_dung_khoa"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.FlowGroupType? FlowGroupType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FlowGroupType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.FlowGroupType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FlowGroupType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FlowGroupType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm máy trong dòng quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid flowmachinegroupId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hình ảnh máy trong dòng quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Hình ảnh máy trong dòng quy trình được liên kết với Nhóm máy trong dòng quy trình.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachineimage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference flowmachineimage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.flowmachineimage); }
			set { Entity.Attributes[Fields.flowmachineimage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mạng máy trong dòng quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Mạng máy trong dòng quy trình được liên kết với Nhóm máy trong dòng quy trình.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachinenetwork"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference flowmachinenetwork
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.flowmachinenetwork); }
			set { Entity.Attributes[Fields.flowmachinenetwork] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu nhóm</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupMetadata); }
			set { Entity.Attributes[Fields.GroupMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự của lần nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo khóa</para>
		/// <para><strong>Description</strong>: Ngày tạo khóa chính của nhóm.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? KeyCreationDate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.KeyCreationDate); }
			set { Entity.Attributes[Fields.KeyCreationDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời kì gia hạn sau khi hết hạn khóa nhóm</para>
		/// <para><strong>Description</strong>: Thời kì gia hạn để các máy và kết nối cập nhật trước khi xoay vòng chứng chỉ. Tính theo phút.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 64,800 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KeyExpiryGracePeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KeyExpiryGracePeriod); }
			set { Entity.Attributes[Fields.KeyExpiryGracePeriod] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời hạn hiệu lực của khóa nhóm</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 129,600 - <strong>MaxValue</strong>: 2,628,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KeyValidityPeriod
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KeyValidityPeriod); }
			set { Entity.Attributes[Fields.KeyValidityPeriod] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại quản lý</para>
		/// <para><strong>Description</strong>: Loại quản lý.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ManagementType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ManagementType.Khach_hang"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ManagementType? ManagementType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ManagementType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ManagementType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ManagementType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ManagementType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lượng máy được quản lý tối đa</para>
		/// <para><strong>Description</strong>: Số lượng máy được quản lý tối đa. Chỉ sử dụng cho các nhóm máy được quản lý.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxManagedMachineCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxManagedMachineCount); }
			set { Entity.Attributes[Fields.MaxManagedMachineCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên thực thể tùy chỉnh.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người thay đổi mật khẩu nhóm</para>
		/// <para><strong>Description</strong>: Người dùng đã khởi tạo việc thay đổi mật khẩu lần gần nhất.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PasswordChangedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PasswordChangedBy); }
			set { Entity.Attributes[Fields.PasswordChangedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày thay đổi mật khẩu nhóm</para>
		/// <para><strong>Description</strong>: Ngày thay đổi mật khẩu gần nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PasswordChangedDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PasswordChangedDate); }
			set { Entity.Attributes[Fields.PasswordChangedDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại hàng đợi ưa thích</para>
		/// <para><strong>Description</strong>: Cho biết loại hàng đợi ưa thích trong một nhóm máy nhất định</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.PreferredQueuingType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.PreferredQueuingType.ExtendedQueuePrioritization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.PreferredQueuingType? PreferredQueuingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredQueuingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.PreferredQueuingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredQueuingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredQueuingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gói khóa chính</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryKeyPackage
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryKeyPackage); }
			set { Entity.Attributes[Fields.PrimaryKeyPackage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa công khai chính</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryPublicKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryPublicKey); }
			set { Entity.Attributes[Fields.PrimaryPublicKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi cung cấp nhóm trong dòng quy trình</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProvisioningError
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProvisioningError); }
			set { Entity.Attributes[Fields.ProvisioningError] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái cung cấp</para>
		/// <para><strong>Description</strong>: Trạng thái cung cấp của nhóm máy được quản lý.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ProvisioningState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ProvisioningState.Da_tao"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ProvisioningState? ProvisioningState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProvisioningState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.ProvisioningState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProvisioningState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProvisioningState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người bắt đầu xoay vòng nhóm</para>
		/// <para><strong>Description</strong>: Người dùng đã khởi tạo việc xoay vòng khóa nhóm.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RotationStartedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RotationStartedBy); }
			set { Entity.Attributes[Fields.RotationStartedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gói khóa phụ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SecondaryKeyPackage
		{
			get { return Entity.GetAttributeValue<string>(Fields.SecondaryKeyPackage); }
			set { Entity.Attributes[Fields.SecondaryKeyPackage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa công khai phụ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SecondaryPublicKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.SecondaryPublicKey); }
			set { Entity.Attributes[Fields.SecondaryPublicKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của Nhóm máy trong dòng quy trình</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của Nhóm máy trong dòng quy trình</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachinegroupOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản của quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cố gắng sử dụng lại các phiên Windows không mở khóa.</para>
		/// <para><strong>Description</strong>: Cho biết liệu chúng tôi có cố gắng sử dụng lại các phiên Windows không mở khóa hay không. Giá trị mặc định là Không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? trytoreusewindowssession
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.trytoreusewindowssession); }
			set { Entity.Attributes[Fields.trytoreusewindowssession] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}