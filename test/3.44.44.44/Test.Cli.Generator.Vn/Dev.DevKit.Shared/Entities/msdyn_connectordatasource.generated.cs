//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_connectordatasourceOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_connectordatasource : EntityBase
	{
		public struct Fields
		{
			public const string msdyn_appsenvironment = "msdyn_appsenvironment";
			public const string msdyn_clientid = "msdyn_clientid";
			public const string msdyn_clientsecret = "msdyn_clientsecret";
			public const string msdyn_connectionreference = "msdyn_connectionreference";
			public const string msdyn_ConnectionReferenceId = "msdyn_connectionreferenceid";
			public const string msdyn_connectordatasourceId = "msdyn_connectordatasourceid";
			public const string msdyn_connectortype = "msdyn_connectortype";
			public const string msdyn_dataset_unresolvedvalue = "msdyn_dataset_unresolvedvalue";
			public const string msdyn_dataset_value = "msdyn_dataset_value";
			public const string msdyn_hasacling = "msdyn_hasacling";
			public const string msdyn_host = "msdyn_host";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_resource = "msdyn_resource";
			public const string msdyn_tenant = "msdyn_tenant";
			public const string msdyn_userauth = "msdyn_userauth";
		}
		public const string EntityLogicalName = "msdyn_connectordatasource";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10261;
		public const string EntityCollectionSchemaName = "msdyn_connectordatasources";
		public const string EntityDisplayCollectionName = "Nguồn dữ liệu trình kết nối ảo";
		public const string DisplayName = "Nguồn dữ liệu trình kết nối ảo";
		public const string EntitySetName = "msdyn_connectordatasources";
		public const string EntityLogicalCollectionName = "msdyn_connectordatasources";
		public const string EntityPrimaryIdAttribute = "msdyn_connectordatasourceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_connectordatasource";
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource(Guid msdyn_connectordatasourceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_connectordatasourceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_connectordatasource"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_connectordatasource"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_connectordatasource(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_connectordatasource"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_connectordatasource(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_connectordatasource(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: appsenvironment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_appsenvironment
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_appsenvironment); }
			set { Entity.Attributes[Fields.msdyn_appsenvironment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: clientid</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_clientid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_clientid); }
			set { Entity.Attributes[Fields.msdyn_clientid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: clientsecret</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_clientsecret
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_clientsecret); }
			set { Entity.Attributes[Fields.msdyn_clientsecret] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: connectionreference</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_connectionreference
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_connectionreference); }
			set { Entity.Attributes[Fields.msdyn_connectionreference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin tham chiếu kết nối</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Thông tin tham chiếu kết nối được liên kết với ConnectorDataSource.</para>
		/// <para><strong>Lookup</strong>: <see cref="connectionreference"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ConnectionReferenceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ConnectionReferenceId); }
			set { Entity.Attributes[Fields.msdyn_ConnectionReferenceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ConnectorDataSource</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_connectordatasourceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_connectordatasourceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại trình kết nối</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_connectortype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_connectortype); }
			set { Entity.Attributes[Fields.msdyn_connectortype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị chưa giải quyết của tập dữ liệu</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_dataset_unresolvedvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_dataset_unresolvedvalue); }
			set { Entity.Attributes[Fields.msdyn_dataset_unresolvedvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị tập dữ liệu</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_dataset_value
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_dataset_value); }
			set { Entity.Attributes[Fields.msdyn_dataset_value] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có ACLing</para>
		/// <para><strong>Description</strong>: Boolean cho biết liệu ACLing có được thực hiện hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_hasacling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_hasacling); }
			set { Entity.Attributes[Fields.msdyn_hasacling] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: máy chủ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_host
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_host); }
			set { Entity.Attributes[Fields.msdyn_host] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: nguồn lực</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_resource
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_resource); }
			set { Entity.Attributes[Fields.msdyn_resource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: đối tượng thuê</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_tenant
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_tenant); }
			set { Entity.Attributes[Fields.msdyn_tenant] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực người dùng</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_userauth
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_userauth); }
			set { Entity.Attributes[Fields.msdyn_userauth] = value; }
		}
	}
}