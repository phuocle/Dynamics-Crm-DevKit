//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:25
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.workqueueitemOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum processortype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng đám mây</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dong_dam_may = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Máy trong dòng quy trình</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		May_trong_dong_quy_trinh = 2
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xếp hàng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_xep_hang = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xử lý</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xu_ly = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang xử lý</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_xu_ly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Loi = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạm hoãn</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tam_hoan = 3
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạm dừng</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Tam_hoan</strong></para>
		/// </summary>
		Da_tam_dung = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xếp hàng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Da_xep_hang</strong></para>
		/// </summary>
		Da_xep_hang = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xử lý</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Da_xu_ly</strong></para>
		/// </summary>
		Da_xu_ly = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang xử lý</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Dang_xu_ly</strong></para>
		/// </summary>
		Dang_xu_ly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không gửi được</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Loi</strong></para>
		/// </summary>
		Khong_gui_duoc = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ chung</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Loi</strong></para>
		/// </summary>
		Ngoai_le_chung = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ đối với IT</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Loi</strong></para>
		/// </summary>
		Ngoai_le_doi_voi_IT = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ kinh doanh</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Loi</strong></para>
		/// </summary>
		Ngoai_le_kinh_doanh = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: ProcessingTimeout</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Loi</strong></para>
		/// </summary>
		ProcessingTimeout = 8
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class workqueueitem : EntityBase
	{
		public struct Fields
		{
			public const string completedon = "completedon";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string delayuntil = "delayuntil";
			public const string executioncontext = "executioncontext";
			public const string expirydate = "expirydate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string input = "input";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string priority = "priority";
			public const string processingduration = "processingduration";
			public const string processingresult = "processingresult";
			public const string processingstarttime = "processingstarttime";
			public const string processinguser = "processinguser";
			public const string processorid = "processorid";
			public const string processortype = "processortype";
			public const string requeuecount = "requeuecount";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string uniqueidbyqueue = "uniqueidbyqueue";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string workqueueid = "workqueueid";
			public const string workqueueitemId = "workqueueitemid";
		}
		public const string EntityLogicalName = "workqueueitem";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10089;
		public const string EntityCollectionSchemaName = "workqueueitems";
		public const string EntityDisplayCollectionName = "Mục trong hàng đợi công việc";
		public const string DisplayName = "Mục trong hàng đợi công việc";
		public const string EntitySetName = "workqueueitems";
		public const string EntityLogicalCollectionName = "workqueueitems";
		public const string EntityPrimaryIdAttribute = "workqueueitemid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "workqueueitem";
		[DebuggerNonUserCode()]
		public workqueueitem()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public workqueueitem(Guid workqueueitemId)
		{
			Entity = new Entity(EntityLogicalName, workqueueitemId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public workqueueitem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="workqueueitem"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public workqueueitem(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="workqueueitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public workqueueitem(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new workqueueitem(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="workqueueitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public workqueueitem(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new workqueueitem(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public workqueueitem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoàn tất vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ hoàn thành mục trong hàng đợi công việc.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.completedon); }
			set { Entity.Attributes[Fields.completedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và thời gian tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trì hoãn cho tới</para>
		/// <para><strong>Description</strong>: Ngày và giờ sau đó mục hàng đợi công việc có thể bị loại bỏ khỏi hàng đợi một lần nữa.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? delayuntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.delayuntil); }
			set { Entity.Attributes[Fields.delayuntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngữ cảnh thực thi</para>
		/// <para><strong>Description</strong>: Ngữ cảnh thực thi chứa danh sách các lần thử xử lý do hệ thống quản lý, cùng với thông tin gỡ lỗi quan trọng.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string executioncontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.executioncontext); }
			set { Entity.Attributes[Fields.executioncontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày hết hạn</para>
		/// <para><strong>Description</strong>: Ngày hết hạn cho biết thời hạn phải xử lý xong các mục trong hàng đợi công việc.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? expirydateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.expirydate); }
			set { Entity.Attributes[Fields.expirydate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số thứ tự của lượt nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của lượt nhập đã tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu vào</para>
		/// <para><strong>Description</strong>: Trường đầu vào chứa dữ liệu về mục công việc thực tế mà bot, con người hoặc các tích hợp dùng để xử lý.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string input
		{
			get { return Entity.GetAttributeValue<string>(Fields.input); }
			set { Entity.Attributes[Fields.input] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của mục trong hàng đợi công việc được đặt thành một số tự động theo mặc định (ví dụ: 2023-02-13-000000001).</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và thời gian di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mức ưu tiên</para>
		/// <para><strong>Description</strong>: Giá trị ưu tiên xác định thứ tự chọn và xử lý cho các mục trong hàng đợi công việc trong một hàng đợi công việc. Giá trị thấp hơn tương ứng với mức độ ưu tiên cao hơn, trong đó 1 là cao nhất.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.priority); }
			set { Entity.Attributes[Fields.priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian xử lý</para>
		/// <para><strong>Description</strong>: Khoảng thời gian xử lý tính bằng giây.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? processingduration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.processingduration); }
			set { Entity.Attributes[Fields.processingduration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết quả xử lý</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string processingresult
		{
			get { return Entity.GetAttributeValue<string>(Fields.processingresult); }
			set { Entity.Attributes[Fields.processingresult] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian bắt đầu xử lý</para>
		/// <para><strong>Description</strong>: Ngày và giờ bắt đầu xử lý.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? processingstarttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.processingstarttime); }
			set { Entity.Attributes[Fields.processingstarttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng xử lý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng xử lý mục này.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference processinguser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.processinguser); }
			set { Entity.Attributes[Fields.processinguser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID bộ xử lý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho bộ xử lý (quy trình làm việc, máy trong dòng quy trình, v.v.) đã xử lý mục.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string processorid
		{
			get { return Entity.GetAttributeValue<string>(Fields.processorid); }
			set { Entity.Attributes[Fields.processorid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại bộ xử lý</para>
		/// <para><strong>Description</strong>: Loại bộ xử lý cho phép hiển thị xem mục đã được xử lý thông qua dòng đám mây, máy trong dòng quy trình hay loại bộ xử lý khác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype.Khong_co"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype? processortype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.processortype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.processortype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.processortype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần sắp lại hàng đợi</para>
		/// <para><strong>Description</strong>: Số lần đã sắp lại hàng đợi cho mục.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? requeuecount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.requeuecount); }
			set { Entity.Attributes[Fields.requeuecount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của mục trong hàng đợi công việc (Đã xếp hàng, Đã xử lý, Ngoại lệ, v.v.)</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái cung cấp thêm ngữ cảnh cho một trạng thái đã đặt (Đã xếp hàng, Đang xử lý, Tạm hoãn, v.v.).</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản của quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID duy nhất theo hàng đợi</para>
		/// <para><strong>Description</strong>: Mã định danh của mục hàng đợi công việc được sử dụng để xác định duy nhất một mục hàng đợi công việc bên trong hàng đợi công việc.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string uniqueidbyqueue
		{
			get { return Entity.GetAttributeValue<string>(Fields.uniqueidbyqueue); }
			set { Entity.Attributes[Fields.uniqueidbyqueue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID hàng đợi công việc</para>
		/// <para><strong>Description</strong>: ID hàng đợi công việc của bản ghi hàng đợi công việc gốc.</para>
		/// <para><strong>Lookup</strong>: <see cref="workqueue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference workqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.workqueueid); }
			set { Entity.Attributes[Fields.workqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục trong hàng đợi công việc</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho phiên bản thực thể.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid workqueueitemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.workqueueitemId] = value;
				Entity.Id = value;
			}
		}
	}
}