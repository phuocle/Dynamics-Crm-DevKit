//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:49
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.OfficeGraphDocumentOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OfficeGraphDocument : EntityBase
	{
		public struct Fields
		{
			public const string AuthorNames = "authornames";
			public const string CreatedBy = "createdby";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedTime = "createdtime";
			public const string DocumentId = "documentid";
			public const string DocumentLastModifiedBy = "documentlastmodifiedby";
			public const string DocumentLastModifiedOn = "documentlastmodifiedon";
			public const string DocumentPreviewMetadata = "documentpreviewmetadata";
			public const string ExchangeRate = "exchangerate";
			public const string FileExtension = "fileextension";
			public const string FileType = "filetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedTime = "modifiedtime";
			public const string OfficeGraphDocumentId = "officegraphdocumentid";
			public const string OrganizationId = "organizationid";
			public const string PreviewImageUrl = "previewimageurl";
			public const string QueryType = "querytype";
			public const string Rank = "rank";
			public const string ReadUrl = "readurl";
			public const string SecondaryFileExtension = "secondaryfileextension";
			public const string SiteTitle = "sitetitle";
			public const string SiteUrl = "siteurl";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string ViewCount = "viewcount";
			public const string WebLocationUrl = "weblocationurl";
		}
		public const string EntityLogicalName = "officegraphdocument";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9950;
		public const string EntityCollectionSchemaName = "OfficeGraphDocuments";
		public const string EntityDisplayCollectionName = "Tài liệu Office Graph";
		public const string DisplayName = "Tài liệu Office Graph";
		public const string EntitySetName = "officegraphdocuments";
		public const string EntityLogicalCollectionName = "officegraphdocuments";
		public const string EntityPrimaryIdAttribute = "officegraphdocumentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "OfficeGraphDocument";
		[DebuggerNonUserCode()]
		public OfficeGraphDocument()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Guid OfficeGraphDocumentId)
		{
			Entity = new Entity(EntityLogicalName, OfficeGraphDocumentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OfficeGraphDocument(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OfficeGraphDocument"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OfficeGraphDocument"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new OfficeGraphDocument(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OfficeGraphDocument"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public OfficeGraphDocument(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new OfficeGraphDocument(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OfficeGraphDocument(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Tác giả</para>
		/// <para><strong>Description</strong>: Hiển thị Tên Tác giả của Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuthorNames
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuthorNames); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Hiển thị Người tạo Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CreatedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Tài liệu</para>
		/// <para><strong>Description</strong>: Id Tài liệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentId); }
			set { Entity.Attributes[Fields.DocumentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa lần cuối tài liệu</para>
		/// <para><strong>Description</strong>: Người sửa lần cuối tài liệu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentLastModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentLastModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa lần cuối tài liệu</para>
		/// <para><strong>Description</strong>: Ngày sửa lần cuối tài liệu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DocumentLastModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DocumentLastModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: siêu dữ liệu xem trước tài liệu</para>
		/// <para><strong>Description</strong>: siêu dữ liệu xem trước tài liệu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentPreviewMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentPreviewMetadata); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền được liên kết với Tài liệu Office Graph theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phần mở rộng Tệp</para>
		/// <para><strong>Description</strong>: Phần mở rộng Tệp của Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileExtension
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileExtension); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Tệp</para>
		/// <para><strong>Description</strong>: Hiển thị Loại Tệp của Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Hiển thị người sửa đổi Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài liệu Office Graph</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OfficeGraphDocumentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OfficeGraphDocumentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho tổ chức</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Url Ảnh Xem trước</para>
		/// <para><strong>Description</strong>: Hiển thị Url Ảnh Xem trước của Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PreviewImageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PreviewImageUrl); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Truy vấn</para>
		/// <para><strong>Description</strong>: Hiển thị Loại Truy vấn của các thư mục con.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QueryType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QueryType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng mức độ liên quan của tài liệu</para>
		/// <para><strong>Description</strong>: Xếp hạng mức độ liên quan của tài liệu đã truy xuất</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Url đọc</para>
		/// <para><strong>Description</strong>: Url đọc trực tuyến</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadUrl); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phần mở rộng Tệp Phụ</para>
		/// <para><strong>Description</strong>: Phần mở rộng Tệp Phụ của Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SecondaryFileExtension
		{
			get { return Entity.GetAttributeValue<string>(Fields.SecondaryFileExtension); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề của trang web chính</para>
		/// <para><strong>Description</strong>: Tiêu đề của trang web tài liệu chính</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SiteTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.SiteTitle); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Url trang web</para>
		/// <para><strong>Description</strong>: Url trang web của trang web tài liệu chính</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.SiteUrl); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Tiêu đề của thực thể.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền được liên kết với Tài liệu Office Graph theo loại tiền gốc.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Xem</para>
		/// <para><strong>Description</strong>: Hiển thị Số lần Xem các thư mục con.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ViewCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ViewCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Url Vị trí trên Web</para>
		/// <para><strong>Description</strong>: Hiển thị Url Vị trí trên Web của Tài liệu Office Graph.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebLocationUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebLocationUrl); }
		}
	}
}