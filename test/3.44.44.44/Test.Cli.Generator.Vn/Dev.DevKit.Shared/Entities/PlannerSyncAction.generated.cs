//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:50
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PlannerSyncAction : EntityBase
	{
		public struct Fields
		{
			public const string Assignments = "assignments";
			public const string DueDateTime = "duedatetime";
			public const string ExternalBucketId = "externalbucketid";
			public const string ExternalReferences = "externalreferences";
			public const string GroupId = "groupid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string LastAttemptedOn = "lastattemptedon";
			public const string LastSyncError = "lastsyncerror";
			public const string Notes = "notes";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PendingAttempts = "pendingattempts";
			public const string PercentComplete = "percentcomplete";
			public const string PlannerBusinessScenarioId = "plannerbusinessscenarioid";
			public const string PlannerSyncActionId = "plannersyncactionid";
			public const string Priority = "priority";
			public const string QueuedOn = "queuedon";
			public const string SourceRecordEntityLogicalName = "sourcerecordentitylogicalname";
			public const string SourceRecordId = "sourcerecordid";
			public const string StartDateTime = "startdatetime";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "plannersyncaction";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10209;
		public const string EntityCollectionSchemaName = "PlannerSyncActions";
		public const string EntityDisplayCollectionName = "Planner Sync Actions";
		public const string DisplayName = "Planner Sync Action";
		public const string EntitySetName = "plannersyncactions";
		public const string EntityLogicalCollectionName = "plannersyncactions";
		public const string EntityPrimaryIdAttribute = "plannersyncactionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "PlannerSyncAction";
		[DebuggerNonUserCode()]
		public PlannerSyncAction()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PlannerSyncAction(Guid PlannerSyncActionId)
		{
			Entity = new Entity(EntityLogicalName, PlannerSyncActionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PlannerSyncAction(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PlannerSyncAction"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PlannerSyncAction(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PlannerSyncAction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PlannerSyncAction(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PlannerSyncAction(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PlannerSyncAction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PlannerSyncAction(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PlannerSyncAction(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PlannerSyncAction(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignments</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Assignments
		{
			get { return Entity.GetAttributeValue<string>(Fields.Assignments); }
			set { Entity.Attributes[Fields.Assignments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Due Date Time</para>
		/// <para><strong>Description</strong>: Date and time when the planner task is due.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DueDateTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DueDateTime); }
			set { Entity.Attributes[Fields.DueDateTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Bucket Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalBucketId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalBucketId); }
			set { Entity.Attributes[Fields.ExternalBucketId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External References</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalReferences
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalReferences); }
			set { Entity.Attributes[Fields.ExternalReferences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Group Id</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? GroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.GroupId); }
			set { Entity.Attributes[Fields.GroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Attempted On</para>
		/// <para><strong>Description</strong>: For internal use only. Date and time when the action was last attempted.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastAttemptedOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastAttemptedOn); }
			set { Entity.Attributes[Fields.LastAttemptedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Sync Error</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncError
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncError); }
			set { Entity.Attributes[Fields.LastSyncError] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notes</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Notes
		{
			get { return Entity.GetAttributeValue<string>(Fields.Notes); }
			set { Entity.Attributes[Fields.Notes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending Attempts</para>
		/// <para><strong>Description</strong>: The attempts available for processing the planner sync action.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PendingAttempts
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PendingAttempts); }
			set { Entity.Attributes[Fields.PendingAttempts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent Complete</para>
		/// <para><strong>Description</strong>: The percentage of completion for the planner task.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PercentComplete
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PercentComplete); }
			set { Entity.Attributes[Fields.PercentComplete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Planner Business Scenario Id</para>
		/// <para><strong>Description</strong>: Id of the Business Scenario in Planner.</para>
		/// <para><strong>Lookup</strong>: <see cref="plannerbusinessscenario"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PlannerBusinessScenarioId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PlannerBusinessScenarioId); }
			set { Entity.Attributes[Fields.PlannerBusinessScenarioId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Planner Sync Action Id</para>
		/// <para><strong>Description</strong>: Planner Sync Action Id</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PlannerSyncActionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PlannerSyncActionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: The priority of the planner task.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Priority); }
			set { Entity.Attributes[Fields.Priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queued On</para>
		/// <para><strong>Description</strong>: For internal use only. Date and time when the action was queued.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? QueuedOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.QueuedOn); }
			set { Entity.Attributes[Fields.QueuedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Record Entity Logical Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceRecordEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceRecordEntityLogicalName); }
			set { Entity.Attributes[Fields.SourceRecordEntityLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Record Id</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SourceRecordId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SourceRecordId); }
			set { Entity.Attributes[Fields.SourceRecordId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date Time</para>
		/// <para><strong>Description</strong>: Date and time when the planner task was started.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartDateTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartDateTime); }
			set { Entity.Attributes[Fields.StartDateTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Planner Sync Action</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Planner Sync Action</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PlannerSyncActionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}