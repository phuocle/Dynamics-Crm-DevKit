//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:08
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ContactOptionSets
{
	public enum AccountRoleCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Người ảnh hưởng</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Nguoi_anh_huong = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người ra quyết định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nguoi_ra_quyet_dinh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhân viên</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nhan_vien = 2
	}
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Chinh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khac = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận hàng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nhan_hang = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận hóa đơn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nhan_hoa_don = 1
	}
	public enum Address1_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảng giao hàng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cang_giao_hang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Miễn phí</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mien_phi = 2
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán lẻ đặt hàng trước</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Ban_le_dat_hang_truoc = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyên chở bằng máy bay</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chuyen_cho_bang_may_bay = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầy tải</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Day_tai = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DHL</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		DHL = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FedEx</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư gửi bưu điện</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu_gui_buu_dien = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: UPS</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		UPS = 4
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address2_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address3_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address3_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address3_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum CustomerSizeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum CustomerTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum EducationCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum FamilyStatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã kết hôn</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_ket_hon = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã ly dị</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_ly_di = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Độc thân</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Doc_than = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Góa</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Goa = 4
	}
	public enum GenderCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Nam</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nam = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nữ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nu = 2
	}
	public enum HasChildrenCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum LeadSourceCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum mspp_userpreferredlcid
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ả Rập</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Tieng_A_Rap = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		Tieng_Anh = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ba Lan – Ba Lan</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Tieng_Ba_Lan_Ba_Lan = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Basque – Basque</para>
		/// <para><strong>Value</strong>: 1,069</para>
		/// </summary>
		Tieng_Basque_Basque = 1_069,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Bồ Đào Nha – Bồ Đào Nha</para>
		/// <para><strong>Value</strong>: 2,070</para>
		/// </summary>
		Tieng_Bo_Dao_Nha_Bo_Dao_Nha = 2_070,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Bồ Đào Nha – Brazil</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Tieng_Bo_Dao_Nha_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Bulgaria – Bulgaria</para>
		/// <para><strong>Value</strong>: 1,026</para>
		/// </summary>
		Tieng_Bulgaria_Bulgaria = 1_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Catalan – Catalan</para>
		/// <para><strong>Value</strong>: 1,027</para>
		/// </summary>
		Tieng_Catalan_Catalan = 1_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Croatia – Croatia</para>
		/// <para><strong>Value</strong>: 1,050</para>
		/// </summary>
		Tieng_Croatia_Croatia = 1_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đan Mạch – Đan Mạch</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Tieng_Dan_Mach_Dan_Mach = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Do Thái</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Tieng_Do_Thai = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đức – Đức</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		Tieng_Duc_Duc = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Estonia – Estonia</para>
		/// <para><strong>Value</strong>: 1,061</para>
		/// </summary>
		Tieng_Estonia_Estonia = 1_061,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Galician – Tây Ban Nha</para>
		/// <para><strong>Value</strong>: 1,110</para>
		/// </summary>
		Tieng_Galician_Tay_Ban_Nha = 1_110,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hà Lan – Hà Lan</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Tieng_Ha_Lan_Ha_Lan = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hàn – Hàn Quốc</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Tieng_Han_Han_Quoc = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hindi – Ấn Độ</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Tieng_Hindi_An_Do = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hungary – Hungary</para>
		/// <para><strong>Value</strong>: 1,038</para>
		/// </summary>
		Tieng_Hungary_Hungary = 1_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hy Lạp – Hy Lạp</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Tieng_Hy_Lap_Hy_Lap = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Indonesia – Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Tieng_Indonesia_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Italy – Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Tieng_Italy_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Kazakh – Kazakhstan</para>
		/// <para><strong>Value</strong>: 1,087</para>
		/// </summary>
		Tieng_Kazakh_Kazakhstan = 1_087,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Latvia – Latvia</para>
		/// <para><strong>Value</strong>: 1,062</para>
		/// </summary>
		Tieng_Latvia_Latvia = 1_062,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Litva – Litva</para>
		/// <para><strong>Value</strong>: 1,063</para>
		/// </summary>
		Tieng_Litva_Litva = 1_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Mã Lai – Malaysia</para>
		/// <para><strong>Value</strong>: 1,086</para>
		/// </summary>
		Tieng_Ma_Lai_Malaysia = 1_086,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Na Uy (Bokmål) – Na Uy</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Tieng_Na_Uy_Bokmal_Na_Uy = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nga – Nga</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Tieng_Nga_Nga = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nhật – Nhật Bản</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Tieng_Nhat_Nhat_Ban = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Phần Lan – Phần Lan</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Tieng_Phan_Lan_Phan_Lan = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp – Pháp</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		Tieng_Phap_Phap = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Romania – Romania</para>
		/// <para><strong>Value</strong>: 1,048</para>
		/// </summary>
		Tieng_Romania_Romania = 1_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Séc – Cộng hòa Séc</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Tieng_Sec_Cong_hoa_Sec = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Serbia (Cyrillic) – Serbia</para>
		/// <para><strong>Value</strong>: 3,098</para>
		/// </summary>
		Tieng_Serbia_Cyrillic_Serbia = 3_098,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Serbia (Latinh) – Serbia</para>
		/// <para><strong>Value</strong>: 2,074</para>
		/// </summary>
		Tieng_Serbia_Latinh_Serbia = 2_074,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Slovak – Slovakia</para>
		/// <para><strong>Value</strong>: 1,051</para>
		/// </summary>
		Tieng_Slovak_Slovakia = 1_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Slovenia – Slovenia</para>
		/// <para><strong>Value</strong>: 1,060</para>
		/// </summary>
		Tieng_Slovenia_Slovenia = 1_060,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha (Cách sắp xếp Truyền thống) – Tây Ban Nha</para>
		/// <para><strong>Value</strong>: 3,082</para>
		/// </summary>
		Tieng_Tay_Ban_Nha_Cach_sap_xep_Truyen_thong_Tay_Ban_Nha = 3_082,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thái – Thái Lan</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Tieng_Thai_Thai_Lan = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thổ Nhĩ Kỳ – Thổ Nhĩ Kỳ</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Tieng_Tho_Nhi_Ky_Tho_Nhi_Ky = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thụy Điển – Thụy Điển</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Tieng_Thuy_Dien_Thuy_Dien = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung – Đặc khu Hành chính Hồng Kông</para>
		/// <para><strong>Value</strong>: 3,076</para>
		/// </summary>
		Tieng_Trung_Dac_khu_Hanh_chinh_Hong_Kong = 3_076,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung – Phồn thể</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Tieng_Trung_Phon_the = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung – Trung Quốc</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Tieng_Trung_Trung_Quoc = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ukraina – Ukraina</para>
		/// <para><strong>Value</strong>: 1,058</para>
		/// </summary>
		Tieng_Ukraina_Ukraina = 1_058,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Việt – Việt Nam</para>
		/// <para><strong>Value</strong>: 1,066</para>
		/// </summary>
		Tieng_Viet_Viet_Nam = 1_066
	}
	public enum PaymentTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 2% 10, Tổng 30</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_2_10_Tong_30 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng 30</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tong_30 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng 45</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tong_45 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng 60</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Tong_60 = 4
	}
	public enum PreferredAppointmentDayCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ Nhật</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chu_Nhat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Ba</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thu_Ba = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Bảy</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Thu_Bay = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Hai</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thu_Hai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Năm</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thu_Nam = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Sáu</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu_Sau = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ Tư</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thu_Tu = 3
	}
	public enum PreferredAppointmentTimeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Buổi chiều</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Buoi_chieu = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Buổi sáng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Buoi_sang = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Buổi tối</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Buoi_toi = 3
	}
	public enum PreferredContactMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bất kỳ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bat_ky = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Dien_thoai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Fax = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thu = 5
	}
	public enum ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
	public enum TerritoryCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Contact : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string AccountRoleCode = "accountrolecode";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_FreightTermsCode = "address1_freighttermscode";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_PrimaryContactName = "address1_primarycontactname";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_FreightTermsCode = "address2_freighttermscode";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_PrimaryContactName = "address2_primarycontactname";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string Address3_AddressId = "address3_addressid";
			public const string Address3_AddressTypeCode = "address3_addresstypecode";
			public const string Address3_City = "address3_city";
			public const string Address3_Composite = "address3_composite";
			public const string Address3_Country = "address3_country";
			public const string Address3_County = "address3_county";
			public const string Address3_Fax = "address3_fax";
			public const string Address3_FreightTermsCode = "address3_freighttermscode";
			public const string Address3_Latitude = "address3_latitude";
			public const string Address3_Line1 = "address3_line1";
			public const string Address3_Line2 = "address3_line2";
			public const string Address3_Line3 = "address3_line3";
			public const string Address3_Longitude = "address3_longitude";
			public const string Address3_Name = "address3_name";
			public const string Address3_PostalCode = "address3_postalcode";
			public const string Address3_PostOfficeBox = "address3_postofficebox";
			public const string Address3_PrimaryContactName = "address3_primarycontactname";
			public const string Address3_ShippingMethodCode = "address3_shippingmethodcode";
			public const string Address3_StateOrProvince = "address3_stateorprovince";
			public const string Address3_Telephone1 = "address3_telephone1";
			public const string Address3_Telephone2 = "address3_telephone2";
			public const string Address3_Telephone3 = "address3_telephone3";
			public const string Address3_UPSZone = "address3_upszone";
			public const string Address3_UTCOffset = "address3_utcoffset";
			public const string adx_ConfirmRemovePassword = "adx_confirmremovepassword";
			public const string Adx_CreatedByIPAddress = "adx_createdbyipaddress";
			public const string Adx_CreatedByUsername = "adx_createdbyusername";
			public const string adx_identity_accessfailedcount = "adx_identity_accessfailedcount";
			public const string adx_identity_emailaddress1confirmed = "adx_identity_emailaddress1confirmed";
			public const string adx_identity_lastsuccessfullogin = "adx_identity_lastsuccessfullogin";
			public const string adx_identity_locallogindisabled = "adx_identity_locallogindisabled";
			public const string adx_identity_lockoutenabled = "adx_identity_lockoutenabled";
			public const string adx_identity_lockoutenddate = "adx_identity_lockoutenddate";
			public const string adx_identity_logonenabled = "adx_identity_logonenabled";
			public const string adx_identity_mobilephoneconfirmed = "adx_identity_mobilephoneconfirmed";
			public const string adx_identity_newpassword = "adx_identity_newpassword";
			public const string adx_identity_passwordhash = "adx_identity_passwordhash";
			public const string adx_identity_securitystamp = "adx_identity_securitystamp";
			public const string adx_identity_twofactorenabled = "adx_identity_twofactorenabled";
			public const string adx_identity_username = "adx_identity_username";
			public const string Adx_ModifiedByIPAddress = "adx_modifiedbyipaddress";
			public const string Adx_ModifiedByUsername = "adx_modifiedbyusername";
			public const string Adx_OrganizationName = "adx_organizationname";
			public const string adx_preferredlcid = "adx_preferredlcid";
			public const string adx_profilealert = "adx_profilealert";
			public const string adx_profilealertdate = "adx_profilealertdate";
			public const string adx_profilealertinstructions = "adx_profilealertinstructions";
			public const string Adx_ProfileIsAnonymous = "adx_profileisanonymous";
			public const string Adx_ProfileLastActivity = "adx_profilelastactivity";
			public const string adx_profilemodifiedon = "adx_profilemodifiedon";
			public const string adx_PublicProfileCopy = "adx_publicprofilecopy";
			public const string Adx_TimeZone = "adx_timezone";
			public const string Aging30 = "aging30";
			public const string Aging30_Base = "aging30_base";
			public const string Aging60 = "aging60";
			public const string Aging60_Base = "aging60_base";
			public const string Aging90 = "aging90";
			public const string Aging90_Base = "aging90_base";
			public const string Anniversary = "anniversary";
			public const string AnnualIncome = "annualincome";
			public const string AnnualIncome_Base = "annualincome_base";
			public const string AssistantName = "assistantname";
			public const string AssistantPhone = "assistantphone";
			public const string BirthDate = "birthdate";
			public const string Business2 = "business2";
			public const string Callback = "callback";
			public const string ChildrensNames = "childrensnames";
			public const string Company = "company";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string CreditLimit_Base = "creditlimit_base";
			public const string CreditOnHold = "creditonhold";
			public const string CustomerSizeCode = "customersizecode";
			public const string CustomerTypeCode = "customertypecode";
			public const string Department = "department";
			public const string Description = "description";
			public const string DoNotBulkEMail = "donotbulkemail";
			public const string DoNotBulkPostalMail = "donotbulkpostalmail";
			public const string DoNotEMail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string DoNotSendMM = "donotsendmm";
			public const string EducationCode = "educationcode";
			public const string EMailAddress1 = "emailaddress1";
			public const string EMailAddress2 = "emailaddress2";
			public const string EMailAddress3 = "emailaddress3";
			public const string EmployeeId = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExternalUserIdentifier = "externaluseridentifier";
			public const string FamilyStatusCode = "familystatuscode";
			public const string Fax = "fax";
			public const string FirstName = "firstname";
			public const string FollowEmail = "followemail";
			public const string FtpSiteUrl = "ftpsiteurl";
			public const string FullName = "fullname";
			public const string GenderCode = "gendercode";
			public const string GovernmentId = "governmentid";
			public const string HasChildrenCode = "haschildrencode";
			public const string Home2 = "home2";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsAutoCreate = "isautocreate";
			public const string IsBackofficeCustomer = "isbackofficecustomer";
			public const string IsPrivate = "isprivate";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastUsedInCampaign = "lastusedincampaign";
			public const string LeadSourceCode = "leadsourcecode";
			public const string ManagerName = "managername";
			public const string ManagerPhone = "managerphone";
			public const string MarketingOnly = "marketingonly";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MiddleName = "middlename";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msa_managingpartnerid = "msa_managingpartnerid";
			public const string msdyn_disablewebtracking = "msdyn_disablewebtracking";
			public const string msdyn_isminor = "msdyn_isminor";
			public const string msdyn_isminorwithparentalconsent = "msdyn_isminorwithparentalconsent";
			public const string msdyn_portaltermsagreementdate = "msdyn_portaltermsagreementdate";
			public const string mspp_userpreferredlcid = "mspp_userpreferredlcid";
			public const string NickName = "nickname";
			public const string NumberOfChildren = "numberofchildren";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Pager = "pager";
			public const string ParentContactId = "parentcontactid";
			public const string ParentCustomerId = "parentcustomerid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PreferredAppointmentDayCode = "preferredappointmentdaycode";
			public const string PreferredAppointmentTimeCode = "preferredappointmenttimecode";
			public const string PreferredContactMethodCode = "preferredcontactmethodcode";
			public const string PreferredSystemUserId = "preferredsystemuserid";
			public const string ProcessId = "processid";
			public const string Salutation = "salutation";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SpousesName = "spousesname";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubscriptionId = "subscriptionid";
			public const string Suffix = "suffix";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TerritoryCode = "territorycode";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteUrl = "websiteurl";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}
		public const string EntityLogicalName = "contact";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2;
		public const string EntityCollectionSchemaName = "Contacts";
		public const string EntityDisplayCollectionName = "Người liên hệ";
		public const string DisplayName = "Người liên hệ";
		public const string EntitySetName = "contacts";
		public const string EntityLogicalCollectionName = "contacts";
		public const string EntityPrimaryIdAttribute = "contactid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "fullname";
		public const string EntitySchemaName = "Contact";
		[DebuggerNonUserCode()]
		public Contact()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contact(Guid ContactId)
		{
			Entity = new Entity(EntityLogicalName, ContactId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contact(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contact"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Contact(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contact"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Contact(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Contact(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contact"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Contact(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Contact(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contact(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tài khoản khách hàng có người liên hệ được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vai trò</para>
		/// <para><strong>Description</strong>: Chọn vai trò của người liên hệ trong công ty hoặc quy trình bán hàng, chẳng hạn như người ra quyết định, nhân viên hoặc người ảnh hưởng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode? AccountRoleCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountRoleCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountRoleCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountRoleCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Chọn loại địa chỉ chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Thành phố</para>
		/// <para><strong>Description</strong>: Nhập thành phố cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ chính đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: Nhập quốc gia hoặc khu vực cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Hạt</para>
		/// <para><strong>Description</strong>: Nhập hạt cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điều khoản Vận chuyển hàng hóa</para>
		/// <para><strong>Description</strong>: Chọn điều khoản vận chuyển hàng hóa cho địa chỉ chính để đảm bảo yêu cầu giao hàng được xử lý chính xác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode? Address1_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Vĩ độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị vĩ độ cho địa chỉ chính để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phố 1</para>
		/// <para><strong>Description</strong>: Nhập dòng đầu tiên của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phố 2</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ hai của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phố 3</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ ba của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Kinh độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị kinh độ cho địa chỉ chính để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên mô tả cho địa chỉ chính, chẳng hạn như Trụ sở chính của Tập đoàn.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Nhập Mã ZIP hoặc mã bưu điện cho địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Hòm Thư</para>
		/// <para><strong>Description</strong>: Nhập số hòm thư của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Tên Người liên hệ Chính</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ chính tại địa chỉ chính của tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address1_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: Nhập bang hoặc tỉnh của địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điện thoại</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Vùng UPS</para>
		/// <para><strong>Description</strong>: Nhập vùng UPS của địa chỉ chính để đảm bảo phí vận chuyển được tính chính xác và hàng được giao kịp thời nếu giao bằng UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Chọn múi giờ hoặc phần bù UTC cho địa chỉ này để người khác có thể tham chiếu khi họ liên hệ với người trong địa chỉ này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Chọn loại địa chỉ phụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Thành phố</para>
		/// <para><strong>Description</strong>: Nhập thành phố cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ phụ đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: Nhập quốc gia hoặc khu vực cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Hạt</para>
		/// <para><strong>Description</strong>: Nhập hạt cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điều khoản Vận chuyển hàng hóa</para>
		/// <para><strong>Description</strong>: Chọn điều khoản vận chuyển hàng hóa cho địa chỉ phụ để đảm bảo yêu cầu giao hàng được xử lý chính xác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode? Address2_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Vĩ độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị vĩ độ cho địa chỉ phụ để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phố 1</para>
		/// <para><strong>Description</strong>: Nhập dòng đầu tiên của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phố 2</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ hai của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phố 3</para>
		/// <para><strong>Description</strong>: Nhập dòng thứ ba của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Kinh độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị kinh độ cho địa chỉ phụ để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên mô tả cho địa chỉ phụ, chẳng hạn như Trụ sở chính của Tập đoàn.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Nhập Mã ZIP hoặc mã bưu điện cho địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Hòm Thư</para>
		/// <para><strong>Description</strong>: Nhập số hòm thư của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Tên Người liên hệ Chính</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ chính tại địa chỉ phụ của tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address2_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: Nhập bang hoặc tỉnh của địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 1</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba liên kết với địa chỉ phụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Vùng UPS</para>
		/// <para><strong>Description</strong>: Nhập vùng UPS của địa chỉ phụ để đảm bảo phí vận chuyển được tính chính xác và hàng được giao kịp thời nếu giao bằng UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Chọn múi giờ hoặc phần bù UTC cho địa chỉ này để người khác có thể tham chiếu khi họ liên hệ với người trong địa chỉ này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 3.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address3_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address3_AddressId); }
			set { Entity.Attributes[Fields.Address3_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Chọn loại địa chỉ thứ ba.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode? Address3_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address3_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address3_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Thành phố</para>
		/// <para><strong>Description</strong>: Nhập thành phố cho địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_City); }
			set { Entity.Attributes[Fields.Address3_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ thứ ba đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: quốc gia hoặc khu vực cho địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Country); }
			set { Entity.Attributes[Fields.Address3_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Hạt</para>
		/// <para><strong>Description</strong>: Nhập hạt cho địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_County); }
			set { Entity.Attributes[Fields.Address3_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax liên kết với địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Fax); }
			set { Entity.Attributes[Fields.Address3_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Điều khoản Vận chuyển hàng hóa</para>
		/// <para><strong>Description</strong>: Chọn điều khoản vận chuyển hàng hóa cho địa chỉ thứ ba để đảm bảo yêu cầu giao hàng được xử lý chính xác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode? Address3_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address3_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address3_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Vĩ độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị vĩ độ cho địa chỉ thứ ba để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address3_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address3_Latitude); }
			set { Entity.Attributes[Fields.Address3_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Phố 1</para>
		/// <para><strong>Description</strong>: Nhập dòng đầu tiên của địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Line1); }
			set { Entity.Attributes[Fields.Address3_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Phố 2</para>
		/// <para><strong>Description</strong>: dòng thứ hai của địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Line2); }
			set { Entity.Attributes[Fields.Address3_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Phố 3</para>
		/// <para><strong>Description</strong>: dòng thứ ba của địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Line3); }
			set { Entity.Attributes[Fields.Address3_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Kinh độ</para>
		/// <para><strong>Description</strong>: Nhập giá trị kinh độ cho địa chỉ thứ ba để sử dụng trong ánh xạ và các ứng dụng khác.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address3_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address3_Longitude); }
			set { Entity.Attributes[Fields.Address3_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên mô tả cho địa chỉ thứ ba, chẳng hạn như Trụ sở chính của Tập đoàn.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Name); }
			set { Entity.Attributes[Fields.Address3_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Mã ZIP hoặc mã bưu điện của địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_PostalCode); }
			set { Entity.Attributes[Fields.Address3_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Hòm Thư</para>
		/// <para><strong>Description</strong>: số hòm thư của địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address3_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Tên Người liên hệ Chính</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ chính tại địa chỉ thứ ba của tài khoản.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address3_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode? Address3_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address3_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address3_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: bang hoặc tỉnh của địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_StateOrProvince); }
			set { Entity.Attributes[Fields.Address3_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Điện thoại 1</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính liên kết với địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone1); }
			set { Entity.Attributes[Fields.Address3_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai liên kết với địa chỉ thứ ba.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone2); }
			set { Entity.Attributes[Fields.Address3_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba liên kết với địa chỉ chính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone3); }
			set { Entity.Attributes[Fields.Address3_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Vùng UPS</para>
		/// <para><strong>Description</strong>: Nhập vùng UPS của địa chỉ thứ ba để đảm bảo phí vận chuyển được tính chính xác và hàng được giao kịp thời nếu giao bằng UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_UPSZone); }
			set { Entity.Attributes[Fields.Address3_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 3: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Chọn múi giờ hoặc phần bù UTC cho địa chỉ này để người khác có thể tham chiếu khi họ liên hệ với người trong địa chỉ này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address3_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address3_UTCOffset); }
			set { Entity.Attributes[Fields.Address3_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác nhận Loại bỏ Mật khẩu</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_ConfirmRemovePassword
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_ConfirmRemovePassword); }
			set { Entity.Attributes[Fields.adx_ConfirmRemovePassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo Địa chỉ IP</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_CreatedByIPAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo Tên người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByUsername); }
			set { Entity.Attributes[Fields.Adx_CreatedByUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng số lượt truy cập không thành công</para>
		/// <para><strong>Description</strong>: Hiển thị tổng số những lần nhập sai mật khẩu hiện tại cho người liên hệ này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adx_identity_accessfailedcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adx_identity_accessfailedcount); }
			set { Entity.Attributes[Fields.adx_identity_accessfailedcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Đã xác nhận</para>
		/// <para><strong>Description</strong>: Xác định xem email đã được người liên hệ xác nhận hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_emailaddress1confirmed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_emailaddress1confirmed); }
			set { Entity.Attributes[Fields.adx_identity_emailaddress1confirmed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đăng nhập Thành công Lần cuối</para>
		/// <para><strong>Description</strong>: Cho biết ngày giờ mà người dùng đăng nhập thành công vào cổng thông tin lần cuối.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_identity_lastsuccessfulloginUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_identity_lastsuccessfullogin); }
			set { Entity.Attributes[Fields.adx_identity_lastsuccessfullogin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tắt Đăng nhập Địa phương</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ không thể đăng nhập vào cổng thông tin bằng cách dùng tài khoản cục bộ được nữa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_locallogindisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_locallogindisabled); }
			set { Entity.Attributes[Fields.adx_identity_locallogindisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Khóa</para>
		/// <para><strong>Description</strong>: Xác định khả năng người liên hệ này sẽ để lại dấu vết của những lần truy cập không thành công và sẽ bị khóa sau khi cố gắng truy cập mà bị thất bại quá nhiều lần. Để tránh cho người liên hệ không bị khóa, bạn có thể tắt thiết đặt này.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_lockoutenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_lockoutenabled); }
			set { Entity.Attributes[Fields.adx_identity_lockoutenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Kết thúc Khóa</para>
		/// <para><strong>Description</strong>: Hiển thị thời gian người liên hệ bị khóa được mở khóa trở lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_identity_lockoutenddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_identity_lockoutenddate); }
			set { Entity.Attributes[Fields.adx_identity_lockoutenddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Đăng nhập</para>
		/// <para><strong>Description</strong>: Xác định xem việc xác thực web có được bật cho người liên hệ hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_logonenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_logonenabled); }
			set { Entity.Attributes[Fields.adx_identity_logonenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Di động Đã xác nhận</para>
		/// <para><strong>Description</strong>: Xác định xem số điện thoại đã được người liên hệ xác nhận hay chưa.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_mobilephoneconfirmed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_mobilephoneconfirmed); }
			set { Entity.Attributes[Fields.adx_identity_mobilephoneconfirmed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhập Mật khẩu Mới</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_newpassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_newpassword); }
			set { Entity.Attributes[Fields.adx_identity_newpassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàm băm Mật khẩu</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_passwordhash
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_passwordhash); }
			set { Entity.Attributes[Fields.adx_identity_passwordhash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhãn Bảo mật</para>
		/// <para><strong>Description</strong>: Mã thông báo được dùng để quản lý phiên xác thực web.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_securitystamp
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_securitystamp); }
			set { Entity.Attributes[Fields.adx_identity_securitystamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật Hai Yếu tố</para>
		/// <para><strong>Description</strong>: Xác định xem việc xác thực hai yếu tố có được bật cho người liên hệ hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_twofactorenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_twofactorenabled); }
			set { Entity.Attributes[Fields.adx_identity_twofactorenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người dùng</para>
		/// <para><strong>Description</strong>: Hiển thị danh tính người dùng cho xác thực web cục bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_username
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_username); }
			set { Entity.Attributes[Fields.adx_identity_username] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi Địa chỉ IP</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_ModifiedByIPAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi Tên người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByUsername); }
			set { Entity.Attributes[Fields.Adx_ModifiedByUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_OrganizationName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_OrganizationName); }
			set { Entity.Attributes[Fields.Adx_OrganizationName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LCID ưa dùng (Không dùng nữa)</para>
		/// <para><strong>Description</strong>: LCID cổng thông tin ưa dùng của người dùng</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adx_preferredlcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adx_preferredlcid); }
			set { Entity.Attributes[Fields.adx_preferredlcid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảnh báo Cấu hình</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_profilealert
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_profilealert); }
			set { Entity.Attributes[Fields.adx_profilealert] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Cảnh báo Cấu hình</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_profilealertdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_profilealertdate); }
			set { Entity.Attributes[Fields.adx_profilealertdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hướng dẫn Cảnh báo Cấu hình</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,096</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_profilealertinstructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_profilealertinstructions); }
			set { Entity.Attributes[Fields.adx_profilealertinstructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Ẩn danh</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Adx_ProfileIsAnonymous
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Adx_ProfileIsAnonymous); }
			set { Entity.Attributes[Fields.Adx_ProfileIsAnonymous] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động Cuối cùng của Cấu hình</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? Adx_ProfileLastActivityUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Adx_ProfileLastActivity); }
			set { Entity.Attributes[Fields.Adx_ProfileLastActivity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Đã sửa vào</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_profilemodifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_profilemodifiedon); }
			set { Entity.Attributes[Fields.adx_profilemodifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản sao Cấu hình Công khai</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 64,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_PublicProfileCopy
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_PublicProfileCopy); }
			set { Entity.Attributes[Fields.adx_PublicProfileCopy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Adx_TimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Adx_TimeZone); }
			set { Entity.Attributes[Fields.Adx_TimeZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 30</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 30 (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị trường Tuổi nợ 30 được quy đổi sang loại tiền gốc mặc định của hệ thống. Các phép tính sử dụng tỷ giá được chỉ định trong vùng Loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 60</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 60 (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị trường Tuổi nợ 60 được quy đổi sang loại tiền gốc mặc định của hệ thống. Các phép tính sử dụng tỷ giá được chỉ định trong vùng Loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 90</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuổi nợ 90 (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị trường Tuổi nợ 90 được quy đổi sang loại tiền gốc mặc định của hệ thống. Các phép tính sử dụng tỷ giá được chỉ định trong vùng Loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày kỷ niệm</para>
		/// <para><strong>Description</strong>: Nhập ngày cưới hoặc ngày kỷ niệm dịch vụ của người liên hệ để sử dụng trong chương trình quà tặng cho khách hàng hoặc các liên lạc khác.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? Anniversary
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.Anniversary);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.Anniversary] = dateTime;
				}
				else
					Entity.Attributes[Fields.Anniversary] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thu nhập Hàng năm</para>
		/// <para><strong>Description</strong>: Nhập thu nhập hàng năm của người liên hệ để sử dụng trong quá trình lập hồ sơ và phân tích tài chính.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? AnnualIncome
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.AnnualIncome);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AnnualIncome] = new Money(value.Value);
				else
					Entity.Attributes[Fields.AnnualIncome] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thu nhập Hàng năm (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị trường Thu nhập Hàng năm được đổi sang loại tiền gốc mặc định của hệ thống. Các phép tính sử dụng tỷ giá được chỉ định trong vùng Loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? AnnualIncome_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.AnnualIncome_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trợ lý</para>
		/// <para><strong>Description</strong>: Nhập tên trợ lý của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AssistantName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AssistantName); }
			set { Entity.Attributes[Fields.AssistantName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại của Trợ lý</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại cho trợ lý của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AssistantPhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.AssistantPhone); }
			set { Entity.Attributes[Fields.AssistantPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sinh nhật</para>
		/// <para><strong>Description</strong>: Nhập sinh nhật của người liên hệ để sử dụng trong chương trình quà tặng cho khách hàng hoặc các liên lạc khác.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? BirthDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.BirthDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.BirthDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.BirthDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Doanh nghiệp 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại doanh nghiệp thứ hai cho người liên hệ này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Business2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Business2); }
			set { Entity.Attributes[Fields.Business2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Gọi lại</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại gọi lại cho người liên hệ này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Callback
		{
			get { return Entity.GetAttributeValue<string>(Fields.Callback); }
			set { Entity.Attributes[Fields.Callback] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Con</para>
		/// <para><strong>Description</strong>: Nhập tên các con của người liên hệ để tham chiếu trong các liên lạc và chương trình khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ChildrensNames
		{
			get { return Entity.GetAttributeValue<string>(Fields.ChildrensNames); }
			set { Entity.Attributes[Fields.ChildrensNames] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Công ty</para>
		/// <para><strong>Description</strong>: Nhập điện thoại công ty của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Company
		{
			get { return Entity.GetAttributeValue<string>(Fields.Company); }
			set { Entity.Attributes[Fields.Company] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người liên hệ.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ContactId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ContactId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Bên ngoài)</para>
		/// <para><strong>Description</strong>: Hiển thị bên ngoài đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới hạn Tín dụng</para>
		/// <para><strong>Description</strong>: Nhập giới hạn tín dụng của người liên hệ để tham chiếu khi bạn xử lý các vấn đề về hóa đơn và kế toán với khách hàng.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreditLimit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CreditLimit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới hạn Tín dụng (Gốc)</para>
		/// <para><strong>Description</strong>: Hiển thị trường Giới hạn Tín dụng được quy đổi sang loại tiền gốc mặc định của hệ thống cho mục đích báo cáo. Các phép tính sử dụng tỷ giá được chỉ định trong vùng Loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Treo Tín dụng</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có ở trạng thái treo tín dụng hay không, để tham chiếu khi xử lý các vấn đề về hóa đơn và kế toán.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CreditOnHold
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CreditOnHold); }
			set { Entity.Attributes[Fields.CreditOnHold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy mô Khách hàng</para>
		/// <para><strong>Description</strong>: Chọn quy mô công ty của người liên hệ dành cho mục đích báo cáo và phân khúc.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode? CustomerSizeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSizeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerSizeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerSizeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Mối quan hệ</para>
		/// <para><strong>Description</strong>: Chọn thể loại mô tả đúng nhất mối quan hệ giữa người liên hệ và tổ chức của bạn.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode? CustomerTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ phận</para>
		/// <para><strong>Description</strong>: Nhập bộ phận hoặc đơn vị kinh doanh có người liên hệ làm việc trong công ty hoặc doanh nghiệp mẹ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Department
		{
			get { return Entity.GetAttributeValue<string>(Fields.Department); }
			set { Entity.Attributes[Fields.Department] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập thông tin bổ sung để mô tả người liên hệ, chẳng hạn như một đoạn trích từ trang web của công ty.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Email Hàng loạt</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không chấp nhận gửi email hàng loạt trong chiến dịch tiếp thị hoặc chiến dịch nhanh gọn. Nếu chọn Không Cho phép thì có thể thêm người liên hệ vào danh sách khách hàng tiếp thị, nhưng sẽ loại trừ khỏi email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
			set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Thư Hàng loạt</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không chấp nhận gửi thư qua đường bưu điện trong chiến dịch tiếp thị hoặc chiến dịch nhanh gọn. Nếu chọn Không Cho phép thì có thể thêm người liên hệ vào danh sách khách hàng tiếp thị, nhưng sẽ loại trừ khỏi thư tín.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkPostalMail); }
			set { Entity.Attributes[Fields.DoNotBulkPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Email</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không cho phép gửi email trực tiếp từ Microsoft Dynamics 365. Nếu chọn Không Cho phép thì Microsoft Dynamics 365 sẽ không gửi email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
			set { Entity.Attributes[Fields.DoNotEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Fax</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không cho phép gửi fax. Nếu chọn Không Cho phép thì người liên hệ sẽ bị loại trừ khỏi mọi hoạt động fax được phân phối trong chiến dịch tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
			set { Entity.Attributes[Fields.DoNotFax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Gọi điện</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không chấp nhận gọi điện thoại. Nếu chọn Không Cho phép thì người liên hệ sẽ bị loại trừ khỏi mọi hoạt động gọi điện thoại được phân phối trong chiến dịch tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
			set { Entity.Attributes[Fields.DoNotPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cho phép Thư</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không cho phép gửi thư trực tiếp. Nếu chọn Không Cho phép thì người liên hệ sẽ bị loại trừ khỏi các hoạt động gửi thư được phân phối trong chiến dịch tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không chấp nhận</strong>]: true - [<strong>Chấp nhận</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chấp nhận</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
			set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gửi Tài liệu Tiếp thị</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hoặc không chấp nhận tài liệu tiếp thị, chẳng hạn như sách quảng cáo hoặc danh mục sản phẩm. Người liên hệ chọn không tham gia có thể không nhận được quảng cáo tiếp thị.</para>
		/// <para><strong>Two Option</strong> - [<strong>Không Gửi</strong>]: true - [<strong>Gửi</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Gửi</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendMM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
			set { Entity.Attributes[Fields.DoNotSendMM] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Học vấn</para>
		/// <para><strong>Description</strong>: Chọn trình độ học vấn cao nhất của người liên hệ để sử dụng trong phân khúc và phân tích.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode? EducationCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EducationCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EducationCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EducationCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email chính cho người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress1
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
			set { Entity.Attributes[Fields.EMailAddress1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Email 2</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email phụ cho người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
			set { Entity.Attributes[Fields.EMailAddress2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Email 3</para>
		/// <para><strong>Description</strong>: Nhập địa chỉ email thay thế cho người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress3
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
			set { Entity.Attributes[Fields.EMailAddress3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhân viên</para>
		/// <para><strong>Description</strong>: Nhập ID nhân viên hoặc số hiệu cho người liên hệ để tham chiếu trong đơn hàng, trường hợp dịch vụ hoặc các liên lạc khác với tổ chức của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmployeeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmployeeId); }
			set { Entity.Attributes[Fields.EmployeeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã định danh Người dùng Bên ngoài</para>
		/// <para><strong>Description</strong>: Mã định danh cho người dùng bên ngoài.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalUserIdentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalUserIdentifier); }
			set { Entity.Attributes[Fields.ExternalUserIdentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tình trạng Hôn nhân</para>
		/// <para><strong>Description</strong>: Chọn tình trạng hôn nhân của người liên hệ để tham chiếu trong các cuộc gọi điện thoại sau này và các liên lạc khác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode? FamilyStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FamilyStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FamilyStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FamilyStatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Description</strong>: Nhập số fax cho người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Nhập tên của người liên hệ để đảm bảo người liên hệ được gọi tên chính xác trong cuộc gọi, email và chiến dịch tiếp thị bán hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Theo dõi Hoạt động Email</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng cho phép theo dõi hoạt động email như hoạt động mở, số lần xem tệp đính kèm và số lần bấm vào liên kết đối với những email gửi tới người liên hệ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Cho phép</strong>]: true - [<strong>Không cho phép</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Cho phép</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
			set { Entity.Attributes[Fields.FollowEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang web FTP</para>
		/// <para><strong>Description</strong>: Nhập URL cho trang web FTP của người liên hệ để cho phép người dùng truy cập dữ liệu và chia sẻ tài liệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FtpSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.FtpSiteUrl); }
			set { Entity.Attributes[Fields.FtpSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Đầy đủ</para>
		/// <para><strong>Description</strong>: Kết hợp và cho biết tên và họ của người liên hệ để có thể hiển thị tên đầy đủ trong dạng xem và báo cáo.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giới tính</para>
		/// <para><strong>Description</strong>: Chọn giới tính của người liên hệ để đảm bảo xưng hô chính xác với người liên hệ trong cuộc gọi, email và chiến dịch tiếp thị bán hàng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode? GenderCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.GenderCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.GenderCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.GenderCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính phủ</para>
		/// <para><strong>Description</strong>: Nhập số hộ chiếu hoặc ID khác của chính phủ cho người liên hệ để sử dụng trong tài liệu hoặc báo cáo.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GovernmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GovernmentId); }
			set { Entity.Attributes[Fields.GovernmentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có Con</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hay không có con để tham chiếu trong các cuộc gọi điện thoại sau này và các liên lạc khác.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode? HasChildrenCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.HasChildrenCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.HasChildrenCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.HasChildrenCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Nhà riêng 2</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại nhà riêng thứ hai cho người liên hệ này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Home2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Home2); }
			set { Entity.Attributes[Fields.Home2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tự động tạo</para>
		/// <para><strong>Description</strong>: Thông tin về việc có tự động tạo người liên hệ hay không khi gửi email hoặc sắp xếp cuộc hẹn.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoCreate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khách hàng ở Phòng Hành chính</para>
		/// <para><strong>Description</strong>: Chọn người liên hệ có hay không tồn tại trong hệ thống kế toán riêng biệt hoặc hệ thống khác, chẳng hạn như Microsoft Dynamics GP hoặc cơ sở dữ liệu ERP khác, để sử dụng trong quá trình tích hợp.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBackofficeCustomer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBackofficeCustomer); }
			set { Entity.Attributes[Fields.IsBackofficeCustomer] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chức danh</para>
		/// <para><strong>Description</strong>: Nhập chức danh của người liên hệ để đảm bảo xưng hô chính xác với người liên hệ trong cuộc gọi, email và chiến dịch tiếp thị bán hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ</para>
		/// <para><strong>Description</strong>: Nhập họ của người liên hệ để đảm bảo người liên hệ được gọi tên chính xác trong cuộc gọi, email và chiến dịch tiếp thị bán hàng.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạm giữ Gần đây nhất</para>
		/// <para><strong>Description</strong>: Chứa nhãn ngày và giờ của lần tạm giữ gần đây nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Sau cùng được Bao gồm trong Chiến dịch</para>
		/// <para><strong>Description</strong>: Cho biết ngày bao gồm người liên hệ lần cuối cùng trong chiến dịch tiếp thị hoặc chiến dịch nhanh gọn.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedInCampaignUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
			set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn của Khách hàng tiềm năng</para>
		/// <para><strong>Description</strong>: Chọn nguồn tiếp thị chính đã khiến người liên hệ tìm đến tổ chức của bạn.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode? LeadSourceCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadSourceCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LeadSourceCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LeadSourceCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người quản lý</para>
		/// <para><strong>Description</strong>: Nhập tên người quản lý của người liên hệ để sử dụng trong việc giải quyết vấn đề hoặc các liên lạc sau này với người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ManagerName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ManagerName); }
			set { Entity.Attributes[Fields.ManagerName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại của Người quản lý</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại cho người quản lý của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ManagerPhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.ManagerPhone); }
			set { Entity.Attributes[Fields.ManagerPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ dành cho Tiếp thị</para>
		/// <para><strong>Description</strong>: Xem có chỉ dành riêng cho tiếp thị hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? MarketingOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.MarketingOnly); }
			set { Entity.Attributes[Fields.MarketingOnly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Tổng thể</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người liên hệ chính để hợp nhất.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp nhất</para>
		/// <para><strong>Description</strong>: Cho biết tài khoản có được hợp nhất với người liên hệ chính hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Đệm</para>
		/// <para><strong>Description</strong>: Nhập tên đệm hoặc tên viết tắt của người liên hệ để đảm bảo người liên hệ được gọi tên chính xác.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Di động</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại di động của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Bên ngoài)</para>
		/// <para><strong>Description</strong>: Hiển thị bên ngoài đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quản lý Đối tác</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Khách hàng được liên kết với Người liên hệ.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msa_managingpartnerid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msa_managingpartnerid); }
			set { Entity.Attributes[Fields.msa_managingpartnerid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tắt Theo dõi Web</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ đã chọn không theo dõi web.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_disablewebtracking
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_disablewebtracking); }
			set { Entity.Attributes[Fields.msdyn_disablewebtracking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là trẻ em hoặc trẻ vị thành niên</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ được coi là trẻ em hoặc trẻ vị thành niên trong khu vực pháp lý của họ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isminor
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isminor); }
			set { Entity.Attributes[Fields.msdyn_isminor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là trẻ em hoặc trẻ vị thành niên có Sự cho phép của Cha mẹ</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ được coi là trẻ em hoặc trẻ vị thành niên trong khu vực pháp lý của họ và có sự cho phép từ cha mẹ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isminorwithparentalconsent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isminorwithparentalconsent); }
			set { Entity.Attributes[Fields.msdyn_isminorwithparentalconsent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tháng Đồng ý với Điều khoản Cổng thông tin</para>
		/// <para><strong>Description</strong>: Cho biết ngày giờ mà một người đã đồng ý với điều khoản và điều kiện của cổng thông tin.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_portaltermsagreementdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_portaltermsagreementdate); }
			set { Entity.Attributes[Fields.msdyn_portaltermsagreementdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ ưa dùng</para>
		/// <para><strong>Description</strong>: Ngôn ngữ cổng thông tin ưa dùng của người dùng</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.mspp_userpreferredlcid"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.mspp_userpreferredlcid? mspp_userpreferredlcid
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_userpreferredlcid);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.mspp_userpreferredlcid)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_userpreferredlcid] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_userpreferredlcid] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biệt danh</para>
		/// <para><strong>Description</strong>: Nhập biệt danh của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NickName
		{
			get { return Entity.GetAttributeValue<string>(Fields.NickName); }
			set { Entity.Attributes[Fields.NickName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Con</para>
		/// <para><strong>Description</strong>: Nhập số lượng con cái của người liên hệ để tham chiếu trong các cuộc gọi điện thoại sau này và các liên lạc khác.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfChildren
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfChildren); }
			set { Entity.Attributes[Fields.NumberOfChildren] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Tạm giữ (Phút)</para>
		/// <para><strong>Description</strong>: Hiển thị khoảng thời gian tính bằng phút mà bản ghi bị tạm giữ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu người liên hệ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu người liên hệ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu người liên hệ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Máy nhắn tin</para>
		/// <para><strong>Description</strong>: Nhập số máy nhắn tin của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Pager
		{
			get { return Entity.GetAttributeValue<string>(Fields.Pager); }
			set { Entity.Attributes[Fields.Pager] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ cấp độ Cha</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người liên hệ ở cấp độ cha.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Công ty</para>
		/// <para><strong>Description</strong>: Chọn tài khoản mẹ hoặc người liên hệ ở cấp độ mẹ cho người liên hệ nhằm cung cấp liên kết nhanh tới những chi tiết bổ sung, chẳng hạn như thông tin tài chính, hoạt động và cơ hội.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentCustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentCustomerId); }
			set { Entity.Attributes[Fields.ParentCustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham gia trong Quy trình làm việc</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ có tham gia quy tắc quy trình làm việc hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điều khoản Thanh toán</para>
		/// <para><strong>Description</strong>: Chọn điều khoản thanh toán để biểu thị thời điểm khách hàng cần thanh toán tổng số tiền.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode? PaymentTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn ngày ưu tiên trong tuần cho cuộc hẹn dịch vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode? PreferredAppointmentDayCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentDayCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giờ ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn giờ ưu tiên trong ngày cho cuộc hẹn dịch vụ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode.Buoi_sang"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode? PreferredAppointmentTimeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentTimeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức Liên hệ Ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn phương thức liên hệ ưu tiên.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode.Bat_ky"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredContactMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn người đại diện dịch vụ khách hàng thông thường hay ưu tiên để tham chiếu khi lên lịch các hoạt động dịch vụ cho người liên hệ.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreferredSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredSystemUserId); }
			set { Entity.Attributes[Fields.PreferredSystemUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời chào</para>
		/// <para><strong>Description</strong>: Nhập lời chào cho người liên hệ để đảm bảo xưng hô chính xác với người liên hệ trong cuộc gọi, email và chiến dịch tiếp thị bán hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Chọn một phương thức giao hàng cho hàng hóa được gửi đến địa chỉ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận Cấp độ Dịch vụ</para>
		/// <para><strong>Description</strong>: Chọn thỏa thuận cấp độ dịch vụ (SLA) mà bạn muốn áp dụng cho bản ghi Người liên hệ.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thỏa thuận Cấp độ Dịch vụ cuối cùng đã áp dụng</para>
		/// <para><strong>Description</strong>: Thỏa thuận Cấp độ Dịch vụ lần cuối đã được áp dụng cho trường hợp này. Chỉ sử dụng nội bộ trường này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Vợ/Chồng/Bạn đời</para>
		/// <para><strong>Description</strong>: Nhập tên vợ/chồng hoặc bạn đời của người liên hệ để tham chiếu trong các cuộc gọi, sự kiện hoặc các liên lạc khác với người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SpousesName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SpousesName); }
			set { Entity.Attributes[Fields.SpousesName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Giai đoạn Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của giai đoạn.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết người liên hệ đang hiện hoạt hay không. Người liên hệ không hoạt động ở trạng thái chỉ đọc và không thể chỉnh sửa trừ khi được kích hoạt lại.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của người liên hệ.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đăng ký</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hậu tố</para>
		/// <para><strong>Description</strong>: Nhập hậu tố của người liên hệ, chẳng hạn như Jr. (trẻ, con) hoặc Sr. (già, bố) để đảm bảo người liên hệ được gọi tên chính xác trong cuộc gọi, email và chiến dịch tiếp thị bán hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Suffix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Suffix); }
			set { Entity.Attributes[Fields.Suffix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Doanh nghiệp</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại chính cho người liên hệ này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Nhà riêng</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ hai cho người liên hệ này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Nhập số điện thoại thứ ba cho người liên hệ này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng lãnh thổ</para>
		/// <para><strong>Description</strong>: Chọn khu vực hoặc vùng lãnh thổ cho người liên hệ để sử dụng trong phân khúc và phân tích.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode? TerritoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TerritoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TerritoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TerritoryCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tôi sử dụng</para>
		/// <para><strong>Description</strong>: Tổng thời gian mà tôi dành cho các email (đọc và viết) cùng các cuộc họp liên quan đến bản ghi người liên hệ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Đường ngang</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của người liên hệ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang web</para>
		/// <para><strong>Description</strong>: Nhập URL trang web hoặc blog công việc hay cá nhân của người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
			set { Entity.Attributes[Fields.WebSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên phiên âm tiếng Nhật</para>
		/// <para><strong>Description</strong>: Nhập cách phát âm tên của người liên hệ, nếu tên này được chỉ định ở tiếng Nhật, nhằm đảm bảo tên được phát âm đúng trong các cuộc gọi điện thoại với người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên phiên âm tiếng Nhật Đầy đủ</para>
		/// <para><strong>Description</strong>: Cho biết kết hợp tên và họ phiên âm tiếng Nhật của người liên hệ để có thể hiển thị tên phiên âm đầy đủ trong dạng xem và báo cáo.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ phiên âm tiếng Nhật</para>
		/// <para><strong>Description</strong>: Nhập cách phát âm họ của người liên hệ, nếu họ được chỉ định ở tiếng Nhật, nhằm đảm bảo tên được phát âm đúng trong các cuộc gọi điện thoại với người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Đệm phiên âm tiếng Nhật</para>
		/// <para><strong>Description</strong>: Nhập cách phát âm tên đệm của người liên hệ, nếu tên được chỉ định ở tiếng Nhật, nhằm đảm bảo tên được phát âm đúng trong các cuộc gọi điện thoại với người liên hệ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}