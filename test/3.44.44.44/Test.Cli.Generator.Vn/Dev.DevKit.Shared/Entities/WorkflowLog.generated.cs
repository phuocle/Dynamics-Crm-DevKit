//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:25
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.WorkflowLogOptionSets
{
	public enum ChildWorkflowInstanceObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Công việc Hệ thống</para>
		/// <para><strong>Value</strong>: 4,700</para>
		/// </summary>
		Cong_viec_He_thong = 4_700,
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao dịch quy trình làm việc</para>
		/// <para><strong>Value</strong>: 4,710</para>
		/// </summary>
		Giao_dich_quy_trinh_lam_viec = 4_710,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên dòng</para>
		/// <para><strong>Value</strong>: 4,720</para>
		/// </summary>
		Phien_dong = 4_720
	}
	public enum ObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Công việc Hệ thống</para>
		/// <para><strong>Value</strong>: 4,700</para>
		/// </summary>
		Cong_viec_He_thong = 4_700,
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao dịch quy trình làm việc</para>
		/// <para><strong>Value</strong>: 4,710</para>
		/// </summary>
		Giao_dich_quy_trinh_lam_viec = 4_710,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên dòng</para>
		/// <para><strong>Value</strong>: 4,720</para>
		/// </summary>
		Phien_dong = 4_720
	}
	public enum Status
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Da_huy = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã thành công</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_thanh_cong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Dang_cho = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_tien_hanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khong_thanh_cong = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class WorkflowLog : EntityBase
	{
		public struct Fields
		{
			public const string ActivityName = "activityname";
			public const string AsyncOperationId = "asyncoperationid";
			public const string ChildWorkflowInstanceId = "childworkflowinstanceid";
			public const string CompletedOn = "completedon";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string ErrorCode = "errorcode";
			public const string ErrorText = "errortext";
			public const string Inputs = "inputs";
			public const string Inputs_name = "inputs_name";
			public const string InteractionActivityResult = "interactionactivityresult";
			public const string IterationCount = "iterationcount";
			public const string Message = "message";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Outputs = "outputs";
			public const string Outputs_name = "outputs_name";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RepetitionCount = "repetitioncount";
			public const string RepetitionId = "repetitionid";
			public const string StageName = "stagename";
			public const string StartedOn = "startedon";
			public const string Status = "status";
			public const string StepName = "stepname";
			public const string WorkflowLogId = "workflowlogid";
		}
		public const string EntityLogicalName = "workflowlog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4706;
		public const string EntityCollectionSchemaName = "WorkflowLogs";
		public const string EntityDisplayCollectionName = "Nhật ký quy trình";
		public const string DisplayName = "Nhật ký quy trình";
		public const string EntitySetName = "workflowlogs";
		public const string EntityLogicalCollectionName = "workflowlogs";
		public const string EntityPrimaryIdAttribute = "workflowlogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "WorkflowLog";
		[DebuggerNonUserCode()]
		public WorkflowLog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public WorkflowLog(Guid WorkflowLogId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowLogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public WorkflowLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="WorkflowLog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public WorkflowLog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="WorkflowLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public WorkflowLog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new WorkflowLog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="WorkflowLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public WorkflowLog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new WorkflowLog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public WorkflowLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên hoạt động</para>
		/// <para><strong>Description</strong>: Tên của hoạt động mà bước quy trình hiện đang xử lý.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityName); }
			set { Entity.Attributes[Fields.ActivityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản ghi mẹ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản ghi mẹ.</para>
		/// <para><strong>Lookup</strong>: <see cref="asyncoperation"/>, <see cref="processsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AsyncOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AsyncOperationId); }
			set { Entity.Attributes[Fields.AsyncOperationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Công việc hệ thống qui trình con</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của công việc hệ thống.</para>
		/// <para><strong>Lookup</strong>: <see cref="asyncoperation"/>, <see cref="processsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ChildWorkflowInstanceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ChildWorkflowInstanceId); }
			set { Entity.Attributes[Fields.ChildWorkflowInstanceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoàn thành Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ đã hoàn tất thao tác.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
			set { Entity.Attributes[Fields.CompletedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo mục nhập nhật ký quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo mục nhập nhật ký quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo nhật ký quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả bước</para>
		/// <para><strong>Description</strong>: Mô tả bước quy trình.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian</para>
		/// <para><strong>Description</strong>: Khoảng thời gian giữa lúc hoàn thành và bắt đầu, được dùng bởi dòng quy trình công việc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo lỗi</para>
		/// <para><strong>Description</strong>: Mã lỗi liên quan đến quy trình.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ErrorText</para>
		/// <para><strong>Description</strong>: Phần biểu diễn chuỗi của lỗi.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorText
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorText); }
			set { Entity.Attributes[Fields.ErrorText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu vào</para>
		/// <para><strong>Description</strong>: Đầu vào được yêu cầu theo bước của quy trình làm việc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Inputs_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Inputs_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết quả của hoạt động tương tác</para>
		/// <para><strong>Description</strong>: Chuỗi chỉ định kết quả của hoạt động tương tác</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InteractionActivityResult
		{
			get { return Entity.GetAttributeValue<string>(Fields.InteractionActivityResult); }
			set { Entity.Attributes[Fields.InteractionActivityResult] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IterationCount</para>
		/// <para><strong>Description</strong>: Số lần lặp lại cho hành động khi trong vòng lặp do until.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IterationCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IterationCount); }
			set { Entity.Attributes[Fields.IterationCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo</para>
		/// <para><strong>Description</strong>: Thông báo liên quan đến quy trình.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Message
		{
			get { return Entity.GetAttributeValue<string>(Fields.Message); }
			set { Entity.Attributes[Fields.Message] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi mục nhập nhật ký quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi mục nhập nhật ký quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa nhật ký quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu ra</para>
		/// <para><strong>Description</strong>: Đầu ra được tạo từ bước của quy trình làm việc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Outputs_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Outputs_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu nhật ký quy trình.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu nhật ký quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản ghi đã liên kết.</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RepetitionCount</para>
		/// <para><strong>Description</strong>: Số lần lặp lại của hành động khi trong vòng lặp.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RepetitionCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RepetitionCount); }
			set { Entity.Attributes[Fields.RepetitionCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RepetitionId</para>
		/// <para><strong>Description</strong>: Phần biểu diễn chuỗi sự lặp lại và lặp lại / mức độ của hành động.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RepetitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.RepetitionId); }
			set { Entity.Attributes[Fields.RepetitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giai đoạn của Quy trình</para>
		/// <para><strong>Description</strong>: Tên của giai đoạn quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StageName); }
			set { Entity.Attributes[Fields.StageName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ bắt đầu thao tác.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
			set { Entity.Attributes[Fields.StartedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của bước quy trình tạo ra bản ghi nhật ký quy trình: Đang thực hiện, Hoàn thành thành công hoặc Không thành công.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowLogOptionSets.Status"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowLogOptionSets.Status.Dang_tien_hanh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowLogOptionSets.Status? Status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowLogOptionSets.Status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Status] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên bước</para>
		/// <para><strong>Description</strong>: Tên của bước quy trình.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepName); }
			set { Entity.Attributes[Fields.StepName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhật ký quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mục nhập nhật ký quy trình.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowLogId] = value;
				Entity.Id = value;
			}
		}
	}
}