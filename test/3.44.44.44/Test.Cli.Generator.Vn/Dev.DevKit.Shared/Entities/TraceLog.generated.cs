//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.TraceLogOptionSets
{
	public enum Level
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cảnh báo</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canh_bao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Loi = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thong_tin = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TraceLog : EntityBase
	{
		public struct Fields
		{
			public const string CanBeDeleted = "canbedeleted";
			public const string CollationLevel = "collationlevel";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorDetails = "errordetails";
			public const string ErrorTypeDisplay = "errortypedisplay";
			public const string IsUnique = "isunique";
			public const string Level = "level";
			public const string MachineName = "machinename";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string ParentTraceLogId = "parenttracelogid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectOwnerId = "regardingobjectownerid";
			public const string RegardingObjectOwningBusinessUnit = "regardingobjectowningbusinessunit";
			public const string Text = "text";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TraceActionXml = "traceactionxml";
			public const string TraceCode = "tracecode";
			public const string TraceDetailXml = "tracedetailxml";
			public const string TraceLogId = "tracelogid";
			public const string TraceParameterHash = "traceparameterhash";
			public const string TraceParameterXml = "traceparameterxml";
			public const string TraceRegardingId = "traceregardingid";
			public const string TraceStatus = "tracestatus";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "tracelog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8050;
		public const string EntityCollectionSchemaName = "TraceLogs";
		public const string EntityDisplayCollectionName = "Các dấu vết";
		public const string DisplayName = "Dấu vết";
		public const string EntitySetName = "tracelogs";
		public const string EntityLogicalCollectionName = "tracelogs";
		public const string EntityPrimaryIdAttribute = "tracelogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "text";
		public const string EntitySchemaName = "TraceLog";
		[DebuggerNonUserCode()]
		public TraceLog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TraceLog(Guid TraceLogId)
		{
			Entity = new Entity(EntityLogicalName, TraceLogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TraceLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TraceLog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public TraceLog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TraceLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TraceLog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TraceLog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TraceLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TraceLog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TraceLog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TraceLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cờ CanBeDeleted dấu vết</para>
		/// <para><strong>Description</strong>: Cho biết có thể xóa nhật ký truy vết này không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeDeleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeDeleted); }
			set { Entity.Attributes[Fields.CanBeDeleted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấp độ đối chiếu</para>
		/// <para><strong>Description</strong>: Cho biết cấp độ đối chiếu</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CollationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CollationLevel); }
			set { Entity.Attributes[Fields.CollationLevel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo dấu vết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Thời gian tạo và ghi nhật ký lỗi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo dấu vết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDetails); }
			set { Entity.Attributes[Fields.ErrorDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chi tiết Lỗi Truy vết</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorTypeDisplay
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorTypeDisplay); }
			set { Entity.Attributes[Fields.ErrorTypeDisplay] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là dấu vết duy nhất</para>
		/// <para><strong>Description</strong>: Cho biết khả năng tạo traceLog duy nhất(chỉ một) cho thực thể đã liên kết.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUnique
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUnique); }
			set { Entity.Attributes[Fields.IsUnique] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mức</para>
		/// <para><strong>Description</strong>: Thông tin về mức truy vết.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level.Thong_tin"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level? Level
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Level);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Level] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Level] = null;
			}
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineName); }
			set { Entity.Attributes[Fields.MachineName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi dấu vết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cập nhật Lần cuối Vào</para>
		/// <para><strong>Description</strong>: Thời gian cập nhật và ghi nhật ký lỗi cho cùng một đối tượng liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi dấu vết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với dấu vết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id mẹ</para>
		/// <para><strong>Description</strong>: Cho biết ID mẹ của nhật ký truy vết.</para>
		/// <para><strong>Lookup</strong>: <see cref="tracelog"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentTraceLogId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentTraceLogId); }
			set { Entity.Attributes[Fields.ParentTraceLogId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Hộp thư liên quan hoặc cấu hình máy chủ email.</para>
		/// <para><strong>Lookup</strong>: <see cref="emailserverprofile"/>, <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu đối tượng liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu đối tượng liên quan.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn bản</para>
		/// <para><strong>Description</strong>: Văn bản của dấu vết.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Text
		{
			get { return Entity.GetAttributeValue<string>(Fields.Text); }
			set { Entity.Attributes[Fields.Text] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: XML hành động truy vết</para>
		/// <para><strong>Description</strong>: Trình bày XML của hành động truy vết.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceActionXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceActionXml); }
			set { Entity.Attributes[Fields.TraceActionXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Lỗi</para>
		/// <para><strong>Description</strong>: Mã lỗi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceCode); }
			set { Entity.Attributes[Fields.TraceCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: XML chi tiết dấu vết</para>
		/// <para><strong>Description</strong>: Trình bày XML của chi tiết dấu vết.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceDetailXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceDetailXml); }
			set { Entity.Attributes[Fields.TraceDetailXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dấu vết</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của dấu vết.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TraceLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TraceLogId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Theo dõi hàm băm tham số</para>
		/// <para><strong>Description</strong>: Lưu trữ hàm băm của đối tượng đã liên kết với nhật ký theo dõi này. Hệ thống dùng id và mã loại đối tượng để tính hàm băm.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceParameterHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceParameterHash); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: XML tham số truy vết</para>
		/// <para><strong>Description</strong>: Trình bày XML của tham số truy vết.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceParameterXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceParameterXml); }
			set { Entity.Attributes[Fields.TraceParameterXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vết có liên quan</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="traceregarding"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TraceRegardingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TraceRegardingId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Truy vết</para>
		/// <para><strong>Description</strong>: Trạng thái về truy vết.</para>
		/// <para><strong>Two Option</strong> - [<strong>Thành công</strong>]: true - [<strong>Lỗi</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Lỗi</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TraceStatus
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TraceStatus); }
			set { Entity.Attributes[Fields.TraceStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo truy vết.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}