//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:53
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets
{
	public enum Instance
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuối cùng</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Cuoi_cung = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu tiên</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dau_tien = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ ba</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thu_ba = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ hai</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thu_hai = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ tư</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thu_tu = 4
	}
	public enum MonthOfYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 1</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thang_1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 10</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Thang_10 = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 11</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Thang_11 = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 12</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Thang_12 = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 2</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thang_2 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 3</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thang_3 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 4</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thang_4 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 5</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thang_5 = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 6</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Thang_6 = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 7</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Thang_7 = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 8</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Thang_8 = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 9</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Thang_9 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng trong Năm không hợp lệ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thang_trong_Nam_khong_hop_le = 0
	}
	public enum PatternEndType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có Ngày Kết thúc</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_co_Ngay_Ket_thuc = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lần xảy ra</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lan_xay_ra = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Kết thúc Kiểu</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ngay_Ket_thuc_Kieu = 3
	}
	public enum RecurrencePatternType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng năm</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hang_nam = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng ngày</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hang_ngay = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng tháng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hang_thang = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng tuần</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hang_tuan = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RecurrenceRule : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DayOfMonth = "dayofmonth";
			public const string DaysOfWeekMask = "daysofweekmask";
			public const string Duration = "duration";
			public const string EffectiveEndDate = "effectiveenddate";
			public const string EffectiveStartDate = "effectivestartdate";
			public const string EndTime = "endtime";
			public const string FirstDayOfWeek = "firstdayofweek";
			public const string Instance = "instance";
			public const string Interval = "interval";
			public const string IsNthMonthly = "isnthmonthly";
			public const string IsNthYearly = "isnthyearly";
			public const string IsRegenerate = "isregenerate";
			public const string IsWeekDayPattern = "isweekdaypattern";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MonthOfYear = "monthofyear";
			public const string ObjectId = "objectid";
			public const string Occurrences = "occurrences";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PatternEndDate = "patternenddate";
			public const string PatternEndType = "patternendtype";
			public const string PatternStartDate = "patternstartdate";
			public const string RecurrencePatternType = "recurrencepatterntype";
			public const string RuleId = "ruleid";
			public const string StartTime = "starttime";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "recurrencerule";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4250;
		public const string EntityCollectionSchemaName = "RecurrenceRules";
		public const string EntityDisplayCollectionName = "Quy tắc lặp lại";
		public const string DisplayName = "Quy tắc lặp lại";
		public const string EntitySetName = "recurrencerules";
		public const string EntityLogicalCollectionName = "recurrencerules";
		public const string EntityPrimaryIdAttribute = "ruleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RecurrenceRule";
		[DebuggerNonUserCode()]
		public RecurrenceRule()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurrenceRule(Guid RecurrenceRuleId)
		{
			Entity = new Entity(EntityLogicalName, RecurrenceRuleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurrenceRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurrenceRule"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RecurrenceRule(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurrenceRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurrenceRule(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurrenceRule(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurrenceRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurrenceRule(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurrenceRule(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurrenceRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo quy tắc lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày giờ tạo quy tắc lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo quy tắc lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày của tháng</para>
		/// <para><strong>Description</strong>: Ngày của tháng xảy ra cuộc hẹn hoặc nhiệm vụ lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 31</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DayOfMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DayOfMonth); }
			set { Entity.Attributes[Fields.DayOfMonth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặt nạ ngày của tuần</para>
		/// <para><strong>Description</strong>: Bitmask cho biết ngày của tuần xảy ra cuộc hẹn hoặc nhiệm vụ lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 127</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysOfWeekMask
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysOfWeekMask); }
			set { Entity.Attributes[Fields.DaysOfWeekMask] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian</para>
		/// <para><strong>Description</strong>: Khoảng thời gian của mẫu lặp lại, tính bằng phút.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày kết thúc có hiệu lực</para>
		/// <para><strong>Description</strong>: Ngày kết thúc thực tế dành cho mở rộng mẫu lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveEndDate); }
			set { Entity.Attributes[Fields.EffectiveEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày bắt đầu có hiệu lực</para>
		/// <para><strong>Description</strong>: Ngày bắt đầu thực tế dành cho mở rộng mẫu lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveStartDate); }
			set { Entity.Attributes[Fields.EffectiveStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Kết thúc</para>
		/// <para><strong>Description</strong>: Thời gian kết thúc của hoạt động đã liên kết.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày đầu tiên của tuần</para>
		/// <para><strong>Description</strong>: Ngày đầu tiên của tuần dành cho mẫu lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FirstDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FirstDayOfWeek); }
			set { Entity.Attributes[Fields.FirstDayOfWeek] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản</para>
		/// <para><strong>Description</strong>: Xác định tổng đếm mà trong đó, mẫu lặp lại hợp lệ đối với khoảng đã cho.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.Instance"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.Instance? Instance
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Instance);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.Instance)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Instance] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Instance] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng</para>
		/// <para><strong>Description</strong>: Số lượng đơn vị của loại lặp lại đã cho giữa các lần xảy ra.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Interval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Interval); }
			set { Entity.Attributes[Fields.Interval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày thứ n hàng tháng</para>
		/// <para><strong>Description</strong>: Xác định khả năng mẫu lập lại hàng tháng là vào ngày thứ N hàng tháng, duy nhất hợp lệ cho lặp lại hàng tháng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthMonthly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthMonthly); }
			set { Entity.Attributes[Fields.IsNthMonthly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng thứ n hàng năm</para>
		/// <para><strong>Description</strong>: Xác định khả năng mẫu lập lại hàng năm là vào tháng thứ N hàng năm, duy nhất hợp lệ cho lặp lại hàng năm.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthYearly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthYearly); }
			set { Entity.Attributes[Fields.IsNthYearly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo lại</para>
		/// <para><strong>Description</strong>: Duy nhất hợp lệ cho lặp lại của loại nhiệm vụ, chỉ định có tạo nhiệm vụ hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegenerate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegenerate); }
			set { Entity.Attributes[Fields.IsRegenerate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mỗi ngày trong tuần</para>
		/// <para><strong>Description</strong>: Xác định mẫu lặp lại hàng tuần thực sự là mẫu hàng ngày vào mỗi ngày trong tuần, duy nhất hợp lệ cho mẫu hàng tuần.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWeekDayPattern
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWeekDayPattern); }
			set { Entity.Attributes[Fields.IsWeekDayPattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi quy tắc lặp lại lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi quy tắc lặp lại lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa quy tắc lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng của năm</para>
		/// <para><strong>Description</strong>: Xác định tháng của năm hợp lệ cho mẫu lặp lại.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear.Thang_trong_Nam_khong_hop_le"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear? MonthOfYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MonthOfYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MonthOfYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MonthOfYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đối tượng có liên kết với quy tắc lặp lại.</para>
		/// <para><strong>Lookup</strong>: <see cref="activitypointer"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lần xảy ra</para>
		/// <para><strong>Description</strong>: Số lần xảy ra cho mẫu lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Occurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Occurrences); }
			set { Entity.Attributes[Fields.Occurrences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu quy tắc lặp lại.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu quy tắc lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc phạm vi lặp lại</para>
		/// <para><strong>Description</strong>: Ngày kết thúc của phạm vi lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternEndDate); }
			set { Entity.Attributes[Fields.PatternEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại kết thúc mẫu</para>
		/// <para><strong>Description</strong>: Loại kết thúc mẫu của chuỗi lặp lại.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.PatternEndType"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.PatternEndType? PatternEndType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PatternEndType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.PatternEndType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PatternEndType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PatternEndType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu phạm vi lặp lại</para>
		/// <para><strong>Description</strong>: Ngày bắt đầu của Phạm vi lặp lại.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternStartDate); }
			set { Entity.Attributes[Fields.PatternStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểu Lặp lại</para>
		/// <para><strong>Description</strong>: Loại lặp lại.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType.Hang_ngay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType? RecurrencePatternType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RecurrencePatternType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RecurrencePatternType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RecurrencePatternType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc lặp lại</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của thực thể có liên kết với quy tắc lặp lại.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RuleId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RuleId); }
			set { Entity.Attributes[Fields.RuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Bắt đầu</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu của hoạt động lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}