//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:08
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.CustomerRelationshipOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CustomerRelationship : EntityBase
	{
		public struct Fields
		{
			public const string ConverseRelationshipId = "converserelationshipid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string CustomerRelationshipId = "customerrelationshipid";
			public const string CustomerRoleDescription = "customerroledescription";
			public const string CustomerRoleId = "customerroleid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PartnerId = "partnerid";
			public const string PartnerRoleDescription = "partnerroledescription";
			public const string PartnerRoleId = "partnerroleid";
			public const string UniqueDscId = "uniquedscid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "customerrelationship";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4502;
		public const string EntityCollectionSchemaName = "CustomerRelationships";
		public const string EntityDisplayCollectionName = "Mối quan hệ Khách hàng";
		public const string DisplayName = "Mối quan hệ Khách hàng";
		public const string EntitySetName = "customerrelationships";
		public const string EntityLogicalCollectionName = "customerrelationships";
		public const string EntityPrimaryIdAttribute = "customerrelationshipid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "customerroleidname";
		public const string EntitySchemaName = "CustomerRelationship";
		[DebuggerNonUserCode()]
		public CustomerRelationship()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CustomerRelationship(Guid CustomerRelationshipId)
		{
			Entity = new Entity(EntityLogicalName, CustomerRelationshipId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CustomerRelationship(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CustomerRelationship"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public CustomerRelationship(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CustomerRelationship"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CustomerRelationship(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CustomerRelationship(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CustomerRelationship"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CustomerRelationship(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CustomerRelationship(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CustomerRelationship(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mối quan hệ Nghịch đảo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất mối quan hệ nghịch đảo của mối quan hệ khách hàng.</para>
		/// <para><strong>Lookup</strong>: <see cref="customerrelationship"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ConverseRelationshipId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ConverseRelationshipId); }
			set { Entity.Attributes[Fields.ConverseRelationshipId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo mối quan hệ khách hàng. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bên 1</para>
		/// <para><strong>Description</strong>: Chọn tài khoản hoặc người liên hệ chính tham gia vào mối quan hệ khách hàng.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mối quan hệ Khách hàng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của mối quan hệ khách hàng.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CustomerRelationshipId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CustomerRelationshipId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả 1</para>
		/// <para><strong>Description</strong>: Nhập thông tin bổ sung về vai trò của bên chính trong mối quan hệ khách hàng, chẳng hạn như độ dài hoặc chất lượng của mối quan hệ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomerRoleDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomerRoleDescription); }
			set { Entity.Attributes[Fields.CustomerRoleDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vai trò 1</para>
		/// <para><strong>Description</strong>: Chọn vai trò của bên chính hoặc đặc điểm của mối quan hệ khách hàng có với bên thứ hai. Trường này ở trạng thái chỉ đọc cho tới khi chọn cả hai bên. Quản trị viên có thể đặt cấu hình giá trị vai trò trong Quản lý Doanh nghiệp ở vùng Thiết đặt.</para>
		/// <para><strong>Lookup</strong>: <see cref="relationshiprole"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerRoleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerRoleId); }
			set { Entity.Attributes[Fields.CustomerRoleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu mối quan hệ khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu hoạt mối quan hệ khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu hoạt mối quan hệ khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bên 2</para>
		/// <para><strong>Description</strong>: Chọn tài khoản hoặc người liên hệ phụ tham gia vào mối quan hệ khách hàng.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PartnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PartnerId); }
			set { Entity.Attributes[Fields.PartnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả 2</para>
		/// <para><strong>Description</strong>: Nhập thông tin bổ sung về vai trò của bên phụ trong mối quan hệ khách hàng, chẳng hạn như độ dài hoặc chất lượng của mối quan hệ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartnerRoleDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartnerRoleDescription); }
			set { Entity.Attributes[Fields.PartnerRoleDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vai trò 2</para>
		/// <para><strong>Description</strong>: Chọn vai trò của bên phụ hoặc đặc điểm của mối quan hệ khách hàng có với bên chính. Trường này ở trạng thái chỉ đọc cho tới khi chọn cả hai bên. Quản trị viên có thể đặt cấu hình giá trị vai trò trong Quản lý Doanh nghiệp ở vùng Thiết đặt.</para>
		/// <para><strong>Lookup</strong>: <see cref="relationshiprole"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PartnerRoleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PartnerRoleId); }
			set { Entity.Attributes[Fields.PartnerRoleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UniqueDscId</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UniqueDscId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UniqueDscId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}