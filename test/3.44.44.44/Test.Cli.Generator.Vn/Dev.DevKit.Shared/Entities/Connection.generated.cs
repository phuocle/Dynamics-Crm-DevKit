//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:07
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ConnectionOptionSets
{
	public enum Record1ObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài viết trong cơ sở kiến thức</para>
		/// <para><strong>Value</strong>: 9,953</para>
		/// </summary>
		Bai_viet_trong_co_so_kien_thuc = 9_953,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản ghi cơ sở kiến thức</para>
		/// <para><strong>Value</strong>: 9,930</para>
		/// </summary>
		Ban_ghi_co_so_kien_thuc = 9_930,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc gọi điện thoại</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Cuoc_goi_dien_thoai = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Cuoc_hen = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn lặp lại</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Cuoc_hen_lap_lai = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao dịch quy trình</para>
		/// <para><strong>Value</strong>: 4,710</para>
		/// </summary>
		Giao_dich_quy_trinh = 4_710,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hồ sơ Mạng xã hội</para>
		/// <para><strong>Value</strong>: 99</para>
		/// </summary>
		Ho_so_Mang_xa_hoi = 99,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động</para>
		/// <para><strong>Value</strong>: 4,200</para>
		/// </summary>
		Hoat_dong = 4_200,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động mạng xã hội</para>
		/// <para><strong>Value</strong>: 4,216</para>
		/// </summary>
		Hoat_dong_mang_xa_hoi = 4_216,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời</para>
		/// <para><strong>Value</strong>: 10,309</para>
		/// </summary>
		Loi_moi = 10_309,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lối tắt</para>
		/// <para><strong>Value</strong>: 10,331</para>
		/// </summary>
		Loi_tat = 10_331,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục tiêu</para>
		/// <para><strong>Value</strong>: 9,600</para>
		/// </summary>
		Muc_tieu = 9_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Nguoi_dung = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nguoi_lien_he = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhiệm vụ</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Nhiem_vu = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Nhom = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy đổi Lời mời</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Quy_doi_Loi_moi = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc Cấu hình Truy cập Kênh</para>
		/// <para><strong>Value</strong>: 9,400</para>
		/// </summary>
		Quy_tac_Cau_hinh_Truy_cap_Kenh = 9_400,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc chuyển tiếp trạng thái phát hành</para>
		/// <para><strong>Value</strong>: 10,329</para>
		/// </summary>
		Quy_tac_chuyen_tiep_trang_thai_phat_hanh = 10_329,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tai_khoan = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư tín</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Thu_tin = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí</para>
		/// <para><strong>Value</strong>: 50</para>
		/// </summary>
		Vi_tri = 50,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng lãnh thổ</para>
		/// <para><strong>Value</strong>: 2,013</para>
		/// </summary>
		Vung_lanh_tho = 2_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Value</strong>: 10,343</para>
		/// </summary>
		Website = 10_343
	}
	public enum Record2ObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bài viết trong cơ sở kiến thức</para>
		/// <para><strong>Value</strong>: 9,953</para>
		/// </summary>
		Bai_viet_trong_co_so_kien_thuc = 9_953,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản ghi cơ sở kiến thức</para>
		/// <para><strong>Value</strong>: 9,930</para>
		/// </summary>
		Ban_ghi_co_so_kien_thuc = 9_930,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc gọi điện thoại</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Cuoc_goi_dien_thoai = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Cuoc_hen = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn lặp lại</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Cuoc_hen_lap_lai = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Giao dịch quy trình</para>
		/// <para><strong>Value</strong>: 4,710</para>
		/// </summary>
		Giao_dich_quy_trinh = 4_710,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hồ sơ Mạng xã hội</para>
		/// <para><strong>Value</strong>: 99</para>
		/// </summary>
		Ho_so_Mang_xa_hoi = 99,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động</para>
		/// <para><strong>Value</strong>: 4,200</para>
		/// </summary>
		Hoat_dong = 4_200,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động mạng xã hội</para>
		/// <para><strong>Value</strong>: 4,216</para>
		/// </summary>
		Hoat_dong_mang_xa_hoi = 4_216,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời</para>
		/// <para><strong>Value</strong>: 10,309</para>
		/// </summary>
		Loi_moi = 10_309,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lối tắt</para>
		/// <para><strong>Value</strong>: 10,331</para>
		/// </summary>
		Loi_tat = 10_331,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mục tiêu</para>
		/// <para><strong>Value</strong>: 9,600</para>
		/// </summary>
		Muc_tieu = 9_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Nguoi_dung = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nguoi_lien_he = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhiệm vụ</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Nhiem_vu = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Nhom = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy đổi Lời mời</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Quy_doi_Loi_moi = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc Cấu hình Truy cập Kênh</para>
		/// <para><strong>Value</strong>: 9,400</para>
		/// </summary>
		Quy_tac_Cau_hinh_Truy_cap_Kenh = 9_400,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc chuyển tiếp trạng thái phát hành</para>
		/// <para><strong>Value</strong>: 10,329</para>
		/// </summary>
		Quy_tac_chuyen_tiep_trang_thai_phat_hanh = 10_329,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài khoản</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tai_khoan = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư tín</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Thu_tin = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí</para>
		/// <para><strong>Value</strong>: 50</para>
		/// </summary>
		Vi_tri = 50,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng lãnh thổ</para>
		/// <para><strong>Value</strong>: 2,013</para>
		/// </summary>
		Vung_lanh_tho = 2_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Value</strong>: 10,343</para>
		/// </summary>
		Website = 10_343
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_hoat_dong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Connection : EntityBase
	{
		public struct Fields
		{
			public const string ConnectionId = "connectionid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EffectiveEnd = "effectiveend";
			public const string EffectiveStart = "effectivestart";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsMaster = "ismaster";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Record1Id = "record1id";
			public const string Record1ObjectTypeCode = "record1objecttypecode";
			public const string Record1RoleId = "record1roleid";
			public const string Record2Id = "record2id";
			public const string Record2ObjectTypeCode = "record2objecttypecode";
			public const string Record2RoleId = "record2roleid";
			public const string RelatedConnectionId = "relatedconnectionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "connection";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 3234;
		public const string EntityCollectionSchemaName = "Connections";
		public const string EntityDisplayCollectionName = "Kết nối";
		public const string DisplayName = "Kết nối";
		public const string EntitySetName = "connections";
		public const string EntityLogicalCollectionName = "connections";
		public const string EntityPrimaryIdAttribute = "connectionid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Connection";
		[DebuggerNonUserCode()]
		public Connection()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Connection(Guid ConnectionId)
		{
			Entity = new Entity(EntityLogicalName, ConnectionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Connection(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Connection"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Connection(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Connection"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Connection(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Connection(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Connection"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Connection(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Connection(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Connection(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết nối</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của kết nối.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ConnectionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ConnectionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập thông tin bổ sung để mô tả kết nối, chẳng hạn như độ dài hoặc chất lượng của mối quan hệ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc</para>
		/// <para><strong>Description</strong>: Nhập ngày kết thúc của kết nối.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveEnd); }
			set { Entity.Attributes[Fields.EffectiveEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu</para>
		/// <para><strong>Description</strong>: Nhập ngày bắt đầu của kết nối.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveStart); }
			set { Entity.Attributes[Fields.EffectiveStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là Tổng thể</para>
		/// <para><strong>Description</strong>: Cho biết đây là bản ghi tổng thể.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMaster
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMaster); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Kết nối</para>
		/// <para><strong>Description</strong>: Tên của kết nối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Cho biết đơn vị kinh doanh của chủ sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu kết nối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu kết nối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết nối Từ</para>
		/// <para><strong>Description</strong>: Chọn tài khoản khách hàng, người liên hệ chính hoặc bản ghi khác tham gia vào kết nối.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="activitypointer"/>, <see cref="adx_invitation"/>, <see cref="adx_inviteredemption"/>, <see cref="appointment"/>, <see cref="channelaccessprofilerule"/>, <see cref="contact"/>, <see cref="email"/>, <see cref="fax"/>, <see cref="goal"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="letter"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="phonecall"/>, <see cref="position"/>, <see cref="processsession"/>, <see cref="recurringappointmentmaster"/>, <see cref="socialactivity"/>, <see cref="socialprofile"/>, <see cref="systemuser"/>, <see cref="task"/>, <see cref="team"/>, <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Record1Id
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Record1Id); }
			set { Entity.Attributes[Fields.Record1Id] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại (Từ)</para>
		/// <para><strong>Description</strong>: Hiển thị loại bản ghi của bản ghi nguồn.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ConnectionOptionSets.Record1ObjectTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConnectionOptionSets.Record1ObjectTypeCode? Record1ObjectTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Record1ObjectTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConnectionOptionSets.Record1ObjectTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vai trò (Từ)</para>
		/// <para><strong>Description</strong>: Chọn vai trò hoặc mối quan hệ của bên chính với bên thứ hai.</para>
		/// <para><strong>Lookup</strong>: <see cref="connectionrole"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Record1RoleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Record1RoleId); }
			set { Entity.Attributes[Fields.Record1RoleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết nối Đến</para>
		/// <para><strong>Description</strong>: Chọn tài khoản khách hàng, người liên hệ phụ hoặc bản ghi khác tham gia vào kết nối.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="activitypointer"/>, <see cref="adx_invitation"/>, <see cref="adx_inviteredemption"/>, <see cref="appointment"/>, <see cref="channelaccessprofilerule"/>, <see cref="contact"/>, <see cref="email"/>, <see cref="fax"/>, <see cref="goal"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="letter"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="phonecall"/>, <see cref="position"/>, <see cref="processsession"/>, <see cref="recurringappointmentmaster"/>, <see cref="socialactivity"/>, <see cref="socialprofile"/>, <see cref="systemuser"/>, <see cref="task"/>, <see cref="team"/>, <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Record2Id
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Record2Id); }
			set { Entity.Attributes[Fields.Record2Id] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại (Đến)</para>
		/// <para><strong>Description</strong>: Hiển thị loại bản ghi của bản ghi đích.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ConnectionOptionSets.Record2ObjectTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConnectionOptionSets.Record2ObjectTypeCode? Record2ObjectTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Record2ObjectTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConnectionOptionSets.Record2ObjectTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vai trò (Đến)</para>
		/// <para><strong>Description</strong>: Chọn vai trò hoặc mối quan hệ của bên phụ với bên chính.</para>
		/// <para><strong>Lookup</strong>: <see cref="connectionrole"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Record2RoleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Record2RoleId); }
			set { Entity.Attributes[Fields.Record2RoleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết nối Nghịch đảo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho bản ghi kết nối nghịch đảo.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="connection"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RelatedConnectionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RelatedConnectionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết kết nối có đang hiện hoạt hay không. Các kết nối không hoạt động ở trạng thái chỉ đọc và không thể chỉnh sửa được trừ khi chúng được kích hoạt lại.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ConnectionOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ConnectionOptionSets.StateCode.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConnectionOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConnectionOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Lý do cho trạng thái của kết nối.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ConnectionOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConnectionOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConnectionOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của kết nối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}