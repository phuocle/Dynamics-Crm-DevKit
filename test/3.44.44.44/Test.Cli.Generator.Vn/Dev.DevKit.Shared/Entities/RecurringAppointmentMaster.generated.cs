//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:53
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc gọi điện thoại</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Cuoc_goi_dien_thoai = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Cuoc_hen = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn lặp lại</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Cuoc_hen_lap_lai = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận xét Cổng thông tin</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Nhan_xet_Cong_thong_tin = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhiệm vụ</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Nhiem_vu = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy đổi Lời mời</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Quy_doi_Loi_moi = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư tín</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Thu_tin = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trò chuyện qua Teams</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Tro_chuyen_qua_Teams = 10_185
	}
	public enum ExpansionStateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầy đủ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Day_du = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không mở rộng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_mo_rong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Một phần</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Mot_phan = 1
	}
	public enum Instance
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuối cùng</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Cuoi_cung = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu tiên</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dau_tien = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ ba</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thu_ba = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ hai</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thu_hai = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ tư</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thu_tu = 4
	}
	public enum InstanceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản ghi chủ Lặp lại</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ban_ghi_chu_Lap_lai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không Lặp lại</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_Lap_lai = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ Lặp lại</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ngoai_le_Lap_lai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngoại lệ Tương lai Lặp lại</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Ngoai_le_Tuong_lai_Lap_lai = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Lặp lại</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Phien_ban_Lap_lai = 2
	}
	public enum MonthOfYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 1</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thang_1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 10</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Thang_10 = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 11</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Thang_11 = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 12</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Thang_12 = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 2</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thang_2 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 3</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thang_3 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 4</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thang_4 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 5</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thang_5 = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 6</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Thang_6 = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 7</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Thang_7 = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 8</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Thang_8 = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng 9</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Thang_9 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng trong Năm không hợp lệ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thang_trong_Nam_khong_hop_le = 0
	}
	public enum OnlineMeetingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc họp trong Teams</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cuoc_hop_trong_Teams = 1
	}
	public enum PatternEndType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có Ngày Kết thúc</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_co_Ngay_Ket_thuc = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lần xảy ra</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lan_xay_ra = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Kết thúc Kiểu</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ngay_Ket_thuc_Kieu = 3
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bình thường</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Binh_thuong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cao</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cao = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thấp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Thap = 0
	}
	public enum RecurrencePatternType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng năm</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hang_nam = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng ngày</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hang_ngay = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng tháng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hang_thang = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng tuần</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hang_tuan = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_hoan_thanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_huy = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã lập lịch</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_lap_lich = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mở</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Mo = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bận</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Da_lap_lich</strong></para>
		/// </summary>
		Ban = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa dứt khoát</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Chua_dut_khoat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_hoan_thanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Da_huy</strong></para>
		/// </summary>
		Da_huy = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có mặt ở văn phòng</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Da_lap_lich</strong></para>
		/// </summary>
		Khong_co_mat_o_van_phong = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rảnh</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Mo</strong></para>
		/// </summary>
		Ranh = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RecurringAppointmentMaster : EntityBase
	{
		public struct Fields
		{
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string Category = "category";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DayOfMonth = "dayofmonth";
			public const string DaysOfWeekMask = "daysofweekmask";
			public const string DeletedExceptionsList = "deletedexceptionslist";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string EffectiveEndDate = "effectiveenddate";
			public const string EffectiveStartDate = "effectivestartdate";
			public const string EndTime = "endtime";
			public const string ExchangeRate = "exchangerate";
			public const string ExpansionStateCode = "expansionstatecode";
			public const string FirstDayOfWeek = "firstdayofweek";
			public const string GlobalObjectId = "globalobjectid";
			public const string GroupId = "groupid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Instance = "instance";
			public const string InstanceTypeCode = "instancetypecode";
			public const string Interval = "interval";
			public const string IsAllDayEvent = "isalldayevent";
			public const string IsBilled = "isbilled";
			public const string IsMapiPrivate = "ismapiprivate";
			public const string IsNthMonthly = "isnthmonthly";
			public const string IsNthYearly = "isnthyearly";
			public const string IsOnlineMeeting = "isonlinemeeting";
			public const string IsRegenerate = "isregenerate";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsUnsafe = "isunsafe";
			public const string IsWeekDayPattern = "isweekdaypattern";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastExpandedInstanceDate = "lastexpandedinstancedate";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MonthOfYear = "monthofyear";
			public const string NextExpansionInstanceDate = "nextexpansioninstancedate";
			public const string Occurrences = "occurrences";
			public const string OnlineMeetingChatId = "onlinemeetingchatid";
			public const string OnlineMeetingId = "onlinemeetingid";
			public const string OnlineMeetingJoinUrl = "onlinemeetingjoinurl";
			public const string OnlineMeetingType = "onlinemeetingtype";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string OutlookOwnerApptId = "outlookownerapptid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PatternEndDate = "patternenddate";
			public const string PatternEndType = "patternendtype";
			public const string PatternStartDate = "patternstartdate";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string RecurrencePatternType = "recurrencepatterntype";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RequiredAttendees = "requiredattendees";
			public const string RuleId = "ruleid";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SeriesStatus = "seriesstatus";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StartTime = "starttime";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subcategory = "subcategory";
			public const string Subject = "subject";
			public const string SubscriptionId = "subscriptionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "recurringappointmentmaster";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4251;
		public const string EntityCollectionSchemaName = "RecurringAppointmentMasters";
		public const string EntityDisplayCollectionName = "Cuộc hẹn lặp lại";
		public const string DisplayName = "Cuộc hẹn lặp lại";
		public const string EntitySetName = "recurringappointmentmasters";
		public const string EntityLogicalCollectionName = "recurringappointmentmasters";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "RecurringAppointmentMaster";
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Guid RecurringAppointmentMasterId)
		{
			Entity = new Entity(EntityLogicalName, RecurringAppointmentMasterId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurringAppointmentMaster"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurringAppointmentMaster"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurringAppointmentMaster(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurringAppointmentMaster"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurringAppointmentMaster(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn lặp lại</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Hoạt động</para>
		/// <para><strong>Description</strong>: Loại hoạt động.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại</para>
		/// <para><strong>Description</strong>: Nhập thể loại để xác định loại cuộc hẹn lặp lại, như họp giao ban hay cuộc gọi dịch vụ, để liên kết cuộc hẹn với bộ phận hoặc nhóm kinh doanh.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày của tháng</para>
		/// <para><strong>Description</strong>: Ngày của tháng xảy ra cuộc hẹn lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 31</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DayOfMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DayOfMonth); }
			set { Entity.Attributes[Fields.DayOfMonth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặt nạ ngày của tuần</para>
		/// <para><strong>Description</strong>: Bitmask cho biết ngày của tuần xảy ra cuộc hẹn lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 127</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysOfWeekMask
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysOfWeekMask); }
			set { Entity.Attributes[Fields.DaysOfWeekMask] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cuộc hẹn đã xóa</para>
		/// <para><strong>Description</strong>: Danh sách lần xuất hiện đã xóa của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DeletedExceptionsList
		{
			get { return Entity.GetAttributeValue<string>(Fields.DeletedExceptionsList); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Nhập thêm thông tin để mô tả cuộc hẹn lặp lại, như những điểm thảo luận chính hoặc mục tiêu.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian</para>
		/// <para><strong>Description</strong>: Khoảng thời gian của chuỗi cuộc hẹn lặp lại, tính bằng phút.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày kết thúc có hiệu lực</para>
		/// <para><strong>Description</strong>: Ngày kết thúc thực tế của chuỗi cuộc hẹn lặp lại, dựa trên ngày kết thúc đã chỉ định và mẫu lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveEndDate); }
			set { Entity.Attributes[Fields.EffectiveEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày bắt đầu có hiệu lực</para>
		/// <para><strong>Description</strong>: Ngày bắt đầu thực tế của chuỗi cuộc hẹn lặp lại, dựa trên ngày bắt đầu đã chỉ định và mẫu lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveStartDate); }
			set { Entity.Attributes[Fields.EffectiveStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian kết thúc mẫu</para>
		/// <para><strong>Description</strong>: Thời gian kết thúc của hoạt động đã liên kết.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Cho biết tỷ giá quy đổi của loại tiền trên bản ghi. Tỷ giá được dùng để đổi tất cả các trường tiền trong bản ghi từ loại tiền địa phương sang loại tiền mặc định của hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã trạng thái mở rộng</para>
		/// <para><strong>Description</strong>: Mã trạng thái để cho biết chuỗi cuộc hẹn lặp lại mở rộng toàn bộ hay một phần.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode.Khong_mo_rong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode? ExpansionStateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExpansionStateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày đầu tiên của tuần</para>
		/// <para><strong>Description</strong>: Ngày đầu tiên của tuần dành cho mẫu lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FirstDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FirstDayOfWeek); }
			set { Entity.Attributes[Fields.FirstDayOfWeek] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản chính cuộc hẹn lặp lại trong Outlook</para>
		/// <para><strong>Description</strong>: Mã định danh Outlook duy nhất để tương quan chuỗi cuộc hẹn lặp lại trong các hộp thư Exchange.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GlobalObjectId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GlobalObjectId); }
			set { Entity.Attributes[Fields.GlobalObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id nhóm</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của chuỗi cuộc hẹn lặp lại, trong đó, đã cập nhật thông tin lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="recurringappointmentmaster"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GroupId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản</para>
		/// <para><strong>Description</strong>: Xác định chuỗi cuộc hẹn lặp lại để xảy ra vào mỗi ngày thứ N của tháng. Duy nhất hợp lệ cho mẫu lặp lại hàng tháng và hàng năm.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.Instance"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.Instance? Instance
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Instance);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.Instance)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Instance] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Instance] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Cuộc hẹn</para>
		/// <para><strong>Description</strong>: Loại xuất hiện của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode.Khong_Lap_lai"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode? InstanceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng</para>
		/// <para><strong>Description</strong>: Số lượng đơn vị của loại lặp lại đã cho giữa các lần xảy ra.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Interval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Interval); }
			set { Entity.Attributes[Fields.Interval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sự kiện Cả Ngày</para>
		/// <para><strong>Description</strong>: Chọn khả năng cuộc hẹn lặp lại là sự kiện cả ngày, để đảm bảo lên lịch nguồn lực bắt buộc cho cả ngày.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAllDayEvent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAllDayEvent); }
			set { Entity.Attributes[Fields.IsAllDayEvent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được lập hóa đơn</para>
		/// <para><strong>Description</strong>: Chỉ định khả năng xuất hóa đơn cho chuỗi cuộc hẹn lặp lại khi giải quyết trường hợp.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Riêng tư</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMapiPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMapiPrivate); }
			set { Entity.Attributes[Fields.IsMapiPrivate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày thứ n hàng tháng</para>
		/// <para><strong>Description</strong>: Chỉ định khả năng xảy ra chuỗi cuộc hẹn lặp lại sau N tháng một lần. Duy nhất hợp lệ cho mẫu lặp lại hàng tháng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthMonthly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthMonthly); }
			set { Entity.Attributes[Fields.IsNthMonthly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng thứ n hàng năm</para>
		/// <para><strong>Description</strong>: Chỉ định khả năng xảy ra chuỗi cuộc hẹn lặp lại sau N năm một lần. Duy nhất hợp lệ cho mẫu lặp lại hàng năm.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthYearly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthYearly); }
			set { Entity.Attributes[Fields.IsNthYearly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là cuộc họp trực tuyến</para>
		/// <para><strong>Description</strong>: Hiển thị xem đây có phải là cuộc họp trực tuyến hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOnlineMeeting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOnlineMeeting); }
			set { Entity.Attributes[Fields.IsOnlineMeeting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo lại</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegenerate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegenerate); }
			set { Entity.Attributes[Fields.IsRegenerate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động Thông thường</para>
		/// <para><strong>Description</strong>: Chỉ định hoạt động là loại hoạt động thông thường hay loại sự kiện.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Không an toàn</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsUnsafe
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsUnsafe); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mỗi ngày trong tuần</para>
		/// <para><strong>Description</strong>: Chỉ định khả năng mẫu lặp lại hàng tuần là mẫu hàng ngày vào ngày trong tuần. Duy nhất hợp lệ cho mẫu hàng tuần.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWeekDayPattern
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWeekDayPattern); }
			set { Entity.Attributes[Fields.IsWeekDayPattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình làm việc Được tạo</para>
		/// <para><strong>Description</strong>: Chỉ định khả năng tạo chuỗi cuộc hẹn lặp lại từ quy tắc quy trình.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày xuất hiện mở rộng cuối cùng</para>
		/// <para><strong>Description</strong>: Ngày xuất hiện mở rộng cuối cùng của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastExpandedInstanceDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastExpandedInstanceDate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí</para>
		/// <para><strong>Description</strong>: Nhập vị trí diễn ra cuộc hẹn lặp lại, như phòng hội nghị hoặc văn phòng khách hàng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Location
		{
			get { return Entity.GetAttributeValue<string>(Fields.Location); }
			set { Entity.Attributes[Fields.Location] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tháng của năm</para>
		/// <para><strong>Description</strong>: Chỉ định tháng của năm cho mẫu lặp lại.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear.Thang_trong_Nam_khong_hop_le"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear? MonthOfYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MonthOfYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MonthOfYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MonthOfYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày xuất hiện mở rộng tiếp theo</para>
		/// <para><strong>Description</strong>: Ngày xuất hiện mở rộng tiếp theo của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? NextExpansionInstanceDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.NextExpansionInstanceDate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lần xảy ra</para>
		/// <para><strong>Description</strong>: Số lần xảy ra cuộc hẹn trong chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Occurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Occurrences); }
			set { Entity.Attributes[Fields.Occurrences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID cuộc trò chuyện trong cuộc họp trực tuyến</para>
		/// <para><strong>Description</strong>: Hiển thị ID cuộc trò chuyện trong cuộc họp trực tuyến.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingChatId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingChatId); }
			set { Entity.Attributes[Fields.OnlineMeetingChatId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID cuộc họp trực tuyến</para>
		/// <para><strong>Description</strong>: Hiển thị ID cuộc họp trực tuyến.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingId); }
			set { Entity.Attributes[Fields.OnlineMeetingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL tham gia cuộc họp trực tuyến</para>
		/// <para><strong>Description</strong>: Hiển thị URL tham gia cuộc họp trực tuyến.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 600</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingJoinUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingJoinUrl); }
			set { Entity.Attributes[Fields.OnlineMeetingJoinUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại cuộc họp trực tuyến</para>
		/// <para><strong>Description</strong>: Hiển thị loại cuộc họp trực tuyến.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.OnlineMeetingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.OnlineMeetingType? OnlineMeetingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OnlineMeetingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.OnlineMeetingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OnlineMeetingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OnlineMeetingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia Tùy chọn</para>
		/// <para><strong>Description</strong>: Nhập khách hàng, người liên hệ, khách hàng tiềm năng, người dùng hoặc nguồn lực thiết bị không cần thiết tại cuộc hẹn lặp lại, nhưng có thể tham gia theo tùy chọn.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> OptionalAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.OptionalAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.OptionalAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tổ chức</para>
		/// <para><strong>Description</strong>: Nhập người dùng phụ trách phối hợp hoặc chủ trì cuộc họp lặp lại để đảm bảo hiển thị cuộc họp trong dạng xem Hoạt động của tôi của người dùng.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Organizer
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Organizer).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Organizer] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ bản chính cuộc hẹn lặp lại trong Outlook</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của chủ sở hữu chuỗi cuộc hẹn lặp lại Microsoft Office Outlook có tương quan với thuộc tính MAPI PR_OWNER_APPT_ID.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OutlookOwnerApptId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OutlookOwnerApptId); }
			set { Entity.Attributes[Fields.OutlookOwnerApptId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết thúc phạm vi lặp lại</para>
		/// <para><strong>Description</strong>: Ngày kết thúc của phạm vi lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternEndDate); }
			set { Entity.Attributes[Fields.PatternEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại kết thúc mẫu</para>
		/// <para><strong>Description</strong>: Chọn loại ngày kết thúc cho cuộc hẹn lặp lại, như không có ngày kết thúc hoặc số lần xảy ra.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PatternEndType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PatternEndType? PatternEndType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PatternEndType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PatternEndType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PatternEndType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PatternEndType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bắt đầu phạm vi lặp lại</para>
		/// <para><strong>Description</strong>: Ngày bắt đầu của phạm vi lặp lại.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternStartDate); }
			set { Entity.Attributes[Fields.PatternStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ưu tiên</para>
		/// <para><strong>Description</strong>: Chọn mức ưu tiên sao cho khách hàng được ưu tiên hoặc những vấn đề nghiêm trọng sẽ được xử lý nhanh chóng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode.Binh_thuong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tần số lặp lại</para>
		/// <para><strong>Description</strong>: Chọn loại mẫu dành cho cuộc hẹn lặp lại để chỉ định cuộc hẹn xảy ra hàng ngày, hàng tuần, hàng tháng hay hàng năm.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType.Hang_ngay"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType? RecurrencePatternType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RecurrencePatternType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RecurrencePatternType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RecurrencePatternType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Chọn bản ghi liên quan đến chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="contact"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tham gia Bắt buộc</para>
		/// <para><strong>Description</strong>: Nhập khách hàng, người liên hệ, khách hàng tiềm năng, người dùng hoặc nguồn lực thiết bị khác bắt buộc phải tham gia cuộc hẹn lặp lại.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> RequiredAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.RequiredAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.RequiredAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc lặp lại</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quy tắc lặp lại có liên kết với chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="recurrencerule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RuleId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Kết thúc</para>
		/// <para><strong>Description</strong>: Thời gian kết thúc theo lịch của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Bắt đầu</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu theo lịch của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái chuỗi</para>
		/// <para><strong>Description</strong>: Chỉ định chuỗi cuộc hẹn lặp lại là hiện hoạt hay không hoạt động.</para>
		/// <para><strong>Two Option</strong> - [<strong>Hiện hoạt</strong>]: true - [<strong>Không hoạt động</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Hiện hoạt</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SeriesStatus
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SeriesStatus); }
			set { Entity.Attributes[Fields.SeriesStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sắp xếp Ngày</para>
		/// <para><strong>Description</strong>: Hiển thị ngày và giờ sắp xếp hoạt động.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Giai đoạn Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của giai đoạn.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian bắt đầu mẫu</para>
		/// <para><strong>Description</strong>: Thời gian bắt đầu của chuỗi cuộc hẹn lặp lại.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Cho biết cuộc hẹn lặp lại ở trạng thái mở, đã lên lịch, đã hoàn thành hay bị hủy. Cuộc hẹn đã hoàn thành hoặc bị hủy sẽ có trạng thái chỉ đọc và không chỉnh sửa được.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode.Mo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của cuộc hẹn lặp lại.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại Phụ</para>
		/// <para><strong>Description</strong>: Nhập thể loại con để xác định loại cuộc hẹn lặp lại và liên kết hoạt động với sản phẩm cụ thể, khu vực bán hàng, nhóm kinh doanh hoặc chức năng khác.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subcategory
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
			set { Entity.Attributes[Fields.Subcategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Description</strong>: Nhập mô tả ngắn về mục tiêu hoặc chủ đề chính của cuộc hẹn lặp lại.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Đường ngang</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}