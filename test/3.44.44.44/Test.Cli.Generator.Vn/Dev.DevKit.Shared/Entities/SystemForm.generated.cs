//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:22
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SystemFormOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum FormActivationState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hien_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_hoat_dong = 0
	}
	public enum FormPresentation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AirForm</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		AirForm = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ClassicForm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		ClassicForm = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ConvertedICForm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ConvertedICForm = 2
	}
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AppointmentBook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		AppointmentBook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: AppointmentBookBackup</para>
		/// <para><strong>Value</strong>: 102</para>
		/// </summary>
		AppointmentBookBackup = 102,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản xem trước</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Ban_xem_truoc = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bảng thông tin</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Bang_thong_tin = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bảng thông tin Power BI</para>
		/// <para><strong>Value</strong>: 103</para>
		/// </summary>
		Bang_thong_tin_Power_BI = 103,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bảng thông tin theo ngữ cảnh</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Bang_thong_tin_theo_ngu_canh = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu dòng tác vụ</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Bieu_mau_dong_tac_vu = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu xem nhanh</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Bieu_mau_xem_nhanh = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Chinh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính – Trải nghiệm tương tác</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Chinh_Trai_nghiem_tuong_tac = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Di động – Nhanh</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Di_dong_Nhanh = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thoại</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Hop_thoai = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: InteractionCentricDashboard</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		InteractionCentricDashboard = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 100</para>
		/// </summary>
		Khac = 100,
		/// <summary>
		/// <para><strong>Display Name</strong>: MainBackup</para>
		/// <para><strong>Value</strong>: 101</para>
		/// </summary>
		MainBackup = 101,
		/// <summary>
		/// <para><strong>Display Name</strong>: MiniCampaignBO</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		MiniCampaignBO = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo nhanh</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Tao_nhanh = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thẻ</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		The = 11
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SystemForm : EntityBase
	{
		public struct Fields
		{
			public const string AncestorFormId = "ancestorformid";
			public const string ComponentState = "componentstate";
			public const string Description = "description";
			public const string FormActivationState = "formactivationstate";
			public const string FormId = "formid";
			public const string FormIdUnique = "formidunique";
			public const string FormJson = "formjson";
			public const string FormPresentation = "formpresentation";
			public const string FormXml = "formxml";
			public const string FormXmlManaged = "formxmlmanaged";
			public const string IntroducedVersion = "introducedversion";
			public const string IsAIRMerged = "isairmerged";
			public const string IsDefault = "isdefault";
			public const string IsDesktopEnabled = "isdesktopenabled";
			public const string IsManaged = "ismanaged";
			public const string IsTabletEnabled = "istabletenabled";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string PublishedOn = "publishedon";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Type = "type";
			public const string UniqueName = "uniquename";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "systemform";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1030;
		public const string EntityCollectionSchemaName = "SystemForms";
		public const string EntityDisplayCollectionName = "Các biểu mẫu hệ thống";
		public const string DisplayName = "Biểu mẫu hệ thống";
		public const string EntitySetName = "systemforms";
		public const string EntityLogicalCollectionName = "systemforms";
		public const string EntityPrimaryIdAttribute = "formid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SystemForm";
		[DebuggerNonUserCode()]
		public SystemForm()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemForm(Guid SystemFormId)
		{
			Entity = new Entity(EntityLogicalName, SystemFormId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemForm(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemForm"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SystemForm(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemForm"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemForm(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemForm(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemForm"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemForm(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemForm(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemForm(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu mẹ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của biểu mẫu mẹ.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AncestorFormId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AncestorFormId); }
			set { Entity.Attributes[Fields.AncestorFormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả biểu mẫu hoặc bảng thông tin.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái biểu mẫu</para>
		/// <para><strong>Description</strong>: Chỉ định trạng thái của biểu mẫu.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState.Hien_hoat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState? FormActivationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FormActivationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FormActivationState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FormActivationState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của biểu mẫu loại bản ghi.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormId); }
			set { Entity.Attributes[Fields.FormId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của biểu mẫu được sử dụng khi đồng bộ các tùy chỉnh cho ứng dụng khách Microsoft Dynamics 365 dành cho Outlook.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormIdUnique); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Trình bày Json của bố cục biểu mẫu.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FormJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.FormJson); }
			set { Entity.Attributes[Fields.FormJson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã làm mới KHÔNG KHÍ</para>
		/// <para><strong>Description</strong>: Cho biết biểu mẫu này có hay không nằm trong bố cục UI đã cập nhật trong Microsoft Dynamics CRM 2015 hoặc Bản cập nhật Microsoft Dynamics CRM Online 2015.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation.ClassicForm"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation? FormPresentation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FormPresentation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FormPresentation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FormPresentation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Trình bày XML của bố cục biểu mẫu.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FormXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.FormXml); }
			set { Entity.Attributes[Fields.FormXml] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: chênh lệch formXml như trong giải pháp được quản lý. chỉ sử dụng nội bộ</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FormXmlManaged
		{
			get { return Entity.GetAttributeValue<string>(Fields.FormXmlManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản được Giới thiệu</para>
		/// <para><strong>Description</strong>: Phiên bản có biểu mẫu được giới thiệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã làm mới</para>
		/// <para><strong>Description</strong>: Cho biết biểu mẫu này có được hợp nhất hay không với bố cục UI đã cập nhật trong Microsoft Dynamics CRM 2015 hoặc Bản cập nhật Microsoft Dynamics CRM Online 2015.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAIRMerged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAIRMerged); }
			set { Entity.Attributes[Fields.IsAIRMerged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu mặc định</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng biểu mẫu hoặc bảng thông tin là mặc định hệ thống.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật máy tính để bàn</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng sẽ bật bảng thông tin cho máy tính để bàn.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDesktopEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDesktopEnabled); }
			set { Entity.Attributes[Fields.IsDesktopEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có bật máy tính bảng</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng sẽ bật bảng thông tin cho máy tính bảng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTabletEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTabletEnabled); }
			set { Entity.Attributes[Fields.IsTabletEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của biểu mẫu.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Thực thể</para>
		/// <para><strong>Description</strong>: Mã biểu diễn loại bản ghi.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Ghi đè Bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày Xuất bản</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PublishedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PublishedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại biểu mẫu</para>
		/// <para><strong>Description</strong>: Loại biểu mẫu, ví dụ: Bảng thông tin hoặc Bản xem trước.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Duy nhất</para>
		/// <para><strong>Description</strong>: Tên Duy nhất</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Version
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Version); }
			set { Entity.Attributes[Fields.Version] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Cho biết phiên bản của các tùy chỉnh sẽ được đồng bộ với ứng dụng khách Microsoft Dynamics 365 dành cho Outlook.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}