//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:25
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.WorkflowOptionSets
{
	public enum BusinessProcessType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng Công việc</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dong_Cong_viec = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng Tác vụ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dong_Tac_vu = 1
	}
	public enum Category
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng AI</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Dong_AI = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng hiện đại</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Dong_hien_dai = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng màn hình nền</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Dong_man_hinh_nen = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dòng quy trình công việc</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Dong_quy_trinh_cong_viec = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hành động</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hanh_dong = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thoại</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hop_thoai = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy tắc công việc</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Quy_tac_cong_viec = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình làm việc</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Quy_trinh_lam_viec = 0
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum CreateStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Sau khi thao tác</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Sau_khi_thao_tac = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trước khi thao tác</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Truoc_khi_thao_tac = 20
	}
	public enum DeleteStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Sau khi thao tác</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Sau_khi_thao_tac = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trước khi thao tác</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Truoc_khi_thao_tac = 20
	}
	public enum Mode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chạy ẩn</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chay_an = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian thực</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Thoi_gian_thuc = 1
	}
	public enum ProcessTriggerScope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bieu_mau = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thuc_the = 2
	}
	public enum RunAs
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chu_so_huu = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Gọi</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nguoi_dung_Goi = 1
	}
	public enum Scope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấp trên: Đơn vị kinh doanh cấp dưới</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Cap_tren_Don_vi_kinh_doanh_cap_duoi = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Don_vi_Kinh_doanh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nguoi_dung = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		To_chuc = 4
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ban_nhap = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã kích hoạt</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_kich_hoat = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạm ngưng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_tam_ngung = 2
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Ban_nhap</strong></para>
		/// </summary>
		Ban_nhap = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: CompanyDLPViolation</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Da_tam_ngung</strong></para>
		/// </summary>
		CompanyDLPViolation = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã kích hoạt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Da_kich_hoat</strong></para>
		/// </summary>
		Da_kich_hoat = 2
	}
	public enum ThrottlingBehavior
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm đối tượng thuê</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nhom_doi_tuong_thue = 1
	}
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Định nghĩa</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dinh_nghia = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích hoạt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Kich_hoat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mẫu</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Mau = 3
	}
	public enum UIFlowType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang ghi</para>
		/// <para><strong>Value</strong>: 101</para>
		/// </summary>
		Dang_ghi = 101,
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Automate Desktop</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Power_Automate_Desktop = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Selenium IDE</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Selenium_IDE = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trình ghi Windows (V1)</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Trinh_ghi_Windows_V1 = 0
	}
	public enum UpdateStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Sau khi thao tác</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Sau_khi_thao_tac = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trước khi thao tác</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Truoc_khi_thao_tac = 20
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Workflow : EntityBase
	{
		public struct Fields
		{
			public const string ActiveWorkflowId = "activeworkflowid";
			public const string AsyncAutoDelete = "asyncautodelete";
			public const string BillingContext = "billingcontext";
			public const string BusinessProcessType = "businessprocesstype";
			public const string Category = "category";
			public const string ClientData = "clientdata";
			public const string ClientDataIsCompressed = "clientdataiscompressed";
			public const string ComponentState = "componentstate";
			public const string ConnectionReferences = "connectionreferences";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreateMetadata = "createmetadata";
			public const string CreateStage = "createstage";
			public const string Definition = "definition";
			public const string DeleteStage = "deletestage";
			public const string Dependencies = "dependencies";
			public const string Description = "description";
			public const string DesktopFlowModules = "desktopflowmodules";
			public const string DynamicsSolutionContext = "dynamicssolutioncontext";
			public const string EntityImageId = "entityimageid";
			public const string FormId = "formid";
			public const string InputParameters = "inputparameters";
			public const string Inputs = "inputs";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCrmUIWorkflow = "iscrmuiworkflow";
			public const string IsManaged = "ismanaged";
			public const string IsTransacted = "istransacted";
			public const string LanguageCode = "languagecode";
			public const string LicenseEntitledBy = "licenseentitledby";
			public const string Metadata = "metadata";
			public const string Mode = "mode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifyMetadata = "modifymetadata";
			public const string Name = "name";
			public const string OnDemand = "ondemand";
			public const string Outputs = "outputs";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentWorkflowId = "parentworkflowid";
			public const string PlanVerified = "planverified";
			public const string PluginTypeId = "plugintypeid";
			public const string PrimaryEntity = "primaryentity";
			public const string ProcessOrder = "processorder";
			public const string ProcessRoleAssignment = "processroleassignment";
			public const string ProcessTriggerFormId = "processtriggerformid";
			public const string ProcessTriggerScope = "processtriggerscope";
			public const string Rank = "rank";
			public const string RendererObjectTypeCode = "rendererobjecttypecode";
			public const string ResourceContainer = "resourcecontainer";
			public const string ResourceId = "resourceid";
			public const string RunAs = "runas";
			public const string SchemaVersion = "schemaversion";
			public const string Scope = "scope";
			public const string SdkMessageId = "sdkmessageid";
			public const string SolutionId = "solutionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subprocess = "subprocess";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SuspensionReasonDetails = "suspensionreasondetails";
			public const string SyncWorkflowLogOnFailure = "syncworkflowlogonfailure";
			public const string ThrottlingBehavior = "throttlingbehavior";
			public const string TriggerOnCreate = "triggeroncreate";
			public const string TriggerOnDelete = "triggerondelete";
			public const string TriggerOnUpdateAttributeList = "triggeronupdateattributelist";
			public const string TrustedAccess = "trustedaccess";
			public const string Type = "type";
			public const string UIData = "uidata";
			public const string UIFlowType = "uiflowtype";
			public const string UniqueName = "uniquename";
			public const string UpdateStage = "updatestage";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowId = "workflowid";
			public const string WorkflowIdUnique = "workflowidunique";
			public const string Xaml = "xaml";
		}
		public const string EntityLogicalName = "workflow";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4703;
		public const string EntityCollectionSchemaName = "Workflows";
		public const string EntityDisplayCollectionName = "Quy trình";
		public const string DisplayName = "Quy trình";
		public const string EntitySetName = "workflows";
		public const string EntityLogicalCollectionName = "workflows";
		public const string EntityPrimaryIdAttribute = "workflowid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Workflow";
		[DebuggerNonUserCode()]
		public Workflow()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Workflow(Guid WorkflowId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Workflow(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Workflow"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Workflow(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Workflow"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Workflow(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Workflow(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Workflow"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Workflow(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Workflow(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Workflow(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID quy trình hiện hoạt</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản ghi kích hoạt mới nhất cho quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ActiveWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ActiveWorkflowId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xóa công việc hoàn thành</para>
		/// <para><strong>Description</strong>: Cho biết khả năng tự động xóa công việc hệ thống không đồng bộ khi hoàn thành.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AsyncAutoDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AsyncAutoDelete); }
			set { Entity.Attributes[Fields.AsyncAutoDelete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BillingContext</para>
		/// <para><strong>Description</strong>: Bối cảnh thanh toán của dòng quy trình này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillingContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillingContext); }
			set { Entity.Attributes[Fields.BillingContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Quy trình Công việc</para>
		/// <para><strong>Description</strong>: Loại Quy trình Công việc.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType.Dong_Cong_viec"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType? BusinessProcessType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BusinessProcessType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BusinessProcessType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BusinessProcessType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thể loại</para>
		/// <para><strong>Description</strong>: Thể loại của quy trình.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Category"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Category? Category
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Category);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Category)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Category] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Category] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu máy khách</para>
		/// <para><strong>Description</strong>: Lôgic kinh doanh chuyển đổi thành dữ liệu máy khách</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientData
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientData); }
			set { Entity.Attributes[Fields.ClientData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client Data Is Compressed</para>
		/// <para><strong>Description</strong>: For Internal Use Only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Workflow has compressed client data</strong>]: true - [<strong>Workflow does not have compressed client data</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Workflow does not have compressed client data</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ClientDataIsCompressed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ClientDataIsCompressed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham chiếu kết nối</para>
		/// <para><strong>Description</strong>: Tham chiếu kết nối liên quan đến quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectionReferences
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectionReferences); }
			set { Entity.Attributes[Fields.ConnectionReferences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo siêu dữ liệu</para>
		/// <para><strong>Description</strong>: Tạo siêu dữ liệu cho quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CreateMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.CreateMetadata); }
			set { Entity.Attributes[Fields.CreateMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tạo giai đoạn</para>
		/// <para><strong>Description</strong>: Giai đoạn của quy trình khi được kích hoạt khi Tạo.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.CreateStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.CreateStage? CreateStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CreateStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.CreateStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreateStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CreateStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định nghĩa</para>
		/// <para><strong>Description</strong>: Định nghĩa logic kinh doanh của phiên bản quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Definition
		{
			get { return Entity.GetAttributeValue<string>(Fields.Definition); }
			set { Entity.Attributes[Fields.Definition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xóa giai đoạn</para>
		/// <para><strong>Description</strong>: Giai đoạn của quy trình khi được kích hoạt khi Xóa.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.DeleteStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.DeleteStage? DeleteStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeleteStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.DeleteStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeleteStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeleteStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quan hệ phụ thuộc</para>
		/// <para><strong>Description</strong>: Quan hệ phụ thuộc mềm của phiên bản quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Dependencies
		{
			get { return Entity.GetAttributeValue<string>(Fields.Dependencies); }
			set { Entity.Attributes[Fields.Dependencies] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả quy trình.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô-đun dòng màn hình nền</para>
		/// <para><strong>Description</strong>: Các mô-đun dòng màn hình nền liên quan đến quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DesktopFlowModules
		{
			get { return Entity.GetAttributeValue<string>(Fields.DesktopFlowModules); }
			set { Entity.Attributes[Fields.DesktopFlowModules] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngữ cảnh giải pháp Dynamics</para>
		/// <para><strong>Description</strong>: danh sách được phân tách bằng dấu phẩy của một hoặc nhiều Tên duy nhất của Giải pháp bên thứ nhất Dynamics mà quy trình làm việc này có trong ngữ cảnh.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DynamicsSolutionContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.DynamicsSolutionContext); }
			set { Entity.Attributes[Fields.DynamicsSolutionContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id ảnh thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Biểu mẫu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của biểu mẫu được liên kết.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormId); }
			set { Entity.Attributes[Fields.FormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham số đầu vào</para>
		/// <para><strong>Description</strong>: Tham số đầu vào cho quy trình.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InputParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.InputParameters); }
			set { Entity.Attributes[Fields.InputParameters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu vào</para>
		/// <para><strong>Description</strong>: Định nghĩa đầu vào cho quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Inputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Inputs); }
			set { Entity.Attributes[Fields.Inputs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản được Giới thiệu</para>
		/// <para><strong>Description</strong>: Phiên bản có biểu mẫu được giới thiệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là quy trình CRM</para>
		/// <para><strong>Description</strong>: Cho biết khả năng tạo quy trình bằng ứng dụng Microsoft Dynamics 365, bản web.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCrmUIWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCrmUIWorkflow); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được Quản lý</para>
		/// <para><strong>Description</strong>: Cho biết thành phần giải pháp có là một phần của giải pháp được quản lý hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có giao dịch</para>
		/// <para><strong>Description</strong>: Có thực thi các bước trong quy trình trong một giao dịch hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTransacted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTransacted); }
			set { Entity.Attributes[Fields.IsTransacted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ</para>
		/// <para><strong>Description</strong>: Ngôn ngữ của quy trình.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giấy phép được cấp bởi</para>
		/// <para><strong>Description</strong>: Nguồn của các quyền theo giấy phép.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference LicenseEntitledBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.LicenseEntitledBy); }
			set { Entity.Attributes[Fields.LicenseEntitledBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu</para>
		/// <para><strong>Description</strong>: Siêu dữ liệu bổ sung cho quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Metadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.Metadata); }
			set { Entity.Attributes[Fields.Metadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ</para>
		/// <para><strong>Description</strong>: Cho biết chế độ của quy trình.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode.Chay_an"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode? Mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Mode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa quy trình lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModifyMetadata</para>
		/// <para><strong>Description</strong>: Flow modify metadata used for telemetry, etc.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModifyMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModifyMetadata); }
			set { Entity.Attributes[Fields.ModifyMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên quy trình</para>
		/// <para><strong>Description</strong>: Tên của quy trình.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chạy ở dạng theo yêu cầu</para>
		/// <para><strong>Description</strong>: Cho biết có thể chạy quy trình ở dạng quy trình theo yêu cầu hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OnDemand
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OnDemand); }
			set { Entity.Attributes[Fields.OnDemand] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đầu ra</para>
		/// <para><strong>Description</strong>: Định nghĩa đầu ra cho quy trình làm việc này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Outputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Outputs); }
			set { Entity.Attributes[Fields.Outputs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Ghi đè Bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu quy trình.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID quy trình mẹ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của định nghĩa cho kích hoạt quy trình.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentWorkflowId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kế hoạch đã được xác minh</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đã được xác minh</strong>]: true - [<strong>Chưa được xác minh</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Chưa được xác minh</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PlanVerified
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PlanVerified); }
			set { Entity.Attributes[Fields.PlanVerified] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của loại bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sdkmessagefilter"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PluginTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PluginTypeId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể chính</para>
		/// <para><strong>Description</strong>: Thực thể chính cho quy trình. Bạn có thể liên kết quy trình với một hay nhiều thao tác SDK đã xác định trên thực thể chính.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntity); }
			set { Entity.Attributes[Fields.PrimaryEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thứ tự quy trình</para>
		/// <para><strong>Description</strong>: Bạn cần nhập thứ tự dòng quy trình công việc.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessOrder); }
			set { Entity.Attributes[Fields.ProcessOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gán vai trò cho quy trình</para>
		/// <para><strong>Description</strong>: Hệ thống chứa gán vai trò cho quy trình.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessRoleAssignment
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessRoleAssignment); }
			set { Entity.Attributes[Fields.ProcessRoleAssignment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ProcessTriggerFormId</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của biểu mẫu liên kết cho bộ kích hoạt quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessTriggerFormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessTriggerFormId); }
			set { Entity.Attributes[Fields.ProcessTriggerFormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ProcessTriggerScope</para>
		/// <para><strong>Description</strong>: Phạm vi của bộ kích hoạt quy trình.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope? ProcessTriggerScope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessTriggerScope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProcessTriggerScope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProcessTriggerScope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xếp hạng</para>
		/// <para><strong>Description</strong>: Cho biết xếp hạng cho thứ tự của việc thực thi quy trình làm việc đồng bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
			set { Entity.Attributes[Fields.Rank] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại bộ tái tạo</para>
		/// <para><strong>Description</strong>: Loại bộ tái tạo của quy trình làm việc</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RendererObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.RendererObjectTypeCode); }
			set { Entity.Attributes[Fields.RendererObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ResourceContainer</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ResourceContainer
		{
			get { return Entity.GetAttributeValue<string>(Fields.ResourceContainer); }
			set { Entity.Attributes[Fields.ResourceContainer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ResourceId</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ResourceId); }
			set { Entity.Attributes[Fields.ResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chạy với tư cách người dùng</para>
		/// <para><strong>Description</strong>: Xác định tài khoản người dùng hệ thống mà quy trình làm việc thực thi.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs.Nguoi_dung_Goi"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs? RunAs
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RunAs);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RunAs] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RunAs] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản lược đồ</para>
		/// <para><strong>Description</strong>: Phiên bản lược đồ cho quy trình làm việc này.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaVersion); }
			set { Entity.Attributes[Fields.SchemaVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phạm vi</para>
		/// <para><strong>Description</strong>: Phạm vi của quy trình.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Scope"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Scope? Scope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Scope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Scope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Scope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Scope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo SDK</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Thông điệp SDK liên kết với quy trình làm việc này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sdkmessage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của quy trình làm việc</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode.Ban_nhap"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của quy trình làm việc</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là quy trình con</para>
		/// <para><strong>Description</strong>: Cho biết có thể bao gồm quy trình vào các quy trình khác ở dạng quy trình con không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Subprocess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Subprocess); }
			set { Entity.Attributes[Fields.Subprocess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SuspensionReasonDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.SuspensionReasonDetails); }
			set { Entity.Attributes[Fields.SuspensionReasonDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ghi nhật ký khi gặp lỗi</para>
		/// <para><strong>Description</strong>: Chọn lưu vào tệp nhật ký lỗi quy trình làm việc đồng bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncWorkflowLogOnFailure
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncWorkflowLogOnFailure); }
			set { Entity.Attributes[Fields.SyncWorkflowLogOnFailure] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại hành vi điều chỉnh</para>
		/// <para><strong>Description</strong>: Loại hành vi điều chỉnh.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.ThrottlingBehavior"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.ThrottlingBehavior? ThrottlingBehavior
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ThrottlingBehavior);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.ThrottlingBehavior)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ThrottlingBehavior] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ThrottlingBehavior] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích hoạt khi tạo</para>
		/// <para><strong>Description</strong>: Cho biết hệ thống sẽ kích hoạt quy trình khi tạo thực thể chính hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TriggerOnCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TriggerOnCreate); }
			set { Entity.Attributes[Fields.TriggerOnCreate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích hoạt khi xóa</para>
		/// <para><strong>Description</strong>: Cho biết hệ thống sẽ kích hoạt quy trình khi xóa thực thể chính hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TriggerOnDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TriggerOnDelete); }
			set { Entity.Attributes[Fields.TriggerOnDelete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích hoạt khi cập nhật danh sách thuộc tính</para>
		/// <para><strong>Description</strong>: Thuộc tính kích hoạt quy trình khi đã cập nhật.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TriggerOnUpdateAttributeList
		{
			get { return Entity.GetAttributeValue<string>(Fields.TriggerOnUpdateAttributeList); }
			set { Entity.Attributes[Fields.TriggerOnUpdateAttributeList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quyền truy cập tin cậy</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Quy trình làm việc đã trải qua bước kiểm tra quyền truy cập</strong>]: true - [<strong>Quy trình làm việc chưa trải qua bước kiểm tra quyền truy cập</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Quy trình làm việc chưa trải qua bước kiểm tra quyền truy cập</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TrustedAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TrustedAccess); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại</para>
		/// <para><strong>Description</strong>: Loại quy trình.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu UI</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UIData
		{
			get { return Entity.GetAttributeValue<string>(Fields.UIData); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại dòng giao diện người dùng</para>
		/// <para><strong>Description</strong>: Loại quy trình Dòng giao diện người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.UIFlowType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.UIFlowType? UIFlowType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UIFlowType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.UIFlowType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UIFlowType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UIFlowType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên duy nhất</para>
		/// <para><strong>Description</strong>: Tên duy nhất của quy trình</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cập nhật giai đoạn</para>
		/// <para><strong>Description</strong>: Chọn giai đoạn sẽ kích hoạt quy trình khi cập nhật.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.UpdateStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.UpdateStage? UpdateStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpdateStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.UpdateStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpdateStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpdateStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quy trình.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? WorkflowIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.WorkflowIdUnique); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: XAML xác định quy trình.</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Xaml
		{
			get { return Entity.GetAttributeValue<string>(Fields.Xaml); }
			set { Entity.Attributes[Fields.Xaml] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}