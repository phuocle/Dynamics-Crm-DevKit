//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:53
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets
{
	public enum OperationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Completed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Failed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Queued</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Queued = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting For Language Provision</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Waiting_For_Language_Provision = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ProvisionLanguageForUser : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string Lcid = "lcid";
			public const string Name = "name";
			public const string OperationStatus = "operationstatus";
			public const string OrganizationId = "organizationid";
			public const string ProvisionLanguageForUserId = "provisionlanguageforuserid";
			public const string UserId = "userid";
		}
		public const string EntityLogicalName = "provisionlanguageforuser";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10032;
		public const string EntityCollectionSchemaName = "ProvisionLanguageForUsers";
		public const string EntityDisplayCollectionName = "ProvisionLanguageForUser";
		public const string DisplayName = "ProvisionLanguageForUser";
		public const string EntitySetName = "provisionlanguageforusers";
		public const string EntityLogicalCollectionName = "provisionlanguageforusers";
		public const string EntityPrimaryIdAttribute = "provisionlanguageforuserid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "ProvisionLanguageForUser";
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Guid ProvisionLanguageForUserId)
		{
			Entity = new Entity(EntityLogicalName, ProvisionLanguageForUserId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProvisionLanguageForUser"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProvisionLanguageForUser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ProvisionLanguageForUser(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProvisionLanguageForUser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ProvisionLanguageForUser(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProvisionLanguageForUser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AsyncOperationId</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AsyncOperationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AsyncOperationId); }
			set { Entity.Attributes[Fields.AsyncOperationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lcid</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Lcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Lcid); }
			set { Entity.Attributes[Fields.Lcid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OperationStatus</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets.OperationStatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets.OperationStatus? OperationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProvisionLanguageForUserOptionSets.OperationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ProvisionLanguageForUser</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProvisionLanguageForUserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProvisionLanguageForUserId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserId</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserId); }
			set { Entity.Attributes[Fields.UserId] = value; }
		}
	}
}