//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:55
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets
{
	public enum AggregateType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tối đa</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Toi_da = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tối thiểu</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Toi_thieu = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tong_dem = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trung bình</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Trung_binh = 2
	}
	public enum InitialValueCalculationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_hoan_thanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạm dừng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_tam_dung = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_tien_hanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang treo</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dang_treo = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khong_thanh_cong = 4
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp lệ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hop_le = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hợp lệ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hop_le = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hợp lệ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hop_le</strong></para>
		/// </summary>
		Hop_le = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hợp lệ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hop_le</strong></para>
		/// </summary>
		Khong_hop_le = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RollupProperties : EntityBase
	{
		public struct Fields
		{
			public const string AggregateAttributeLogicalName = "aggregateattributelogicalname";
			public const string AggregateEntityLogicalName = "aggregateentitylogicalname";
			public const string AggregateEntityTypeCode = "aggregateentitytypecode";
			public const string AggregateFilterAttributes = "aggregatefilterattributes";
			public const string AggregateRelationshipName = "aggregaterelationshipname";
			public const string AggregateType = "aggregatetype";
			public const string AllowHierarchyOnSource = "allowhierarchyonsource";
			public const string BootstrapCurrentDepth = "bootstrapcurrentdepth";
			public const string BootstrapRetryCount = "bootstrapretrycount";
			public const string BootstrapRollupAsyncJobId = "bootstraprollupasyncjobid";
			public const string BootstrapStepNumber = "bootstrapstepnumber";
			public const string BootstrapTargetPointer = "bootstraptargetpointer";
			public const string DataType = "datatype";
			public const string IncrementalRollupAsyncJobId = "incrementalrollupasyncjobid";
			public const string InitialValueCalculationStatus = "initialvaluecalculationstatus";
			public const string IsActivityPartyIncluded = "isactivitypartyincluded";
			public const string LastCalculationTime = "lastcalculationtime";
			public const string RollupAttributeLogicalName = "rollupattributelogicalname";
			public const string RollupEntityBaseTableName = "rollupentitybasetablename";
			public const string RollupEntityLogicalName = "rollupentitylogicalname";
			public const string RollupEntityPrimaryKeyPhysicalName = "rollupentityprimarykeyphysicalname";
			public const string RollupEntityTypeCode = "rollupentitytypecode";
			public const string RollupFilterAttributes = "rollupfilterattributes";
			public const string RollupPropertiesId = "rolluppropertiesid";
			public const string RollupStateAttributePhysicalName = "rollupstateattributephysicalname";
			public const string SourceHierarchicalRelationshipName = "sourcehierarchicalrelationshipname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "rollupproperties";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9510;
		public const string EntityCollectionSchemaName = "RollupProperties";
		public const string EntityDisplayCollectionName = "Thuộc tính tổng số";
		public const string DisplayName = "Thuộc tính tổng số";
		public const string EntitySetName = "rolluppropertiescollection";
		public const string EntityLogicalCollectionName = "rolluppropertiescollection";
		public const string EntityPrimaryIdAttribute = "rolluppropertiesid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RollupProperties";
		[DebuggerNonUserCode()]
		public RollupProperties()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupProperties(Guid RollupPropertiesId)
		{
			Entity = new Entity(EntityLogicalName, RollupPropertiesId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupProperties(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupProperties"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RollupProperties(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupProperties"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupProperties(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupProperties(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupProperties"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupProperties(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupProperties(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupProperties(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên lôgic thuộc tính mục tiêu</para>
		/// <para><strong>Description</strong>: Tên lôgic của thuộc tính mục tiêu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateAttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateAttributeLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên lôgic thực thể mục tiêu</para>
		/// <para><strong>Description</strong>: Tên lôgic của thực thể mục tiêu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateEntityLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại thực thể tổng hợp</para>
		/// <para><strong>Description</strong>: Mã loại của thực thể gộp tổng hợp</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AggregateEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AggregateEntityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu chí lọc mục tiêu</para>
		/// <para><strong>Description</strong>: Tiêu chí lọc dành cho mục tiêu</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateFilterAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateFilterAttributes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên mối quan hệ nguồn - mục tiêu</para>
		/// <para><strong>Description</strong>: Tên mối quan hệ của mối quan hệ nguồn - mục tiêu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateRelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateRelationshipName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại gộp tổng hợp lấy tổng số</para>
		/// <para><strong>Description</strong>: Loại gộp tổng hợp để thực hiện</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType.Tong_dem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType? AggregateType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AggregateType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chấp nhận hệ thống cấp bậc của nguồn</para>
		/// <para><strong>Description</strong>: Chấp nhận thực thể nguồn theo cấp bậc</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowHierarchyOnSource
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowHierarchyOnSource); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ sâu dùng để tính tự khởi động</para>
		/// <para><strong>Description</strong>: Độ sâu dùng để tính tự khởi động</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapCurrentDepth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapCurrentDepth); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm lần thử lại tự khởi động</para>
		/// <para><strong>Description</strong>: Tổng đếm lần thử lại dành cho tự khởi động</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapRetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapRetryCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id công việc không đồng bộ tính hàng loạt.</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất biểu thị id công việc không đồng bộ tính hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BootstrapRollupAsyncJobId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BootstrapRollupAsyncJobId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số hiệu bước để bắt đầu thực thi tự khởi động</para>
		/// <para><strong>Description</strong>: Số hiệu bước để bắt đầu thực thi tự khởi động</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapStepNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapStepNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Con trỏ mục tiêu dùng để tính tự khởi động</para>
		/// <para><strong>Description</strong>: Con trỏ mục tiêu dùng để tính tự khởi động</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapTargetPointer
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapTargetPointer); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại dữ liệu trường tổng số</para>
		/// <para><strong>Description</strong>: Loại dữ liệu trường tổng số</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataType
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id công việc không đồng bộ thực thể tính toán</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất biểu thị id công việc không đồng bộ thực thể tính toán.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IncrementalRollupAsyncJobId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IncrementalRollupAsyncJobId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái tính giá trị ban đầu</para>
		/// <para><strong>Description</strong>: Trạng thái tính giá trị ban đầu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus.Dang_treo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus? InitialValueCalculationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialValueCalculationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cờ cho biết Bên Hoạt động có được bao gồm hay không</para>
		/// <para><strong>Description</strong>: Cờ cho biết Bên Hoạt động có được bao gồm hay không</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsActivityPartyIncluded
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsActivityPartyIncluded); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tính lần cuối</para>
		/// <para><strong>Description</strong>: Lần cuối cùng thực hiện tính toán cho trường tổng số này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastCalculationTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastCalculationTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên lôgic thuộc tính nguồn</para>
		/// <para><strong>Description</strong>: Tên lôgic của thuộc tính nguồn</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupAttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupAttributeLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên bảng gốc thực thể tổng số</para>
		/// <para><strong>Description</strong>: Tên bảng gốc của thực thể tổng số</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityBaseTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityBaseTableName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên lôgic của thực thể nguồn</para>
		/// <para><strong>Description</strong>: Tên lôgic của thực thể nguồn</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên vật lý của khóa chính thực thể tổng số</para>
		/// <para><strong>Description</strong>: Tên vật lý của khóa chính dành cho thực thể tổng số</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityPrimaryKeyPhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityPrimaryKeyPhysicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã loại thực thể tổng số</para>
		/// <para><strong>Description</strong>: Mã loại của thực thể tổng số</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RollupEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RollupEntityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu chí lọc nguồn</para>
		/// <para><strong>Description</strong>: Tiêu chí lọc dành cho nguồn</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupFilterAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupFilterAttributes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id thuộc tính tổng số</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản ghi hiện tại.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid RollupPropertiesId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên vật lý thuộc tính trạng thái tổng số</para>
		/// <para><strong>Description</strong>: Tên vật lý của thuộc tính trạng thái tổng số</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupStateAttributePhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupStateAttributePhysicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên mối quan hệ nguồn theo cấp bậc</para>
		/// <para><strong>Description</strong>: Tên mối quan hệ của mối quan hệ nguồn theo cấp bậc</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceHierarchicalRelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceHierarchicalRelationshipName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của tổng số.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode.Hop_le"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Thông tin thêm về trạng thái của thuộc tính tổng số.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của tổng số.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}