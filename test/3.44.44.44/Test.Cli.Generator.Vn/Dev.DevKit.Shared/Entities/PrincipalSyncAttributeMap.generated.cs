//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:53
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets
{
	public enum DefaultSyncDirection
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hai chiều</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hai_chieu = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToCRM</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ToCRM = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToExchange</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ToExchange = 1
	}
	public enum SyncDirection
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hai chiều</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hai_chieu = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToCRM</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ToCRM = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToExchange</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ToExchange = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PrincipalSyncAttributeMap : EntityBase
	{
		public struct Fields
		{
			public const string AllowedSyncDirection = "allowedsyncdirection";
			public const string AttributeCRMDisplayName = "attributecrmdisplayname";
			public const string AttributeCRMName = "attributecrmname";
			public const string AttributeExchangeDisplayName = "attributeexchangedisplayname";
			public const string AttributeExchangeName = "attributeexchangename";
			public const string ComputedProperties = "computedproperties";
			public const string DefaultSyncDirection = "defaultsyncdirection";
			public const string EntityTypeCode = "entitytypecode";
			public const string IsComputed = "iscomputed";
			public const string MappingName = "mappingname";
			public const string OrganizationId = "organizationid";
			public const string ParentPrincipalSyncAttributeMappingId = "parentprincipalsyncattributemappingid";
			public const string PrincipalId = "principalid";
			public const string PrincipalSyncAttributeMapId = "principalsyncattributemapid";
			public const string SyncDirection = "syncdirection";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "principalsyncattributemap";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1404;
		public const string EntityCollectionSchemaName = "PrincipalSyncAttributeMaps";
		public const string EntityDisplayCollectionName = "";
		public const string DisplayName = "Bản đồ Thuộc tính Đồng bộ Chính";
		public const string EntitySetName = "principalsyncattributemaps";
		public const string EntityLogicalCollectionName = "principalsyncattributemaps";
		public const string EntityPrimaryIdAttribute = "principalsyncattributemapid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "PrincipalSyncAttributeMap";
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(Guid PrincipalSyncAttributeMapId)
		{
			Entity = new Entity(EntityLogicalName, PrincipalSyncAttributeMapId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalSyncAttributeMap"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalSyncAttributeMap"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PrincipalSyncAttributeMap(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalSyncAttributeMap"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PrincipalSyncAttributeMap(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalSyncAttributeMap(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hướng chấp nhận đồng bộ</para>
		/// <para><strong>Description</strong>: Xác định hướng chấp nhận đồng bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: -1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AllowedSyncDirection
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AllowedSyncDirection); }
			set { Entity.Attributes[Fields.AllowedSyncDirection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên hiển thị của thuộc tính AttributeCRMName, đang bật để bản địa hóa dữ liệu.</para>
		/// <para><strong>Description</strong>: Tên Hiển thị Thuộc tính CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeCRMDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeCRMDisplayName); }
			set { Entity.Attributes[Fields.AttributeCRMDisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên CRM của thuộc tính mà nhờ đó, xác định ánh xạ này</para>
		/// <para><strong>Description</strong>: Tên thuộc tính CRM.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeCRMName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeCRMName); }
			set { Entity.Attributes[Fields.AttributeCRMName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên hiển thị của thuộc tính AttributeExchangeName, đang bật để bản địa hóa dữ liệu.</para>
		/// <para><strong>Description</strong>: Tên Hiển thị Thuộc tính Exchange.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeExchangeDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeExchangeDisplayName); }
			set { Entity.Attributes[Fields.AttributeExchangeDisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Exchange của thuộc tính mà nhờ đó, xác định ánh xạ thuộc tính này</para>
		/// <para><strong>Description</strong>: Tên thuộc tính Exchange.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeExchangeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeExchangeName); }
			set { Entity.Attributes[Fields.AttributeExchangeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thuộc tính đã tính cho một thuộc tính</para>
		/// <para><strong>Description</strong>: Thuộc tính đã tính.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComputedProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComputedProperties); }
			set { Entity.Attributes[Fields.ComputedProperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hướng đồng bộ</para>
		/// <para><strong>Description</strong>: Hướng đồng bộ định</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.DefaultSyncDirection"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.DefaultSyncDirection.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.DefaultSyncDirection? DefaultSyncDirection
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DefaultSyncDirection);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.DefaultSyncDirection)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DefaultSyncDirection] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DefaultSyncDirection] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên của Thực thể có ánh xạ thuộc tính này được xác định</para>
		/// <para><strong>Description</strong>: Mã loại đối tượng của thực thể.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityTypeCode2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityTypeCode); }
			set { Entity.Attributes[Fields.EntityTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tính</para>
		/// <para><strong>Description</strong>: Chỉ định khả năng ánh xạ là thuộc tính đã tính</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsComputed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsComputed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên của ánh xạ</para>
		/// <para><strong>Description</strong>: Tên ánh xạ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MappingName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MappingName); }
			set { Entity.Attributes[Fields.MappingName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ánh xạ thuộc tính đồng bộ mẹ</para>
		/// <para><strong>Description</strong>: Ánh xạ thuộc tính đồng bộ mẹ mà ánh xạ này thuộc về</para>
		/// <para><strong>Lookup</strong>: <see cref="principalsyncattributemap"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentPrincipalSyncAttributeMappingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentPrincipalSyncAttributeMappingId); }
			set { Entity.Attributes[Fields.ParentPrincipalSyncAttributeMappingId] = value; }
		}
		/// <summary>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrincipalId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrincipalId); }
			set { Entity.Attributes[Fields.PrincipalId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của ánh xạ thuộc tính đồng bộ nguyên tắc.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PrincipalSyncAttributeMapId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PrincipalSyncAttributeMapId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hướng đồng bộ</para>
		/// <para><strong>Description</strong>: Hướng đồng bộ</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.SyncDirection"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.SyncDirection.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.SyncDirection? SyncDirection
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SyncDirection);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PrincipalSyncAttributeMapOptionSets.SyncDirection)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SyncDirection] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SyncDirection] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}