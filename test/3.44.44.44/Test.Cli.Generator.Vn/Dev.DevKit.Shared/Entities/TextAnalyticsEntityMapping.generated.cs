//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum EntityPickList
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Có</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Co = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong = 1
	}
	public enum FieldPickList
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Có</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Co = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TextAnalyticsEntityMapping : EntityBase
	{
		public struct Fields
		{
			public const string AdvancedSimilarityRuleId = "advancedsimilarityruleid";
			public const string ComponentState = "componentstate";
			public const string Entity = "entity";
			public const string EntityDisplayName = "entitydisplayname";
			public const string EntityPickList = "entitypicklist";
			public const string Field = "field";
			public const string FieldDisplayName = "fielddisplayname";
			public const string FieldPickList = "fieldpicklist";
			public const string IsManaged = "ismanaged";
			public const string IsTextMatchMapping = "istextmatchmapping";
			public const string KnowledgeSearchModelId = "knowledgesearchmodelid";
			public const string ModelType = "modeltype";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string RelationshipName = "relationshipname";
			public const string SimilarityRuleId = "similarityruleid";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TextAnalyticsEntityMappingId = "textanalyticsentitymappingid";
			public const string TextAnalyticsEntityMappingIdUnique = "textanalyticsentitymappingidunique";
		}
		public const string EntityLogicalName = "textanalyticsentitymapping";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9945;
		public const string EntityCollectionSchemaName = "TextAnalyticsEntityMappings";
		public const string EntityDisplayCollectionName = "Ánh xạ thực thể phân tích văn bản";
		public const string DisplayName = "Ánh xạ thực thể phân tích văn bản";
		public const string EntitySetName = "textanalyticsentitymappings";
		public const string EntityLogicalCollectionName = "textanalyticsentitymapping";
		public const string EntityPrimaryIdAttribute = "textanalyticsentitymappingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "TextAnalyticsEntityMapping";
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Guid TextAnalyticsEntityMappingId)
		{
			Entity = new Entity(EntityLogicalName, TextAnalyticsEntityMappingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TextAnalyticsEntityMapping"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TextAnalyticsEntityMapping"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TextAnalyticsEntityMapping(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TextAnalyticsEntityMapping"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TextAnalyticsEntityMapping(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TextAnalyticsEntityMapping(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RuleId Tương tự Nâng cao</para>
		/// <para><strong>Description</strong>: RuleId Tương tự Nâng cao được liên kết với ánh xạ thực thể.</para>
		/// <para>Required - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AdvancedSimilarityRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AdvancedSimilarityRuleId); }
			set { Entity.Attributes[Fields.AdvancedSimilarityRuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể</para>
		/// <para><strong>Description</strong>: Thực thể</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity); }
			set { Entity.Attributes[Fields.Entity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Thực thể</para>
		/// <para><strong>Description</strong>: Tên Hiển thị của Thực thể</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityDisplayName); }
			set { Entity.Attributes[Fields.EntityDisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể</para>
		/// <para><strong>Description</strong>: Chọn Thực thể</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.EntityPickList"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.EntityPickList? EntityPickList
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EntityPickList);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.EntityPickList)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EntityPickList] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EntityPickList] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường</para>
		/// <para><strong>Description</strong>: Trường</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Field
		{
			get { return Entity.GetAttributeValue<string>(Fields.Field); }
			set { Entity.Attributes[Fields.Field] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Trường</para>
		/// <para><strong>Description</strong>: Tên Hiển thị của Trường</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FieldDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FieldDisplayName); }
			set { Entity.Attributes[Fields.FieldDisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường</para>
		/// <para><strong>Description</strong>: Chọn Trường</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.FieldPickList"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.FieldPickList? FieldPickList
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FieldPickList);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TextAnalyticsEntityMappingOptionSets.FieldPickList)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FieldPickList] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FieldPickList] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Được Quản lý</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu chí</para>
		/// <para><strong>Description</strong>: Chỉ rõ việc ánh xạ dùng cho khớp văn bản hay khớp chính xác</para>
		/// <para><strong>Two Option</strong> - [<strong>Khớp Văn bản</strong>]: true - [<strong>Khớp Chính xác</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Khớp Văn bản</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTextMatchMapping
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTextMatchMapping); }
			set { Entity.Attributes[Fields.IsTextMatchMapping] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Mô hình Tìm kiếm trong Cơ sở kiến thức</para>
		/// <para><strong>Description</strong>: Mô hình Tìm kiếm trong Cơ sở kiến thức được liên kết với ánh xạ thực thể.</para>
		/// <para>Required - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference KnowledgeSearchModelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.KnowledgeSearchModelId); }
			set { Entity.Attributes[Fields.KnowledgeSearchModelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Mô hình</para>
		/// <para><strong>Description</strong>: Loại Mô hình.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ModelType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ModelType); }
			set { Entity.Attributes[Fields.ModelType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức được liên kết với Ánh xạ thực thể phân tích văn bản.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Mối quan hệ</para>
		/// <para><strong>Description</strong>: Tên Mối quan hệ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelationshipName); }
			set { Entity.Attributes[Fields.RelationshipName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Quy tắc Tương tự</para>
		/// <para><strong>Description</strong>: Quy tắc Tương tự được liên kết với ánh xạ thực thể.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="similarityrule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SimilarityRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SimilarityRuleId); }
			set { Entity.Attributes[Fields.SimilarityRuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ánh xạ thực thể phân tích văn bản</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TextAnalyticsEntityMappingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TextAnalyticsEntityMappingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Duy nhất của Ánh xạ Thực thể Phân tích Văn bản</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Ánh xạ Thực thể Phân tích Văn bản</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TextAnalyticsEntityMappingIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TextAnalyticsEntityMappingIdUnique); }
		}
	}
}