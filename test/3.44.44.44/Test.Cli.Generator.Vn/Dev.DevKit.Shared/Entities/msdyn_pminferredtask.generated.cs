//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:45
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum msdyn_automationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa bắt đầu</para>
		/// <para><strong>Value</strong>: 200,000,000</para>
		/// </summary>
		Chua_bat_dau = 200_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Value</strong>: 200,000,002</para>
		/// </summary>
		Dang_tien_hanh = 200_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoàn thành</para>
		/// <para><strong>Value</strong>: 200,000,003</para>
		/// </summary>
		Hoan_thanh = 200_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không được đề xuất</para>
		/// <para><strong>Value</strong>: 200,000,001</para>
		/// </summary>
		Khong_duoc_de_xuat = 200_000_001
	}
	public enum msdyn_reportprovisioningstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa bắt đầu</para>
		/// <para><strong>Value</strong>: 193,350,000</para>
		/// </summary>
		Chua_bat_dau = 193_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bỏ qua</para>
		/// <para><strong>Value</strong>: 193,350,004</para>
		/// </summary>
		Da_bo_qua = 193_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã cung cấp</para>
		/// <para><strong>Value</strong>: 193,350,002</para>
		/// </summary>
		Da_cung_cap = 193_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang cung cấp</para>
		/// <para><strong>Value</strong>: 193,350,001</para>
		/// </summary>
		Dang_cung_cap = 193_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 193,350,003</para>
		/// </summary>
		Khong_thanh_cong = 193_350_003
	}
	public enum msdyn_source
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang ghi</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dang_ghi = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kho dữ liệu</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Kho_du_lieu = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ban_nhap = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã nhập</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Da_nhap = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dang_tien_hanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoàn tất</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hoan_tat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Khong_thanh_cong = 3
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản nháp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Ban_nhap</strong></para>
		/// </summary>
		Ban_nhap = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã nhập</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Da_nhap</strong></para>
		/// </summary>
		Da_nhap = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phân tích</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Hoan_tat</strong></para>
		/// </summary>
		Da_phan_tich = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xếp hàng đợi</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Dang_tien_hanh</strong></para>
		/// </summary>
		Da_xep_hang_doi = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang phân tích</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Dang_tien_hanh</strong></para>
		/// </summary>
		Dang_phan_tich = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang xóa</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Dang_tien_hanh</strong></para>
		/// </summary>
		Dang_xoa = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không phân tích được</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Khong_thanh_cong</strong></para>
		/// </summary>
		Khong_phan_tich_duoc = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không xóa được</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Khong_thanh_cong</strong></para>
		/// </summary>
		Khong_xoa_duoc = 6
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_pminferredtask : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_analysisschedule = "msdyn_analysisschedule";
			public const string msdyn_automationdata = "msdyn_automationdata";
			public const string msdyn_automationstatus = "msdyn_automationstatus";
			public const string msdyn_datavalidation = "msdyn_datavalidation";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_inputdatabinding = "msdyn_inputdatabinding";
			public const string msdyn_isreportavailable = "msdyn_isreportavailable";
			public const string msdyn_iterationid = "msdyn_iterationid";
			public const string msdyn_lasterrors = "msdyn_lasterrors";
			public const string msdyn_lasterrorsreport = "msdyn_lasterrorsreport";
			public const string msdyn_lasterrorsreport_name = "msdyn_lasterrorsreport_name";
			public const string msdyn_lastreportrefreshdate = "msdyn_lastreportrefreshdate";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_outputdata = "msdyn_outputdata";
			public const string msdyn_pminferredtaskId = "msdyn_pminferredtaskid";
			public const string msdyn_reportdata = "msdyn_reportdata";
			public const string msdyn_reportprovisioningstatus = "msdyn_reportprovisioningstatus";
			public const string msdyn_sharedrecordingmetadata = "msdyn_sharedrecordingmetadata";
			public const string msdyn_source = "msdyn_source";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_pminferredtask";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10268;
		public const string EntityCollectionSchemaName = "msdyn_pminferredtasks";
		public const string EntityDisplayCollectionName = "Tác vụ được suy luận PM";
		public const string DisplayName = "Tác vụ được suy luận PM";
		public const string EntitySetName = "msdyn_pminferredtasks";
		public const string EntityLogicalCollectionName = "msdyn_pminferredtasks";
		public const string EntityPrimaryIdAttribute = "msdyn_pminferredtaskid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_pminferredtask";
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Guid msdyn_pminferredtaskId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_pminferredtaskId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_pminferredtask"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_pminferredtask"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_pminferredtask(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_pminferredtask"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_pminferredtask(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lịch trình phân tích</para>
		/// <para><strong>Description</strong>: Thông tin về lịch trình phân tích.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_analysisschedule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_analysisschedule); }
			set { Entity.Attributes[Fields.msdyn_analysisschedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu tự động hóa</para>
		/// <para><strong>Description</strong>: Dữ liệu được tính toán để thúc đẩy tự động hóa tác vụ này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_automationdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_automationdata); }
			set { Entity.Attributes[Fields.msdyn_automationdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái tự động hóa</para>
		/// <para><strong>Description</strong>: Trạng thái tự động hóa cho tác vụ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus.Chua_bat_dau"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus? msdyn_automationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_automationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_automationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_automationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xác thực dữ liệu</para>
		/// <para><strong>Description</strong>: Thông tin về quá trình xác thực dữ liệu cho nguồn dữ liệu.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_datavalidation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_datavalidation); }
			set { Entity.Attributes[Fields.msdyn_datavalidation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí dữ liệu đầu vào</para>
		/// <para><strong>Description</strong>: Vị trí của dữ liệu dùng làm đầu vào cho Phân tích tác vụ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inputdatabinding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inputdatabinding); }
			set { Entity.Attributes[Fields.msdyn_inputdatabinding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Có sẵn báo cáo</para>
		/// <para><strong>Description</strong>: Hiển thị xem báo cáo phân tích hiện đang có sẵn hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isreportavailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isreportavailable); }
			set { Entity.Attributes[Fields.msdyn_isreportavailable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID lần lặp xử lý</para>
		/// <para><strong>Description</strong>: Định danh duy nhất lần xử lý thành công gần đây nhất của tác vụ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_iterationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_iterationid); }
			set { Entity.Attributes[Fields.msdyn_iterationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi gần đây nhất</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrors
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrors); }
			set { Entity.Attributes[Fields.msdyn_lasterrors] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Báo cáo lỗi gần đây nhất</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrorsreport_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrorsreport_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày làm mới báo cáo gần đây nhất</para>
		/// <para><strong>Description</strong>: Ngày và giờ làm mới báo cáo tương ứng lần gần đây nhất.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastreportrefreshdate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastreportrefreshdate); }
			set { Entity.Attributes[Fields.msdyn_lastreportrefreshdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên thực thể tùy chỉnh.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu đầu ra</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_outputdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_outputdata); }
			set { Entity.Attributes[Fields.msdyn_outputdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tác vụ được suy luận PM</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_pminferredtaskId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_pminferredtaskId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu báo cáo</para>
		/// <para><strong>Description</strong>: Dữ liệu liên quan đến báo cáo cho tác vụ này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_reportdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_reportdata); }
			set { Entity.Attributes[Fields.msdyn_reportdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái cung cấp báo cáo</para>
		/// <para><strong>Description</strong>: Trạng thái hiện tại của hoạt động cung cấp cho báo cáo được liên kết với tác vụ này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus.Chua_bat_dau"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus? msdyn_reportprovisioningstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_reportprovisioningstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_reportprovisioningstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_reportprovisioningstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu bản ghi được chia sẻ</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sharedrecordingmetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sharedrecordingmetadata); }
			set { Entity.Attributes[Fields.msdyn_sharedrecordingmetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn tác vụ được suy luận PM</para>
		/// <para><strong>Description</strong>: Nguồn dữ liệu của Tác vụ được suy luận PM này.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source.Dang_ghi"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source? msdyn_source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_source] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của Tác vụ được suy lận PM</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của Tác vụ được suy luận PM</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}