//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ThemeOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hệ thống</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		He_thong = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tùy chỉnh</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tuy_chinh = 0
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hệ thống</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.He_thong</strong></para>
		/// </summary>
		He_thong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tùy chỉnh</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Tuy_chinh</strong></para>
		/// </summary>
		Tuy_chinh = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Theme : EntityBase
	{
		public struct Fields
		{
			public const string AccentColor = "accentcolor";
			public const string BackgroundColor = "backgroundcolor";
			public const string ControlBorder = "controlborder";
			public const string ControlShade = "controlshade";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultCustomEntityColor = "defaultcustomentitycolor";
			public const string DefaultEntityColor = "defaultentitycolor";
			public const string ExchangeRate = "exchangerate";
			public const string GlobalLinkColor = "globallinkcolor";
			public const string HeaderColor = "headercolor";
			public const string HoverLinkEffect = "hoverlinkeffect";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefaultTheme = "isdefaulttheme";
			public const string LogoId = "logoid";
			public const string LogoToolTip = "logotooltip";
			public const string MainColor = "maincolor";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NavBarBackgroundColor = "navbarbackgroundcolor";
			public const string NavBarShelfColor = "navbarshelfcolor";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PageHeaderBackgroundColor = "pageheaderbackgroundcolor";
			public const string PanelHeaderBackgroundColor = "panelheaderbackgroundcolor";
			public const string ProcessControlColor = "processcontrolcolor";
			public const string SelectedLinkEffect = "selectedlinkeffect";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string ThemeId = "themeid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string Type = "type";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "theme";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2015;
		public const string EntityCollectionSchemaName = "Themes";
		public const string EntityDisplayCollectionName = "Chủ đề";
		public const string DisplayName = "Chủ đề";
		public const string EntitySetName = "themes";
		public const string EntityLogicalCollectionName = "themes";
		public const string EntityPrimaryIdAttribute = "themeid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Theme";
		[DebuggerNonUserCode()]
		public Theme()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Theme(Guid ThemeId)
		{
			Entity = new Entity(EntityLogicalName, ThemeId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Theme(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Theme"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Theme(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Theme"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Theme(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Theme(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Theme"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Theme(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Theme(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Theme(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu nhấn</para>
		/// <para><strong>Description</strong>: Chọn màu chủ đề phụ cho Giao diện Hợp nhất được dùng trên kiểm soát quy trình</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AccentColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.AccentColor); }
			set { Entity.Attributes[Fields.AccentColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu Nền</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BackgroundColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.BackgroundColor); }
			set { Entity.Attributes[Fields.BackgroundColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu viền Kiểm soát khi Di chuột qua</para>
		/// <para><strong>Description</strong>: Chọn màu mà các điều khiển sẽ sử dụng cho đường viền</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ControlBorder
		{
			get { return Entity.GetAttributeValue<string>(Fields.ControlBorder); }
			set { Entity.Attributes[Fields.ControlBorder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu tô Kiểm soát khi Di chuột qua</para>
		/// <para><strong>Description</strong>: Chọn màu nền cho các kiểm soát sẽ sử dụng để cho biết khi bạn di chuột qua các mục</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ControlShade
		{
			get { return Entity.GetAttributeValue<string>(Fields.ControlShade); }
			set { Entity.Attributes[Fields.ControlShade] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu Thực thể Tùy chỉnh Mặc định</para>
		/// <para><strong>Description</strong>: Chọn màu thực thể tùy chỉnh mặc định nếu không có màu nào được gán</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultCustomEntityColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultCustomEntityColor); }
			set { Entity.Attributes[Fields.DefaultCustomEntityColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu Thực thể Mặc định</para>
		/// <para><strong>Description</strong>: Chọn màu mặc định cho các thực thể hệ thống nếu không có màu nào được gán</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultEntityColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultEntityColor); }
			set { Entity.Attributes[Fields.DefaultEntityColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền liên kết với Chủ đề theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu của Văn bản Liên kết và Nút</para>
		/// <para><strong>Description</strong>: Chọn màu cho tất cả các liên kết, chẳng hạn như địa chỉ email và liên kết tra cứu, và cho tất cả các nút được tập trung</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GlobalLinkColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.GlobalLinkColor); }
			set { Entity.Attributes[Fields.GlobalLinkColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu Văn bản Tiêu đề</para>
		/// <para><strong>Description</strong>: Chọn màu cho văn bản tiêu đề, chẳng hạn như các nhãn thẻ của biểu mẫu</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HeaderColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.HeaderColor); }
			set { Entity.Attributes[Fields.HeaderColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu Di chuột qua Liên kết</para>
		/// <para><strong>Description</strong>: Chọn màu mà các lệnh hoặc danh sách sẽ sử dụng để cho biết các mục được di chuột qua</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HoverLinkEffect
		{
			get { return Entity.GetAttributeValue<string>(Fields.HoverLinkEffect); }
			set { Entity.Attributes[Fields.HoverLinkEffect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề Mặc định</para>
		/// <para><strong>Description</strong>: Trạng thái mặc định của chủ đề.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefaultTheme
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefaultTheme); }
			set { Entity.Attributes[Fields.IsDefaultTheme] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Logo</para>
		/// <para><strong>Description</strong>: Tải lên tài nguyên web để sử dụng làm logo. Kích thước được khuyến nghị là cao 50 pixel và rộng tối đa 400.</para>
		/// <para><strong>Lookup</strong>: <see cref="webresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference LogoId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.LogoId); }
			set { Entity.Attributes[Fields.LogoId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chú giải công cụ Logo</para>
		/// <para><strong>Description</strong>: Nhập văn bản sẽ được dùng làm công cụ chú giải và văn bản thay thế cho logo.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LogoToolTip
		{
			get { return Entity.GetAttributeValue<string>(Fields.LogoToolTip); }
			set { Entity.Attributes[Fields.LogoToolTip] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu chính</para>
		/// <para><strong>Description</strong>: Chọn màu chủ đề chính cho Giao diện Hợp nhất được dùng trên thanh lệnh, các nút và thẻ chính</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MainColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.MainColor); }
			set { Entity.Attributes[Fields.MainColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Chủ đề</para>
		/// <para><strong>Description</strong>: Tên của Thực thể Chủ đề.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu tô của Thanh Điều hướng</para>
		/// <para><strong>Description</strong>: Chọn màu nền của Thanh Điều hướng chính</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NavBarBackgroundColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.NavBarBackgroundColor); }
			set { Entity.Attributes[Fields.NavBarBackgroundColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu tô của Ngăn Thanh Điều hướng</para>
		/// <para><strong>Description</strong>: Chọn màu nền của Thanh Điều hướng phụ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NavBarShelfColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.NavBarShelfColor); }
			set { Entity.Attributes[Fields.NavBarShelfColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho tổ chức</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu tô Tiêu đề Trang</para>
		/// <para><strong>Description</strong>: Chọn màu nền của tiêu đề trang</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PageHeaderBackgroundColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.PageHeaderBackgroundColor); }
			set { Entity.Attributes[Fields.PageHeaderBackgroundColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu tô Tiêu đề Bảng điều khiển</para>
		/// <para><strong>Description</strong>: Chọn màu nền của tiêu đề bảng điều khiển</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PanelHeaderBackgroundColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.PanelHeaderBackgroundColor); }
			set { Entity.Attributes[Fields.PanelHeaderBackgroundColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu nhấn cũ</para>
		/// <para><strong>Description</strong>: Chọn màu nền chính cho các kiểm soát quy trình</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessControlColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessControlColor); }
			set { Entity.Attributes[Fields.ProcessControlColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Màu của Liên kết đã chọn</para>
		/// <para><strong>Description</strong>: Chọn màu mà các lệnh hoặc danh sách sẽ sử dụng để cho biết các mục được chọn</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SelectedLinkEffect
		{
			get { return Entity.GetAttributeValue<string>(Fields.SelectedLinkEffect); }
			set { Entity.Attributes[Fields.SelectedLinkEffect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của Chủ đề</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ThemeOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ThemeOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ThemeOptionSets.statecode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Lý do cho trạng thái của Chủ đề</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ThemeOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ThemeOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ThemeOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ThemeId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ThemeId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền liên kết với Chủ đề theo loại tiền gốc.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại</para>
		/// <para><strong>Description</strong>: Định nghĩa loại chủ đề.</para>
		/// <para><strong>Two Option</strong> - [<strong>Tùy chỉnh</strong>]: true - [<strong>Hệ thống</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Tùy chỉnh</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Type
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Type); }
			set { Entity.Attributes[Fields.Type] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}