//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:52
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PrincipalObjectAccessReadSnapshotOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PrincipalObjectAccessReadSnapshot : EntityBase
	{
		public struct Fields
		{
			public const string ChildUserPrincipalsCount = "childuserprincipalscount";
			public const string Count = "count";
			public const string CountPercentOfTotalRows = "countpercentoftotalrows";
			public const string ObjectTypeCode = "objecttypecode";
			public const string PrincipalId = "principalid";
			public const string PrincipalObjectAccessReadSnapshotId = "principalobjectaccessreadsnapshotid";
			public const string PrincipalTypeCode = "principaltypecode";
			public const string RecordCountForOwnerID = "recordcountforownerid";
			public const string RecordCountForOwnerIDPercentOfTotalRows = "recordcountforowneridpercentoftotalrows";
			public const string RecordCountForOwningBU = "recordcountforowningbu";
			public const string RecordCountForOwningBUPercentOfTotalRows = "recordcountforowningbupercentoftotalrows";
			public const string TeamPrincipalsCount = "teamprincipalscount";
		}
		public const string EntityLogicalName = "principalobjectaccessreadsnapshot";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 90;
		public const string EntityCollectionSchemaName = "PrincipalObjectAccessReadSnapshots";
		public const string EntityDisplayCollectionName = "";
		public const string DisplayName = "";
		public const string EntitySetName = "principalobjectaccessreadsnapshots";
		public const string EntityLogicalCollectionName = "principalobjectaccessreadsnapshots";
		public const string EntityPrimaryIdAttribute = "principalobjectaccessreadsnapshotid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "PrincipalObjectAccessReadSnapshot";
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot(Guid PrincipalObjectAccessReadSnapshotId)
		{
			Entity = new Entity(EntityLogicalName, PrincipalObjectAccessReadSnapshotId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalObjectAccessReadSnapshot"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalObjectAccessReadSnapshot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PrincipalObjectAccessReadSnapshot(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PrincipalObjectAccessReadSnapshot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PrincipalObjectAccessReadSnapshot(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PrincipalObjectAccessReadSnapshot(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? ChildUserPrincipalsCount
		{
			get { return Entity.GetAttributeValue<long?>(Fields.ChildUserPrincipalsCount); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? Count
		{
			get { return Entity.GetAttributeValue<long?>(Fields.Count); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CountPercentOfTotalRows
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CountPercentOfTotalRows); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PrincipalId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PrincipalId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PrincipalObjectAccessReadSnapshotId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PrincipalTypeCode</para>
		/// <para><strong>Description</strong>: PrincipalTypeCode.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 9</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PrincipalTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PrincipalTypeCode); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RecordCountForOwnerID
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RecordCountForOwnerID); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecordCountForOwnerIDPercentOfTotalRows
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecordCountForOwnerIDPercentOfTotalRows); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RecordCountForOwningBU
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RecordCountForOwningBU); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RecordCountForOwningBUPercentOfTotalRows
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RecordCountForOwningBUPercentOfTotalRows); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? TeamPrincipalsCount
		{
			get { return Entity.GetAttributeValue<long?>(Fields.TeamPrincipalsCount); }
		}
	}
}