//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:05
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn thành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_hoan_thanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã khóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_khoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã treo</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_treo = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sẵn sàng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		San_sang = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 32</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_huy = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạm dừng</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Da_treo</strong></para>
		/// </summary>
		Da_tam_dung = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã thành công</para>
		/// <para><strong>Value</strong>: 30</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Da_thanh_cong = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Da_treo</strong></para>
		/// </summary>
		Dang_cho = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ nguồn lực</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.San_sang</strong></para>
		/// </summary>
		Dang_cho_nguon_luc = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang hủy</para>
		/// <para><strong>Value</strong>: 22</para>
		/// <para><strong>StateCode.Da_khoa</strong></para>
		/// </summary>
		Dang_huy = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tạm dừng</para>
		/// <para><strong>Value</strong>: 21</para>
		/// <para><strong>StateCode.Da_khoa</strong></para>
		/// </summary>
		Dang_tam_dung = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang thử lại</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Da_treo</strong></para>
		/// </summary>
		Dang_thu_lai = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang tiến hành</para>
		/// <para><strong>Value</strong>: 20</para>
		/// <para><strong>StateCode.Da_khoa</strong></para>
		/// </summary>
		Dang_tien_hanh = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 31</para>
		/// <para><strong>StateCode.Da_hoan_thanh</strong></para>
		/// </summary>
		Khong_thanh_cong = 31
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BulkDeleteOperation : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string BulkDeleteOperationId = "bulkdeleteoperationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string FailureCount = "failurecount";
			public const string IsRecurring = "isrecurring";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NextRun = "nextrun";
			public const string OrderedQuerySetXml = "orderedquerysetxml";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string ProcessingQEIndex = "processingqeindex";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SuccessCount = "successcount";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "bulkdeleteoperation";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4424;
		public const string EntityCollectionSchemaName = "BulkDeleteOperations";
		public const string EntityDisplayCollectionName = "Thao tác Xóa Hàng loạt";
		public const string DisplayName = "Thao tác Xóa Hàng loạt";
		public const string EntitySetName = "bulkdeleteoperations";
		public const string EntityLogicalCollectionName = "bulkdeleteoperations";
		public const string EntityPrimaryIdAttribute = "bulkdeleteoperationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "BulkDeleteOperation";
		[DebuggerNonUserCode()]
		public BulkDeleteOperation()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Guid BulkDeleteOperationId)
		{
			Entity = new Entity(EntityLogicalName, BulkDeleteOperationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BulkDeleteOperation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BulkDeleteOperation"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BulkDeleteOperation"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BulkDeleteOperation(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BulkDeleteOperation"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BulkDeleteOperation(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BulkDeleteOperation(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BulkDeleteOperation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Công việc Hệ thống</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của công việc hệ thống đã tạo bản ghi này</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="asyncoperation"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AsyncOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AsyncOperationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Công việc Xóa Hàng loạt</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BulkDeleteOperationId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Ngày và giờ tạo công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bulkdeleteoperation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lỗi</para>
		/// <para><strong>Description</strong>: Số lượng bản ghi không thể xóa được bằng công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lặp lại</para>
		/// <para><strong>Description</strong>: Thông tin về việc có xác định lặp lại cho công việc xóa hàng loạt hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRecurring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRecurring); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi công việc xóa hàng loạt lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi công việc xóa hàng loạt lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bulkdeleteoperation lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Công việc Hệ thống</para>
		/// <para><strong>Description</strong>: Tên của công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lần chạy Tiếp theo</para>
		/// <para><strong>Description</strong>: Thời gian theo lịch tiếp theo để chạy công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? NextRunUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.NextRun); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: XML tìm nạp dữ liệu của loạt truy vấn được yêu cầu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrderedQuerySetXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrderedQuerySetXml); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu thao tác xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Đơn vị kinh doanh sở hữu công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Người dùng của doanh nghiệp sở hữu thao tác xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ mục Truy vấn</para>
		/// <para><strong>Description</strong>: Chỉ mục của việc trình bày truy vấn được yêu cầu xác định loạt xóa.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessingQEIndex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessingQEIndex); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StateCode.San_sang"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StateCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến Trạng thái</para>
		/// <para><strong>Description</strong>: Lý do cho trạng thái của công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BulkDeleteOperationOptionSets.StatusCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Description</strong>: Số lượng bản ghi đã bị xóa bằng công việc xóa hàng loạt.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SuccessCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SuccessCount); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}