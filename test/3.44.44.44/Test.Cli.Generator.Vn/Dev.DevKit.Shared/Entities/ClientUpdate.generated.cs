//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:07
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ClientUpdateOptionSets
{
	public enum WhenExecute
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Sau khi SchemaChanges nhưng trước khi Tải xuống dữ liệu</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Sau_khi_SchemaChanges_nhung_truoc_khi_Tai_xuong_du_lieu = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sau khi tải xuống dữ liệu</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Sau_khi_tai_xuong_du_lieu = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trước khi SchemaChanges</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Truoc_khi_SchemaChanges = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ClientUpdate : EntityBase
	{
		public struct Fields
		{
			public const string ClientUpdateId = "clientupdateid";
			public const string CreatedOn = "createdon";
			public const string Description = "description";
			public const string SqlScript = "sqlscript";
			public const string VersionNumber = "versionnumber";
			public const string WasExecuted = "wasexecuted";
			public const string WhenExecute = "whenexecute";
		}
		public const string EntityLogicalName = "clientupdate";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 36;
		public const string EntityCollectionSchemaName = "ClientUpdates";
		public const string EntityDisplayCollectionName = "Cập nhật ứng dụng khách";
		public const string DisplayName = "Cập nhật ứng dụng khách";
		public const string EntitySetName = "clientupdates";
		public const string EntityLogicalCollectionName = "clientupdates";
		public const string EntityPrimaryIdAttribute = "clientupdateid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "ClientUpdate";
		[DebuggerNonUserCode()]
		public ClientUpdate()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ClientUpdate(Guid ClientUpdateId)
		{
			Entity = new Entity(EntityLogicalName, ClientUpdateId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ClientUpdate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ClientUpdate"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ClientUpdate(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ClientUpdate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ClientUpdate(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ClientUpdate(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ClientUpdate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ClientUpdate(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ClientUpdate(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ClientUpdate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id cập nhật ứng dụng khách</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bản cập nhật ứng dụng khách.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ClientUpdateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ClientUpdateId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ. Ngày và giờ tạo mã lệnh ClientUpdate trên máy chủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả về bản cập nhật ứng dụng khách.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã lệnh SQL</para>
		/// <para><strong>Description</strong>: Nội dung của bản cập nhật ứng dụng khách.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SqlScript
		{
			get { return Entity.GetAttributeValue<string>(Fields.SqlScript); }
			set { Entity.Attributes[Fields.SqlScript] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ. Phải do ứng dụng khách đặt thành 1 sau khi thực hiện thao tác.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WasExecuted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WasExecuted); }
			set { Entity.Attributes[Fields.WasExecuted] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ. Giá trị là: 1 - Trước SchemaChanges; 2 - Sau SchemaChanges nhưng trước khi Tải dữ liệu xuống; 3 - Sau khi tải dữ liệu xuống.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ClientUpdateOptionSets.WhenExecute"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ClientUpdateOptionSets.WhenExecute.Sau_khi_tai_xuong_du_lieu"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ClientUpdateOptionSets.WhenExecute? WhenExecute
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.WhenExecute);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ClientUpdateOptionSets.WhenExecute)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.WhenExecute] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.WhenExecute] = null;
			}
		}
	}
}