//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.DocumentIndexOptionSets
{
	public enum DocumentTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DocumentIndex : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentId = "documentid";
			public const string DocumentIndexId = "documentindexid";
			public const string DocumentTypeCode = "documenttypecode";
			public const string IsLatestVersion = "islatestversion";
			public const string IsPublished = "ispublished";
			public const string KeyWords = "keywords";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Number = "number";
			public const string OrganizationId = "organizationid";
			public const string SearchText = "searchtext";
			public const string SubjectId = "subjectid";
			public const string Title = "title";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "documentindex";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 126;
		public const string EntityCollectionSchemaName = "DocumentIndexes";
		public const string EntityDisplayCollectionName = "Bài viết được Lập chỉ mục";
		public const string DisplayName = "Bài viết được Lập chỉ mục";
		public const string EntitySetName = "documentindexes";
		public const string EntityLogicalCollectionName = "documentindexes";
		public const string EntityPrimaryIdAttribute = "documentindexid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "DocumentIndex";
		[DebuggerNonUserCode()]
		public DocumentIndex()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DocumentIndex(Guid DocumentIndexId)
		{
			Entity = new Entity(EntityLogicalName, DocumentIndexId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DocumentIndex(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DocumentIndex"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public DocumentIndex(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DocumentIndex"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DocumentIndex(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DocumentIndex(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DocumentIndex"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DocumentIndex(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DocumentIndex(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DocumentIndex(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bài biết được lập chỉ mục.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bài viết được lập chỉ mục.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo documentindex.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài liệu</para>
		/// <para><strong>Description</strong>: Chọn bài biết ở cấp độ cha cho mục chỉ mục tài liệu. ID liên kết chỉ mục với thông tin bài viết chẳng hạn như số, tiêu đề và từ khóa của bài viết.</para>
		/// <para><strong>Lookup</strong>: <see cref="kbarticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DocumentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DocumentId); }
			set { Entity.Attributes[Fields.DocumentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ mục Tài liệu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bài viết được lập chỉ mục.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DocumentIndexId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DocumentIndexId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Tài liệu</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.DocumentIndexOptionSets.DocumentTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.DocumentIndexOptionSets.DocumentTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DocumentIndexOptionSets.DocumentTypeCode? DocumentTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DocumentTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DocumentIndexOptionSets.DocumentTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DocumentTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DocumentTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là Phiên bản Mới nhất</para>
		/// <para><strong>Description</strong>: Cho biết phiên bản nào của bài viết trong cơ sở kiến thức là phiên bản mới nhất.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLatestVersion
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLatestVersion); }
			set { Entity.Attributes[Fields.IsLatestVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được phát hành</para>
		/// <para><strong>Description</strong>: Cho biết bài viết trong cơ sở kiến thức ở cấp độ cha có hay không được phát hành trong Microsoft Dynamics 365 để từ khóa và nội dung bài viết được bổ sung vào chỉ mục tìm kiếm.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPublished
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPublished); }
			set { Entity.Attributes[Fields.IsPublished] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Từ Khóa</para>
		/// <para><strong>Description</strong>: Nhập từ khóa cho bài viết. Từ khóa được cập nhật trong chỉ mục tìm kiếm mỗi lần phát hành bài viết.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string KeyWords
		{
			get { return Entity.GetAttributeValue<string>(Fields.KeyWords); }
			set { Entity.Attributes[Fields.KeyWords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng trong hệ thống.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Location
		{
			get { return Entity.GetAttributeValue<string>(Fields.Location); }
			set { Entity.Attributes[Fields.Location] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi bài viết được lập chỉ mục lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bài viết được lập chỉ mục lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi documentindex lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Number
		{
			get { return Entity.GetAttributeValue<string>(Fields.Number); }
			set { Entity.Attributes[Fields.Number] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Chọn ID của tổ chức có bản ghi được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn bản Tìm kiếm</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,242,880</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SearchText
		{
			get { return Entity.GetAttributeValue<string>(Fields.SearchText); }
			set { Entity.Attributes[Fields.SearchText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ đề</para>
		/// <para><strong>Description</strong>: Cho biết bản ghi chủ đề được chọn trong bài viết ở cấp độ cha của cơ sở kiến thức. ID được cập nhật trong chỉ mục tìm kiếm mỗi lần phát hành bài viết.</para>
		/// <para><strong>Lookup</strong>: <see cref="subject"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Nhập tiêu đề của bài viết trong cơ sở kiến thức ở cấp độ cha. Dữ liệu này được cập nhật trong chỉ mục tìm kiếm mỗi lần phát hành bài viết.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}