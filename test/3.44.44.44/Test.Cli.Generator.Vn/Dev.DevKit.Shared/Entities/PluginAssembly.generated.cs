//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:51
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets
{
	public enum AuthType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: BasicAuth</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		BasicAuth = 0
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum IsolationMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bên ngoài</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ben_ngoai = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp cát</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hop_cat = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong = 1
	}
	public enum SourceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AzureWebApp</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		AzureWebApp = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cơ sở dữ liệu</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Co_so_du_lieu = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lưu trữ tệp</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Luu_tru_tep = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ổ đĩa</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		O_dia = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông thường</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thong_thuong = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PluginAssembly : EntityBase
	{
		public struct Fields
		{
			public const string AuthType = "authtype";
			public const string ComponentState = "componentstate";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Culture = "culture";
			public const string CustomizationLevel = "customizationlevel";
			public const string Description = "description";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string IsolationMode = "isolationmode";
			public const string IsPasswordSet = "ispasswordset";
			public const string Major = "major";
			public const string ManagedIdentityId = "managedidentityid";
			public const string Minor = "minor";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string PackageId = "packageid";
			public const string Password = "password";
			public const string Path = "path";
			public const string PluginAssemblyId = "pluginassemblyid";
			public const string PluginAssemblyIdUnique = "pluginassemblyidunique";
			public const string PublicKeyToken = "publickeytoken";
			public const string SolutionId = "solutionid";
			public const string SourceHash = "sourcehash";
			public const string SourceType = "sourcetype";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Url = "url";
			public const string UserName = "username";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "pluginassembly";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4605;
		public const string EntityCollectionSchemaName = "PluginAssemblies";
		public const string EntityDisplayCollectionName = "Cụm tổ hợp bổ trợ";
		public const string DisplayName = "Cụm tổ hợp bổ trợ";
		public const string EntitySetName = "pluginassemblies";
		public const string EntityLogicalCollectionName = "pluginassemblies";
		public const string EntityPrimaryIdAttribute = "pluginassemblyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "PluginAssembly";
		[DebuggerNonUserCode()]
		public PluginAssembly()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginAssembly(Guid PluginAssemblyId)
		{
			Entity = new Entity(EntityLogicalName, PluginAssemblyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginAssembly(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginAssembly"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PluginAssembly(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginAssembly"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PluginAssembly(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PluginAssembly(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginAssembly"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PluginAssembly(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PluginAssembly(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginAssembly(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chỉ định chế độ xác thực với các nguồn web</para>
		/// <para><strong>Description</strong>: Chỉ định chế độ xác thực với các nguồn web như WebApp</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.AuthType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.AuthType? AuthType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AuthType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.AuthType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AuthType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AuthType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Số byte của cụm tổ hợp, theo định dạng Base64.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo cụm tổ hợp bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo cụm tổ hợp bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo pluginassembly.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Văn hóa</para>
		/// <para><strong>Description</strong>: Mã văn hóa dành cho cụm tổ hợp bổ trợ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 32</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Culture
		{
			get { return Entity.GetAttributeValue<string>(Fields.Culture); }
			set { Entity.Attributes[Fields.Culture] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Cấp độ tùy chỉnh.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -255 - <strong>MaxValue</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomizationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomizationLevel); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả của cụm tổ hợp bổ trợ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản được Giới thiệu</para>
		/// <para><strong>Description</strong>: Phiên bản có biểu mẫu được giới thiệu.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng quản lý thành phần này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ cô lập</para>
		/// <para><strong>Description</strong>: Thông tin về cách thức cô lập cụm tổ hợp bổ trợ khi chạy thực thi; Không / Hộp cát.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.IsolationMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.IsolationMode.Khong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.IsolationMode? IsolationMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IsolationMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.IsolationMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IsolationMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IsolationMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPasswordSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPasswordSet); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Phần chính của phiên bản cụm tổ hợp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 65,534</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Major
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Major); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ManagedIdentityId</para>
		/// <para><strong>Description</strong>: Unique identifier for managedidentity associated with pluginassembly.</para>
		/// <para><strong>Lookup</strong>: <see cref="managedidentity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ManagedIdentityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ManagedIdentityId); }
			set { Entity.Attributes[Fields.ManagedIdentityId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Phần phụ của phiên bản cụm tổ hợp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 65,534</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Minor
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Minor); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa cụm tổ hợp bổ trợ lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa cụm tổ hợp bổ trợ lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi pluginassembly lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của cụm tổ hợp bổ trợ.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức có liên kết với cụm tổ hợp bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Ghi đè Bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gói</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Gói phần bổ trợ liên kết với Cụm tổ hợp bổ trợ.</para>
		/// <para><strong>Lookup</strong>: <see cref="pluginpackage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PackageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PackageId); }
			set { Entity.Attributes[Fields.PackageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mật khẩu Người dùng</para>
		/// <para><strong>Description</strong>: Mật khẩu Người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Password
		{
			get { return Entity.GetAttributeValue<string>(Fields.Password); }
			set { Entity.Attributes[Fields.Password] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường dẫn</para>
		/// <para><strong>Description</strong>: Tên tệp của cụm tổ hợp bổ trợ. Dùng khi đặt loại nguồn là 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Path
		{
			get { return Entity.GetAttributeValue<string>(Fields.Path); }
			set { Entity.Attributes[Fields.Path] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của cụm tổ hợp bổ trợ.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PluginAssemblyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PluginAssemblyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của cụm tổ hợp bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PluginAssemblyIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PluginAssemblyIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã thông báo khóa công khai</para>
		/// <para><strong>Description</strong>: Mã thông báo khóa công khai của cụm tổ hợp. Bạn có thể lấy giá trị này từ cụm tổ hợp khi dùng phản xạ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 32</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PublicKeyToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.PublicKeyToken); }
			set { Entity.Attributes[Fields.PublicKeyToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Hàm băm của nguồn cụm tổ hợp.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceHash
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceHash); }
			set { Entity.Attributes[Fields.SourceHash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại nguồn thông tin</para>
		/// <para><strong>Description</strong>: Vị trí của tập hợp, ví dụ: 0=cơ sở dữ liệu, 1=trên ổ đĩa.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.SourceType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.SourceType.Co_so_du_lieu"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.SourceType? SourceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SourceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PluginAssemblyOptionSets.SourceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SourceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SourceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Url Web</para>
		/// <para><strong>Description</strong>: Url Web</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Url
		{
			get { return Entity.GetAttributeValue<string>(Fields.Url); }
			set { Entity.Attributes[Fields.Url] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người dùng</para>
		/// <para><strong>Description</strong>: Tên Người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserName); }
			set { Entity.Attributes[Fields.UserName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của cụm tổ hợp. Bạn có thể lấy giá trị từ cụm tổ hợp thông qua phản xạ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Version
		{
			get { return Entity.GetAttributeValue<string>(Fields.Version); }
			set { Entity.Attributes[Fields.Version] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}