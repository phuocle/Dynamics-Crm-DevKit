//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:02
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.aaduserOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class aaduser : EntityBase
	{
		public struct Fields
		{
			public const string aaduserId = "aaduserid";
			public const string AccountEnabled = "accountenabled";
			public const string BusinessPhones = "businessphones";
			public const string City = "city";
			public const string CompanyName = "companyname";
			public const string CreatedDateTime = "createddatetime";
			public const string DisplayName = "displayname";
			public const string GivenName = "givenname";
			public const string id = "id";
			public const string ImAddresses = "imaddresses";
			public const string JobTitle = "jobtitle";
			public const string Mail = "mail";
			public const string MobilePhone = "mobilephone";
			public const string OfficeLocation = "officelocation";
			public const string PostalCode = "postalcode";
			public const string PreferredLanguage = "preferredlanguage";
			public const string StreetAddress = "streetaddress";
			public const string surname = "surname";
			public const string UserPrincipalName = "userprincipalname";
			public const string UserType = "usertype";
		}
		public const string EntityLogicalName = "aaduser";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10018;
		public const string EntityCollectionSchemaName = "aadusers";
		public const string EntityDisplayCollectionName = "Microsoft Entra ID";
		public const string DisplayName = "Microsoft Entra ID";
		public const string EntitySetName = "aadusers";
		public const string EntityLogicalCollectionName = "aadusers";
		public const string EntityPrimaryIdAttribute = "aaduserid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "displayname";
		public const string EntitySchemaName = "aaduser";
		[DebuggerNonUserCode()]
		public aaduser()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public aaduser(Guid aaduserId)
		{
			Entity = new Entity(EntityLogicalName, aaduserId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public aaduser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="aaduser"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public aaduser(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="aaduser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public aaduser(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new aaduser(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="aaduser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public aaduser(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new aaduser(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public aaduser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Microsoft Entra ID.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid aaduserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.aaduserId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã bật tài khoản Microsoft Entra ID</para>
		/// <para><strong>Description</strong>: Cho biết Tài khoản của một Microsoft Entra ID có được bật hay không.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AccountEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AccountEnabled); }
			set { Entity.Attributes[Fields.AccountEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại doanh nghiệp</para>
		/// <para><strong>Description</strong>: Số điện thoại doanh nghiệp cho người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessPhones
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessPhones); }
			set { Entity.Attributes[Fields.BusinessPhones] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phố</para>
		/// <para><strong>Description</strong>: Thành phố.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string City
		{
			get { return Entity.GetAttributeValue<string>(Fields.City); }
			set { Entity.Attributes[Fields.City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên công ty</para>
		/// <para><strong>Description</strong>: Tên công ty.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CompanyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CompanyName); }
			set { Entity.Attributes[Fields.CompanyName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày giờ tạo</para>
		/// <para><strong>Description</strong>: Ngày giờ tạo Microsoft Entra ID.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedDateTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên hiển thị</para>
		/// <para><strong>Description</strong>: Tên hiển thị trong sổ địa chỉ cho người dùng.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisplayName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisplayName); }
			set { Entity.Attributes[Fields.DisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên gọi</para>
		/// <para><strong>Description</strong>: Tên gọi (tên) của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GivenName
		{
			get { return Entity.GetAttributeValue<string>(Fields.GivenName); }
			set { Entity.Attributes[Fields.GivenName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã định danh duy nhất cho Microsoft Entra ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Microsoft Entra ID</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? id
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.id); }
			set { Entity.Attributes[Fields.id] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ImAddresses</para>
		/// <para><strong>Description</strong>: ImAddresses cho người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImAddresses
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImAddresses); }
			set { Entity.Attributes[Fields.ImAddresses] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chức danh</para>
		/// <para><strong>Description</strong>: Chức danh của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thư</para>
		/// <para><strong>Description</strong>: Địa chỉ SMTP cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Mail
		{
			get { return Entity.GetAttributeValue<string>(Fields.Mail); }
			set { Entity.Attributes[Fields.Mail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại di động</para>
		/// <para><strong>Description</strong>: Số điện thoại di động chính cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa điểm văn phòng</para>
		/// <para><strong>Description</strong>: Vị trí văn phòng tại địa điểm kinh doanh của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OfficeLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.OfficeLocation); }
			set { Entity.Attributes[Fields.OfficeLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã bưu điện</para>
		/// <para><strong>Description</strong>: Mã bưu điện.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostalCode); }
			set { Entity.Attributes[Fields.PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ ưa dùng</para>
		/// <para><strong>Description</strong>: Ngôn ngữ ưa dùng cho người dùng. Cần tuân thủ Mã ISO 639-1; ví dụ: &apos;en-US&apos;.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PreferredLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.PreferredLanguage); }
			set { Entity.Attributes[Fields.PreferredLanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ đường phố</para>
		/// <para><strong>Description</strong>: Địa chỉ đường phố.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StreetAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.StreetAddress); }
			set { Entity.Attributes[Fields.StreetAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ</para>
		/// <para><strong>Description</strong>: Họ của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string surname
		{
			get { return Entity.GetAttributeValue<string>(Fields.surname); }
			set { Entity.Attributes[Fields.surname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên chính của người dùng</para>
		/// <para><strong>Description</strong>: Tên chính của người dùng (UPN) cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserPrincipalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserPrincipalName); }
			set { Entity.Attributes[Fields.UserPrincipalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại người dùng</para>
		/// <para><strong>Description</strong>: Loại người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserType
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserType); }
			set { Entity.Attributes[Fields.UserType] = value; }
		}
	}
}