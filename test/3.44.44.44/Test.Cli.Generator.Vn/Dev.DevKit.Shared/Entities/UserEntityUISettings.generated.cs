//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:24
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.UserEntityUISettingsOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UserEntityUISettings : EntityBase
	{
		public struct Fields
		{
			public const string InsertIntoEmailMRUXml = "insertintoemailmruxml";
			public const string LastViewedFormXml = "lastviewedformxml";
			public const string LookupMRUXml = "lookupmruxml";
			public const string MRUXml = "mruxml";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ReadingPaneXml = "readingpanexml";
			public const string RecentlyViewedXml = "recentlyviewedxml";
			public const string ShowInAddressBook = "showinaddressbook";
			public const string TabOrderXml = "taborderxml";
			public const string UserEntityUISettingsId = "userentityuisettingsid";
			public const string VersionNumber = "versionnumber";
			public const string ViewPersonalizationSettings = "viewpersonalizationsettings";
		}
		public const string EntityLogicalName = "userentityuisettings";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2500;
		public const string EntityCollectionSchemaName = "UserEntityUISettingses";
		public const string EntityDisplayCollectionName = "Thiết đặt UI thực thể người dùng";
		public const string DisplayName = "Thiết đặt UI thực thể người dùng";
		public const string EntitySetName = "userentityuisettingsset";
		public const string EntityLogicalCollectionName = "userentityuisettingses";
		public const string EntityPrimaryIdAttribute = "userentityuisettingsid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "UserEntityUISettings";
		[DebuggerNonUserCode()]
		public UserEntityUISettings()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Guid UserEntityUISettingsId)
		{
			Entity = new Entity(EntityLogicalName, UserEntityUISettingsId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public UserEntityUISettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="UserEntityUISettings"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="UserEntityUISettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new UserEntityUISettings(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="UserEntityUISettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new UserEntityUISettings(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public UserEntityUISettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gần đây nhất được chèn vào Xml email</para>
		/// <para><strong>Description</strong>: Mô tả gần đây nhất đã chèn thực thể nào vào email cho thực thể này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InsertIntoEmailMRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.InsertIntoEmailMRUXml); }
			set { Entity.Attributes[Fields.InsertIntoEmailMRUXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xem xml biểu mẫu lần cuối</para>
		/// <para><strong>Description</strong>: Mô tả gần đây nhất đã xem biểu mẫu nào cho thực thể này.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastViewedFormXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastViewedFormXml); }
			set { Entity.Attributes[Fields.LastViewedFormXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xml đã dùng gần đây nhất</para>
		/// <para><strong>Description</strong>: Danh sách các tham chiếu tra cứu được dùng gần đây nhất cho thực thể này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LookupMRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LookupMRUXml); }
			set { Entity.Attributes[Fields.LookupMRUXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xml đã dùng gần đây nhất</para>
		/// <para><strong>Description</strong>: Mô tả thẻ đã dùng gần đây nhất cho thực thể này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.MRUXml); }
			set { Entity.Attributes[Fields.MRUXml] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã loại đối tượng</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng hoặc nhóm sở hữu thiết đặt.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh sở hữu đối tượng này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhóm sở hữu dạng xem đã lưu này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sở hữu dạng xem đã lưu này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Định dạng có điều kiện</para>
		/// <para><strong>Description</strong>: Mô tả định dạng ngăn đọc của thực thể này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadingPaneXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadingPaneXml); }
			set { Entity.Attributes[Fields.ReadingPaneXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Các đối tượng đã xem gần đây nhất</para>
		/// <para><strong>Description</strong>: Mô tả gần đây nhất đã xem đối tượng nào của thực thể này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecentlyViewedXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecentlyViewedXml); }
			set { Entity.Attributes[Fields.RecentlyViewedXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện trong sổ địa chỉ</para>
		/// <para><strong>Description</strong>: Quyết định có cho hiện ra loại bản ghi trong Sổ Địa chỉ Outlook hay không</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowInAddressBook
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowInAddressBook); }
			set { Entity.Attributes[Fields.ShowInAddressBook] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xml thứ tự thẻ</para>
		/// <para><strong>Description</strong>: Mô tả thứ tự thẻ cho thực thể này</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TabOrderXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TabOrderXml); }
			set { Entity.Attributes[Fields.TabOrderXml] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho thực thể người dùng.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UserEntityUISettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UserEntityUISettingsId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Xem thiết đặt cá nhân hóa</para>
		/// <para><strong>Description</strong>: Dữ liệu đại diện cho thiết đặt cá nhân hóa dạng xem</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ViewPersonalizationSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.ViewPersonalizationSettings); }
			set { Entity.Attributes[Fields.ViewPersonalizationSettings] = value; }
		}
	}
}