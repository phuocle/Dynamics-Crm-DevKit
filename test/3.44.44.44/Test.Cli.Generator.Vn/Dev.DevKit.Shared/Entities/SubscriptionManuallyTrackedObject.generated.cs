//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:20
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SubscriptionManuallyTrackedObjectOptionSets
{
	public enum ObjectTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Người liên hệ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nguoi_lien_he = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhiệm vụ</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Nhiem_vu = 4_212
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SubscriptionManuallyTrackedObject : EntityBase
	{
		public struct Fields
		{
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string SubscriptionId = "subscriptionid";
			public const string SubscriptionManuallyTrackedObjectId = "subscriptionmanuallytrackedobjectid";
			public const string Track = "track";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "subscriptionmanuallytrackedobject";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 37;
		public const string EntityCollectionSchemaName = "SubscriptionManuallyTrackedObjects";
		public const string EntityDisplayCollectionName = "Đăng ký theo dõi thủ công các đối tượng";
		public const string DisplayName = "Đăng ký theo dõi thủ công đối tượng";
		public const string EntitySetName = "subscriptionmanuallytrackedobjects";
		public const string EntityLogicalCollectionName = "subscriptionmanuallytrackedobjects";
		public const string EntityPrimaryIdAttribute = "subscriptionmanuallytrackedobjectid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "SubscriptionManuallyTrackedObject";
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject(Guid SubscriptionManuallyTrackedObjectId)
		{
			Entity = new Entity(EntityLogicalName, SubscriptionManuallyTrackedObjectId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SubscriptionManuallyTrackedObject"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SubscriptionManuallyTrackedObject"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SubscriptionManuallyTrackedObject(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SubscriptionManuallyTrackedObject"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SubscriptionManuallyTrackedObject(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SubscriptionManuallyTrackedObject(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Đối tượng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đối tượng có đăng ký được liên kết.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã loại của đối tượng có đăng ký được liên kết.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id đăng ký</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đăng ký.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SubscriptionManuallyTrackedObjectId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SubscriptionManuallyTrackedObjectId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Thông tin chỉ định khả năng sẽ theo dõi đối tượng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Track
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Track); }
			set { Entity.Attributes[Fields.Track] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của đăng ký theo dõi thủ công đối tượng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}