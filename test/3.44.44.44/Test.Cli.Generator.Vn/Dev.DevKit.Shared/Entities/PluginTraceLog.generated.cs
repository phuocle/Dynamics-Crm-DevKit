//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:51
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets
{
	public enum Mode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dong_bo = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không đồng bộ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_dong_bo = 1
	}
	public enum OperationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoạt động của Quy trình</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hoat_dong_cua_Quy_trinh = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không xác định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_xac_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phần bổ trợ</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Phan_bo_tro = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PluginTraceLog : EntityBase
	{
		public struct Fields
		{
			public const string Configuration = "configuration";
			public const string CorrelationId = "correlationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Depth = "depth";
			public const string ExceptionDetails = "exceptiondetails";
			public const string IsSystemCreated = "issystemcreated";
			public const string MessageBlock = "messageblock";
			public const string MessageName = "messagename";
			public const string Mode = "mode";
			public const string OperationType = "operationtype";
			public const string OrganizationId = "organizationid";
			public const string PerformanceConstructorDuration = "performanceconstructorduration";
			public const string PerformanceConstructorStartTime = "performanceconstructorstarttime";
			public const string PerformanceExecutionDuration = "performanceexecutionduration";
			public const string PerformanceExecutionStartTime = "performanceexecutionstarttime";
			public const string PersistenceKey = "persistencekey";
			public const string PluginStepId = "pluginstepid";
			public const string PluginTraceLogId = "plugintracelogid";
			public const string PrimaryEntity = "primaryentity";
			public const string Profile = "profile";
			public const string RequestId = "requestid";
			public const string SecureConfiguration = "secureconfiguration";
			public const string TypeName = "typename";
		}
		public const string EntityLogicalName = "plugintracelog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4619;
		public const string EntityCollectionSchemaName = "PluginTraceLogs";
		public const string EntityDisplayCollectionName = "Nhật ký Truy vết Phần bổ trợ";
		public const string DisplayName = "Nhật ký Truy vết Phần bổ trợ";
		public const string EntitySetName = "plugintracelogs";
		public const string EntityLogicalCollectionName = "plugintracelogs";
		public const string EntityPrimaryIdAttribute = "plugintracelogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "typename";
		public const string EntitySchemaName = "PluginTraceLog";
		[DebuggerNonUserCode()]
		public PluginTraceLog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginTraceLog(Guid PluginTraceLogId)
		{
			Entity = new Entity(EntityLogicalName, PluginTraceLogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginTraceLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginTraceLog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PluginTraceLog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginTraceLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PluginTraceLog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PluginTraceLog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginTraceLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PluginTraceLog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PluginTraceLog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginTraceLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình</para>
		/// <para><strong>Description</strong>: Đặt cấu hình không bảo mật cho nhật ký truy vết phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Configuration
		{
			get { return Entity.GetAttributeValue<string>(Fields.Configuration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Tương quan</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất để theo dõi thực thi hoạt động của quy trình tùy chỉnh hoặc phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CorrelationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CorrelationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Độ sâu</para>
		/// <para><strong>Description</strong>: Độ sâu thực thi của hoạt động của quy trình tùy chỉnh hoặc phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Depth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Depth); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chi tiết Ngoại lệ</para>
		/// <para><strong>Description</strong>: Chi tiết ngoại lệ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExceptionDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExceptionDetails); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạo Hệ thống</para>
		/// <para><strong>Description</strong>: Nguồn gốc sự kiện. Hãy đặt thành true nếu đó là truy vết hệ thống; nếu không đặt thành false.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSystemCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSystemCreated); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chặn Thông báo</para>
		/// <para><strong>Description</strong>: Văn bản truy vết từ phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessageBlock
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessageBlock); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Thông báo</para>
		/// <para><strong>Description</strong>: Tên của thông báo đã kích hoạt phần bổ trợ này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessageName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ</para>
		/// <para><strong>Description</strong>: Loại thực thi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.Mode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.Mode.Khong_dong_bo"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.Mode? Mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.Mode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Thao tác</para>
		/// <para><strong>Description</strong>: Loại mã tùy chỉnh.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.OperationType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.OperationType.Khong_xac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.OperationType? OperationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PluginTraceLogOptionSets.OperationType)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho tổ chức.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Xây dựng</para>
		/// <para><strong>Description</strong>: Thời gian xây dựng, tính bằng mili giây.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PerformanceConstructorDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PerformanceConstructorDuration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Bắt đầu của Hàm dựng</para>
		/// <para><strong>Description</strong>: Ngày và giờ xây dựng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PerformanceConstructorStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PerformanceConstructorStartTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Thực thi</para>
		/// <para><strong>Description</strong>: Thời gian thực thi yêu cầu, tính bằng mili giây.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PerformanceExecutionDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PerformanceExecutionDuration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Bắt đầu Thực thi</para>
		/// <para><strong>Description</strong>: Thời gian thực thi yêu cầu, tính bằng mili giây.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PerformanceExecutionStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PerformanceExecutionStartTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khóa Duy trì</para>
		/// <para><strong>Description</strong>: Khóa duy trì quy trình không đồng bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PersistenceKey
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PersistenceKey); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Bước Phần bổ trợ</para>
		/// <para><strong>Description</strong>: ID bước đăng ký phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PluginStepId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PluginStepId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhật ký Truy vết Phần bổ trợ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PluginTraceLogId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể Chính</para>
		/// <para><strong>Description</strong>: Thực thể mà phần bổ trợ được thực thi, nếu có.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình</para>
		/// <para><strong>Description</strong>: Cấu hình phần bổ trợ có định dạng là văn bản được lập chuỗi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Profile
		{
			get { return Entity.GetAttributeValue<string>(Fields.Profile); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Yêu cầu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của yêu cầu thông báo.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RequestId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RequestId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Bảo mật</para>
		/// <para><strong>Description</strong>: Đặt cấu hình bảo mật cho nhật ký truy vết phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SecureConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.SecureConfiguration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Loại</para>
		/// <para><strong>Description</strong>: Tên loại của phần bổ trợ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TypeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.TypeName); }
		}
	}
}