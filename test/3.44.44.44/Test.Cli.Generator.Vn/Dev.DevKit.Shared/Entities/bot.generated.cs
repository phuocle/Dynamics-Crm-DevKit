//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:05
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.botOptionSets
{
	public enum accesscontrolpolicy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bất kỳ</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Bat_ky = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành viên nhóm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Thanh_vien_nhom = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trình đọc Copilot</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Trinh_doc_Copilot = 1
	}
	public enum authenticationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure Active Directory tùy chỉnh</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Azure_Active_Directory_tuy_chinh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa được chỉ định</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chua_duoc_chi_dinh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Được tích hợp</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Duoc_tich_hop = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_co = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth2 chung</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		OAuth2_chung = 4
	}
	public enum authenticationtrigger
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Khi cần thiết</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khi_can_thiet = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Luôn luôn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Luon_luon = 1
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ả Rập</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Tieng_A_Rap = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		Tieng_Anh = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh (Australia)</para>
		/// <para><strong>Value</strong>: 3,081</para>
		/// </summary>
		Tieng_Anh_Australia = 3_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh (Vương quốc Anh)</para>
		/// <para><strong>Value</strong>: 2,057</para>
		/// </summary>
		Tieng_Anh_Vuong_quoc_Anh = 2_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ba Lan</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Tieng_Ba_Lan = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Bồ Đào Nha (Brazil)</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Tieng_Bo_Dao_Nha_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đan Mạch</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Tieng_Dan_Mach = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đức</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		Tieng_Duc = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hà Lan</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Tieng_Ha_Lan = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hàn</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Tieng_Han = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hindi</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Tieng_Hindi = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hy Lạp</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Tieng_Hy_Lap = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Tieng_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Tieng_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Na Uy</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Tieng_Na_Uy = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nga</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Tieng_Nga = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nhật</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Tieng_Nhat = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Phần Lan</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Tieng_Phan_Lan = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		Tieng_Phap = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp (Canada)</para>
		/// <para><strong>Value</strong>: 3,084</para>
		/// </summary>
		Tieng_Phap_Canada = 3_084,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Séc</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Tieng_Sec = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha</para>
		/// <para><strong>Value</strong>: 1,034</para>
		/// </summary>
		Tieng_Tay_Ban_Nha = 1_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha (Hoa Kỳ)</para>
		/// <para><strong>Value</strong>: 21,514</para>
		/// </summary>
		Tieng_Tay_Ban_Nha_Hoa_Ky = 21_514,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thái</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Tieng_Thai = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thổ Nhĩ Kỳ</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Tieng_Tho_Nhi_Ky = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thụy Điển</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Tieng_Thuy_Dien = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung (Giản thể)</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Tieng_Trung_Gian_the = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung (Phồn thể)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Tieng_Trung_Phon_the = 1_028
	}
	public enum RuntimeProvider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Virtual Agents</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Power_Virtual_Agents = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vỏ Nuance Mix</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Vo_Nuance_Mix = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiện hoạt</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Hien_hoat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không hoạt động</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Khong_hoat_dong = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cung cấp</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Cung_cap = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã cung cấp</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Hien_hoat</strong></para>
		/// </summary>
		Da_cung_cap = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy cung ứng</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Da_huy_cung_ung = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không cung cấp được</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Khong_cung_cap_duoc = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiếu giấy phép</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Khong_hoat_dong</strong></para>
		/// </summary>
		Thieu_giay_phep = 5
	}
	public enum SupportedLanguages
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ả Rập</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Tieng_A_Rap = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		Tieng_Anh = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh (Australia)</para>
		/// <para><strong>Value</strong>: 3,081</para>
		/// </summary>
		Tieng_Anh_Australia = 3_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Anh (Vương quốc Anh)</para>
		/// <para><strong>Value</strong>: 2,057</para>
		/// </summary>
		Tieng_Anh_Vuong_quoc_Anh = 2_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Ba Lan</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Tieng_Ba_Lan = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Bồ Đào Nha (Brazil)</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Tieng_Bo_Dao_Nha_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đan Mạch</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Tieng_Dan_Mach = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Đức</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		Tieng_Duc = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hà Lan</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Tieng_Ha_Lan = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hàn</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Tieng_Han = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hindi</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Tieng_Hindi = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Hy Lạp</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Tieng_Hy_Lap = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Tieng_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Tieng_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Na Uy</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Tieng_Na_Uy = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nga</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Tieng_Nga = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Nhật</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Tieng_Nhat = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Phần Lan</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Tieng_Phan_Lan = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		Tieng_Phap = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Pháp (Canada)</para>
		/// <para><strong>Value</strong>: 3,084</para>
		/// </summary>
		Tieng_Phap_Canada = 3_084,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Séc</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Tieng_Sec = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha</para>
		/// <para><strong>Value</strong>: 1,034</para>
		/// </summary>
		Tieng_Tay_Ban_Nha = 1_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Tây Ban Nha (Hoa Kỳ)</para>
		/// <para><strong>Value</strong>: 21,514</para>
		/// </summary>
		Tieng_Tay_Ban_Nha_Hoa_Ky = 21_514,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thái</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Tieng_Thai = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thổ Nhĩ Kỳ</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Tieng_Tho_Nhi_Ky = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Thụy Điển</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Tieng_Thuy_Dien = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung (Giản thể)</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Tieng_Trung_Gian_the = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiếng Trung (Phồn thể)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Tieng_Trung_Phon_the = 1_028
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class bot : EntityBase
	{
		public struct Fields
		{
			public const string accesscontrolpolicy = "accesscontrolpolicy";
			public const string applicationmanifestinformation = "applicationmanifestinformation";
			public const string authenticationconfiguration = "authenticationconfiguration";
			public const string authenticationmode = "authenticationmode";
			public const string authenticationtrigger = "authenticationtrigger";
			public const string authorizedsecuritygroupids = "authorizedsecuritygroupids";
			public const string botId = "botid";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string Configuration = "configuration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string iconbase64 = "iconbase64";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string Language = "language";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProviderConnectionReferenceId = "providerconnectionreferenceid";
			public const string publishedby = "publishedby";
			public const string publishedon = "publishedon";
			public const string RuntimeProvider = "runtimeprovider";
			public const string SchemaName = "schemaname";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportedLanguages = "supportedlanguages";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SynchronizationStatus = "synchronizationstatus";
			public const string Template = "template";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "bot";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10152;
		public const string EntityCollectionSchemaName = "bots";
		public const string EntityDisplayCollectionName = "Copilot";
		public const string DisplayName = "Copilot";
		public const string EntitySetName = "bots";
		public const string EntityLogicalCollectionName = "bots";
		public const string EntityPrimaryIdAttribute = "botid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "bot";
		[DebuggerNonUserCode()]
		public bot()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public bot(Guid botId)
		{
			Entity = new Entity(EntityLogicalName, botId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public bot(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="bot"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public bot(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="bot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public bot(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new bot(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="bot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public bot(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new bot(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public bot(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính sách kiểm soát truy cập</para>
		/// <para><strong>Description</strong>: Xác định người dùng nào có thể tương tác với bot.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy.Bat_ky"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy? accesscontrolpolicy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.accesscontrolpolicy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.accesscontrolpolicy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.accesscontrolpolicy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin kê khai ứng dụng</para>
		/// <para><strong>Description</strong>: Lưu trữ thông tin cùng với dữ liệu kê khai ứng dụng, chẳng hạn như thông tin ứng dụng Teams.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string applicationmanifestinformation
		{
			get { return Entity.GetAttributeValue<string>(Fields.applicationmanifestinformation); }
			set { Entity.Attributes[Fields.applicationmanifestinformation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông tin cấu hình xác thực</para>
		/// <para><strong>Description</strong>: Lưu trữ thông tin cho cấu hình xác thực.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string authenticationconfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.authenticationconfiguration); }
			set { Entity.Attributes[Fields.authenticationconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ xác thực</para>
		/// <para><strong>Description</strong>: Xác định cách thức xác thực bot với người dùng.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode.Chua_duoc_chi_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode? authenticationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.authenticationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.authenticationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.authenticationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ kích hoạt xác thực</para>
		/// <para><strong>Description</strong>: Xác định sẽ kích hoạt xác thực bot tại điểm nào. Có thể thực thi bảo mật tại một điểm nhập của bot, nhờ đó không cần phải dùng đến các nút xác thực rõ ràng trong dòng quy trình đối thoại.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger.Khi_can_thiet"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger? authenticationtrigger
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.authenticationtrigger);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.authenticationtrigger] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.authenticationtrigger] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm bảo mật được ủy quyền</para>
		/// <para><strong>Description</strong>: Chứa danh sách được phân tách bằng dấu phẩy bao gồm lên đến 20 ID nhóm Azure Active Directory được phép tương tác với bot. Trường này bị bỏ qua nến Chính sách kiểm soát truy cập không được đặt là Thành viên nhóm.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 739</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string authorizedsecuritygroupids
		{
			get { return Entity.GetAttributeValue<string>(Fields.authorizedsecuritygroupids); }
			set { Entity.Attributes[Fields.authorizedsecuritygroupids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của Copilot.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid botId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.botId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình</para>
		/// <para><strong>Description</strong>: Dùng để lưu trữ nội dung dữ liệu cấu hình bot.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Configuration
		{
			get { return Entity.GetAttributeValue<string>(Fields.Configuration); }
			set { Entity.Attributes[Fields.Configuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu tượng (Base64)</para>
		/// <para><strong>Description</strong>: Dùng để xác định trực quan bot của bạn trong các kênh và dịch vụ. Được thể hiện trong chuỗi mã hóa base64. Phải ở định dạng PNG và có kích cỡ không quá 30K. Giá trị này có thể thay đổi bất cứ lúc nào.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 51,200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string iconbase64
		{
			get { return Entity.GetAttributeValue<string>(Fields.iconbase64); }
			set { Entity.Attributes[Fields.iconbase64] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ</para>
		/// <para><strong>Description</strong>: Mã ngôn ngữ (LCID) của Copilot này.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.Language"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.Language.Tieng_Anh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.Language? Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên hiển thị của Copilot.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ di chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: ID Chủ sở hữu</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị kinh doanh sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đơn vị kinh doanh sở hữu bản ghi</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho nhóm sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng sở hữu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tham chiếu kết nối của nhà cung cấp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho tham chiếu kết nối được liên kết với Copilot.</para>
		/// <para><strong>Lookup</strong>: <see cref="connectionreference"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProviderConnectionReferenceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProviderConnectionReferenceId); }
			set { Entity.Attributes[Fields.ProviderConnectionReferenceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người phát hành</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã phát hành bot lần cuối.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference publishedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.publishedby); }
			set { Entity.Attributes[Fields.publishedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày phát hành</para>
		/// <para><strong>Description</strong>: Ngày và giờ phát hành Copilot lần cuối</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? publishedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.publishedon); }
			set { Entity.Attributes[Fields.publishedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà cung cấp môi trường thời gian chạy</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider.Power_Virtual_Agents"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider? RuntimeProvider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RuntimeProvider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RuntimeProvider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RuntimeProvider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SchemaName</para>
		/// <para><strong>Description</strong>: Tên duy nhất để nhận dạng Copilot.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaName); }
			set { Entity.Attributes[Fields.SchemaName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của Copilot</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của Copilot</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngôn ngữ được hỗ trợ</para>
		/// <para><strong>Description</strong>: Danh sách các ngôn ngữ bot này hỗ trợ</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages> SupportedLanguages
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.SupportedLanguages);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.SupportedLanguages] = null;
				}
				else
				{
					Entity.Attributes[Fields.SupportedLanguages] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái đồng bộ hóa</para>
		/// <para><strong>Description</strong>: Dùng để lưu thông tin về các hoạt động đồng bộ hóa của bot</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SynchronizationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.SynchronizationStatus); }
			set { Entity.Attributes[Fields.SynchronizationStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mẫu</para>
		/// <para><strong>Description</strong>: Dùng để xác định mẫu và phiên bản được sử dụng cho nội dung mặc định của bot</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Template
		{
			get { return Entity.GetAttributeValue<string>(Fields.Template); }
			set { Entity.Attributes[Fields.Template] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản của quy tắc múi giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã múi giờ chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã dùng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}