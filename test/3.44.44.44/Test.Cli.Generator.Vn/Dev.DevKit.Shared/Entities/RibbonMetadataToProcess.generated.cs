//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:55
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RibbonMetadataToProcessOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RibbonMetadataToProcess : EntityBase
	{
		public struct Fields
		{
			public const string CompletedOn = "completedon";
			public const string CreatedOn = "createdon";
			public const string EntityName = "entityname";
			public const string ExceptionMessage = "exceptionmessage";
			public const string IsDbUpdate = "isdbupdate";
			public const string ProcessedOn = "processedon";
			public const string RetryCount = "retrycount";
			public const string RibbonMetadataRowId = "ribbonmetadatarowid";
			public const string SolutionId = "solutionid";
			public const string SolutionName = "solutionname";
			public const string Status = "status";
		}
		public const string EntityLogicalName = "ribbonmetadatatoprocess";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9880;
		public const string EntityCollectionSchemaName = "RibbonMetadataToProcesses";
		public const string EntityDisplayCollectionName = "Đặt Siêu dữ liệu Ruy băng để Xử lý";
		public const string DisplayName = "Siêu dữ liệu Ruy băng để Xử lý";
		public const string EntitySetName = "RibbonMetadataSetToProcess";
		public const string EntityLogicalCollectionName = "ribbonmetadatatoprocesses";
		public const string EntityPrimaryIdAttribute = "ribbonmetadatarowid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RibbonMetadataToProcess";
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess(Guid RibbonMetadataToProcessId)
		{
			Entity = new Entity(EntityLogicalName, RibbonMetadataToProcessId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RibbonMetadataToProcess"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RibbonMetadataToProcess"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RibbonMetadataToProcess(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RibbonMetadataToProcess"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RibbonMetadataToProcess(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RibbonMetadataToProcess(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày hoàn thành</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ hoàn thành việc xử lý bản ghi thực thể ruy băng. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ đã chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Lôgic của Thực thể</para>
		/// <para><strong>Description</strong>: Tên Lôgic của Thực thể</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo ngoại lệ xảy ra trong quá trình xử lý thực thể ruy băng.</para>
		/// <para><strong>Description</strong>: Thông báo ngoại lệ</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExceptionMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExceptionMessage); }
			set { Entity.Attributes[Fields.ExceptionMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là thực thể được tạo qua Bản cập nhật Db</para>
		/// <para><strong>Description</strong>: Là thực thể được tạo qua Bản cập nhật Db</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsDbUpdate
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsDbUpdate); }
			set { Entity.Attributes[Fields.IsDbUpdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày xử lý</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ xử lý bản ghi. Ngày và giờ được hiển thị trong múi giờ đã chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ProcessedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ProcessedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần Thử lại</para>
		/// <para><strong>Description</strong>: Số lần Thử lại</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RetryCount); }
			set { Entity.Attributes[Fields.RetryCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Siêu dữ liệu Ruy băng để Xử lý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho Phiên bản Siêu dữ liệu Ruy băng để Xử lý</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RibbonMetadataRowId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RibbonMetadataRowId); }
			set { Entity.Attributes[Fields.RibbonMetadataRowId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id giải pháp</para>
		/// <para><strong>Description</strong>: Id giải pháp</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
			set { Entity.Attributes[Fields.SolutionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Giải pháp của thực thể ruy băng.</para>
		/// <para><strong>Description</strong>: Tên Giải pháp của thực thể ruy băng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionName); }
			set { Entity.Attributes[Fields.SolutionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Status
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Status); }
			set { Entity.Attributes[Fields.Status] = value; }
		}
	}
}