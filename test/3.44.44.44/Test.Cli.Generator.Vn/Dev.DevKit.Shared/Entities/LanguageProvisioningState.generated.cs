//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets
{
	public enum ProvisioningStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: FileBased</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FileBased = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Khác</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khac = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: MetadataHelperDependent</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		MetadataHelperDependent = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ruy băng</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Ruy_bang = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: SystemOnly</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		SystemOnly = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class LanguageProvisioningState : EntityBase
	{
		public struct Fields
		{
			public const string ApplicationVersion = "applicationversion";
			public const string LanguageId = "languageid";
			public const string LanguageProvisioningStateId = "languageprovisioningstateid";
			public const string ProvisioningStage = "provisioningstage";
			public const string SolutionFileVersion = "solutionfileversion";
			public const string SolutionUniqueName = "solutionuniquename";
		}
		public const string EntityLogicalName = "languageprovisioningstate";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9875;
		public const string EntityCollectionSchemaName = "LanguageProvisioningStates";
		public const string EntityDisplayCollectionName = "Trạng thái Cấp ngôn ngữ";
		public const string DisplayName = "Trạng thái Cấp ngôn ngữ";
		public const string EntitySetName = "languageprovisioningstates";
		public const string EntityLogicalCollectionName = "languageprovisioningstates";
		public const string EntityPrimaryIdAttribute = "languageprovisioningstateid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "LanguageProvisioningState";
		[DebuggerNonUserCode()]
		public LanguageProvisioningState()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Guid LanguageProvisioningStateId)
		{
			Entity = new Entity(EntityLogicalName, LanguageProvisioningStateId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public LanguageProvisioningState(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="LanguageProvisioningState"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="LanguageProvisioningState"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new LanguageProvisioningState(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="LanguageProvisioningState"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public LanguageProvisioningState(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new LanguageProvisioningState(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public LanguageProvisioningState(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Ứng dụng</para>
		/// <para><strong>Description</strong>: Phiên bản Ứng dụng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicationVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicationVersion); }
			set { Entity.Attributes[Fields.ApplicationVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ngôn ngữ</para>
		/// <para><strong>Description</strong>: Id Ngôn ngữ</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageId); }
			set { Entity.Attributes[Fields.LanguageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Cấp ngôn ngữ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của phiên bản thực thể</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid LanguageProvisioningStateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.LanguageProvisioningStateId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giai đoạn Cung cấp</para>
		/// <para><strong>Description</strong>: Giai đoạn Cung cấp</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets.ProvisioningStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets.ProvisioningStage? ProvisioningStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProvisioningStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LanguageProvisioningStateOptionSets.ProvisioningStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProvisioningStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProvisioningStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Tệp của Giải pháp</para>
		/// <para><strong>Description</strong>: Phiên bản Tệp của Giải pháp</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionFileVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionFileVersion); }
			set { Entity.Attributes[Fields.SolutionFileVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên duy nhất của Giải pháp</para>
		/// <para><strong>Description</strong>: Tên duy nhất của Giải pháp</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionUniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionUniqueName); }
			set { Entity.Attributes[Fields.SolutionUniqueName] = value; }
		}
	}
}