//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:23
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị khóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bi_khoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hoàn tất</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_hoan_tat = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sẵn sàng</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		San_sang = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã hủy</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Da_huy = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ tài nguyên</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dang_cho_tai_nguyen = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang hủy</para>
		/// <para><strong>Value</strong>: 22</para>
		/// </summary>
		Dang_huy = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang thực hiện</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Dang_thuc_hien = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không thành công</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Khong_thanh_cong = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành công</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Thanh_cong = 30
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EventExpanderBreadcrumb : EntityBase
	{
		public struct Fields
		{
			public const string CompletedOn = "completedon";
			public const string CorrelationId = "correlationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Data = "data";
			public const string DataBlobId = "datablobid";
			public const string ErrorCode = "errorcode";
			public const string EventExpanderBreadcrumbId = "eventexpanderbreadcrumbid";
			public const string ExpanderStartTime = "expanderstarttime";
			public const string FriendlyMessage = "friendlymessage";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OperationType = "operationtype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartitionId = "partitionid";
			public const string PostponeUntil = "postponeuntil";
			public const string RetryCount = "retrycount";
			public const string StartedOn = "startedon";
			public const string StateCode = "breadcrumbstatecode";
			public const string StatusCode = "breadcrumbstatuscode";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
			public const string Workload = "workload";
		}
		public const string EntityLogicalName = "eventexpanderbreadcrumb";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 18085;
		public const string EntityCollectionSchemaName = "EventExpanderBreadcrumbs";
		public const string EntityDisplayCollectionName = "Đường dẫn trình mở rộng sự kiện";
		public const string DisplayName = "Đường dẫn trình mở rộng sự kiện";
		public const string EntitySetName = "eventexpanderbreadcrumbs";
		public const string EntityLogicalCollectionName = "eventexpanderbreadcrumbs";
		public const string EntityPrimaryIdAttribute = "eventexpanderbreadcrumbid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "EventExpanderBreadcrumb";
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb(Guid EventExpanderBreadcrumbId)
		{
			Entity = new Entity(EntityLogicalName, EventExpanderBreadcrumbId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EventExpanderBreadcrumb"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EventExpanderBreadcrumb"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new EventExpanderBreadcrumb(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EventExpanderBreadcrumb"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new EventExpanderBreadcrumb(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EventExpanderBreadcrumb(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày hoàn tất</para>
		/// <para><strong>Description</strong>: Ngày và giờ hoàn tất đường dẫn trình mở rộng sự kiện.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
			set { Entity.Attributes[Fields.CompletedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID tương quan</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất được dùng để tương quan.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng đã tạo bản ghi.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
			set { Entity.Attributes[Fields.CreatedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày giờ tạo bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
			set { Entity.Attributes[Fields.CreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dữ liệu</para>
		/// <para><strong>Description</strong>: Tải trọng sự kiện.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID tệp dữ liệu</para>
		/// <para><strong>Description</strong>: ID tệp cho URL blob được dùng để lưu trữ tệp.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataBlobId
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataBlobId); }
			set { Entity.Attributes[Fields.DataBlobId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã lỗi</para>
		/// <para><strong>Description</strong>: Mã lỗi của đường dẫn trình mở rộng sự kiện trong trường hợp không thành công.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID đường dẫn trình mở rộng sự kiện</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho phiên bản thực thể.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EventExpanderBreadcrumbId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EventExpanderBreadcrumbId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian bắt đầu trình mở rộng</para>
		/// <para><strong>Description</strong>: Ngày giờ bắt đầu quy trình của Trình mở rộng.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpanderStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpanderStartTime); }
			set { Entity.Attributes[Fields.ExpanderStartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thông báo thân thiện</para>
		/// <para><strong>Description</strong>: Thông báo thân thiện cho người dùng cuối.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FriendlyMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.FriendlyMessage); }
			set { Entity.Attributes[Fields.FriendlyMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng gần đây nhất đã sửa đổi bản ghi.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
			set { Entity.Attributes[Fields.ModifiedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ gần đây nhất sửa đổi đường dẫn trình mở rộng sự kiện.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
			set { Entity.Attributes[Fields.ModifiedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên của đường dẫn trình mở rộng sự kiện.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần thử lại</para>
		/// <para><strong>Description</strong>: Số lần thử lại đường dẫn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OperationType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OperationType); }
			set { Entity.Attributes[Fields.OperationType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hoãn cho đến</para>
		/// <para><strong>Description</strong>: Cho biết có phải sự kiện sẽ chỉ chạy sau ngày giờ chỉ định hay không.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeUntil); }
			set { Entity.Attributes[Fields.PostponeUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số lần thử lại</para>
		/// <para><strong>Description</strong>: Số lần thử lại đường dẫn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RetryCount); }
			set { Entity.Attributes[Fields.RetryCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày bắt đầu</para>
		/// <para><strong>Description</strong>: Ngày giờ bắt đầu đường dẫn trình mở rộng sự kiện.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
			set { Entity.Attributes[Fields.StartedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Trạng thái của đường dẫn trình mở rộng sự kiện.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StateCode.San_sang"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do dẫn đến trạng thái</para>
		/// <para><strong>Description</strong>: Lý do dẫn đến trạng thái của đường dẫn trình mở rộng sự kiện.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StatusCode.Dang_cho_tai_nguyen"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EventExpanderBreadcrumbOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khối lượng công việc</para>
		/// <para><strong>Description</strong>: Tên của khối lượng công việc.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Workload
		{
			get { return Entity.GetAttributeValue<string>(Fields.Workload); }
			set { Entity.Attributes[Fields.Workload] = value; }
		}
	}
}