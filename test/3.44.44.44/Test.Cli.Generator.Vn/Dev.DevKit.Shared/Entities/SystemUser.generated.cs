//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:22
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SystemUserOptionSets
{
	public enum AccessMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đọc</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Doc = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đọc - ghi</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Doc_ghi = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không tương tác</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Khong_tuong_tac = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng hỗ trợ</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Nguoi_dung_ho_tro = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quản trị</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quan_tri = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quản trị viên đại diện</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Quan_tri_vien_dai_dien = 5
	}
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum AzureState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Exists</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Exists = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not found or hard deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Not_found_or_hard_deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Soft deleted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Soft_deleted = 1
	}
	public enum CALType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bán hàng</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Ban_hang = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chuyên nghiệp</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chuyen_nghiep = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cơ bản</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Co_ban = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dịch vụ</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Dich_vu = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Doanh nghiệp</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Doanh_nghiep = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Service</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Field_Service = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Project Service</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Project_Service = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quản trị</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quan_tri = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết bị chuyên nghiệp</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Thiet_bi_chuyen_nghiep = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết bị cơ bản</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thiet_bi_co_ban = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết bị doanh nghiệp</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Thiet_bi_doanh_nghiep = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết bị thiết yếu</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Thiet_bi_thiet_yeu = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thiết yếu</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Thiet_yeu = 5
	}
	public enum DeletedState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not deleted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_deleted = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Soft deleted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Soft_deleted = 1
	}
	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bị từ chối</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bi_tu_choi = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phê chuẩn</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_phe_chuan = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đang chờ Phê duyệt</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dang_cho_Phe_duyet = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trống</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Trong = 0
	}
	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ hoặc Bộ định tuyến Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dong_bo_phia_May_chu_hoac_Bo_dinh_tuyen_Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư chuyển tiếp</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Hop_thu_chuyen_tiep = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 dành cho Outlook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Microsoft_Dynamics_365_danh_cho_Outlook = 1
	}
	public enum InviteStatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chưa gửi lời mời</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chua_gui_loi_moi = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã mời</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Da_moi = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời đã chấp nhận</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Loi_moi_da_chap_nhan = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời đã hết hạn</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Loi_moi_da_het_han = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời đã thu hồi</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Loi_moi_da_thu_hoi = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời đã từ chối</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Loi_moi_da_tu_choi = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời mời gần hết hạn</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Loi_moi_gan_het_han = 2
	}
	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đồng bộ phía Máy chủ hoặc Bộ định tuyến Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dong_bo_phia_May_chu_hoac_Bo_dinh_tuyen_Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 dành cho Outlook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Microsoft_Dynamics_365_danh_cho_Outlook = 1
	}
	public enum PreferredAddressCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ khác</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dia_chi_khac = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ thư tín</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dia_chi_thu_tin = 1
	}
	public enum PreferredEmailCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Giá trị mặc định</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gia_tri_mac_dinh = 1
	}
	public enum PreferredPhoneCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Chính</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dien_thoai_Chinh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Di động</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Dien_thoai_Di_dong = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Khác</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dien_thoai_Khac = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Nhà riêng</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Dien_thoai_Nha_rieng = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SystemUser : EntityBase
	{
		public struct Fields
		{
			public const string AccessMode = "accessmode";
			public const string ActiveDirectoryGuid = "activedirectoryguid";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string ApplicationId = "applicationid";
			public const string ApplicationIdUri = "applicationiduri";
			public const string AzureActiveDirectoryObjectId = "azureactivedirectoryobjectid";
			public const string AzureDeletedOn = "azuredeletedon";
			public const string AzureState = "azurestate";
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CALType = "caltype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultFiltersPopulated = "defaultfilterspopulated";
			public const string DefaultMailbox = "defaultmailbox";
			public const string DefaultOdbFolderName = "defaultodbfoldername";
			public const string DeletedState = "deletedstate";
			public const string DisabledReason = "disabledreason";
			public const string DisplayInServiceViews = "displayinserviceviews";
			public const string DomainName = "domainname";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmployeeId = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FirstName = "firstname";
			public const string FullName = "fullname";
			public const string GovernmentId = "governmentid";
			public const string HomePhone = "homephone";
			public const string IdentityId = "identityid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string InternalEMailAddress = "internalemailaddress";
			public const string InviteStatusCode = "invitestatuscode";
			public const string IsActiveDirectoryUser = "isactivedirectoryuser";
			public const string IsDisabled = "isdisabled";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string IsIntegrationUser = "isintegrationuser";
			public const string IsLicensed = "islicensed";
			public const string IsSyncWithDirectory = "issyncwithdirectory";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LatestUpdateTime = "latestupdatetime";
			public const string MiddleName = "middlename";
			public const string MobileAlertEMail = "mobilealertemail";
			public const string MobileOfflineProfileId = "mobileofflineprofileid";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string NickName = "nickname";
			public const string OrganizationId = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentSystemUserId = "parentsystemuserid";
			public const string PassportHi = "passporthi";
			public const string PassportLo = "passportlo";
			public const string PersonalEMailAddress = "personalemailaddress";
			public const string PhotoUrl = "photourl";
			public const string PositionId = "positionid";
			public const string PreferredAddressCode = "preferredaddresscode";
			public const string PreferredEmailCode = "preferredemailcode";
			public const string PreferredPhoneCode = "preferredphonecode";
			public const string ProcessId = "processid";
			public const string QueueId = "queueid";
			public const string Salutation = "salutation";
			public const string SetupUser = "setupuser";
			public const string SharePointEmailAddress = "sharepointemailaddress";
			public const string Skills = "skills";
			public const string StageId = "stageid";
			public const string SystemUserId = "systemuserid";
			public const string TerritoryId = "territoryid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UserLicenseType = "userlicensetype";
			public const string UserPuid = "userpuid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WindowsLiveID = "windowsliveid";
			public const string YammerEmailAddress = "yammeremailaddress";
			public const string YammerUserId = "yammeruserid";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}
		public const string EntityLogicalName = "systemuser";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8;
		public const string EntityCollectionSchemaName = "SystemUsers";
		public const string EntityDisplayCollectionName = "Người dùng";
		public const string DisplayName = "Người dùng";
		public const string EntitySetName = "systemusers";
		public const string EntityLogicalCollectionName = "systemusers";
		public const string EntityPrimaryIdAttribute = "systemuserid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "fullname";
		public const string EntitySchemaName = "SystemUser";
		[DebuggerNonUserCode()]
		public SystemUser()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemUser(Guid SystemUserId)
		{
			Entity = new Entity(EntityLogicalName, SystemUserId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemUser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemUser"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SystemUser(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemUser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemUser(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemUser(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemUser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemUser(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemUser(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemUser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ Truy cập</para>
		/// <para><strong>Description</strong>: Loại người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode.Doc_ghi"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode? AccessMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccessMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccessMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccessMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GUID danh mục hiện hoạt</para>
		/// <para><strong>Description</strong>: GUID đối tượng Danh mục hiện hoạt cho người dùng hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActiveDirectoryGuid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActiveDirectoryGuid); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Loại địa chỉ cho địa chỉ 1, chẳng hạn như địa chỉ lập hóa đơn, giao hàng hoặc địa chỉ chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phố</para>
		/// <para><strong>Description</strong>: Tên thành phố cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ chính đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quốc gia/Khu vực</para>
		/// <para><strong>Description</strong>: Tên quốc gia/khu vực trong địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Hạt</para>
		/// <para><strong>Description</strong>: Tên hạt cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Fax</para>
		/// <para><strong>Description</strong>: Số fax cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Vĩ độ</para>
		/// <para><strong>Description</strong>: Vĩ độ cho địa chỉ 1.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phố 1</para>
		/// <para><strong>Description</strong>: Dòng đầu tiên để nhập thông tin địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phố 2</para>
		/// <para><strong>Description</strong>: Dòng thứ hai để nhập thông tin địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phố 3</para>
		/// <para><strong>Description</strong>: Dòng thứ ba để nhập thông tin địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Kinh độ</para>
		/// <para><strong>Description</strong>: Kinh độ cho địa chỉ 1.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Tên</para>
		/// <para><strong>Description</strong>: Tên để nhập cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã ZIP/Mã Bưu điện</para>
		/// <para><strong>Description</strong>: Mã ZIP hoặc mã bưu điện cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Hòm Thư</para>
		/// <para><strong>Description</strong>: Số hòm thư cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Phương thức giao hàng cho địa chỉ 1.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bang/Tỉnh</para>
		/// <para><strong>Description</strong>: Bang hoặc tỉnh cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Chính</para>
		/// <para><strong>Description</strong>: Số điện thoại đầu tiên liên kết với địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Khác</para>
		/// <para><strong>Description</strong>: Số điện thoại thứ hai liên kết với địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Máy nhắn tin</para>
		/// <para><strong>Description</strong>: Số điện thoại thứ ba liên kết với địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Vùng UPS</para>
		/// <para><strong>Description</strong>: Vùng United Parcel Service (UPS) cho địa chỉ 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 1: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Phần bù UTC cho địa chỉ 1. Đây là khoảng chênh lệch giữa giờ địa phương và Giờ Quốc tế Phối hợp chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: ID</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho địa chỉ 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Loại Địa chỉ</para>
		/// <para><strong>Description</strong>: Loại địa chỉ dành cho địa chỉ 2, chẳng hạn như địa chỉ thanh toán, giao hàng hoặc địa chỉ chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phố khác</para>
		/// <para><strong>Description</strong>: Tên thành phố cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ khác</para>
		/// <para><strong>Description</strong>: Cho biết địa chỉ phụ đầy đủ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quốc gia/khu vực khác</para>
		/// <para><strong>Description</strong>: Tên quốc gia/khu vực trong địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Hạt</para>
		/// <para><strong>Description</strong>: Tên hạt cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Fax</para>
		/// <para><strong>Description</strong>: Số fax cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Vĩ độ</para>
		/// <para><strong>Description</strong>: Vĩ độ cho địa chỉ 2.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường khác 1</para>
		/// <para><strong>Description</strong>: Dòng đầu tiên để nhập thông tin địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường khác 2</para>
		/// <para><strong>Description</strong>: Dòng thứ hai để nhập thông tin địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường khác 3</para>
		/// <para><strong>Description</strong>: Dòng thứ ba để nhập thông tin địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Kinh độ</para>
		/// <para><strong>Description</strong>: Kinh độ cho địa chỉ 2.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Tên</para>
		/// <para><strong>Description</strong>: Tên để nhập cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã ZIP/mã bưu điện khác</para>
		/// <para><strong>Description</strong>: Mã ZIP hoặc mã bưu điện cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Hòm Thư</para>
		/// <para><strong>Description</strong>: Số hòm thư cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phương thức Giao hàng</para>
		/// <para><strong>Description</strong>: Phương thức giao hàng cho địa chỉ 2.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bang/tỉnh khác</para>
		/// <para><strong>Description</strong>: Bang hoặc tỉnh cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 1</para>
		/// <para><strong>Description</strong>: Số điện thoại đầu tiên liên kết với địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 2</para>
		/// <para><strong>Description</strong>: Số điện thoại thứ hai liên kết với địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Điện thoại 3</para>
		/// <para><strong>Description</strong>: Số điện thoại thứ ba liên kết với địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Vùng UPS</para>
		/// <para><strong>Description</strong>: Vùng United Parcel Service (UPS) cho địa chỉ 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ 2: Phần bù UTC</para>
		/// <para><strong>Description</strong>: Phần bù UTC cho địa chỉ 2. Đây là khoảng chênh lệch giữa giờ địa phương và Giờ Quốc tế Phối hợp chuẩn.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Ứng dụng</para>
		/// <para><strong>Description</strong>: Mã định danh cho ứng dụng. Mã này được dùng để truy cập vào dữ liệu trong một ứng dụng khác.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ApplicationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ApplicationId); }
			set { Entity.Attributes[Fields.ApplicationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URI ID Ứng dụng</para>
		/// <para><strong>Description</strong>: URI được dùng làm mã định danh logic duy nhất cho ứng dụng bên ngoài. Mã này có thể được dùng để xác thực ứng dụng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicationIdUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicationIdUri); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Đối tượng Azure AD</para>
		/// <para><strong>Description</strong>: Đây là ID đối tượng danh mục ứng dụng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AzureActiveDirectoryObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AzureActiveDirectoryObjectId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure Deleted On</para>
		/// <para><strong>Description</strong>: Date and time when the user was set as soft deleted in Azure.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? AzureDeletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.AzureDeletedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure State</para>
		/// <para><strong>Description</strong>: Azure state of user</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState.Exists"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState? AzureState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AzureState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AzureState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AzureState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của bơn vị kinh doanh có người dùng được liên kết.</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lịch</para>
		/// <para><strong>Description</strong>: Lịch tài chính liên kết với người dùng.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại giấy phép</para>
		/// <para><strong>Description</strong>: Loại giấy phép của người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType.Chuyen_nghiep"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType? CALType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CALType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CALType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CALType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo người dùng hệ thống.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ lọc mặc định đã nạp</para>
		/// <para><strong>Description</strong>: Cho biết khả năng hệ thống sẽ nạp bộ lọc outlook mặc định.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DefaultFiltersPopulated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DefaultFiltersPopulated); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hộp thư</para>
		/// <para><strong>Description</strong>: Chọn hộp thư liên kết với người dùng này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMailbox
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMailbox); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên thư mục OneDrive cho Doanh nghiệp mặc định</para>
		/// <para><strong>Description</strong>: Nhập tên thư mục mặc định cho vị trí OneDrive cho Doanh nghiệp của người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultOdbFolderName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultOdbFolderName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted State</para>
		/// <para><strong>Description</strong>: User delete state</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState.Not_deleted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState? DeletedState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeletedState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lý do tắt</para>
		/// <para><strong>Description</strong>: Lý do tắt người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisabledReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisabledReason); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị ở Dạng xem Dịch vụ.</para>
		/// <para><strong>Description</strong>: Khả năng hiển thị người dùng trong dạng xem dịch vụ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisplayInServiceViews
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisplayInServiceViews); }
			set { Entity.Attributes[Fields.DisplayInServiceViews] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Người dùng</para>
		/// <para><strong>Description</strong>: Miền Danh mục hiện hoạt người dùng là thành viên.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DomainName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DomainName); }
			set { Entity.Attributes[Fields.DomainName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái email chính</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái của địa chỉ email chính.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval.Trong"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhân viên</para>
		/// <para><strong>Description</strong>: Mã định danh nhân viên cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmployeeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmployeeId); }
			set { Entity.Attributes[Fields.EmployeeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Ảnh Thực thể</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Tỷ giá của loại tiền liên kết với người dùng hệ thống theo loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên người dùng.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Đầy đủ</para>
		/// <para><strong>Description</strong>: Tên đầy đủ của người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chính phủ</para>
		/// <para><strong>Description</strong>: Mã định danh chính phủ cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GovernmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GovernmentId); }
			set { Entity.Attributes[Fields.GovernmentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Nhà riêng</para>
		/// <para><strong>Description</strong>: Số điện thoại nhà riêng cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HomePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.HomePhone); }
			set { Entity.Attributes[Fields.HomePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID định danh duy nhất của người dùng</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IdentityId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IdentityId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của quá trình nhập dữ liệu hoặc dịch chuyển dữ liệu đã tạo bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức chuyển giao email đến</para>
		/// <para><strong>Description</strong>: Phương thức gửi email đến cho người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod.Microsoft_Dynamics_365_danh_cho_Outlook"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Chính</para>
		/// <para><strong>Description</strong>: Địa chỉ email nội bộ cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InternalEMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.InternalEMailAddress); }
			set { Entity.Attributes[Fields.InternalEMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái lời mời</para>
		/// <para><strong>Description</strong>: Trạng thái lời mời của người dùng.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode.Chua_gui_loi_moi"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode? InviteStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InviteStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InviteStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InviteStatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là người dùng danh mục hiện hoạt</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng người dùng là người dùng AD.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActiveDirectoryUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActiveDirectoryUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng bật người dùng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Đã tắt</strong>]: true - [<strong>Đã bật</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đã bật</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
			set { Entity.Attributes[Fields.IsDisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Phê duyệt của Quản trị viên O365 về Địa chỉ Email</para>
		/// <para><strong>Description</strong>: Cho biết trạng thái phê duyệt về địa chỉ email của Quản trị viên O365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ người dùng tích hợp</para>
		/// <para><strong>Description</strong>: Kiểm tra khả năng người dùng là người dùng tích hợp.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIntegrationUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIntegrationUser); }
			set { Entity.Attributes[Fields.IsIntegrationUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng đã được cấp phép</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng cấp phép cho người dùng.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLicensed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLicensed); }
			set { Entity.Attributes[Fields.IsLicensed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng đã đồng bộ</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng đồng bộ người dùng với danh mục.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSyncWithDirectory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSyncWithDirectory); }
			set { Entity.Attributes[Fields.IsSyncWithDirectory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chức danh</para>
		/// <para><strong>Description</strong>: Tiêu đề công việc của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ</para>
		/// <para><strong>Description</strong>: Họ người dùng.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian Bản cập nhật Mới nhất cho Người dùng</para>
		/// <para><strong>Description</strong>: Dấu thời gian của bản cập nhật mới nhất cho người dùng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestUpdateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestUpdateTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Đệm</para>
		/// <para><strong>Description</strong>: Tên đệm người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email thông báo di động</para>
		/// <para><strong>Description</strong>: Địa chỉ email thông báo di động cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobileAlertEMail
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobileAlertEMail); }
			set { Entity.Attributes[Fields.MobileAlertEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cấu hình Mobile Offline</para>
		/// <para><strong>Description</strong>: Các mục chứa Người dùng Hệ thống cụ thể.</para>
		/// <para><strong>Lookup</strong>: <see cref="mobileofflineprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MobileOfflineProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MobileOfflineProfileId); }
			set { Entity.Attributes[Fields.MobileOfflineProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại Di động</para>
		/// <para><strong>Description</strong>: Số điện thoại di động cho người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi người dùng lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi người dùng lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa người dùng hệ thống lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biệt danh</para>
		/// <para><strong>Description</strong>: Biệt danh của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NickName
		{
			get { return Entity.GetAttributeValue<string>(Fields.NickName); }
			set { Entity.Attributes[Fields.NickName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phương thức chuyển giao email đi</para>
		/// <para><strong>Description</strong>: Phương thức gửi email đi cho người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod.Microsoft_Dynamics_365_danh_cho_Outlook"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo Bản ghi</para>
		/// <para><strong>Description</strong>: Ngày và giờ dịch chuyển bản ghi.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người quản lý</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người quản lý của người dùng.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSystemUserId); }
			set { Entity.Attributes[Fields.ParentSystemUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hi Hộ chiếu</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PassportHi
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PassportHi); }
			set { Entity.Attributes[Fields.PassportHi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lo Hộ chiếu</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PassportLo
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PassportLo); }
			set { Entity.Attributes[Fields.PassportLo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email 2</para>
		/// <para><strong>Description</strong>: Địa chỉ email cá nhân của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PersonalEMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.PersonalEMailAddress); }
			set { Entity.Attributes[Fields.PersonalEMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL Ảnh</para>
		/// <para><strong>Description</strong>: URL cho Trang web đặt ảnh của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PhotoUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PhotoUrl); }
			set { Entity.Attributes[Fields.PhotoUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí</para>
		/// <para><strong>Description</strong>: Vị trí của người dùng trong mô hình bảo mật theo cấp bậc.</para>
		/// <para><strong>Lookup</strong>: <see cref="position"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PositionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PositionId); }
			set { Entity.Attributes[Fields.PositionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ ưu tiên</para>
		/// <para><strong>Description</strong>: Địa chỉ ưu tiên cho người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode.Dia_chi_thu_tin"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode? PreferredAddressCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAddressCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAddressCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAddressCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Ưu tiên</para>
		/// <para><strong>Description</strong>: Địa chỉ email ưu tiên cho người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode.Gia_tri_mac_dinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode? PreferredEmailCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredEmailCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredEmailCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredEmailCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Điện thoại ưu tiên</para>
		/// <para><strong>Description</strong>: Số điện thoại ưu tiên cho người dùng.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode.Dien_thoai_Chinh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode? PreferredPhoneCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredPhoneCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredPhoneCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredPhoneCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của quy trình.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hàng đợi mặc định</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của hàng đợi mặc định cho người dùng.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lời chào</para>
		/// <para><strong>Description</strong>: Danh xưng cho tương ứng với người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chế độ Truy cập Bị hạn chế</para>
		/// <para><strong>Description</strong>: Kiểm tra khả năng người dùng là người dùng thiết lập.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetupUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetupUser); }
			set { Entity.Attributes[Fields.SetupUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Địa chỉ Email SharePoint</para>
		/// <para><strong>Description</strong>: Địa chỉ Email Công việc SharePoint</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SharePointEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.SharePointEmailAddress); }
			set { Entity.Attributes[Fields.SharePointEmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kỹ năng</para>
		/// <para><strong>Description</strong>: Kỹ năng đặt của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Skills
		{
			get { return Entity.GetAttributeValue<string>(Fields.Skills); }
			set { Entity.Attributes[Fields.Skills] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Giai đoạn Quy trình</para>
		/// <para><strong>Description</strong>: Cho biết ID của giai đoạn.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất cho người dùng.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SystemUserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SystemUserId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vùng lãnh thổ</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của vùng lãnh thổ gán cho người dùng.</para>
		/// <para><strong>Lookup</strong>: <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TerritoryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TerritoryId); }
			set { Entity.Attributes[Fields.TerritoryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Tiêu đề của người dùng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của loại tiền liên kết với systemuser.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Không còn dùng) Đường ngang</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại giấy phép của người dùng.</para>
		/// <para><strong>Description</strong>: Cho biết loại giấy phép của người dùng.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UserLicenseType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UserLicenseType); }
			set { Entity.Attributes[Fields.UserLicenseType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PUID Người dùng</para>
		/// <para><strong>Description</strong>: Thông tin Nhận diện Người dùng trong PUID Người dùng</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserPuid
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserPuid); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của người dùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Windows Live</para>
		/// <para><strong>Description</strong>: ID Windows Live</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WindowsLiveID
		{
			get { return Entity.GetAttributeValue<string>(Fields.WindowsLiveID); }
			set { Entity.Attributes[Fields.WindowsLiveID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Yammer</para>
		/// <para><strong>Description</strong>: Địa chỉ email đăng nhập Yammer của người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerEmailAddress); }
			set { Entity.Attributes[Fields.YammerEmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID của người dùng Yammer</para>
		/// <para><strong>Description</strong>: ID Yammer của người dùng</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerUserId
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerUserId); }
			set { Entity.Attributes[Fields.YammerUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên phiên âm tiếng Nhật</para>
		/// <para><strong>Description</strong>: Cách phát âm tên của người dùng, ghi bằng ký tự phiên âm chữ mềm hoặc chữ cứng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên phiên âm tiếng Nhật Đầy đủ</para>
		/// <para><strong>Description</strong>: Cách phát âm tên đầy đủ của người dùng, ghi bằng ký tự phiên âm chữ mềm hoặc chữ cứng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Họ phiên âm tiếng Nhật</para>
		/// <para><strong>Description</strong>: Cách phát âm họ của người dùng, ghi bằng ký tự phiên âm chữ mềm hoặc chữ cứng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên Đệm phiên âm tiếng Nhật</para>
		/// <para><strong>Description</strong>: Cách phát âm tên đệm của người dùng, ghi bằng ký tự phiên âm chữ mềm hoặc chữ cứng.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}