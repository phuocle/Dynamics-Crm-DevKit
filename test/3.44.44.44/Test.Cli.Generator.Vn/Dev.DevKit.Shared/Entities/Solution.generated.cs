//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:01:19
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SolutionOptionSets
{
	public enum SolutionType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ảnh chụp nhanh</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Anh_chup_nhanh = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Không có</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Khong_co = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nội bộ</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Noi_bo = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Solution : EntityBase
	{
		public struct Fields
		{
			public const string ConfigurationPageId = "configurationpageid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string FileId = "fileid";
			public const string FileId_name = "fileid_name";
			public const string FriendlyName = "friendlyname";
			public const string InstalledOn = "installedon";
			public const string IsApiManaged = "isapimanaged";
			public const string IsInternal = "isinternal";
			public const string IsManaged = "ismanaged";
			public const string IsVisible = "isvisible";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string ParentSolutionId = "parentsolutionid";
			public const string PinpointAssetId = "pinpointassetid";
			public const string PinpointPublisherId = "pinpointpublisherid";
			public const string PinpointSolutionDefaultLocale = "pinpointsolutiondefaultlocale";
			public const string PinpointSolutionId = "pinpointsolutionid";
			public const string PublisherId = "publisherid";
			public const string SolutionId = "solutionid";
			public const string SolutionPackageVersion = "solutionpackageversion";
			public const string SolutionType = "solutiontype";
			public const string TemplateSuffix = "templatesuffix";
			public const string Thumbprint = "thumbprint";
			public const string UniqueName = "uniquename";
			public const string UpdatedOn = "updatedon";
			public const string UpgradeInfo = "upgradeinfo";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "solution";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 7100;
		public const string EntityCollectionSchemaName = "Solutions";
		public const string EntityDisplayCollectionName = "Giải pháp";
		public const string DisplayName = "Giải pháp";
		public const string EntitySetName = "solutions";
		public const string EntityLogicalCollectionName = "solutions";
		public const string EntityPrimaryIdAttribute = "solutionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "friendlyname";
		public const string EntitySchemaName = "Solution";
		[DebuggerNonUserCode()]
		public Solution()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Solution(Guid SolutionId)
		{
			Entity = new Entity(EntityLogicalName, SolutionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Solution(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Solution"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Solution(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Solution"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Solution(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Solution(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Solution"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Solution(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Solution(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Solution(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trang cấu hình</para>
		/// <para><strong>Description</strong>: Liên kết đến trang cấu hình tùy chọn cho giải pháp này.</para>
		/// <para><strong>Lookup</strong>: <see cref="webresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ConfigurationPageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ConfigurationPageId); }
			set { Entity.Attributes[Fields.ConfigurationPageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đã tạo giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã tạo giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mô tả</para>
		/// <para><strong>Description</strong>: Mô tả của giải pháp.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id Tệp</para>
		/// <para><strong>Description</strong>: ID trường cho URL blob được dùng để lưu trữ tệp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileId_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileId_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên hiển thị</para>
		/// <para><strong>Description</strong>: Tên hiển thị của người dùng cho giải pháp.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FriendlyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FriendlyName); }
			set { Entity.Attributes[Fields.FriendlyName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Được cài đặt trên</para>
		/// <para><strong>Description</strong>: Ngày và giờ cài đặt/nâng cấp giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InstalledOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InstalledOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là Giải pháp Được quản lý Api</para>
		/// <para><strong>Description</strong>: Thông tin về khả năng giải pháp được quản lý api.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsApiManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsApiManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là giải pháp nội bộ</para>
		/// <para><strong>Description</strong>: Cho biết giải pháp có phải là nội bộ hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsInternal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsInternal); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểu chương trình</para>
		/// <para><strong>Description</strong>: Cho biết đã quản lý hay không được quản lý giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hiển thị bên ngoài nền tảng</para>
		/// <para><strong>Description</strong>: Cho biết có hiển thị giải pháp bên ngoài nền tảng không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Có</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsVisible
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsVisible); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng sửa đổi giải pháp lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi giải pháp lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của người dùng đại diện đã sửa đổi giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp cha</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp cha. Chỉ được phép là giá trị không rỗng nếu giải pháp này là bản vá.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="solution"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSolutionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSolutionId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PinpointAssetId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PinpointAssetId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh của nhà phát hành giải pháp này trong Microsoft Pinpoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? PinpointPublisherId
		{
			get { return Entity.GetAttributeValue<long?>(Fields.PinpointPublisherId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Vùng bản địa mặc định của giải pháp trong Microsoft Pinpoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 16</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PinpointSolutionDefaultLocale
		{
			get { return Entity.GetAttributeValue<string>(Fields.PinpointSolutionDefaultLocale); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh của giải pháp trong Microsoft Pinpoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? PinpointSolutionId
		{
			get { return Entity.GetAttributeValue<long?>(Fields.PinpointSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhà phát hành</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của nhà phát hành.</para>
		/// <para><strong>Lookup</strong>: <see cref="publisher"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PublisherId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PublisherId); }
			set { Entity.Attributes[Fields.PublisherId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã định danh giải pháp</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của giải pháp.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SolutionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SolutionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản Gói Giải pháp</para>
		/// <para><strong>Description</strong>: Phiên bản của tổ chức nguồn gói giải pháp</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionPackageVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionPackageVersion); }
			set { Entity.Attributes[Fields.SolutionPackageVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Giải pháp</para>
		/// <para><strong>Description</strong>: Loại Giải pháp</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType.Khong_co"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType? SolutionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SolutionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SolutionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SolutionType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suffix</para>
		/// <para><strong>Description</strong>: The template suffix of this solution</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 65</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TemplateSuffix
		{
			get { return Entity.GetAttributeValue<string>(Fields.TemplateSuffix); }
			set { Entity.Attributes[Fields.TemplateSuffix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thumbprint</para>
		/// <para><strong>Description</strong>: thumbprint of the solution signature</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 65</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Thumbprint
		{
			get { return Entity.GetAttributeValue<string>(Fields.Thumbprint); }
			set { Entity.Attributes[Fields.Thumbprint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Tên duy nhất của giải pháp này</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 65</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày cập nhật</para>
		/// <para><strong>Description</strong>: Ngày và giờ cập nhật giải pháp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? UpdatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.UpdatedOn); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Contains component info for the solution upgrade operation</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UpgradeInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.UpgradeInfo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản</para>
		/// <para><strong>Description</strong>: Phiên bản giải pháp dùng để xác định một giải pháp dành cho việc nâng cấp và các hotfix.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Version
		{
			get { return Entity.GetAttributeValue<string>(Fields.Version); }
			set { Entity.Attributes[Fields.Version] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}