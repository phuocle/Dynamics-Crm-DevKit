//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:04
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.AppModuleMetadataOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class AppModuleMetadata : EntityBase
	{
		public struct Fields
		{
			public const string AppModuleId = "appmoduleid";
			public const string AppModuleMetadataId = "appmodulemetadataid";
			public const string ComponentId = "componentid";
			public const string ComponentIsDefault = "componentisdefault";
			public const string ComponentIsQuickFindQuery = "componentisquickfindquery";
			public const string ComponentIsTabletEnabled = "componentistabletenabled";
			public const string ComponentIsUserChart = "componentisuserchart";
			public const string ComponentIsUserForm = "componentisuserform";
			public const string ComponentIsUserView = "componentisuserview";
			public const string ComponentStateCode = "componentstatecode";
			public const string ComponentSubType = "componentsubtype";
			public const string ComponentType = "componenttype";
			public const string ComponentVersion = "componentversion";
			public const string CreatedOn = "createdon";
			public const string ModifiedOn = "modifiedon";
			public const string ParentComponentId = "parentcomponentid";
			public const string State = "state";
		}
		public const string EntityLogicalName = "appmodulemetadata";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8700;
		public const string EntityCollectionSchemaName = "AppModuleMetadataCollection";
		public const string EntityDisplayCollectionName = "Bộ sưu tập Siêu dữ liệu AppModule";
		public const string DisplayName = "Siêu dữ liệu AppModule";
		public const string EntitySetName = "appmodulemetadatacollection";
		public const string EntityLogicalCollectionName = "appmodulemetadatacollection";
		public const string EntityPrimaryIdAttribute = "appmodulemetadataid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "AppModuleMetadata";
		[DebuggerNonUserCode()]
		public AppModuleMetadata()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AppModuleMetadata(Guid AppModuleMetadataId)
		{
			Entity = new Entity(EntityLogicalName, AppModuleMetadataId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AppModuleMetadata(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AppModuleMetadata"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public AppModuleMetadata(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AppModuleMetadata"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public AppModuleMetadata(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new AppModuleMetadata(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AppModuleMetadata"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public AppModuleMetadata(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new AppModuleMetadata(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AppModuleMetadata(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID AppModule</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AppModuleId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AppModuleId); }
			set { Entity.Attributes[Fields.AppModuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Siêu dữ liệu AppModule</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AppModuleMetadataId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AppModuleMetadataId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentId); }
			set { Entity.Attributes[Fields.ComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mặc định cho Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsDefault); }
			set { Entity.Attributes[Fields.ComponentIsDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Đã lưu là Truy vấn Tìm Nhanh</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsQuickFindQuery
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsQuickFindQuery); }
			set { Entity.Attributes[Fields.ComponentIsQuickFindQuery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu Hệ thống Có bật Máy tính bảng</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsTabletEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsTabletEnabled); }
			set { Entity.Attributes[Fields.ComponentIsTabletEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trực quan hóa Truy vấn Đã lưu hay Trực quan hóa Truy vấn Người dùng</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsUserChart
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsUserChart); }
			set { Entity.Attributes[Fields.ComponentIsUserChart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu Hệ thống hay Biểu mẫu Người dùng</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsUserForm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsUserForm); }
			set { Entity.Attributes[Fields.ComponentIsUserForm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Truy vấn Đã lưu hay Truy vấn Người dùng</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ComponentIsUserView
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ComponentIsUserView); }
			set { Entity.Attributes[Fields.ComponentIsUserView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Trạng thái Quy trình làm việc</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentStateCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentStateCode); }
			set { Entity.Attributes[Fields.ComponentStateCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại phụ của Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentSubType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentSubType); }
			set { Entity.Attributes[Fields.ComponentSubType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Thành phần</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentType); }
			set { Entity.Attributes[Fields.ComponentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? ComponentVersion
		{
			get { return Entity.GetAttributeValue<long?>(Fields.ComponentVersion); }
			set { Entity.Attributes[Fields.ComponentVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Ngày và giờ tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày sửa đổi</para>
		/// <para><strong>Description</strong>: Ngày và giờ sửa đổi bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID Thành phần Mẹ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentComponentId); }
			set { Entity.Attributes[Fields.ParentComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái của bản ghi</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.State); }
			set { Entity.Attributes[Fields.State] = value; }
		}
	}
}