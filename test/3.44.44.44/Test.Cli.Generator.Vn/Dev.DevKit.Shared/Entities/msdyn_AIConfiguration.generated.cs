//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:41
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã phát hành</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Da_phat_hanh = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Da_xoa = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã xóa Hủy phát hành</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Da_xoa_Huy_phat_hanh = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hủy phát hành</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Huy_phat_hanh = 1
	}
	public enum msdyn_Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: RunConfiguration</para>
		/// <para><strong>Value</strong>: 190,690,001</para>
		/// </summary>
		RunConfiguration = 190_690_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: TrainingConfiguration</para>
		/// <para><strong>Value</strong>: 190,690,000</para>
		/// </summary>
		TrainingConfiguration = 190_690_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Done</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Done = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Failed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		InProgress = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CancelFailed</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		CancelFailed = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelling</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Cancelling = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeleteFailed</para>
		/// <para><strong>Value</strong>: 13</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		DeleteFailed = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleting</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Deleting = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Done</strong></para>
		/// </summary>
		Published = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: PublishFailed</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		PublishFailed = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Publishing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Publishing = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Done</strong></para>
		/// </summary>
		Scheduled = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trained</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Done</strong></para>
		/// </summary>
		Trained = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: TrainFailed</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		TrainFailed = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Training</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Training = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: UnpublishFailed</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		UnpublishFailed = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublishing</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Unpublishing = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: UnsuccessfulTraining</para>
		/// <para><strong>Value</strong>: 14</para>
		/// <para><strong>StateCode.Done</strong></para>
		/// </summary>
		UnsuccessfulTraining = 14
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_AIConfiguration : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AIConfigurationId = "msdyn_aiconfigurationid";
			public const string msdyn_AIConfigurationIdUnique = "msdyn_aiconfigurationidunique";
			public const string msdyn_AIModelId = "msdyn_aimodelid";
			public const string msdyn_ConnectionReferenceId = "msdyn_connectionreferenceid";
			public const string msdyn_CreatedFromConfigurationId = "msdyn_createdfromconfigurationid";
			public const string msdyn_CustomConfiguration = "msdyn_customconfiguration";
			public const string msdyn_DataBinding = "msdyn_databinding";
			public const string msdyn_lasterrors = "msdyn_lasterrors";
			public const string msdyn_lasttrainorrundate = "msdyn_lasttrainorrundate";
			public const string msdyn_MajorIterationNumber = "msdyn_majoriterationnumber";
			public const string msdyn_MinorIterationNumber = "msdyn_minoriterationnumber";
			public const string msdyn_Model = "msdyn_model";
			public const string msdyn_Model_name = "msdyn_model_name";
			public const string msdyn_ModelAction = "msdyn_modelaction";
			public const string msdyn_ModelData = "msdyn_modeldata";
			public const string msdyn_modelglobalexplainability = "msdyn_modelglobalexplainability";
			public const string msdyn_ModelPerformance = "msdyn_modelperformance";
			public const string msdyn_ModelProvisioningMetadata = "msdyn_modelprovisioningmetadata";
			public const string msdyn_ModelProvisioningStatus = "msdyn_modelprovisioningstatus";
			public const string msdyn_ModelRunDataSpecification = "msdyn_modelrundataspecification";
			public const string msdyn_Name = "msdyn_name";
			public const string msdyn_ResourceInfo = "msdyn_resourceinfo";
			public const string msdyn_RunConfiguration = "msdyn_runconfiguration";
			public const string msdyn_SchedulingOptions = "msdyn_schedulingoptions";
			public const string msdyn_TemplateVersion = "msdyn_templateversion";
			public const string msdyn_TrainedModelAIConfigurationPareId = "msdyn_trainedmodelaiconfigurationpareid";
			public const string msdyn_Type = "msdyn_type";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwnerIdType = "owneridtype";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_aiconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 402;
		public const string EntityCollectionSchemaName = "msdyn_AIConfigurations";
		public const string EntityDisplayCollectionName = "AI Configurations";
		public const string DisplayName = "AI Configuration";
		public const string EntitySetName = "msdyn_aiconfigurations";
		public const string EntityLogicalCollectionName = "msdyn_aiconfigurations";
		public const string EntityPrimaryIdAttribute = "msdyn_aiconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_AIConfiguration";
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration(Guid msdyn_AIConfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_AIConfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_AIConfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_AIConfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_AIConfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_AIConfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_AIConfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_AIConfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Introduced Version</para>
		/// <para><strong>Description</strong>: Version in which the form is introduced.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Được quản lý</strong>]: true - [<strong>Không được quản lý</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không được quản lý</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AIConfiguration</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_AIConfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_AIConfigurationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_AIConfigurationIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_AIConfigurationIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AIModel</para>
		/// <para><strong>Description</strong>: Unique identifier for AIModel associated with AIConfiguration.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_aimodel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AIModelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AIModelId); }
			set { Entity.Attributes[Fields.msdyn_AIModelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connection Reference Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Connection Reference associated with AIConfiguration.</para>
		/// <para><strong>Lookup</strong>: <see cref="connectionreference"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ConnectionReferenceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ConnectionReferenceId); }
			set { Entity.Attributes[Fields.msdyn_ConnectionReferenceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CreatedFromConfigurationId</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_aiconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CreatedFromConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CreatedFromConfigurationId); }
			set { Entity.Attributes[Fields.msdyn_CreatedFromConfigurationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomConfiguration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomConfiguration); }
			set { Entity.Attributes[Fields.msdyn_CustomConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DataBinding</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_DataBinding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_DataBinding); }
			set { Entity.Attributes[Fields.msdyn_DataBinding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LastErrors</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrors
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrors); }
			set { Entity.Attributes[Fields.msdyn_lasterrors] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LastTrainOrRunDate</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lasttrainorrundate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lasttrainorrundate); }
			set { Entity.Attributes[Fields.msdyn_lasttrainorrundate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MajorIterationNumber</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_MajorIterationNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_MajorIterationNumber); }
			set { Entity.Attributes[Fields.msdyn_MajorIterationNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MinorIterationNumber</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_MinorIterationNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_MinorIterationNumber); }
			set { Entity.Attributes[Fields.msdyn_MinorIterationNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_Model</para>
		/// <para><strong>Description</strong>: This is a file type attribute to store Ai builder Model.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Model_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Model_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelAction</para>
		/// <para><strong>Description</strong>: Model Action</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelAction
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelAction); }
			set { Entity.Attributes[Fields.msdyn_ModelAction] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelData</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelData
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelData); }
			set { Entity.Attributes[Fields.msdyn_ModelData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelGlobalExplainability</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_modelglobalexplainability
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_modelglobalexplainability); }
			set { Entity.Attributes[Fields.msdyn_modelglobalexplainability] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelPerformance</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelPerformance
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelPerformance); }
			set { Entity.Attributes[Fields.msdyn_ModelPerformance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelProvisioningMetadata</para>
		/// <para><strong>Description</strong>: Model Provisioning Metadata</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelProvisioningMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelProvisioningMetadata); }
			set { Entity.Attributes[Fields.msdyn_ModelProvisioningMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelProvisioningStatus</para>
		/// <para><strong>Description</strong>: Model Provisioning Status</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelProvisioningStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelProvisioningStatus); }
			set { Entity.Attributes[Fields.msdyn_ModelProvisioningStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelRunDataSpecification</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModelRunDataSpecification
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModelRunDataSpecification); }
			set { Entity.Attributes[Fields.msdyn_ModelRunDataSpecification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Name); }
			set { Entity.Attributes[Fields.msdyn_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ResourceInfo</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ResourceInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ResourceInfo); }
			set { Entity.Attributes[Fields.msdyn_ResourceInfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RunConfiguration</para>
		/// <para><strong>Description</strong>: Run Configuration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RunConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RunConfiguration); }
			set { Entity.Attributes[Fields.msdyn_RunConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SchedulingOptions</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulingOptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulingOptions); }
			set { Entity.Attributes[Fields.msdyn_SchedulingOptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TemplateVersion</para>
		/// <para><strong>Description</strong>: Template Version</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TemplateVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TemplateVersion); }
			set { Entity.Attributes[Fields.msdyn_TemplateVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TrainedModelAIConfigurationParent</para>
		/// <para><strong>Description</strong>: Unique identifier for AIConfiguration associated with AIConfiguration.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_aiconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TrainedModelAIConfigurationPareId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TrainedModelAIConfigurationPareId); }
			set { Entity.Attributes[Fields.msdyn_TrainedModelAIConfigurationPareId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.msdyn_Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.msdyn_Type? msdyn_Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.msdyn_Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OwnerIdType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OwnerIdType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the AIConfiguration</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the AIConfiguration</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_AIConfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}