//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:55
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RollupFieldOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RollupField : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DateAttribute = "dateattribute";
			public const string EntityForDateAttribute = "entityfordateattribute";
			public const string GoalAttribute = "goalattribute";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsStateParentEntityAttribute = "isstateparententityattribute";
			public const string MetricId = "metricid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string RollupFieldId = "rollupfieldid";
			public const string SourceAttribute = "sourceattribute";
			public const string SourceEntity = "sourceentity";
			public const string SourceState = "sourcestate";
			public const string SourceStatus = "sourcestatus";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "rollupfield";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9604;
		public const string EntityCollectionSchemaName = "RollupFields";
		public const string EntityDisplayCollectionName = "Trường tổng số";
		public const string DisplayName = "Trường tổng số";
		public const string EntitySetName = "rollupfields";
		public const string EntityLogicalCollectionName = "rollupfields";
		public const string EntityPrimaryIdAttribute = "rollupfieldid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RollupField";
		[DebuggerNonUserCode()]
		public RollupField()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupField(Guid RollupFieldId)
		{
			Entity = new Entity(EntityLogicalName, RollupFieldId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupField(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupField"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RollupField(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupField"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupField(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupField(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupField"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupField(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupField(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupField(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường ngày</para>
		/// <para><strong>Description</strong>: Chọn trường ngày dành cho loại bản ghi đã chọn, như Ngày đóng thực tế của loại bản ghi Cơ hội. Bản ghi tham gia vào tổng số mục đích nếu ngày đã chọn nằm trong khoảng từ ngày bắt đầu đến ngày kết thúc của mục đích.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DateAttribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.DateAttribute); }
			set { Entity.Attributes[Fields.DateAttribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Bản ghi</para>
		/// <para><strong>Description</strong>: Chọn loại bản ghi chứa trường ngày mà hệ thống sẽ xem xét khi lấy tổng số dữ liệu vào mục đích.</para>
		/// <para>Required - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityForDateAttribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityForDateAttribute); }
			set { Entity.Attributes[Fields.EntityForDateAttribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường tổng số</para>
		/// <para><strong>Description</strong>: Chọn trường tổng số, trong đó, hiển thị dữ liệu tổng số sơ đồ trong mục đích. Tùy chọn là số nguyên hoặc tiền, tùy theo Loại số liệu mà bạn chọn cho sơ đồ mục đích.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GoalAttribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.GoalAttribute); }
			set { Entity.Attributes[Fields.GoalAttribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Thứ tự Nhập</para>
		/// <para><strong>Description</strong>: Số thứ tự của quá trình nhập tạo ra bản ghi này.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là trạng thái/tình trạng từ thực thể mẹ</para>
		/// <para><strong>Description</strong>: Cho biết khả năng trạng thái hay tình trạng thuộc về thực thể mẹ.</para>
		/// <para><strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsStateParentEntityAttribute
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsStateParentEntityAttribute); }
			set { Entity.Attributes[Fields.IsStateParentEntityAttribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số liệu Mục tiêu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của số liệu mục đích đã liên kết với trường tổng số.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="metric"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MetricId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MetricId); }
			set { Entity.Attributes[Fields.MetricId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi lần cuối thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id tổ chức</para>
		/// <para><strong>Description</strong>: Chọn ID của tổ chức có bản ghi được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường tổng số</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của trường tổng số.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid RollupFieldId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.RollupFieldId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trường nguồn</para>
		/// <para><strong>Description</strong>: Nhập tên của trường để tính tổng số dữ liệu cho mục đích.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceAttribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceAttribute); }
			set { Entity.Attributes[Fields.SourceAttribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại bản ghi nguồn</para>
		/// <para><strong>Description</strong>: Nhập tên của loại bản ghi (thực thể) để tính tổng số dữ liệu cho mục đích.</para>
		/// <para>Required - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceEntity); }
			set { Entity.Attributes[Fields.SourceEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái loại bản ghi nguồn</para>
		/// <para><strong>Description</strong>: Chọn trạng thái của bản ghi mà bạn muốn dùng làm nguồn của dữ liệu tổng số cho sơ đồ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SourceState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SourceState); }
			set { Entity.Attributes[Fields.SourceState] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái loại bản ghi nguồn</para>
		/// <para><strong>Description</strong>: Chọn tình trạng của bản ghi mà bạn muốn dùng làm nguồn của dữ liệu tổng số cho sơ đồ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SourceStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SourceStatus); }
			set { Entity.Attributes[Fields.SourceStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản Quy tắc Múi Giờ</para>
		/// <para><strong>Description</strong>: Chỉ sử dụng nội bộ.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mã Múi Giờ Chuyển đổi UTC</para>
		/// <para><strong>Description</strong>: Mã múi giờ đã được sử dụng khi tạo bản ghi.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Số Phiên bản</para>
		/// <para><strong>Description</strong>: Số phiên bản của trường tổng số.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}