//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:57
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets
{
	public enum DocumentLocationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dành riêng cho Tích hợp OneNote</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Danh_rieng_cho_Tich_hop_OneNote = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng quát</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Tong_quat = 0
	}
	public enum ServiceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Các nhóm MS</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Cac_nhom_MS = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Được chia sẻ với tôi</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Duoc_chia_se_voi_toi = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: OneDrive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		OneDrive = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: SharePoint</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		SharePoint = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SharePointDocument : EntityBase
	{
		public struct Fields
		{
			public const string AbsoluteUrl = "absoluteurl";
			public const string AppCreatedBy = "appcreatedby";
			public const string AppModifiedBy = "appmodifiedby";
			public const string Author = "author";
			public const string BusinessUnitId = "businessunitid";
			public const string CheckedOutTo = "checkedoutto";
			public const string CheckInComment = "checkincomment";
			public const string ChildFolderCount = "childfoldercount";
			public const string ChildItemCount = "childitemcount";
			public const string ContentType = "contenttype";
			public const string ContentTypeId = "contenttypeid";
			public const string CopySource = "copysource";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentId = "documentid";
			public const string DocumentLocationType = "documentlocationtype";
			public const string Edit = "edit";
			public const string EditUrl = "editurl";
			public const string ExchangeRate = "exchangerate";
			public const string FileSize = "filesize";
			public const string FileType = "filetype";
			public const string FullName = "fullname";
			public const string IconClassName = "iconclassname";
			public const string IsCheckedOut = "ischeckedout";
			public const string IsFolder = "isfolder";
			public const string IsRecursiveFetch = "isrecursivefetch";
			public const string LocationId = "locationid";
			public const string LocationName = "locationname";
			public const string Modified = "modified";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ReadUrl = "readurl";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RelativeLocation = "relativelocation";
			public const string ServiceType = "servicetype";
			public const string SharePointCreatedOn = "sharepointcreatedon";
			public const string SharePointDocumentId = "sharepointdocumentid";
			public const string SharePointModifiedBy = "sharepointmodifiedby";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string Version = "version";
		}
		public const string EntityLogicalName = "sharepointdocument";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9507;
		public const string EntityCollectionSchemaName = "SharePointDocuments";
		public const string EntityDisplayCollectionName = "Tài liệu";
		public const string DisplayName = "Tài liệu SharePoint";
		public const string EntitySetName = "sharepointdocuments";
		public const string EntityLogicalCollectionName = "sharepointdocuments";
		public const string EntityPrimaryIdAttribute = "sharepointdocumentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "fullname";
		public const string EntitySchemaName = "SharePointDocument";
		[DebuggerNonUserCode()]
		public SharePointDocument()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SharePointDocument(Guid SharePointDocumentId)
		{
			Entity = new Entity(EntityLogicalName, SharePointDocumentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SharePointDocument(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SharePointDocument"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SharePointDocument(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SharePointDocument"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SharePointDocument(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SharePointDocument(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SharePointDocument"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SharePointDocument(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SharePointDocument(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SharePointDocument(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL tuyệt đối</para>
		/// <para><strong>Description</strong>: Nhập URL đặt tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AbsoluteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.AbsoluteUrl); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo ứng dụng</para>
		/// <para><strong>Description</strong>: Tên của người đã tạo ứng dụng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppCreatedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppCreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa ứng dụng lần cuối</para>
		/// <para><strong>Description</strong>: Tên của người sửa đổi ứng dụng lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tác giả</para>
		/// <para><strong>Description</strong>: Tên của tác giả tài liệu SharePoint.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Author
		{
			get { return Entity.GetAttributeValue<string>(Fields.Author); }
			set { Entity.Attributes[Fields.Author] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh</para>
		/// <para><strong>Description</strong>: Cho biết bơn vị kinh doanh có liên kết với bản ghi.</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểm xuất cho</para>
		/// <para><strong>Description</strong>: Cho biết kiểm xuất tài liệu SharePoint cho ai.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CheckedOutTo
		{
			get { return Entity.GetAttributeValue<string>(Fields.CheckedOutTo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhận xét kiểm nhập</para>
		/// <para><strong>Description</strong>: Nhập nhận xét về tài liệu đang kiểm nhập.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CheckInComment
		{
			get { return Entity.GetAttributeValue<string>(Fields.CheckInComment); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm thư mục con</para>
		/// <para><strong>Description</strong>: Hiện số lượng thư mục con.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ChildFolderCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ChildFolderCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng đếm mục con</para>
		/// <para><strong>Description</strong>: Hiện số lượng mục con.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ChildItemCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ChildItemCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại nội dung</para>
		/// <para><strong>Description</strong>: Loại nội dung của tài liệu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContentType
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContentType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID loại nội dung</para>
		/// <para><strong>Description</strong>: Hiện mã định danh duy nhất của loại nội dung.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ContentTypeId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ContentTypeId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn sao</para>
		/// <para><strong>Description</strong>: URL mục nguồn SharePoint</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CopySource
		{
			get { return Entity.GetAttributeValue<string>(Fields.CopySource); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tạo</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ tạo bản ghi. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người tạo (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người tạo bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID tài liệu</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tài liệu SharePoint trong thư viện tài liệu.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DocumentId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DocumentId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kiểu Vị trí Tài liệu</para>
		/// <para><strong>Description</strong>: Kiểu vị trí của vị trí tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.DocumentLocationType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.DocumentLocationType.Tong_quat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.DocumentLocationType? DocumentLocationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DocumentLocationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.DocumentLocationType)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Biểu mẫu SharePoint url chỉnh sửa</para>
		/// <para><strong>Description</strong>: Url chỉnh sửa của biểu mẫu SharePoint</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Edit
		{
			get { return Entity.GetAttributeValue<string>(Fields.Edit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL sửa ứng dụng web</para>
		/// <para><strong>Description</strong>: Hiện URL chỉnh sửa của tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EditUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.EditUrl); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tỷ giá</para>
		/// <para><strong>Description</strong>: Hiện tỷ giá giữa loại tiền đã liên kết với bản ghi tài liệu SharePoint và loại tiền gốc.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kích thước tệp</para>
		/// <para><strong>Description</strong>: Hiện kích thước tệp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại Tệp</para>
		/// <para><strong>Description</strong>: Hiện loại tệp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên</para>
		/// <para><strong>Description</strong>: Hiện tên đầy đủ của tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tên lớp biểu tượng</para>
		/// <para><strong>Description</strong>: Lưu trữ tên lớp biểu tượng của tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconClassName
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconClassName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã kiểm xuất</para>
		/// <para><strong>Description</strong>: Cho biết khả năng kiểm xuất của tệp.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Đã kiểm xuất</strong>]: true - [<strong>Đã kiểm xuất</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Đã kiểm xuất</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCheckedOut
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCheckedOut); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Là thư mục</para>
		/// <para><strong>Description</strong>: Cho biết tệp có phải là thư mục không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>là Thư mục</strong>]: true - [<strong>là Thư mục</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>là Thư mục</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFolder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFolder); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tìm nạp dữ liệu đệ quy</para>
		/// <para><strong>Description</strong>: Cho biết có tìm nạp dữ liệu đệ quy từ vị trí thư mục đã cho hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRecursiveFetch
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRecursiveFetch); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí tài liệu SharePoint</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của vị trí tài liệu đã liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LocationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LocationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vị trí</para>
		/// <para><strong>Description</strong>: Tên của vị trí tài liệu đã liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LocationName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LocationName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật tài liệu SharePoint lần cuối cùng. Hệ thống hiển thị ngày giờ theo múi giờ đã chọn trong tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Modified); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi sau cùng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sửa đổi Vào</para>
		/// <para><strong>Description</strong>: Cho biết ngày và giờ cập nhật bản ghi lần cuối. Ngày và giờ được hiển thị trong múi giờ được chọn theo tùy chọn Microsoft Dynamics 365.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người Sửa đổi (Đại diện)</para>
		/// <para><strong>Description</strong>: Cho biết người đã sửa bản ghi thay mặt cho người dùng khác.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổ chức</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức liên kết với tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chủ sở hữu</para>
		/// <para><strong>Description</strong>: Nhập người dùng hoặc nhóm được gán để quản lý bản ghi. Trường này sẽ cập nhật mỗi lần bản ghi được gán cho người dùng khác.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đơn vị Kinh doanh Sở hữu</para>
		/// <para><strong>Description</strong>: Cho biết đơn vị kinh doanh của chủ sở hữu bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nhóm Sở hữu</para>
		/// <para><strong>Description</strong>: Hiện nhóm sở hữu bản ghi tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người dùng Sở hữu</para>
		/// <para><strong>Description</strong>: Hiện người dùng sở hữu bản ghi tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL WebApp đọc</para>
		/// <para><strong>Description</strong>: Hiện URL đọc của tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadUrl); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bản lưu ý</para>
		/// <para><strong>Description</strong>: Chọn bản ghi mẹ có liên kết với bản ghi tài liệu SharePoint.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_portalcomment"/>, <see cref="kbarticle"/>, <see cref="knowledgearticle"/>, <see cref="msdyn_knowledgearticletemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đường dẫn</para>
		/// <para><strong>Description</strong>: Vị trí tương đối của tài liệu SharePoint</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelativeLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelativeLocation); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nguồn thông tin</para>
		/// <para><strong>Description</strong>: Hiển thị loại dịch vụ của trang web SharePoint.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.ServiceType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.ServiceType.SharePoint"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.ServiceType? ServiceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SharePointDocumentOptionSets.ServiceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Đã tạo trên SharePoint</para>
		/// <para><strong>Description</strong>: Hiện ngày giờ tạo bản ghi tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SharePointCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SharePointCreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tài liệu SharePoint</para>
		/// <para><strong>Description</strong>: Hiện mã định danh duy nhất của bản ghi tài liệu SharePoint.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SharePointDocumentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SharePointDocumentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Người sửa đổi</para>
		/// <para><strong>Description</strong>: Cho biết người cập nhật bản ghi tài liệu lần cuối.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SharePointModifiedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.SharePointModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tiêu đề</para>
		/// <para><strong>Description</strong>: Cho biết tiêu đề hoặc tên mô tả tài liệu SharePoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Loại tiền</para>
		/// <para><strong>Description</strong>: Chọn loại tiền địa phương cho bản ghi để đảm bảo ngân sách được báo cáo theo đúng loại tiền.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phiên bản tài liệu SharePoint</para>
		/// <para><strong>Description</strong>: Hiện phiên bản tài liệu SharePoint</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Version
		{
			get { return Entity.GetAttributeValue<string>(Fields.Version); }
		}
	}
}