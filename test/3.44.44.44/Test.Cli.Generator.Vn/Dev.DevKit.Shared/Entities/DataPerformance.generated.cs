//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-07-30 10:00:08
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.DataPerformanceOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DataPerformance : EntityBase
	{
		public struct Fields
		{
			public const string AnyOptimizationApplied = "anyoptimizationapplied";
			public const string AnyOptimizationAvailable = "anyoptimizationavailable";
			public const string Component = "component";
			public const string Count = "count";
			public const string DataPerformanceId = "dataperformanceid";
			public const string Entity = "entity";
			public const string EstimatedOptimizationImpact = "estimatedoptimizationimpact";
			public const string ExecutionPeriod = "executionperiod";
			public const string LastActionResult = "lastactionresult";
			public const string LastOptimizationDate = "lastoptimizationdate";
			public const string MaxTime = "maxtime";
			public const string MedianTime = "mediantime";
			public const string MinTime = "mintime";
			public const string Operation = "operation";
			public const string OptimizationStatus = "optimizationstatus";
			public const string OptimizationStorage = "optimizationstorage";
			public const string OrganizationId = "organizationid";
			public const string RealizedOptimizationImpact = "realizedoptimizationimpact";
			public const string Solution = "solution";
			public const string Weight = "weight";
		}
		public const string EntityLogicalName = "dataperformance";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4450;
		public const string EntityCollectionSchemaName = "DataPerformances";
		public const string EntityDisplayCollectionName = "Thu thập Hiệu suất Dữ liệu";
		public const string DisplayName = "Bảng thông tin Hiệu suất Dữ liệu";
		public const string EntitySetName = "dataperformances";
		public const string EntityLogicalCollectionName = "dataperformances";
		public const string EntityPrimaryIdAttribute = "dataperformanceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "DataPerformance";
		[DebuggerNonUserCode()]
		public DataPerformance()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DataPerformance(Guid DataPerformanceId)
		{
			Entity = new Entity(EntityLogicalName, DataPerformanceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DataPerformance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DataPerformance"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public DataPerformance(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DataPerformance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DataPerformance(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DataPerformance(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DataPerformance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DataPerformance(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DataPerformance(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DataPerformance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mọi Tối ưu hóa Được áp dụng</para>
		/// <para><strong>Description</strong>: Trạng thái nội bộ cho biết liệu có tối ưu hóa nào được áp dụng hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AnyOptimizationApplied
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AnyOptimizationApplied); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mọi Tối ưu hóa Có sẵn</para>
		/// <para><strong>Description</strong>: Trạng thái nội bộ cho biết liệu có tối ưu hóa nào có sẵn cho bản ghi này hay không.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Có</strong>]: true - [<strong>Không</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Không</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AnyOptimizationAvailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AnyOptimizationAvailable); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thành phần</para>
		/// <para><strong>Description</strong>: Tên của thành phần</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Component
		{
			get { return Entity.GetAttributeValue<string>(Fields.Component); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tổng số</para>
		/// <para><strong>Description</strong>: Số lần truy vấn được thực thi (Tổng hợp)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Count
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Count); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Id</para>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của đề xuất về hiệu suất.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DataPerformanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DataPerformanceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thực thể</para>
		/// <para><strong>Description</strong>: Thực thể chính</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tác động của Tối ưu hóa Ước tính</para>
		/// <para><strong>Description</strong>: Lợi ích chi phí trung bình dự kiến của tối ưu hóa.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedOptimizationImpact
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.EstimatedOptimizationImpact); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Khoảng thời gian Thực thi</para>
		/// <para><strong>Description</strong>: Khoảng thời gian thực thi mà chỉ số hiệu suất được tính toán trong khoảng thời gian đó.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExecutionPeriod
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExecutionPeriod); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Kết quả của Hành động Cuối cùng</para>
		/// <para><strong>Description</strong>: Trạng thái nội bộ thể hiện kết quả của hành động cuối cùng đã thực hiện trên bản ghi này.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastActionResult
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastActionResult); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ngày tối ưu hóa cuối cùng</para>
		/// <para><strong>Description</strong>: Lần cuối cùng khi tối ưu hóa được áp dụng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOptimizationDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOptimizationDate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tối đa</para>
		/// <para><strong>Description</strong>: Thời gian thực thi tối đa tính bằng giây. (Tổng hợp)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MaxTime
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MaxTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian trung bình</para>
		/// <para><strong>Description</strong>: Thời gian thực thi trung bình tính bằng giây. (Tổng hợp)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MedianTime
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MedianTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thời gian tối thiểu</para>
		/// <para><strong>Description</strong>: Thời gian thực thi tối thiểu tính bằng giây. (Tổng hợp)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MinTime
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MinTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thao tác</para>
		/// <para><strong>Description</strong>: Thao tác dữ liệu đã kích hoạt truy vấn (Truy xuất nhiều, v.v)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Operation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Operation); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trạng thái Tối ưu hóa</para>
		/// <para><strong>Description</strong>: Trạng thái tối ưu hóa hiện tại của bản ghi, hiển thị với khách hàng.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OptimizationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.OptimizationStatus); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bộ nhớ tối ưu hóa</para>
		/// <para><strong>Description</strong>: Bộ nhớ bị tối ưu hóa sử dụng. (MB)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? OptimizationStorage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.OptimizationStorage); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Mã định danh duy nhất của tổ chức được liên kết.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tác động của Tối ưu hóa (%)</para>
		/// <para><strong>Description</strong>: Thay đổi hiệu suất thực tế sau khi thực hiện hành động tối ưu hóa trên bản ghi.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RealizedOptimizationImpact
		{
			get { return Entity.GetAttributeValue<string>(Fields.RealizedOptimizationImpact); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Giải pháp</para>
		/// <para><strong>Description</strong>: Tên của giải pháp sở hữu thành phần</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Solution
		{
			get { return Entity.GetAttributeValue<string>(Fields.Solution); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trọng số</para>
		/// <para><strong>Description</strong>: Trọng số truy vấn của thành phần. Được đưa vào cùng Tác động tối ưu hóa nhằm xác định tầm quan trọng chung của việc áp dụng tối ưu hóa. (P2)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Weight
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Weight); }
		}
	}
}