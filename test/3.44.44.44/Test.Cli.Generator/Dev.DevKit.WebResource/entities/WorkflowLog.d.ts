//@ts-check
///<reference path="devkit.d.ts" />
declare namespace DevKit {
	class WorkflowLogApi {
		/**
		* DynamicsCrm.DevKit WorkflowLogApi
		* @param entity The entity object
		*/
		constructor(entity?: any);
		/**
		 * Get the value of alias
		 * @param alias the alias value
		 * @param isMultiOptionSet true if the alias is multi OptionSet
		 */
		getAliasedValue(alias: string, isMultiOptionSet?: boolean): any;
		/**
		 * Get the formatted value of alias
		 * @param alias the alias value
		 * @param isMultiOptionSet true if the alias is multi OptionSet
		 */
		getAliasedFormattedValue(alias: string, isMultiOptionSet?: boolean): string;
		/** The entity object for Create/Update */
		Entity: unknown;
		/** The OData entity object */
		ODataEntity: unknown;
		/** The entity name */
		EntityName: string;
		/** The entity collection name */
		EntityCollectionName: string;
		/** The @odata.etag is then used to build a cache of the response that is dependant on the fields that are retrieved */
		"@odata.etag": string;
		/** Name of the activity which the process step is currently processing. */
		ActivityName: string;
		/** Unique identifier of the parent record. */
		asyncoperationid_asyncoperation: string;
		/** Unique identifier of the parent record. */
		asyncoperationid_processsession: string;
		/** Unique identifier of the system job. */
		childworkflowinstanceid_asyncoperation: string;
		/** Unique identifier of the system job. */
		childworkflowinstanceid_processsession: string;
		/** Date and time when the operation was completed. */
		CompletedOn_UtcDateAndTime: Date;
		/** Unique identifier of the user who created the process log entry. */
		readonly CreatedBy: string;
		/** Date and time when the process log entry was created. */
		readonly CreatedOn_UtcDateAndTime: Date;
		/** Unique identifier of the delegate user who created the process log. */
		readonly CreatedOnBehalfBy: string;
		/** Description of the process step. */
		Description: string;
		/** Duration between completed on and started on, used by business process flow. */
		readonly Duration: number;
		/** Error code related to process. */
		ErrorCode: number;
		/** The string representation of the error. */
		ErrorText: string;
		/** Inputs required by the workflow step. */
		readonly Inputs_name: string;
		/** String specifying the result of an interaction activity. */
		InteractionActivityResult: string;
		/** The iteration count for the action when in a do until loop. */
		IterationCount: number;
		/** Message related to process. */
		Message: string;
		/** Unique identifier of the user who last modified the process log entry. */
		readonly ModifiedBy: string;
		/** Date and time when the process log entry was last modified. */
		readonly ModifiedOn_UtcDateAndTime: Date;
		/** Unique identifier of the delegate user who last modified the process log. */
		readonly ModifiedOnBehalfBy: string;
		/** Outputs generated by the workflow step. */
		readonly Outputs_name: string;
		/** Enter the user who is assigned to manage the record. This field is updated every time the record is assigned to a different user */
		readonly OwnerId_systemuser: string;
		/** Enter the team who is assigned to manage the record. This field is updated every time the record is assigned to a different team */
		readonly OwnerId_team: string;
		/** Unique identifier of the business unit that owns the process. */
		readonly OwningBusinessUnit: string;
		/** Unique identifier of the team who owns the process log. */
		readonly OwningTeam: string;
		/** Unique identifier of the user who owns the process. */
		readonly OwningUser: string;
		/** The count of repetitions of the action when in a loop. */
		RepetitionCount: number;
		/** The string representation of the repetition and iteration / level of the action. */
		RepetitionId: string;
		/** Name of the process stage. */
		StageName: string;
		/** Date and time when the operation was started. */
		StartedOn_UtcDateAndTime: Date;
		/** Status of the process step for which process log record has been created: In Progress, Successfully Completed, or Failed. */
		Status: OptionSet.WorkflowLog.Status;
		/** Name of the process step. */
		StepName: string;
		/** Unique identifier of the process log entry. */
		WorkflowLogId: string;
		readonly FormattedValue: {
			/** Name of the activity which the process step is currently processing. */
			readonly ActivityName: string;
			/** Unique identifier of the parent record. */
			readonly asyncoperationid_asyncoperation: string;
			/** Unique identifier of the parent record. */
			readonly asyncoperationid_processsession: string;
			/** Unique identifier of the system job. */
			readonly childworkflowinstanceid_asyncoperation: string;
			/** Unique identifier of the system job. */
			readonly childworkflowinstanceid_processsession: string;
			/** Date and time when the operation was completed. */
			readonly CompletedOn_UtcDateAndTime: string;
			/** Unique identifier of the user who created the process log entry. */
			readonly CreatedBy: string;
			/** Date and time when the process log entry was created. */
			readonly CreatedOn_UtcDateAndTime: string;
			/** Unique identifier of the delegate user who created the process log. */
			readonly CreatedOnBehalfBy: string;
			/** Description of the process step. */
			readonly Description: string;
			/** Duration between completed on and started on, used by business process flow. */
			readonly Duration: string;
			/** Error code related to process. */
			readonly ErrorCode: string;
			/** The string representation of the error. */
			readonly ErrorText: string;
			/** Inputs required by the workflow step. */
			readonly Inputs_name: string;
			/** String specifying the result of an interaction activity. */
			readonly InteractionActivityResult: string;
			/** The iteration count for the action when in a do until loop. */
			readonly IterationCount: string;
			/** Message related to process. */
			readonly Message: string;
			/** Unique identifier of the user who last modified the process log entry. */
			readonly ModifiedBy: string;
			/** Date and time when the process log entry was last modified. */
			readonly ModifiedOn_UtcDateAndTime: string;
			/** Unique identifier of the delegate user who last modified the process log. */
			readonly ModifiedOnBehalfBy: string;
			/** Outputs generated by the workflow step. */
			readonly Outputs_name: string;
			/** Enter the user who is assigned to manage the record. This field is updated every time the record is assigned to a different user */
			readonly OwnerId_systemuser: string;
			/** Enter the team who is assigned to manage the record. This field is updated every time the record is assigned to a different team */
			readonly OwnerId_team: string;
			/** Unique identifier of the business unit that owns the process. */
			readonly OwningBusinessUnit: string;
			/** Unique identifier of the team who owns the process log. */
			readonly OwningTeam: string;
			/** Unique identifier of the user who owns the process. */
			readonly OwningUser: string;
			/** The count of repetitions of the action when in a loop. */
			readonly RepetitionCount: string;
			/** The string representation of the repetition and iteration / level of the action. */
			readonly RepetitionId: string;
			/** Name of the process stage. */
			readonly StageName: string;
			/** Date and time when the operation was started. */
			readonly StartedOn_UtcDateAndTime: string;
			/** Status of the process step for which process log record has been created: In Progress, Successfully Completed, or Failed. */
			readonly Status: string;
			/** Name of the process step. */
			readonly StepName: string;
			/** Unique identifier of the process log entry. */
			readonly WorkflowLogId: string;
		}
	}
}
declare namespace OptionSet {
	namespace WorkflowLog {
		enum ChildWorkflowInstanceObjectTypeCode {
			/** 4720 */
			Flow_Session,
			/** 4700 */
			System_Job,
			/** 4710 */
			Workflow_Session
		}
		enum ObjectTypeCode {
			/** 4720 */
			Flow_Session,
			/** 4700 */
			System_Job,
			/** 4710 */
			Workflow_Session
		}
		enum RegardingObjectTypeCode {
		}
		enum Status {
			/** 4 */
			Canceled,
			/** 3 */
			Failed,
			/** 1 */
			In_Progress,
			/** 2 */
			Succeeded,
			/** 5 */
			Waiting
		}
		enum RollupState {
			/** 0 - Attribute value is yet to be calculated */
			NotCalculated,
			/** 1 - Attribute value has been calculated per the last update time in <AttributeSchemaName>_Date attribute */
			Calculated,
			/** 2 - Attribute value calculation lead to overflow error */
			OverflowError,
			/** 3 - Attribute value calculation failed due to an internal error, next run of calculation job will likely fix it */
			OtherError,
			/** 4 - Attribute value calculation failed because the maximum number of retry attempts to calculate the value were exceeded likely due to high number of concurrency and locking conflicts */
			RetryLimitExceeded,
			/** 5 - Attribute value calculation failed because maximum hierarchy depth limit for calculation was reached */
			HierarchicalRecursionLimitReached,
			/** 6 - Attribute value calculation failed because a recursive loop was detected in the hierarchy of the record */
			LoopDetected
		}
	}
}
//{'UseForm':true,'UseWebApi':true,'Version':'3.44.44.44'}