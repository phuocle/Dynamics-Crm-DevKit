//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets
{
	public enum msdyncrm_assetsprovider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Commerce</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Commerce = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Digital Assets</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Digital_Assets = 1
	}
	public enum msdyncrm_backgroundsize
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contain</para>
		/// <para><strong>Value</strong>: 164,230,001</para>
		/// </summary>
		Contain = 164_230_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fill (Cover)</para>
		/// <para><strong>Value</strong>: 164,230,000</para>
		/// </summary>
		Fill_Cover = 164_230_000
	}
	public enum msdyncrm_backgroundtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Content width</para>
		/// <para><strong>Value</strong>: 164,230,001</para>
		/// </summary>
		Content_width = 164_230_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Full width</para>
		/// <para><strong>Value</strong>: 164,230,000</para>
		/// </summary>
		Full_width = 164_230_000
	}
	public enum msdyncrm_borderstyle
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dashed</para>
		/// <para><strong>Value</strong>: 164,230,003</para>
		/// </summary>
		Dashed = 164_230_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dotted</para>
		/// <para><strong>Value</strong>: 164,230,002</para>
		/// </summary>
		Dotted = 164_230_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Double</para>
		/// <para><strong>Value</strong>: 164,230,004</para>
		/// </summary>
		Double = 164_230_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 164,230,000</para>
		/// </summary>
		None = 164_230_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Solid</para>
		/// <para><strong>Value</strong>: 164,230,001</para>
		/// </summary>
		Solid = 164_230_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_layoutstyle : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_assetsprovider = "msdyncrm_assetsprovider";
			public const string msdyncrm_backgroundimage = "msdyncrm_backgroundimage";
			public const string msdyncrm_backgroundimagefileid = "msdyncrm_backgroundimagefileid";
			public const string msdyncrm_backgroundpositionx = "msdyncrm_backgroundpositionx";
			public const string msdyncrm_backgroundpositiony = "msdyncrm_backgroundpositiony";
			public const string msdyncrm_backgroundsize = "msdyncrm_backgroundsize";
			public const string msdyncrm_backgroundtype = "msdyncrm_backgroundtype";
			public const string msdyncrm_bordercolor = "msdyncrm_bordercolor";
			public const string msdyncrm_bordersize = "msdyncrm_bordersize";
			public const string msdyncrm_borderstyle = "msdyncrm_borderstyle";
			public const string msdyncrm_borderstyle2 = "msdyncrm_borderstyle2";
			public const string msdyncrm_desktop = "msdyncrm_desktop";
			public const string msdyncrm_emailcolorpalette = "msdyncrm_emailcolorpalette";
			public const string msdyncrm_equal = "msdyncrm_equal";
			public const string msdyncrm_image = "msdyncrm_image";
			public const string msdyncrm_layout = "msdyncrm_layout";
			public const string msdyncrm_layoutstyleId = "msdyncrm_layoutstyleid";
			public const string msdyncrm_marginbottom = "msdyncrm_marginbottom";
			public const string msdyncrm_marginleft = "msdyncrm_marginleft";
			public const string msdyncrm_marginright = "msdyncrm_marginright";
			public const string msdyncrm_margintop = "msdyncrm_margintop";
			public const string msdyncrm_mobile = "msdyncrm_mobile";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_paddingbottom = "msdyncrm_paddingbottom";
			public const string msdyncrm_paddingleft = "msdyncrm_paddingleft";
			public const string msdyncrm_paddingright = "msdyncrm_paddingright";
			public const string msdyncrm_paddingtop = "msdyncrm_paddingtop";
			public const string msdyncrm_roundedcorners = "msdyncrm_roundedcorners";
			public const string msdyncrm_sectionbackgroundcolor = "msdyncrm_sectionbackgroundcolor";
			public const string msdyncrm_wrap = "msdyncrm_wrap";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_layoutstyle";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10624;
		public const string EntityCollectionSchemaName = "msdyncrm_layoutstyles";
		public const string EntityDisplayCollectionName = "Layout styles";
		public const string DisplayName = "Layout Style";
		public const string EntitySetName = "msdyncrm_layoutstyles";
		public const string EntityLogicalCollectionName = "msdyncrm_layoutstyles";
		public const string EntityPrimaryIdAttribute = "msdyncrm_layoutstyleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_layoutstyle";
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle(Guid msdyncrm_layoutstyleId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_layoutstyleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_layoutstyle"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_layoutstyle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_layoutstyle(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_layoutstyle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_layoutstyle(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_layoutstyle(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assets provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_assetsprovider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_assetsprovider.Digital_Assets"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_assetsprovider? msdyncrm_assetsprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_assetsprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_assetsprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_assetsprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_assetsprovider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Background image</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_backgroundimage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_backgroundimage); }
			set { Entity.Attributes[Fields.msdyncrm_backgroundimage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Background image file id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_backgroundimagefileid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_backgroundimagefileid); }
			set { Entity.Attributes[Fields.msdyncrm_backgroundimagefileid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Horizontal alignment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_backgroundpositionx
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_backgroundpositionx); }
			set { Entity.Attributes[Fields.msdyncrm_backgroundpositionx] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vertical alignment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_backgroundpositiony
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_backgroundpositiony); }
			set { Entity.Attributes[Fields.msdyncrm_backgroundpositiony] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fit</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundsize"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundsize.Fill_Cover"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundsize? msdyncrm_backgroundsize
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_backgroundsize);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundsize)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_backgroundsize] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_backgroundsize] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Background type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundtype.Full_width"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundtype? msdyncrm_backgroundtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_backgroundtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_backgroundtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_backgroundtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_backgroundtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_bordercolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_bordercolor); }
			set { Entity.Attributes[Fields.msdyncrm_bordercolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_bordersize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_bordersize); }
			set { Entity.Attributes[Fields.msdyncrm_bordersize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border style</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_borderstyle"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_borderstyle.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_borderstyle? msdyncrm_borderstyle
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_borderstyle);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.msdyncrm_borderstyle)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_borderstyle] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_borderstyle] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_borderstyle2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_borderstyle2); }
			set { Entity.Attributes[Fields.msdyncrm_borderstyle2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show on desktop</para>
		/// <para><strong>Description</strong>: Show on desktop</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_desktop
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_desktop); }
			set { Entity.Attributes[Fields.msdyncrm_desktop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email color palette</para>
		/// <para><strong>Description</strong>: The colors present in the email body</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailcolorpalette
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailcolorpalette); }
			set { Entity.Attributes[Fields.msdyncrm_emailcolorpalette] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Equal columns</para>
		/// <para><strong>Description</strong>: Set equal height for columns</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_equal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_equal); }
			set { Entity.Attributes[Fields.msdyncrm_equal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Image</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_image
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_image); }
			set { Entity.Attributes[Fields.msdyncrm_image] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: layout</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_layout
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_layout); }
			set { Entity.Attributes[Fields.msdyncrm_layout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Layout style</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_layoutstyleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_layoutstyleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bottom</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marginbottom
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marginbottom); }
			set { Entity.Attributes[Fields.msdyncrm_marginbottom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Left</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marginleft
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marginleft); }
			set { Entity.Attributes[Fields.msdyncrm_marginleft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Right</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marginright
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marginright); }
			set { Entity.Attributes[Fields.msdyncrm_marginright] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Top</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_margintop
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_margintop); }
			set { Entity.Attributes[Fields.msdyncrm_margintop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show on mobile</para>
		/// <para><strong>Description</strong>: Show on mobile</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_mobile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_mobile); }
			set { Entity.Attributes[Fields.msdyncrm_mobile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bottom</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingbottom
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingbottom); }
			set { Entity.Attributes[Fields.msdyncrm_paddingbottom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Left</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingleft
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingleft); }
			set { Entity.Attributes[Fields.msdyncrm_paddingleft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Right</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingright
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingright); }
			set { Entity.Attributes[Fields.msdyncrm_paddingright] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Top</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingtop
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingtop); }
			set { Entity.Attributes[Fields.msdyncrm_paddingtop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounded corners</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_roundedcorners
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_roundedcorners); }
			set { Entity.Attributes[Fields.msdyncrm_roundedcorners] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Section background color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_sectionbackgroundcolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_sectionbackgroundcolor); }
			set { Entity.Attributes[Fields.msdyncrm_sectionbackgroundcolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap columns</para>
		/// <para><strong>Description</strong>: Wrap columns on mobile</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_wrap
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_wrap); }
			set { Entity.Attributes[Fields.msdyncrm_wrap] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the layoutstyle</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the layoutstyle</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_layoutstyleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}