//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:35
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynci_PersonalizationViewOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynci_PersonalizationView : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynci_AlternateKeyReference = "msdynci_alternatekeyreference";
			public const string msdynci_HostDomain = "msdynci_hostdomain";
			public const string msdynci_OptimizelyCampaignId = "msdynci_optimizelycampaignid";
			public const string msdynci_OptimizelyCampaignIdentifier = "msdynci_optimizelycampaignidentifier";
			public const string msdynci_OptimizelyExperimentId = "msdynci_optimizelyexperimentid";
			public const string msdynci_OptimizelyExperimentIdentifier = "msdynci_optimizelyexperimentidentifier";
			public const string msdynci_OrgId = "msdynci_orgid";
			public const string msdynci_OrgTenantId = "msdynci_orgtenantid";
			public const string msdynci_personalizationcookiereference = "msdynci_personalizationcookiereference";
			public const string msdynci_PersonalizationViewId = "msdynci_personalizationviewid";
			public const string msdynci_ReferrerPageTitle = "msdynci_referrerpagetitle";
			public const string msdynci_ReferrerUri = "msdynci_referreruri";
			public const string msdynci_SDKVersion = "msdynci_sdkversion";
			public const string msdynci_SessionDuration = "msdynci_sessionduration";
			public const string msdynci_SessionDurationMs = "msdynci_sessiondurationms";
			public const string msdynci_SessionId = "msdynci_sessionid";
			public const string msdynci_SignalId = "msdynci_signalid";
			public const string msdynci_SignalName = "msdynci_signalname";
			public const string msdynci_SignalSource = "msdynci_signalsource";
			public const string msdynci_SignalTimestamp = "msdynci_signaltimestamp";
			public const string msdynci_SignalTimezone = "msdynci_signaltimezone";
			public const string msdynci_SignalVersion = "msdynci_signalversion";
			public const string msdynci_UserAuthId = "msdynci_userauthid";
			public const string msdynci_UserEntityId = "msdynci_userentityid";
			public const string msdynci_UserEntityType = "msdynci_userentitytype";
			public const string msdynci_UserLocalId = "msdynci_userlocalid";
			public const string msdynci_UserState = "msdynci_userstate";
			public const string msdynci_UserTimeSinceVisit = "msdynci_usertimesincevisit";
			public const string msdynci_UserTimeSinceVisitMs = "msdynci_usertimesincevisitms";
			public const string msdynci_UserTrackingContext = "msdynci_usertrackingcontext";
			public const string msdynci_ViewName = "msdynci_viewname";
			public const string msdynci_ViewPreviousViews = "msdynci_viewpreviousviews";
			public const string msdynci_ViewTitle = "msdynci_viewtitle";
			public const string msdynci_ViewType = "msdynci_viewtype";
			public const string msdynci_ViewUri = "msdynci_viewuri";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PartitionId = "partitionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynci_personalizationview";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11482;
		public const string EntityCollectionSchemaName = "msdynci_PersonalizationViews";
		public const string EntityDisplayCollectionName = "PersonalizationViews";
		public const string DisplayName = "PersonalizationView";
		public const string EntitySetName = "msdynci_personalizationviews";
		public const string EntityLogicalCollectionName = "msdynci_personalizationviews";
		public const string EntityPrimaryIdAttribute = "msdynci_personalizationviewid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynci_signalid";
		public const string EntitySchemaName = "msdynci_PersonalizationView";
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView(Guid msdynci_PersonalizationViewId)
		{
			Entity = new Entity(EntityLogicalName, msdynci_PersonalizationViewId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynci_PersonalizationView"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynci_PersonalizationView"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynci_PersonalizationView(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynci_PersonalizationView"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynci_PersonalizationView(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynci_PersonalizationView(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AlternateKeyReference</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynci_alternatekey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynci_AlternateKeyReference
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynci_AlternateKeyReference); }
			set { Entity.Attributes[Fields.msdynci_AlternateKeyReference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HostDomain</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_HostDomain
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_HostDomain); }
			set { Entity.Attributes[Fields.msdynci_HostDomain] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OptimizelyCampaignId_Deprecated</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynci_OptimizelyCampaignId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynci_OptimizelyCampaignId); }
			set { Entity.Attributes[Fields.msdynci_OptimizelyCampaignId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OptimizelyCampaignIdentifier</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? msdynci_OptimizelyCampaignIdentifier
		{
			get { return Entity.GetAttributeValue<long?>(Fields.msdynci_OptimizelyCampaignIdentifier); }
			set { Entity.Attributes[Fields.msdynci_OptimizelyCampaignIdentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OptimizelyExperimentId_Deprecated</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynci_OptimizelyExperimentId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynci_OptimizelyExperimentId); }
			set { Entity.Attributes[Fields.msdynci_OptimizelyExperimentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OptimizelyExperimentIdentifier</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? msdynci_OptimizelyExperimentIdentifier
		{
			get { return Entity.GetAttributeValue<long?>(Fields.msdynci_OptimizelyExperimentIdentifier); }
			set { Entity.Attributes[Fields.msdynci_OptimizelyExperimentIdentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OrgId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_OrgId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_OrgId); }
			set { Entity.Attributes[Fields.msdynci_OrgId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OrgTenantId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_OrgTenantId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_OrgTenantId); }
			set { Entity.Attributes[Fields.msdynci_OrgTenantId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PersonalizationCookieReference</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynci_personalizationcookie"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynci_personalizationcookiereference
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynci_personalizationcookiereference); }
			set { Entity.Attributes[Fields.msdynci_personalizationcookiereference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PersonalizationView</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynci_PersonalizationViewId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynci_PersonalizationViewId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ReferrerPageTitle</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ReferrerPageTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ReferrerPageTitle); }
			set { Entity.Attributes[Fields.msdynci_ReferrerPageTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ReferrerUri</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ReferrerUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ReferrerUri); }
			set { Entity.Attributes[Fields.msdynci_ReferrerUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SDKVersion</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SDKVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SDKVersion); }
			set { Entity.Attributes[Fields.msdynci_SDKVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionDuration_Deprecated</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynci_SessionDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynci_SessionDuration); }
			set { Entity.Attributes[Fields.msdynci_SessionDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionDurationMs</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? msdynci_SessionDurationMs
		{
			get { return Entity.GetAttributeValue<long?>(Fields.msdynci_SessionDurationMs); }
			set { Entity.Attributes[Fields.msdynci_SessionDurationMs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SessionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SessionId); }
			set { Entity.Attributes[Fields.msdynci_SessionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SignalId</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SignalId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SignalId); }
			set { Entity.Attributes[Fields.msdynci_SignalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SignalName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SignalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SignalName); }
			set { Entity.Attributes[Fields.msdynci_SignalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SignalSource</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SignalSource
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SignalSource); }
			set { Entity.Attributes[Fields.msdynci_SignalSource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SignalTimestamp</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SignalTimestamp
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SignalTimestamp); }
			set { Entity.Attributes[Fields.msdynci_SignalTimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SignalTimezone</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SignalTimezone
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SignalTimezone); }
			set { Entity.Attributes[Fields.msdynci_SignalTimezone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SignalVersion</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_SignalVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_SignalVersion); }
			set { Entity.Attributes[Fields.msdynci_SignalVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserAuthId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_UserAuthId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_UserAuthId); }
			set { Entity.Attributes[Fields.msdynci_UserAuthId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserEntityId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_UserEntityId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_UserEntityId); }
			set { Entity.Attributes[Fields.msdynci_UserEntityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserEntityType</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_UserEntityType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_UserEntityType); }
			set { Entity.Attributes[Fields.msdynci_UserEntityType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserLocalId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_UserLocalId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_UserLocalId); }
			set { Entity.Attributes[Fields.msdynci_UserLocalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserState</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_UserState
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_UserState); }
			set { Entity.Attributes[Fields.msdynci_UserState] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserTimeSinceVisit_Deprecated</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynci_UserTimeSinceVisit
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynci_UserTimeSinceVisit); }
			set { Entity.Attributes[Fields.msdynci_UserTimeSinceVisit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserTimeSinceVisitMs</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? msdynci_UserTimeSinceVisitMs
		{
			get { return Entity.GetAttributeValue<long?>(Fields.msdynci_UserTimeSinceVisitMs); }
			set { Entity.Attributes[Fields.msdynci_UserTimeSinceVisitMs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserTrackingContext</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_UserTrackingContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_UserTrackingContext); }
			set { Entity.Attributes[Fields.msdynci_UserTrackingContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ViewName</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ViewName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ViewName); }
			set { Entity.Attributes[Fields.msdynci_ViewName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ViewPreviousViews</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ViewPreviousViews
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ViewPreviousViews); }
			set { Entity.Attributes[Fields.msdynci_ViewPreviousViews] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ViewTitle</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ViewTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ViewTitle); }
			set { Entity.Attributes[Fields.msdynci_ViewTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ViewType</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ViewType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ViewType); }
			set { Entity.Attributes[Fields.msdynci_ViewType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ViewUri</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_ViewUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_ViewUri); }
			set { Entity.Attributes[Fields.msdynci_ViewUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}