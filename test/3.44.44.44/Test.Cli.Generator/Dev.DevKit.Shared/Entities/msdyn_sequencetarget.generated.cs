//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets
{
	public enum msdyn_currentstepsubtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AdvanceToOtherSequence</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		AdvanceToOtherSequence = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInConnect</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		LinkedInConnect = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInGetIntroduced</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		LinkedInGetIntroduced = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInMail</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		LinkedInMail = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInResearch</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		LinkedInResearch = 1
	}
	public enum msdyn_currentsteptype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto action</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Auto_action = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated Email</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Automated_Email = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated Experimentation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Automated_Experimentation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated text message</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Automated_text_message = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn action</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		LinkedIn_action = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Simple Condition</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Simple_Condition = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Text message</para>
		/// <para><strong>Value</strong>: 4,213</para>
		/// </summary>
		Text_message = 4_213,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Wait = 0
	}
	public enum msdyn_deactivatereason
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced To Other Sequence</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Advanced_To_Other_Sequence = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exit Criterion Met</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Exit_Criterion_Met = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Sequence Deactivated</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Parent_Sequence_Deactivated = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding Entity Deactivated</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Regarding_Entity_Deactivated = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Completed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Sequence_Completed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: User Disconnected</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		User_Disconnected = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Completed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Connected</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Connected = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Connecting…</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Connecting = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disconnected</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Disconnected = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Error = 4
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequencetarget : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_advancedfromstep = "msdyn_advancedfromstep";
			public const string msdyn_appliedsequenceinstance = "msdyn_appliedsequenceinstance";
			public const string msdyn_currentstepcount = "msdyn_currentstepcount";
			public const string msdyn_currentstepdefinitionid = "msdyn_currentstepdefinitionid";
			public const string msdyn_currentstepname = "msdyn_currentstepname";
			public const string msdyn_currentstepsubtype = "msdyn_currentstepsubtype";
			public const string msdyn_currentsteptype = "msdyn_currentsteptype";
			public const string msdyn_deactivatereason = "msdyn_deactivatereason";
			public const string msdyn_disconnectedafterstepdefinitionid = "msdyn_disconnectedafterstepdefinitionid";
			public const string msdyn_msflowrunid = "msdyn_msflowrunid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_parentsequence = "msdyn_parentsequence";
			public const string msdyn_ParentSequenceVersion = "msdyn_parentsequenceversion";
			public const string msdyn_regarding = "msdyn_regarding";
			public const string msdyn_segment = "msdyn_segment";
			public const string msdyn_sequencetargetId = "msdyn_sequencetargetid";
			public const string msdyn_sequencetargetuniquekey = "msdyn_sequencetargetuniquekey";
			public const string msdyn_target = "msdyn_target";
			public const string msdyn_totalstepcount = "msdyn_totalstepcount";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_sequencetarget";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10818;
		public const string EntityCollectionSchemaName = "msdyn_sequencetargets";
		public const string EntityDisplayCollectionName = "Sequence Targets";
		public const string DisplayName = "Sequence Target";
		public const string EntitySetName = "msdyn_sequencetargets";
		public const string EntityLogicalCollectionName = "msdyn_sequencetargets";
		public const string EntityPrimaryIdAttribute = "msdyn_sequencetargetid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_sequencetarget";
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Guid msdyn_sequencetargetId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequencetargetId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetarget"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetarget"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequencetarget(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetarget"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequencetarget(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetarget(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connected On</para>
		/// <para><strong>Description</strong>: Date and time when the record was connected to the sequence.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced From Step</para>
		/// <para><strong>Description</strong>: Related Sequence Target Step</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_sequencetargetstep"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_advancedfromstep
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_advancedfromstep); }
			set { Entity.Attributes[Fields.msdyn_advancedfromstep] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Applied sequence instance</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_sequence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_appliedsequenceinstance
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_appliedsequenceinstance); }
			set { Entity.Attributes[Fields.msdyn_appliedsequenceinstance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Step Count</para>
		/// <para><strong>Description</strong>: The current step count for the connected sequence.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_currentstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_currentstepcount); }
			set { Entity.Attributes[Fields.msdyn_currentstepcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current step definition id</para>
		/// <para><strong>Description</strong>: Definition id of the step that is currently in progress.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_currentstepdefinitionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_currentstepdefinitionid); }
			set { Entity.Attributes[Fields.msdyn_currentstepdefinitionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Step</para>
		/// <para><strong>Description</strong>: The current step name of the Sequence Target Step entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_currentstepname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_currentstepname); }
			set { Entity.Attributes[Fields.msdyn_currentstepname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Target Step Sub Type</para>
		/// <para><strong>Description</strong>: Shows the sub type of sequence target step</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentstepsubtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentstepsubtype.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentstepsubtype? msdyn_currentstepsubtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_currentstepsubtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentstepsubtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_currentstepsubtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_currentstepsubtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentsteptype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentsteptype.Wait"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentsteptype? msdyn_currentsteptype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_currentsteptype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_currentsteptype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_currentsteptype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_currentsteptype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivate reason</para>
		/// <para><strong>Description</strong>: Reason for deactivation of sequence target</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_deactivatereason"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_deactivatereason.User_Disconnected"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_deactivatereason? msdyn_deactivatereason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_deactivatereason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.msdyn_deactivatereason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_deactivatereason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_deactivatereason] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disconnected after step</para>
		/// <para><strong>Description</strong>: Definition id of step in Sequence entity after completion of which sequence got disconnected.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_disconnectedafterstepdefinitionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_disconnectedafterstepdefinitionid); }
			set { Entity.Attributes[Fields.msdyn_disconnectedafterstepdefinitionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MS Flow Run Identifier</para>
		/// <para><strong>Description</strong>: MS Flow Run Identifier</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_msflowrunid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_msflowrunid); }
			set { Entity.Attributes[Fields.msdyn_msflowrunid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Sequence</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_sequence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_parentsequence
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_parentsequence); }
			set { Entity.Attributes[Fields.msdyn_parentsequence] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version</para>
		/// <para><strong>Description</strong>: Version of the sequence</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ParentSequenceVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ParentSequenceVersion); }
			set { Entity.Attributes[Fields.msdyn_ParentSequenceVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: The information about record to which this sequence instance is related</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regarding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regarding); }
			set { Entity.Attributes[Fields.msdyn_regarding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment</para>
		/// <para><strong>Description</strong>: Unique identifier for Segment associated with Sequence Target.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segment
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segment); }
			set { Entity.Attributes[Fields.msdyn_segment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Cadence Target</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequencetargetId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequencetargetId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Target Unique key</para>
		/// <para><strong>Description</strong>: It stores unique key for each record.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sequencetargetuniquekey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sequencetargetuniquekey); }
			set { Entity.Attributes[Fields.msdyn_sequencetargetuniquekey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Record</para>
		/// <para><strong>Description</strong>: Target Record</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_target
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_target); }
			set { Entity.Attributes[Fields.msdyn_target] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Step Count</para>
		/// <para><strong>Description</strong>: The total step count for the connected sequence.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totalstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totalstepcount); }
			set { Entity.Attributes[Fields.msdyn_totalstepcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Sequence Target</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Progress</para>
		/// <para><strong>Description</strong>: Reason for the status of the Sequence Target</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}