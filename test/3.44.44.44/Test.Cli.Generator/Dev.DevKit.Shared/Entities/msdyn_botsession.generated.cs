//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets
{
	public enum msdyn_outcome
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: abandoned</para>
		/// <para><strong>Value</strong>: 419,550,003</para>
		/// </summary>
		abandoned = 419_550_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: escalated</para>
		/// <para><strong>Value</strong>: 419,550,002</para>
		/// </summary>
		escalated = 419_550_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: none</para>
		/// <para><strong>Value</strong>: 419,550,000</para>
		/// </summary>
		none = 419_550_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: resolved</para>
		/// <para><strong>Value</strong>: 419,550,001</para>
		/// </summary>
		resolved = 419_550_001
	}
	public enum msdyn_outcomereason
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: agentTransferConfiguredByAuthor</para>
		/// <para><strong>Value</strong>: 419,560,007</para>
		/// </summary>
		agentTransferConfiguredByAuthor = 419_560_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: agentTransferFromQuestionMaxAttempts</para>
		/// <para><strong>Value</strong>: 419,560,008</para>
		/// </summary>
		agentTransferFromQuestionMaxAttempts = 419_560_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: agentTransferRequestedByUser</para>
		/// <para><strong>Value</strong>: 419,560,005</para>
		/// </summary>
		agentTransferRequestedByUser = 419_560_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: agentTransferWithoutError</para>
		/// <para><strong>Value</strong>: 419,560,004</para>
		/// </summary>
		agentTransferWithoutError = 419_560_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: noError</para>
		/// <para><strong>Value</strong>: 419,560,000</para>
		/// </summary>
		noError = 419_560_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: resolved</para>
		/// <para><strong>Value</strong>: 419,560,006</para>
		/// </summary>
		resolved = 419_560_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: systemError</para>
		/// <para><strong>Value</strong>: 419,560,002</para>
		/// </summary>
		systemError = 419_560_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: userError</para>
		/// <para><strong>Value</strong>: 419,560,001</para>
		/// </summary>
		userError = 419_560_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: userExit</para>
		/// <para><strong>Value</strong>: 419,560,003</para>
		/// </summary>
		userExit = 419_560_003
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_botsession : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_botid = "msdyn_botid";
			public const string msdyn_botsessionId = "msdyn_botsessionid";
			public const string msdyn_csatscore = "msdyn_csatscore";
			public const string msdyn_endedon = "msdyn_endedon";
			public const string msdyn_isengaged = "msdyn_isengaged";
			public const string msdyn_Name = "msdyn_name";
			public const string msdyn_outcome = "msdyn_outcome";
			public const string msdyn_outcomereason = "msdyn_outcomereason";
			public const string msdyn_sessionid = "msdyn_sessionid";
			public const string msdyn_sourcesessionid = "msdyn_sourcesessionid";
			public const string msdyn_startedon = "msdyn_startedon";
			public const string msdyn_topicid = "msdyn_topicid";
			public const string msdyn_topicname = "msdyn_topicname";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_botsession";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10864;
		public const string EntityCollectionSchemaName = "msdyn_botsessions";
		public const string EntityDisplayCollectionName = "Bot Sessions";
		public const string DisplayName = "Bot Session";
		public const string EntitySetName = "msdyn_botsessions";
		public const string EntityLogicalCollectionName = "msdyn_botsessions";
		public const string EntityPrimaryIdAttribute = "msdyn_botsessionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_botsession";
		[DebuggerNonUserCode()]
		public msdyn_botsession()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_botsession(Guid msdyn_botsessionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_botsessionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_botsession(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_botsession"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_botsession(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_botsession"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_botsession(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_botsession(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_botsession"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_botsession(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_botsession(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_botsession(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Id</para>
		/// <para><strong>Description</strong>: botId of Chatbot entity for lookup</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="bot"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_botid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_botid); }
			set { Entity.Attributes[Fields.msdyn_botid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_botsessionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_botsessionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session CSAT Score</para>
		/// <para><strong>Description</strong>: Customer satisfaction (CSAT) scores for sessions in which customers respond to an end-of-session request to take the survey. (1-5)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_csatscore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_csatscore); }
			set { Entity.Attributes[Fields.msdyn_csatscore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Ended On</para>
		/// <para><strong>Description</strong>: UTC Date and time when session ended</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_endedon
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_endedon); }
			set { Entity.Attributes[Fields.msdyn_endedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session IsEngaged</para>
		/// <para><strong>Description</strong>: Boolean which mentions if the PVA session is Engaged</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isengaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isengaged); }
			set { Entity.Attributes[Fields.msdyn_isengaged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Name); }
			set { Entity.Attributes[Fields.msdyn_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Outcome</para>
		/// <para><strong>Description</strong>: Bot Session Outcome:  None, Resolved or Escalated or Abandoned from option, sessionoutcome</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcome"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcome.none"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcome? msdyn_outcome
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_outcome);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcome)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_outcome] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_outcome] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Outcome Reason</para>
		/// <para><strong>Description</strong>: Bot Session Outcome Reason:  NoError, UserError, SystemError, UserExit, AgentTransferWithoutError, AgentTransferRequestedByUser, Resolved, AgentTransferConfiguredByAuthor, or AgentTransferFromQuestionMaxAttempts from option, sessionoutcomereason</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcomereason"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcomereason.noError"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcomereason? msdyn_outcomereason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_outcomereason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.msdyn_outcomereason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_outcomereason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_outcomereason] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Omnichannel Session Id</para>
		/// <para><strong>Description</strong>: Omnichannel Session Id</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_ocsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_sessionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_sessionid); }
			set { Entity.Attributes[Fields.msdyn_sessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Session Id</para>
		/// <para><strong>Description</strong>: A unique identifier for the session per source system.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sourcesessionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sourcesessionid); }
			set { Entity.Attributes[Fields.msdyn_sourcesessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Created On</para>
		/// <para><strong>Description</strong>: UTC Date and time when session started</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startedon
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startedon); }
			set { Entity.Attributes[Fields.msdyn_startedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Topic Id</para>
		/// <para><strong>Description</strong>: A unique identifier of the topic that triggered the session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_topicid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_topicid); }
			set { Entity.Attributes[Fields.msdyn_topicid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Session Topic Name</para>
		/// <para><strong>Description</strong>: The display name of the name of the topic that triggered the session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_topicname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_topicname); }
			set { Entity.Attributes[Fields.msdyn_topicname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: System user id for the bot (Application user id)</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the botsession</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the botsession</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_botsessionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}