//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets
{
	public enum msdynmkt_datetime_displayoption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Date</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Date = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Date & Time</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Date_Time = 100_000_001
	}
	public enum msdynmkt_optionsetdisplayoption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dropdown</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Dropdown = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Radio button</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Radio_button = 100_000_000
	}
	public enum msdynmkt_twooption_displayoption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Checkbox</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Checkbox = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Radio button</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Radio_button = 100_000_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_marketingformfield : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_allowedvalidationtypes = "msdynmkt_allowedvalidationtypes";
			public const string msdynmkt_allowemptyoption = "msdynmkt_allowemptyoption";
			public const string msdynmkt_countrycode = "msdynmkt_countrycode";
			public const string msdynmkt_date_defaultvalue = "msdynmkt_date_defaultvalue";
			public const string msdynmkt_datetime_defaultvalue = "msdynmkt_datetime_defaultvalue";
			public const string msdynmkt_datetime_displayoption = "msdynmkt_datetime_displayoption";
			public const string msdynmkt_defaultvalue = "msdynmkt_defaultvalue";
			public const string msdynmkt_errormessage = "msdynmkt_errormessage";
			public const string msdynmkt_fieldoptions = "msdynmkt_fieldoptions";
			public const string msdynmkt_fieldtype = "msdynmkt_fieldtype";
			public const string msdynmkt_hide = "msdynmkt_hide";
			public const string msdynmkt_icon = "msdynmkt_icon";
			public const string msdynmkt_lookup_targets = "msdynmkt_lookup_targets";
			public const string msdynmkt_marketingformfieldId = "msdynmkt_marketingformfieldid";
			public const string msdynmkt_maxlength = "msdynmkt_maxlength";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_optionsetdisplayoption = "msdynmkt_optionsetdisplayoption";
			public const string msdynmkt_placeholder = "msdynmkt_placeholder";
			public const string msdynmkt_prefill = "msdynmkt_prefill";
			public const string msdynmkt_publicvisibility = "msdynmkt_publicvisibility";
			public const string msdynmkt_required = "msdynmkt_required";
			public const string msdynmkt_targetentity = "msdynmkt_targetentity";
			public const string msdynmkt_targetproperty = "msdynmkt_targetproperty";
			public const string msdynmkt_twooption_displayoption = "msdynmkt_twooption_displayoption";
			public const string msdynmkt_validation = "msdynmkt_validation";
			public const string msdynmkt_validationpattern = "msdynmkt_validationpattern";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_marketingformfield";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11356;
		public const string EntityCollectionSchemaName = "msdynmkt_marketingformfields";
		public const string EntityDisplayCollectionName = "Form fields";
		public const string DisplayName = "Form field";
		public const string EntitySetName = "msdynmkt_marketingformfields";
		public const string EntityLogicalCollectionName = "msdynmkt_marketingformfields";
		public const string EntityPrimaryIdAttribute = "msdynmkt_marketingformfieldid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_marketingformfield";
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield(Guid msdynmkt_marketingformfieldId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_marketingformfieldId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_marketingformfield"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_marketingformfield"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_marketingformfield(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_marketingformfield"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_marketingformfield(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformfield(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed validation types</para>
		/// <para><strong>Description</strong>: Allowed validation types</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_allowedvalidationtypes
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_allowedvalidationtypes); }
			set { Entity.Attributes[Fields.msdynmkt_allowedvalidationtypes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow empty option</para>
		/// <para><strong>Description</strong>: Allow empty option</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_allowemptyoption
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_allowemptyoption); }
			set { Entity.Attributes[Fields.msdynmkt_allowemptyoption] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country code</para>
		/// <para><strong>Description</strong>: Country code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_countrycode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_countrycode); }
			set { Entity.Attributes[Fields.msdynmkt_countrycode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Default Value</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_date_defaultvalueUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_date_defaultvalue); }
			set { Entity.Attributes[Fields.msdynmkt_date_defaultvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Time Default Value</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_datetime_defaultvalueUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_datetime_defaultvalue); }
			set { Entity.Attributes[Fields.msdynmkt_datetime_defaultvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date-Time Display Option</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_datetime_displayoption"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_datetime_displayoption? msdynmkt_datetime_displayoption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_datetime_displayoption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_datetime_displayoption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_datetime_displayoption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_datetime_displayoption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default value</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_defaultvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_defaultvalue); }
			set { Entity.Attributes[Fields.msdynmkt_defaultvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error message</para>
		/// <para><strong>Description</strong>: Error message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_errormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_errormessage); }
			set { Entity.Attributes[Fields.msdynmkt_errormessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Options</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fieldoptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fieldoptions); }
			set { Entity.Attributes[Fields.msdynmkt_fieldoptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fieldtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fieldtype); }
			set { Entity.Attributes[Fields.msdynmkt_fieldtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hide field</para>
		/// <para><strong>Description</strong>: Hide field</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_hide
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_hide); }
			set { Entity.Attributes[Fields.msdynmkt_hide] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Icon</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_icon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_icon); }
			set { Entity.Attributes[Fields.msdynmkt_icon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lookup targets</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_lookup_targets
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_lookup_targets); }
			set { Entity.Attributes[Fields.msdynmkt_lookup_targets] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form field</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_marketingformfieldId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_marketingformfieldId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Max size of form field.</para>
		/// <para><strong>Description</strong>: Max size of form field.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_maxlength
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_maxlength); }
			set { Entity.Attributes[Fields.msdynmkt_maxlength] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OptionSet Display Option</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_optionsetdisplayoption"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_optionsetdisplayoption? msdynmkt_optionsetdisplayoption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_optionsetdisplayoption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_optionsetdisplayoption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_optionsetdisplayoption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_optionsetdisplayoption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Placeholder text</para>
		/// <para><strong>Description</strong>: Placeholder text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_placeholder); }
			set { Entity.Attributes[Fields.msdynmkt_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prefill</para>
		/// <para><strong>Description</strong>: Prefill field</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_prefill
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_prefill); }
			set { Entity.Attributes[Fields.msdynmkt_prefill] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Make lookup data publicly viewable</para>
		/// <para><strong>Description</strong>: I acknowledge the select lookup will be visible to public</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_publicvisibility
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_publicvisibility); }
			set { Entity.Attributes[Fields.msdynmkt_publicvisibility] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required</para>
		/// <para><strong>Description</strong>: Required</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_required
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_required); }
			set { Entity.Attributes[Fields.msdynmkt_required] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Audience</para>
		/// <para><strong>Description</strong>: Target audience attribute</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_targetentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_targetentity); }
			set { Entity.Attributes[Fields.msdynmkt_targetentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maps to property</para>
		/// <para><strong>Description</strong>: Form field maps to target audience property</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_targetproperty
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_targetproperty); }
			set { Entity.Attributes[Fields.msdynmkt_targetproperty] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Two-option Display Option</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_twooption_displayoption"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_twooption_displayoption.Radio_button"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_twooption_displayoption? msdynmkt_twooption_displayoption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_twooption_displayoption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.msdynmkt_twooption_displayoption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_twooption_displayoption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_twooption_displayoption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation</para>
		/// <para><strong>Description</strong>: Validation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_validation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_validation); }
			set { Entity.Attributes[Fields.msdynmkt_validation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation pattern</para>
		/// <para><strong>Description</strong>: Validation pattern</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_validationpattern
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_validationpattern); }
			set { Entity.Attributes[Fields.msdynmkt_validationpattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Form field</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Form field</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformfieldOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}