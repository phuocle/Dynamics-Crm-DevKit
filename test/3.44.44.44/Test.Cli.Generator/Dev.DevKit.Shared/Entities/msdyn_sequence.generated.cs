//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_assignsequencetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AccessTeam</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		AccessTeam = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: CurrentUser</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		CurrentUser = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: OwnerTeam</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		OwnerTeam = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: RecordField</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		RecordField = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: RecordOwner</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		RecordOwner = 0
	}
	public enum msdyn_orchestratorversion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: V1</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		V1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: V2</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		V2 = 2
	}
	public enum msdyn_Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Activation</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Activation = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Definition = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Inactive = 0
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Revision</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Revision = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequence : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AnalyticsAvailable = "msdyn_analyticsavailable";
			public const string msdyn_analyticsversion = "msdyn_analyticsversion";
			public const string msdyn_assignsequencecondition = "msdyn_assignsequencecondition";
			public const string msdyn_assignsequencefieldname = "msdyn_assignsequencefieldname";
			public const string msdyn_assignsequencetype = "msdyn_assignsequencetype";
			public const string msdyn_cjodefinition = "msdyn_cjodefinition";
			public const string msdyn_cjodefinitionstate = "msdyn_cjodefinitionstate";
			public const string msdyn_definition = "msdyn_definition";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_iswaittimecomputationenabledatsequencelevel = "msdyn_iswaittimecomputationenabledatsequencelevel";
			public const string msdyn_maxstepcount = "msdyn_maxstepcount";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_orchestratorversion = "msdyn_orchestratorversion";
			public const string msdyn_ParentSequence = "msdyn_parentsequence";
			public const string msdyn_regardingentitydisplayname = "msdyn_regardingentitydisplayname";
			public const string msdyn_regardingEntityName = "msdyn_regardingentityname";
			public const string msdyn_SequenceExitCriterion = "msdyn_sequenceexitcriterion";
			public const string msdyn_sequenceId = "msdyn_sequenceid";
			public const string msdyn_SequenceRecords = "msdyn_sequencerecords";
			public const string msdyn_SequenceStats180d = "msdyn_SequenceStats180d";
			public const string msdyn_SequenceStats1y = "msdyn_SequenceStats1y";
			public const string msdyn_SequenceStats2y = "msdyn_SequenceStats2y";
			public const string msdyn_SequenceStats30d = "msdyn_SequenceStats30d";
			public const string msdyn_SequenceStats90d = "msdyn_SequenceStats90d";
			public const string msdyn_template = "msdyn_template";
			public const string msdyn_totaltasks = "msdyn_totaltasks";
			public const string msdyn_Type = "msdyn_type";
			public const string msdyn_Version = "msdyn_version";
			public const string msdyn_VersionDescription = "msdyn_versiondescription";
			public const string msdyn_workflowid = "msdyn_workflowid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_sequence";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10816;
		public const string EntityCollectionSchemaName = "msdyn_sequences";
		public const string EntityDisplayCollectionName = "Sequences";
		public const string DisplayName = "Sequence";
		public const string EntitySetName = "msdyn_sequences";
		public const string EntityLogicalCollectionName = "msdyn_sequences";
		public const string EntityPrimaryIdAttribute = "msdyn_sequenceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_sequence";
		[DebuggerNonUserCode()]
		public msdyn_sequence()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequence(Guid msdyn_sequenceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequenceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequence(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequence"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_sequence(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequence"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequence(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequence(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequence"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequence(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequence(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequence(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last modified</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AnalyticsAvailable</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AnalyticsAvailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AnalyticsAvailable); }
			set { Entity.Attributes[Fields.msdyn_AnalyticsAvailable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analytics Version</para>
		/// <para><strong>Description</strong>: Information about analytics version of the sequence</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_analyticsversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_analyticsversion); }
			set { Entity.Attributes[Fields.msdyn_analyticsversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign Sequence Condition</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_assignsequencecondition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_assignsequencecondition); }
			set { Entity.Attributes[Fields.msdyn_assignsequencecondition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign Sequence Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_assignsequencefieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_assignsequencefieldname); }
			set { Entity.Attributes[Fields.msdyn_assignsequencefieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign Sequence Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_assignsequencetype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_assignsequencetype.RecordOwner"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_assignsequencetype? msdyn_assignsequencetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_assignsequencetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_assignsequencetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_assignsequencetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_assignsequencetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO Definition</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cjodefinition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cjodefinition); }
			set { Entity.Attributes[Fields.msdyn_cjodefinition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO definition state</para>
		/// <para><strong>Description</strong>: Depicts whether CJO definition is updated or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Updated</strong>]: true - [<strong>Not Updated</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Not Updated</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_cjodefinitionstate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_cjodefinitionstate); }
			set { Entity.Attributes[Fields.msdyn_cjodefinitionstate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_definition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_definition); }
			set { Entity.Attributes[Fields.msdyn_definition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait time computation setting for the sequence.</para>
		/// <para><strong>Description</strong>: Indicates whether wait time computation setting is enabled for the sequence to honor seller availability based on bussiness days.</para>
		/// <para><strong>Two Option</strong> - [<strong></strong>]: true - [<strong></strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong></strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_iswaittimecomputationenabledatsequencelevel
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_iswaittimecomputationenabledatsequencelevel); }
			set { Entity.Attributes[Fields.msdyn_iswaittimecomputationenabledatsequencelevel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Max. Steps</para>
		/// <para><strong>Description</strong>: The max step count for the sequence.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_maxstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_maxstepcount); }
			set { Entity.Attributes[Fields.msdyn_maxstepcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence orchestrator version</para>
		/// <para><strong>Description</strong>: Select version of sequence orchestrator</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_orchestratorversion"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_orchestratorversion? msdyn_orchestratorversion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_orchestratorversion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_orchestratorversion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_orchestratorversion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_orchestratorversion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Sequence</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_sequence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ParentSequence
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ParentSequence); }
			set { Entity.Attributes[Fields.msdyn_ParentSequence] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record type</para>
		/// <para><strong>Description</strong>: The display name information about record to which this sequence could be associated</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingentitydisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingentitydisplayname); }
			set { Entity.Attributes[Fields.msdyn_regardingentitydisplayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding Entity Name</para>
		/// <para><strong>Description</strong>: The logical name of regarding entity</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingEntityName); }
			set { Entity.Attributes[Fields.msdyn_regardingEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Exit Criterion</para>
		/// <para><strong>Description</strong>: Information about various exit criterion for a sequence</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceExitCriterion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceExitCriterion); }
			set { Entity.Attributes[Fields.msdyn_SequenceExitCriterion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequenceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequenceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SequenceRecords</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceRecords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceRecords); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Stats 180d</para>
		/// <para><strong>Description</strong>: Sequence Stats 180d</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats180d
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats180d); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats180d] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Stats 1y</para>
		/// <para><strong>Description</strong>: Sequence Stats 1y</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats1y
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats1y); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats1y] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Stats 2y</para>
		/// <para><strong>Description</strong>: Sequence Stats 2y</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats2y
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats2y); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats2y] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Stats 30d</para>
		/// <para><strong>Description</strong>: Sequence Stats 30d</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats30d
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats30d); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats30d] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Stats 90d</para>
		/// <para><strong>Description</strong>: Sequence Stats 90d</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SequenceStats90d
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SequenceStats90d); }
			set { Entity.Attributes[Fields.msdyn_SequenceStats90d] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence template id</para>
		/// <para><strong>Description</strong>: Sequence template id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_template
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_template); }
			set { Entity.Attributes[Fields.msdyn_template] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Steps</para>
		/// <para><strong>Description</strong>: Total task count of sequence record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totaltasks
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totaltasks); }
			set { Entity.Attributes[Fields.msdyn_totaltasks] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_Type? msdyn_Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.msdyn_Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version</para>
		/// <para><strong>Description</strong>: Version of the sequence</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Version
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Version); }
			set { Entity.Attributes[Fields.msdyn_Version] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Description</para>
		/// <para><strong>Description</strong>: Information about this version of the sequence</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_VersionDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_VersionDescription); }
			set { Entity.Attributes[Fields.msdyn_VersionDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Workflow Id</para>
		/// <para><strong>Description</strong>: Workflow identifier</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_workflowid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_workflowid); }
			set { Entity.Attributes[Fields.msdyn_workflowid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Sequence</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Sequence</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequenceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}