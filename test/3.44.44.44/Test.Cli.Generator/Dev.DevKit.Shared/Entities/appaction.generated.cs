//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.appactionOptionSets
{
	public enum ClientType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Browser</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Browser = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mail App</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mail_App = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Mobile = 1
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum Context
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: All</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		All = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Entity = 1
	}
	public enum Location
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Associated Grid</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Associated_Grid = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dashboard</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Dashboard = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Form</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Form = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Global Header</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Global_Header = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Main Grid</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Main_Grid = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Form</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Quick_Form = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sub Grid</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Sub_Grid = 2
	}
	public enum OnClickEventType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Formula</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Formula = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: JavaScript</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		JavaScript = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0
	}
	public enum Origin
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enhanced Migrated</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Enhanced_Migrated = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Migrated</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Migrated = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dropdown Button</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dropdown_Button = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Group</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Group = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Split Button</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Split_Button = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Standard Button</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Standard_Button = 0
	}
	public enum VisibilityType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Classic Rules</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Classic_Rules = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Formula</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Formula = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class appaction : EntityBase
	{
		public struct Fields
		{
			public const string appactionId = "appactionid";
			public const string AppModuleId = "appmoduleid";
			public const string ButtonAccessibilityText = "buttonaccessibilitytext";
			public const string ButtonLabelText = "buttonlabeltext";
			public const string ButtonSequencePriority = "buttonsequencepriority";
			public const string ButtonTooltipDescription = "buttontooltipdescription";
			public const string ButtonTooltipTitle = "buttontooltiptitle";
			public const string ClientType = "clienttype";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string Context = "context";
			public const string ContextEntity = "contextentity";
			public const string ContextValue = "contextvalue";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string FontIcon = "fonticon";
			public const string GroupTitle = "grouptitle";
			public const string Hidden = "hidden";
			public const string IconWebResourceId = "iconwebresourceid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDisabled = "isdisabled";
			public const string isGroupTitleHidden = "isgrouptitlehidden";
			public const string IsManaged = "ismanaged";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OnClickEventFormulaComponentLibrary = "onclickeventformulacomponentlibrary";
			public const string OnClickEventFormulaComponentLibraryId = "onclickeventformulacomponentlibraryid";
			public const string OnClickEventFormulaComponentName = "onclickeventformulacomponentname";
			public const string OnClickEventFormulaFunctionName = "onclickeventformulafunctionname";
			public const string OnClickEventJavaScriptFunctionName = "onclickeventjavascriptfunctionname";
			public const string OnClickEventJavaScriptParameters = "onclickeventjavascriptparameters";
			public const string OnClickEventJavaScriptWebResourceId = "onclickeventjavascriptwebresourceid";
			public const string OnClickEventType = "onclickeventtype";
			public const string OrganizationId = "organizationid";
			public const string Origin = "origin";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string ParentAppActionId = "parentappactionid";
			public const string Sequence = "sequence";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Type = "type";
			public const string UniqueName = "uniquename";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string VisibilityFormulaComponentLibrary = "visibilityformulacomponentlibrary";
			public const string VisibilityFormulaComponentLibraryId = "visibilityformulacomponentlibraryid";
			public const string VisibilityFormulaComponentName = "visibilityformulacomponentname";
			public const string VisibilityFormulaFunctionName = "visibilityformulafunctionname";
			public const string VisibilityType = "visibilitytype";
		}
		public const string EntityLogicalName = "appaction";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10248;
		public const string EntityCollectionSchemaName = "appactions";
		public const string EntityDisplayCollectionName = "App Actions";
		public const string DisplayName = "App Action";
		public const string EntitySetName = "appactions";
		public const string EntityLogicalCollectionName = "appactions";
		public const string EntityPrimaryIdAttribute = "appactionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "appaction";
		[DebuggerNonUserCode()]
		public appaction()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public appaction(Guid appactionId)
		{
			Entity = new Entity(EntityLogicalName, appactionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public appaction(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="appaction"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public appaction(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="appaction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public appaction(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new appaction(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="appaction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public appaction(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new appaction(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public appaction(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: App Action</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid appactionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.appactionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: App Module Id</para>
		/// <para><strong>Description</strong>: Unique identifier for AppModule associated with Modern Command</para>
		/// <para><strong>Lookup</strong>: <see cref="appmodule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AppModuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AppModuleId); }
			set { Entity.Attributes[Fields.AppModuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accessibility Text for Modern Command Button</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonAccessibilityText
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonAccessibilityText); }
			set { Entity.Attributes[Fields.ButtonAccessibilityText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button Label Text</para>
		/// <para><strong>Description</strong>: Label Text renders for Modern Command Button</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonLabelText
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonLabelText); }
			set { Entity.Attributes[Fields.ButtonLabelText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button Sequence Priority (Depreciated)</para>
		/// <para><strong>Description</strong>: Order of the Modern Command Button (Depreciated)</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ButtonSequencePriority
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ButtonSequencePriority); }
			set { Entity.Attributes[Fields.ButtonSequencePriority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button Tooltip Description</para>
		/// <para><strong>Description</strong>: Tooltip Description for Modern Command Button</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonTooltipDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonTooltipDescription); }
			set { Entity.Attributes[Fields.ButtonTooltipDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button Tooltip Title</para>
		/// <para><strong>Description</strong>: Tooltip Title for Modern Command Button</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ButtonTooltipTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.ButtonTooltipTitle); }
			set { Entity.Attributes[Fields.ButtonTooltipTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client Type</para>
		/// <para><strong>Description</strong>: Client Type associated with Modern Command</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType> ClientType
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.ClientType);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.appactionOptionSets.ClientType)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.ClientType] = null;
				}
				else
				{
					Entity.Attributes[Fields.ClientType] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Context</para>
		/// <para><strong>Description</strong>: Context scope associated with Modern Command</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.Context"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Context? Context
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Context);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Context)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Context] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Context] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Context Entity</para>
		/// <para><strong>Description</strong>: Context Entity associated with Modern Command</para>
		/// <para><strong>Lookup</strong>: <see cref="entity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContextEntity
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContextEntity); }
			set { Entity.Attributes[Fields.ContextEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Context Value</para>
		/// <para><strong>Description</strong>: Context Name associated with Modern Command</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContextValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContextValue); }
			set { Entity.Attributes[Fields.ContextValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font Icon</para>
		/// <para><strong>Description</strong>: Font Icon for Modern Command Button</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FontIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.FontIcon); }
			set { Entity.Attributes[Fields.FontIcon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Group Title</para>
		/// <para><strong>Description</strong>: Group Title for Modern Command Group Button</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupTitle); }
			set { Entity.Attributes[Fields.GroupTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hidden</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Hidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Hidden); }
			set { Entity.Attributes[Fields.Hidden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Icon WebResource Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the Icon Webresource from Webresource entity which used by the associated Modern Command</para>
		/// <para><strong>Lookup</strong>: <see cref="webresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference IconWebResourceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.IconWebResourceId); }
			set { Entity.Attributes[Fields.IconWebResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsDisabled</para>
		/// <para><strong>Description</strong>: Flag indicates the Modern Command Button is disabled for end user usage i.e. ribbon equivalent will be shown</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
			set { Entity.Attributes[Fields.IsDisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: isGroupTitleHidden</para>
		/// <para><strong>Description</strong>: Flag indicates the Modern Command Group Button Title is hidden</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? isGroupTitleHidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.isGroupTitleHidden); }
			set { Entity.Attributes[Fields.isGroupTitleHidden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Location</para>
		/// <para><strong>Description</strong>: Location of the Command bar associated with the Modern Command.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.Location"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Location? Location
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Location);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Location)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Location] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Location] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the AppAction entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event Formula Component Library</para>
		/// <para><strong>Description</strong>: Name of the Component Library where FX Action stored.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventFormulaComponentLibrary
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventFormulaComponentLibrary); }
			set { Entity.Attributes[Fields.OnClickEventFormulaComponentLibrary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event Formula Component Library Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the Component Library associated with Modern Command.</para>
		/// <para><strong>Lookup</strong>: <see cref="canvasapp"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OnClickEventFormulaComponentLibraryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OnClickEventFormulaComponentLibraryId); }
			set { Entity.Attributes[Fields.OnClickEventFormulaComponentLibraryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event Formula Component Name</para>
		/// <para><strong>Description</strong>: Name of the Component for FX Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventFormulaComponentName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventFormulaComponentName); }
			set { Entity.Attributes[Fields.OnClickEventFormulaComponentName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event Formula Function Name</para>
		/// <para><strong>Description</strong>: Name of the Function for FX Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventFormulaFunctionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventFormulaFunctionName); }
			set { Entity.Attributes[Fields.OnClickEventFormulaFunctionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event JavaScript Function Name</para>
		/// <para><strong>Description</strong>: Name of the Function for JS Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventJavaScriptFunctionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventJavaScriptFunctionName); }
			set { Entity.Attributes[Fields.OnClickEventJavaScriptFunctionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event JavaScript Parameters</para>
		/// <para><strong>Description</strong>: Parameters of the Function for JS Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnClickEventJavaScriptParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnClickEventJavaScriptParameters); }
			set { Entity.Attributes[Fields.OnClickEventJavaScriptParameters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event JavaScript WebResource Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the JavaScript WebResource from the Webresource entity which used by associated JS Modern Command.</para>
		/// <para><strong>Lookup</strong>: <see cref="webresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OnClickEventJavaScriptWebResourceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OnClickEventJavaScriptWebResourceId); }
			set { Entity.Attributes[Fields.OnClickEventJavaScriptWebResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Click Event Type</para>
		/// <para><strong>Description</strong>: Type of Action associated with Modern Command.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.OnClickEventType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.OnClickEventType.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.OnClickEventType? OnClickEventType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OnClickEventType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.OnClickEventType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OnClickEventType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OnClickEventType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Origin</para>
		/// <para><strong>Description</strong>: Origin of App Action.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.Origin"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.Origin.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Origin? Origin
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Origin);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Origin)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Origin] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Origin] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent AppAction</para>
		/// <para><strong>Description</strong>: Unique identifier for Parent Modern Command associated with Modern Command.</para>
		/// <para><strong>Lookup</strong>: <see cref="appaction"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAppActionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAppActionId); }
			set { Entity.Attributes[Fields.ParentAppActionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence</para>
		/// <para><strong>Description</strong>: Order of the Modern Command to be Displayed.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Sequence
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Sequence); }
			set { Entity.Attributes[Fields.Sequence] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the App Action</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the App Action</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Type of Modern Command Button</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Name</para>
		/// <para><strong>Description</strong>: Unique Name of the AppAction</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visibility Formula Component Library</para>
		/// <para><strong>Description</strong>: Name of the Component Library where FX Visible Rule stored associated with Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VisibilityFormulaComponentLibrary
		{
			get { return Entity.GetAttributeValue<string>(Fields.VisibilityFormulaComponentLibrary); }
			set { Entity.Attributes[Fields.VisibilityFormulaComponentLibrary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visibility Formula Component Library Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the Component Library associated with Modern Command.</para>
		/// <para><strong>Lookup</strong>: <see cref="canvasapp"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference VisibilityFormulaComponentLibraryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.VisibilityFormulaComponentLibraryId); }
			set { Entity.Attributes[Fields.VisibilityFormulaComponentLibraryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visibility Formula Component Name</para>
		/// <para><strong>Description</strong>: Name of the Component for FX Visible Rule associated with Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VisibilityFormulaComponentName
		{
			get { return Entity.GetAttributeValue<string>(Fields.VisibilityFormulaComponentName); }
			set { Entity.Attributes[Fields.VisibilityFormulaComponentName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visibility Formula Function Name</para>
		/// <para><strong>Description</strong>: Name of the Function for FX Visible Rule assoicated with Modern Command.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VisibilityFormulaFunctionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.VisibilityFormulaFunctionName); }
			set { Entity.Attributes[Fields.VisibilityFormulaFunctionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visibility Type</para>
		/// <para><strong>Description</strong>: Visibily Type of the Modern Command which should be either FX/Classic or None.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.appactionOptionSets.VisibilityType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.appactionOptionSets.VisibilityType? VisibilityType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.VisibilityType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.appactionOptionSets.VisibilityType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.VisibilityType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.VisibilityType] = null;
			}
		}
	}
}