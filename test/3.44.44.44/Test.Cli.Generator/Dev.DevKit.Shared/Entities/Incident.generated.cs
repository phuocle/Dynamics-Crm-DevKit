//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:31
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.IncidentOptionSets
{
	public enum CaseOriginCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 2,483</para>
		/// </summary>
		Facebook = 2_483,
		/// <summary>
		/// <para><strong>Display Name</strong>: IoT</para>
		/// <para><strong>Value</strong>: 700,610,000</para>
		/// </summary>
		IoT = 700_610_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Phone = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 3,986</para>
		/// </summary>
		Twitter = 3_986,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Web = 3
	}
	public enum CaseTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Problem</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Problem = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Question</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Question = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Request</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Request = 3
	}
	public enum ContractServiceLevelCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bronze</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bronze = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Gold</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gold = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Silver</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Silver = 2
	}
	public enum CustomerSatisfactionCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dissatisfied</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dissatisfied = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Neutral</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Neutral = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Satisfied</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Satisfied = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very Dissatisfied</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Very_Dissatisfied = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very Satisfied</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Very_Satisfied = 5
	}
	public enum FirstResponseSLAStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nearing Noncompliance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nearing_Noncompliance = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Noncompliant</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Noncompliant = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Succeeded</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Succeeded = 3
	}
	public enum IncidentStageCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum MessageTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Private Message</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Private_Message = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public Message</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Public_Message = 0
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		High = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Low = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Normal = 2
	}
	public enum ResolveBySLAStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nearing Noncompliance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Nearing_Noncompliance = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Noncompliant</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Noncompliant = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Succeeded</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Succeeded = 3
	}
	public enum ServiceStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Identify = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Research</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Research = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolve</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Resolve = 2
	}
	public enum SeverityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Cancelled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolved</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Resolved = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelled</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Cancelled</strong></para>
		/// </summary>
		Cancelled = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Information Provided</para>
		/// <para><strong>Value</strong>: 1,000</para>
		/// <para><strong>StateCode.Resolved</strong></para>
		/// </summary>
		Information_Provided = 1_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Merged</para>
		/// <para><strong>Value</strong>: 2,000</para>
		/// <para><strong>StateCode.Cancelled</strong></para>
		/// </summary>
		Merged = 2_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		On_Hold = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Problem Solved</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Resolved</strong></para>
		/// </summary>
		Problem_Solved = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Researching</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Researching = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting for Details</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Waiting_for_Details = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Incident : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActivitiesComplete = "activitiescomplete";
			public const string ActualServiceUnits = "actualserviceunits";
			public const string BilledServiceUnits = "billedserviceunits";
			public const string BlockedProfile = "blockedprofile";
			public const string caseage = "caseage";
			public const string CaseOriginCode = "caseorigincode";
			public const string CaseTypeCode = "casetypecode";
			public const string CheckEmail = "checkemail";
			public const string ContactId = "contactid";
			public const string ContractDetailId = "contractdetailid";
			public const string ContractId = "contractid";
			public const string ContractServiceLevelCode = "contractservicelevelcode";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerContacted = "customercontacted";
			public const string CustomerId = "customerid";
			public const string CustomerSatisfactionCode = "customersatisfactioncode";
			public const string deactivatedon = "deactivatedon";
			public const string DecrementEntitlementTerm = "decremententitlementterm";
			public const string Description = "description";
			public const string EmailAddress = "emailaddress";
			public const string EntitlementId = "entitlementid";
			public const string EntityImageId = "entityimageid";
			public const string EscalatedOn = "escalatedon";
			public const string ExchangeRate = "exchangerate";
			public const string ExistingCase = "existingcase";
			public const string FirstResponseByKPIId = "firstresponsebykpiid";
			public const string FirstResponseSent = "firstresponsesent";
			public const string FirstResponseSLAStatus = "firstresponseslastatus";
			public const string FollowupBy = "followupby";
			public const string FollowUpTaskCreated = "followuptaskcreated";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncidentId = "incidentid";
			public const string IncidentStageCode = "incidentstagecode";
			public const string InfluenceScore = "influencescore";
			public const string IsDecrementing = "isdecrementing";
			public const string IsEscalated = "isescalated";
			public const string KbArticleId = "kbarticleid";
			public const string lastinteraction = "lastinteraction";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MessageTypeCode = "messagetypecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_CaseSurveyInviteUrl = "msdyn_casesurveyinviteurl";
			public const string msdyn_copilotengaged = "msdyn_copilotengaged";
			public const string msdyn_FunctionalLocation = "msdyn_functionallocation";
			public const string msdyn_IncidentType = "msdyn_incidenttype";
			public const string msdyn_iotalert = "msdyn_iotalert";
			public const string msdyn_precreateattachmentsid = "msdyn_precreateattachmentsid";
			public const string msdyn_precreatenotesid = "msdyn_precreatenotesid";
			public const string nextsla = "nextsla";
			public const string NumberOfChildIncidents = "numberofchildincidents";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentCaseId = "parentcaseid";
			public const string PrimaryContactId = "primarycontactid";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ProductId = "productid";
			public const string ProductSerialNumber = "productserialnumber";
			public const string ResolveBy = "resolveby";
			public const string ResolveByKPIId = "resolvebykpiid";
			public const string ResolveBySLAStatus = "resolvebyslastatus";
			public const string ResponseBy = "responseby";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string ResponsibleContactId = "responsiblecontactid";
			public const string RouteCase = "routecase";
			public const string SentimentValue = "sentimentvalue";
			public const string ServiceStage = "servicestage";
			public const string SeverityCode = "severitycode";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SocialProfileId = "socialprofileid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TicketNumber = "ticketnumber";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "incident";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 112;
		public const string EntityCollectionSchemaName = "Incidents";
		public const string EntityDisplayCollectionName = "Cases";
		public const string DisplayName = "Case";
		public const string EntitySetName = "incidents";
		public const string EntityLogicalCollectionName = "incidents";
		public const string EntityPrimaryIdAttribute = "incidentid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "Incident";
		[DebuggerNonUserCode()]
		public Incident()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Incident(Guid IncidentId)
		{
			Entity = new Entity(EntityLogicalName, IncidentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Incident(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Incident"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Incident(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Incident"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Incident(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Incident(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Incident"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Incident(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Incident(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Incident(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Unique identifier of the account with which the case is associated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activities Complete</para>
		/// <para><strong>Description</strong>: This attribute is used for Sample Service Business Processes.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ActivitiesComplete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ActivitiesComplete); }
			set { Entity.Attributes[Fields.ActivitiesComplete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Service Units</para>
		/// <para><strong>Description</strong>: Type the number of service units that were actually required to resolve the case.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualServiceUnits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualServiceUnits); }
			set { Entity.Attributes[Fields.ActualServiceUnits] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billed Service Units</para>
		/// <para><strong>Description</strong>: Type the number of service units that were billed to the customer for the case.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BilledServiceUnits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BilledServiceUnits); }
			set { Entity.Attributes[Fields.BilledServiceUnits] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Blocked Profile</para>
		/// <para><strong>Description</strong>: Details whether the profile is blocked or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BlockedProfile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BlockedProfile); }
			set { Entity.Attributes[Fields.BlockedProfile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Age</para>
		/// <para><strong>Description</strong>: Shows the duration for which the Case has been active for Active and Resolved Cases.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string caseage
		{
			get { return Entity.GetAttributeValue<string>(Fields.caseage); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Origin</para>
		/// <para><strong>Description</strong>: Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseOriginCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseOriginCode? CaseOriginCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CaseOriginCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseOriginCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CaseOriginCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CaseOriginCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Type</para>
		/// <para><strong>Description</strong>: Select the type of case to identify the incident for use in case routing and analysis.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseTypeCode? CaseTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CaseTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.CaseTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CaseTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CaseTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check Email</para>
		/// <para><strong>Description</strong>: This attribute is used for Sample Service Business Processes.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckEmail); }
			set { Entity.Attributes[Fields.CheckEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Unique identifier of the contact associated with the case.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract Line</para>
		/// <para><strong>Description</strong>: Choose the contract line that the case should be logged under to make sure the customer is charged correctly.</para>
		/// <para><strong>Lookup</strong>: <see cref="contractdetail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractDetailId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractDetailId); }
			set { Entity.Attributes[Fields.ContractDetailId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract</para>
		/// <para><strong>Description</strong>: Choose the service contract that the case should be logged under to make sure the customer is eligible for support services.</para>
		/// <para><strong>Lookup</strong>: <see cref="contract"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractId); }
			set { Entity.Attributes[Fields.ContractId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Level</para>
		/// <para><strong>Description</strong>: Select the service level for the case to make sure the case is handled correctly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.ContractServiceLevelCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.ContractServiceLevelCode? ContractServiceLevelCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ContractServiceLevelCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.ContractServiceLevelCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ContractServiceLevelCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ContractServiceLevelCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (External Party)</para>
		/// <para><strong>Description</strong>: Shows the external party who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Contacted</para>
		/// <para><strong>Description</strong>: Tells whether customer service representative has contacted the customer or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CustomerContacted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CustomerContacted); }
			set { Entity.Attributes[Fields.CustomerContacted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Description</strong>: Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Satisfaction</para>
		/// <para><strong>Description</strong>: Select the customer&apos;s level of satisfaction with the handling and resolution of the case.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.CustomerSatisfactionCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.CustomerSatisfactionCode? CustomerSatisfactionCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSatisfactionCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.CustomerSatisfactionCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerSatisfactionCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerSatisfactionCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivated On</para>
		/// <para><strong>Description</strong>: Shows the date time when the Case was resolved.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? deactivatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.deactivatedon); }
			set { Entity.Attributes[Fields.deactivatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decrement Entitlement Terms</para>
		/// <para><strong>Description</strong>: Shows whether terms of the associated entitlement should be decremented or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DecrementEntitlementTerm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DecrementEntitlementTerm); }
			set { Entity.Attributes[Fields.DecrementEntitlementTerm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the case to assist the service team in reaching a resolution.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address</para>
		/// <para><strong>Description</strong>: The primary email address for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entitlement</para>
		/// <para><strong>Description</strong>: Choose the entitlement that is applicable for the case.</para>
		/// <para><strong>Lookup</strong>: <see cref="entitlement"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EntitlementId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EntitlementId); }
			set { Entity.Attributes[Fields.EntitlementId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Escalated On</para>
		/// <para><strong>Description</strong>: Indicates the date and time when the case was escalated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EscalatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EscalatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Existing Case</para>
		/// <para><strong>Description</strong>: Select an existing case for the customer that has been populated. For internal use only.</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ExistingCase
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ExistingCase); }
			set { Entity.Attributes[Fields.ExistingCase] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Response By KPI</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Lookup</strong>: <see cref="slakpiinstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FirstResponseByKPIId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FirstResponseByKPIId); }
			set { Entity.Attributes[Fields.FirstResponseByKPIId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Response Sent</para>
		/// <para><strong>Description</strong>: Indicates if the first response has been sent.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FirstResponseSent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FirstResponseSent); }
			set { Entity.Attributes[Fields.FirstResponseSent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Response SLA Status</para>
		/// <para><strong>Description</strong>: Shows the status of the initial response time for the case according to the terms of the SLA.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.FirstResponseSLAStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.FirstResponseSLAStatus.In_Progress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.FirstResponseSLAStatus? FirstResponseSLAStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FirstResponseSLAStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.FirstResponseSLAStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FirstResponseSLAStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FirstResponseSLAStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow Up By</para>
		/// <para><strong>Description</strong>: Enter the date by which a customer service representative has to follow up with the customer on this case.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FollowupByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FollowupBy); }
			set { Entity.Attributes[Fields.FollowupBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow up Task Created</para>
		/// <para><strong>Description</strong>: This attribute is used for Sample Service Business Processes.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowUpTaskCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowUpTaskCreated); }
			set { Entity.Attributes[Fields.FollowUpTaskCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case</para>
		/// <para><strong>Description</strong>: Unique identifier of the case.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid IncidentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.IncidentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Stage</para>
		/// <para><strong>Description</strong>: Select the current stage of the service process for the case to assist service team members when they review or transfer a case.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.IncidentStageCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.IncidentStageCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.IncidentStageCode? IncidentStageCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncidentStageCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.IncidentStageCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncidentStageCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncidentStageCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Influence Score</para>
		/// <para><strong>Description</strong>: Will contain the Influencer score coming from NetBreeze.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? InfluenceScore
		{
			get { return Entity.GetAttributeValue<double?>(Fields.InfluenceScore); }
			set { Entity.Attributes[Fields.InfluenceScore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decrementing</para>
		/// <para><strong>Description</strong>: For system use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDecrementing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDecrementing); }
			set { Entity.Attributes[Fields.IsDecrementing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Escalated</para>
		/// <para><strong>Description</strong>: Indicates if the case has been escalated.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEscalated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEscalated); }
			set { Entity.Attributes[Fields.IsEscalated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Base Article</para>
		/// <para><strong>Description</strong>: Choose the article that contains additional information or a resolution for the case, for reference during research or follow up with the customer.</para>
		/// <para><strong>Lookup</strong>: <see cref="kbarticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference KbArticleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.KbArticleId); }
			set { Entity.Attributes[Fields.KbArticleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Interaction</para>
		/// <para><strong>Description</strong>: Shows the latest activity associated with the Case and the action performed on that activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string lastinteraction
		{
			get { return Entity.GetAttributeValue<string>(Fields.lastinteraction); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Master Case</para>
		/// <para><strong>Description</strong>: Choose the primary case the current case was merged into.</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
			set { Entity.Attributes[Fields.MasterId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Use Only</para>
		/// <para><strong>Description</strong>: Tells whether the incident has been merged with another incident.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Received As</para>
		/// <para><strong>Description</strong>: Shows whether the post originated as a public or private message.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.MessageTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.MessageTypeCode? MessageTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MessageTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.MessageTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MessageTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MessageTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (External Party)</para>
		/// <para><strong>Description</strong>: Shows the external party who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey Invite</para>
		/// <para><strong>Description</strong>: Survey invite url for customer feedback.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CaseSurveyInviteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CaseSurveyInviteUrl); }
			set { Entity.Attributes[Fields.msdyn_CaseSurveyInviteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Engaged</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_copilotengaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_copilotengaged); }
			set { Entity.Attributes[Fields.msdyn_copilotengaged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Functional Location</para>
		/// <para><strong>Description</strong>: Case&apos;s functional location</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_functionallocation"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_FunctionalLocation
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_FunctionalLocation); }
			set { Entity.Attributes[Fields.msdyn_FunctionalLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type</para>
		/// <para><strong>Description</strong>: Unique identifier for Incident Type associated with Case.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IncidentType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IncidentType); }
			set { Entity.Attributes[Fields.msdyn_IncidentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IoT Alert</para>
		/// <para><strong>Description</strong>: The iot alert that initiated this case</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_iotalert"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_iotalert
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_iotalert); }
			set { Entity.Attributes[Fields.msdyn_iotalert] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre Create Entity Attachments Id</para>
		/// <para><strong>Description</strong>: Entity Attachments Id before the case record is created</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_precreateattachmentsid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_precreateattachmentsid); }
			set { Entity.Attributes[Fields.msdyn_precreateattachmentsid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre Create Notes Id</para>
		/// <para><strong>Description</strong>: Notes Id before the case record is created</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_precreatenotesid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_precreatenotesid); }
			set { Entity.Attributes[Fields.msdyn_precreatenotesid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Sla</para>
		/// <para><strong>Description</strong>: Shows the unresolved SLA KPI associated with the Case with the earliest expiry time.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string nextsla
		{
			get { return Entity.GetAttributeValue<string>(Fields.nextsla); }
			set { Entity.Attributes[Fields.nextsla] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Child Cases</para>
		/// <para><strong>Description</strong>: Number of child incidents associated with the incident.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfChildIncidents
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfChildIncidents); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows the duration in minutes for which the case was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Case</para>
		/// <para><strong>Description</strong>: Choose the parent case for a case.</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentCaseId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentCaseId); }
			set { Entity.Attributes[Fields.ParentCaseId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Select a primary contact for this case.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PrimaryContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryContactId); }
			set { Entity.Attributes[Fields.PrimaryContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.PriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product</para>
		/// <para><strong>Description</strong>: Choose the product associated with the case to identify warranty, service, or other product issues and be able to report the number of incidents for each product.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProductId); }
			set { Entity.Attributes[Fields.ProductId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Serial Number</para>
		/// <para><strong>Description</strong>: Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductSerialNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductSerialNumber); }
			set { Entity.Attributes[Fields.ProductSerialNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolve By</para>
		/// <para><strong>Description</strong>: Enter the date by when the case must be resolved.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ResolveByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ResolveBy); }
			set { Entity.Attributes[Fields.ResolveBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolve By KPI</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Lookup</strong>: <see cref="slakpiinstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ResolveByKPIId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResolveByKPIId); }
			set { Entity.Attributes[Fields.ResolveByKPIId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolve By SLA Status</para>
		/// <para><strong>Description</strong>: Shows the status of the resolution time for the case according to the terms of the SLA.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.ResolveBySLAStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.ResolveBySLAStatus.In_Progress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.ResolveBySLAStatus? ResolveBySLAStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ResolveBySLAStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.ResolveBySLAStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ResolveBySLAStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ResolveBySLAStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Response By</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ResponseByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ResponseBy); }
			set { Entity.Attributes[Fields.ResponseBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Responsible Contact (Deprecated)</para>
		/// <para><strong>Description</strong>: Choose an additional customer contact who can also help resolve the case.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public EntityReference ResponsibleContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResponsibleContactId); }
			set { Entity.Attributes[Fields.ResponsibleContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Route Case</para>
		/// <para><strong>Description</strong>: Tells whether the incident has been routed to queue or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RouteCase
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RouteCase); }
			set { Entity.Attributes[Fields.RouteCase] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment Value</para>
		/// <para><strong>Description</strong>: Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? SentimentValue
		{
			get { return Entity.GetAttributeValue<double?>(Fields.SentimentValue); }
			set { Entity.Attributes[Fields.SentimentValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Stage</para>
		/// <para><strong>Description</strong>: Select the stage, in the case resolution process, that the case is in.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.ServiceStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.ServiceStage? ServiceStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ServiceStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.ServiceStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ServiceStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ServiceStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Severity</para>
		/// <para><strong>Description</strong>: Select the severity of this case to indicate the incident&apos;s impact on the customer&apos;s business.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.SeverityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.SeverityCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.SeverityCode? SeverityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SeverityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.SeverityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SeverityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SeverityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the case record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Profile</para>
		/// <para><strong>Description</strong>: Unique identifier of the social profile with which the case is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="socialprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SocialProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SocialProfileId); }
			set { Entity.Attributes[Fields.SocialProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.StateCode.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the case&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.IncidentOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.IncidentOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.IncidentOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Choose the subject for the case, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.</para>
		/// <para><strong>Lookup</strong>: <see cref="subject"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Number</para>
		/// <para><strong>Description</strong>: Shows the case number for customer reference and searching capabilities. This cannot be modified.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TicketNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.TicketNumber); }
			set { Entity.Attributes[Fields.TicketNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Title</para>
		/// <para><strong>Description</strong>: Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics 365 views.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}