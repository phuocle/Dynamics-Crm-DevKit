//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:47
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ServiceOptionSets
{
	public enum InitialStatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arrived</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Arrived = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Canceled = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Completed = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		In_Progress = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Show</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		No_Show = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Pending = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Requested</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Requested = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reserved</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Reserved = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tentative</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.</strong></para>
		/// </summary>
		Tentative = 2
	}
	public enum msdyn_SchedulingEngine
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy Scheduling</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Legacy_Scheduling = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Universal Resource Scheduling</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Universal_Resource_Scheduling = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Service : EntityBase
	{
		public struct Fields
		{
			public const string AnchorOffset = "anchoroffset";
			public const string CalendarId = "calendarid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string Granularity = "granularity";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialStatusCode = "initialstatuscode";
			public const string IsSchedulable = "isschedulable";
			public const string IsVisible = "isvisible";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_RequirementGroupId = "msdyn_requirementgroupid";
			public const string msdyn_SchedulingEngine = "msdyn_SchedulingEngine";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ResourceSpecId = "resourcespecid";
			public const string ServiceId = "serviceid";
			public const string ShowResources = "showresources";
			public const string StrategyId = "strategyid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "service";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4001;
		public const string EntityCollectionSchemaName = "Services";
		public const string EntityDisplayCollectionName = "Services";
		public const string DisplayName = "Service";
		public const string EntitySetName = "services";
		public const string EntityLogicalCollectionName = "services";
		public const string EntityPrimaryIdAttribute = "serviceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Service";
		[DebuggerNonUserCode()]
		public Service()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Service(Guid ServiceId)
		{
			Entity = new Entity(EntityLogicalName, ServiceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Service(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Service"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Service(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Service"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Service(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Service(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Service"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Service(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Service(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Service(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Anchor Offset</para>
		/// <para><strong>Description</strong>: Used in conjunction with granularity to describes when services can be performed in relation to midnight on a given day.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,440</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AnchorOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AnchorOffset); }
			set { Entity.Attributes[Fields.AnchorOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar</para>
		/// <para><strong>Description</strong>: Unique identifier of the calendar.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CalendarId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the service.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the service was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the service.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of activity that represents work done to satisfy a customer&apos;s need.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Duration of the service.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Granularity</para>
		/// <para><strong>Description</strong>: Describes how often the service is performed.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Granularity
		{
			get { return Entity.GetAttributeValue<string>(Fields.Granularity); }
			set { Entity.Attributes[Fields.Granularity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Status Reason</para>
		/// <para><strong>Description</strong>: Initial status reason for the service activity.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceOptionSets.InitialStatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceOptionSets.InitialStatusCode.Reserved"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceOptionSets.InitialStatusCode? InitialStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceOptionSets.InitialStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialStatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Information about whether the service can be scheduled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Active</strong>]: true - [<strong>Inactive</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Active</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSchedulable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSchedulable); }
			set { Entity.Attributes[Fields.IsSchedulable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Visible</para>
		/// <para><strong>Description</strong>: Information about whether the service is visible to users.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsVisible
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsVisible); }
			set { Entity.Attributes[Fields.IsVisible] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the service.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the service was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the service.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Group</para>
		/// <para><strong>Description</strong>: Unique identifier for Requirement Group associated with Service.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementgroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RequirementGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RequirementGroupId); }
			set { Entity.Attributes[Fields.msdyn_RequirementGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduling Engine</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ServiceOptionSets.msdyn_SchedulingEngine"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ServiceOptionSets.msdyn_SchedulingEngine? msdyn_SchedulingEngine
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SchedulingEngine);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ServiceOptionSets.msdyn_SchedulingEngine)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SchedulingEngine] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SchedulingEngine] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the service.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Resources</para>
		/// <para><strong>Description</strong>: Unique identifier of the resource specification with which the service is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="resourcespec"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ResourceSpecId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResourceSpecId); }
			set { Entity.Attributes[Fields.ResourceSpecId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated service.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ServiceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ServiceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show Resources</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowResources
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowResources); }
			set { Entity.Attributes[Fields.ShowResources] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Strategy</para>
		/// <para><strong>Description</strong>: Value that is taken from PluginTypeId in the Plugin Type record for the scheduling strategy. This is the ID of the scheduling strategy plug-in associated with the service.</para>
		/// <para><strong>Lookup</strong>: <see cref="plugintype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference StrategyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.StrategyId); }
			set { Entity.Attributes[Fields.StrategyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}