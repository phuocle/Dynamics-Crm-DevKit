//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets
{
	public enum msdyn_AutoUpdateBookingTravel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Disabled = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Enabled = 192_350_001
	}
	public enum msdyn_DefaultRadiusUnit
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: KM</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		KM = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Miles</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Miles = 192_350_000
	}
	public enum msdyn_EnableAppointments
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		No = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Yes = 192_350_001
	}
	public enum msdyn_EnableOutlookSchedules
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		No = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Yes = 192_350_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_schedulingparameter : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdvancedSettings = "msdyn_advancedsettings";
			public const string msdyn_AutoUpdateBookingTravel = "msdyn_autoupdatebookingtravel";
			public const string msdyn_BackgroundJobsConfiguration = "msdyn_backgroundjobsconfiguration";
			public const string msdyn_ConnectToMaps = "msdyn_connecttomaps";
			public const string msdyn_CustomGeoLatitudeField = "msdyn_customgeolatitudefield";
			public const string msdyn_CustomGeoLocationEntity = "msdyn_customgeolocationentity";
			public const string msdyn_CustomGeoLongitudeField = "msdyn_customgeolongitudefield";
			public const string msdyn_CustomGeoResourceField = "msdyn_customgeoresourcefield";
			public const string msdyn_CustomGeoTimestampField = "msdyn_customgeotimestampfield";
			public const string msdyn_DefaultRadiusUnit = "msdyn_defaultradiusunit";
			public const string msdyn_DefaultRadiusValue = "msdyn_defaultradiusvalue";
			public const string msdyn_DisableSanitizingHTMLTemplates = "msdyn_disablesanitizinghtmltemplates";
			public const string msdyn_EnableAppointments = "msdyn_enableappointments";
			public const string msdyn_EnableCustomGeoLocation = "msdyn_enablecustomgeolocation";
			public const string msdyn_enableOptimizer = "msdyn_enableoptimizer";
			public const string msdyn_EnableOutlookSchedules = "msdyn_enableoutlookschedules";
			public const string msdyn_EnableSuggestSchedule = "msdyn_enablesuggestschedule";
			public const string msdyn_GeoLocationExpiresAfterXMinutes = "msdyn_geolocationexpiresafterxminutes";
			public const string msdyn_GeoLocationRefreshIntervalSeconds = "msdyn_geolocationrefreshintervalseconds";
			public const string msdyn_internalflag = "msdyn_internalflag";
			public const string msdyn_MapApiKey = "msdyn_mapapikey";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_SAAutoFilterServiceTerritory = "msdyn_saautofilterserviceterritory";
			public const string msdyn_ScheduleBoardRefreshIntervalSeconds = "msdyn_scheduleboardrefreshintervalseconds";
			public const string msdyn_schedulingparameterId = "msdyn_schedulingparameterid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_schedulingparameter";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11015;
		public const string EntityCollectionSchemaName = "msdyn_schedulingparameters";
		public const string EntityDisplayCollectionName = "Scheduling Parameters";
		public const string DisplayName = "Scheduling Parameter";
		public const string EntitySetName = "msdyn_schedulingparameters";
		public const string EntityLogicalCollectionName = "msdyn_schedulingparameters";
		public const string EntityPrimaryIdAttribute = "msdyn_schedulingparameterid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_schedulingparameter";
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Guid msdyn_schedulingparameterId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_schedulingparameterId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_schedulingparameter"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_schedulingparameter"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_schedulingparameter(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_schedulingparameter"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_schedulingparameter(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_schedulingparameter(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced Settings</para>
		/// <para><strong>Description</strong>: For internal use</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AdvancedSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AdvancedSettings); }
			set { Entity.Attributes[Fields.msdyn_AdvancedSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Update Booking Travel</para>
		/// <para><strong>Description</strong>: When changing bookings on hourly Schedule Board, automatically update travel time and distance for affected bookings.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_AutoUpdateBookingTravel"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_AutoUpdateBookingTravel.Disabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_AutoUpdateBookingTravel? msdyn_AutoUpdateBookingTravel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AutoUpdateBookingTravel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_AutoUpdateBookingTravel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AutoUpdateBookingTravel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AutoUpdateBookingTravel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Background Jobs Configuration</para>
		/// <para><strong>Description</strong>: Configuration that defines operations, which will be executed in background periodically (internal use only)</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 3,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BackgroundJobsConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BackgroundJobsConfiguration); }
			set { Entity.Attributes[Fields.msdyn_BackgroundJobsConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connect to Maps</para>
		/// <para><strong>Description</strong>: Determines if the mapping provider will be used for map location and distance calculations.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ConnectToMaps
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ConnectToMaps); }
			set { Entity.Attributes[Fields.msdyn_ConnectToMaps] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Geo Latitude Field</para>
		/// <para><strong>Description</strong>: Shows the logical name of the latitude field to be used by geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoLatitudeField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoLatitudeField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoLatitudeField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Geo Location Entity</para>
		/// <para><strong>Description</strong>: Shows the logical name of custom entity to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoLocationEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoLocationEntity); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoLocationEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Geo Longitude Field</para>
		/// <para><strong>Description</strong>: Shows the logical name of the longitude field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoLongitudeField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoLongitudeField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoLongitudeField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Geo Resource Field</para>
		/// <para><strong>Description</strong>: Shows the logical name of the resource field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoResourceField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoResourceField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoResourceField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Geo Timestamp Field</para>
		/// <para><strong>Description</strong>: Shows the logical name of the timestamp field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGeoTimestampField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGeoTimestampField); }
			set { Entity.Attributes[Fields.msdyn_CustomGeoTimestampField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Radius Unit</para>
		/// <para><strong>Description</strong>: Choose the unit to display the distance on the Schedule Assistant experience</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_DefaultRadiusUnit"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_DefaultRadiusUnit.Miles"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_DefaultRadiusUnit? msdyn_DefaultRadiusUnit
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DefaultRadiusUnit);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_DefaultRadiusUnit)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DefaultRadiusUnit] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DefaultRadiusUnit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Radius Value</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultRadiusValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultRadiusValue); }
			set { Entity.Attributes[Fields.msdyn_DefaultRadiusValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Sanitizing HTML Templates</para>
		/// <para><strong>Description</strong>: Disable Sanitizing HTML Templates on the Schedule Board</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableSanitizingHTMLTemplates
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableSanitizingHTMLTemplates); }
			set { Entity.Attributes[Fields.msdyn_DisableSanitizingHTMLTemplates] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Include Appointments</para>
		/// <para><strong>Description</strong>: Enable appointments to display on the new schedule board and be considered in availability search for resources.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableAppointments"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableAppointments.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableAppointments? msdyn_EnableAppointments
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableAppointments);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableAppointments)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableAppointments] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableAppointments] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Custom Geo Location</para>
		/// <para><strong>Description</strong>: Determines if a custom entity will be used as a source of geo locations for resources to be displayed in the map view.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableCustomGeoLocation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableCustomGeoLocation); }
			set { Entity.Attributes[Fields.msdyn_EnableCustomGeoLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Optimizer</para>
		/// <para><strong>Description</strong>: Determines if scheduling optimization is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableOptimizer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableOptimizer); }
			set { Entity.Attributes[Fields.msdyn_enableOptimizer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Include Outlook Free/Busy in Search Resource Availability API</para>
		/// <para><strong>Description</strong>: This only applies when directly calling the API. It does not apply when the Book button is clicked on the Schedule Board or on any schedulable entity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableOutlookSchedules"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableOutlookSchedules.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableOutlookSchedules? msdyn_EnableOutlookSchedules
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableOutlookSchedules);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.msdyn_EnableOutlookSchedules)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Suggest Schedule</para>
		/// <para><strong>Description</strong>: Enable Suggest Schedule</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EnableSuggestSchedule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EnableSuggestSchedule); }
			set { Entity.Attributes[Fields.msdyn_EnableSuggestSchedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Geo Location Expires After X Minutes</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GeoLocationExpiresAfterXMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GeoLocationExpiresAfterXMinutes); }
			set { Entity.Attributes[Fields.msdyn_GeoLocationExpiresAfterXMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Geo Location Refresh Interval Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GeoLocationRefreshIntervalSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GeoLocationRefreshIntervalSeconds); }
			set { Entity.Attributes[Fields.msdyn_GeoLocationRefreshIntervalSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: For internal use</para>
		/// <para><strong>Description</strong>: For internal use</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_internalflag
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_internalflag); }
			set { Entity.Attributes[Fields.msdyn_internalflag] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Map Api Key</para>
		/// <para><strong>Description</strong>: Api key for map</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MapApiKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MapApiKey); }
			set { Entity.Attributes[Fields.msdyn_MapApiKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Filter Service Territory (Deprecated)</para>
		/// <para><strong>Description</strong>: Determines if the schedule assistant should automatically filter results based on the requirement territory.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAAutoFilterServiceTerritory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAAutoFilterServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_SAAutoFilterServiceTerritory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The refresh rate of the schedule board.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ScheduleBoardRefreshIntervalSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ScheduleBoardRefreshIntervalSeconds); }
			set { Entity.Attributes[Fields.msdyn_ScheduleBoardRefreshIntervalSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduling Parameter</para>
		/// <para><strong>Description</strong>: A unique identifier for an entity instance.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_schedulingparameterId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_schedulingparameterId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Scheduling Parameter</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Scheduling Parameter</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_schedulingparameterOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}