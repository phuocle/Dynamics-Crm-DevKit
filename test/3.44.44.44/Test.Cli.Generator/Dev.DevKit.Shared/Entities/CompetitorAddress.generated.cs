//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.CompetitorAddressOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CompetitorAddress : EntityBase
	{
		public struct Fields
		{
			public const string AddressNumber = "addressnumber";
			public const string City = "city";
			public const string CompetitorAddressId = "competitoraddressid";
			public const string Composite = "composite";
			public const string Country = "country";
			public const string County = "county";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Fax = "fax";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Latitude = "latitude";
			public const string Line1 = "line1";
			public const string Line2 = "line2";
			public const string Line3 = "line3";
			public const string Longitude = "longitude";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentId = "parentid";
			public const string PostalCode = "postalcode";
			public const string PostOfficeBox = "postofficebox";
			public const string StateOrProvince = "stateorprovince";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UPSZone = "upszone";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string UTCOffset = "utcoffset";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "competitoraddress";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1004;
		public const string EntityCollectionSchemaName = "CompetitorAddresses";
		public const string EntityDisplayCollectionName = "Competitor Addresses";
		public const string DisplayName = "Competitor Address";
		public const string EntitySetName = "competitoraddresses";
		public const string EntityLogicalCollectionName = "competitoraddresses";
		public const string EntityPrimaryIdAttribute = "competitoraddressid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "CompetitorAddress";
		[DebuggerNonUserCode()]
		public CompetitorAddress()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CompetitorAddress(Guid CompetitorAddressId)
		{
			Entity = new Entity(EntityLogicalName, CompetitorAddressId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CompetitorAddress(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CompetitorAddress"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public CompetitorAddress(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CompetitorAddress"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CompetitorAddress(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CompetitorAddress(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CompetitorAddress"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CompetitorAddress(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CompetitorAddress(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CompetitorAddress(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Number</para>
		/// <para><strong>Description</strong>: Information about which competitor address is applicable.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AddressNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AddressNumber); }
			set { Entity.Attributes[Fields.AddressNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Description</strong>: City name in the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string City
		{
			get { return Entity.GetAttributeValue<string>(Fields.City); }
			set { Entity.Attributes[Fields.City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Competitor Address</para>
		/// <para><strong>Description</strong>: Unique identifier of the competitor address.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CompetitorAddressId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CompetitorAddressId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address</para>
		/// <para><strong>Description</strong>: Shows the complete address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region</para>
		/// <para><strong>Description</strong>: Country/region name in the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Country); }
			set { Entity.Attributes[Fields.Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: County</para>
		/// <para><strong>Description</strong>: County name in the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string County
		{
			get { return Entity.GetAttributeValue<string>(Fields.County); }
			set { Entity.Attributes[Fields.County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the competitor address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the competitor address was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the competitor address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Description</strong>: Fax number for the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Description</strong>: Latitude for the competitor address.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Latitude); }
			set { Entity.Attributes[Fields.Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 1</para>
		/// <para><strong>Description</strong>: First line for entering address information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line1); }
			set { Entity.Attributes[Fields.Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 2</para>
		/// <para><strong>Description</strong>: Second line for entering address information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line2); }
			set { Entity.Attributes[Fields.Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 3</para>
		/// <para><strong>Description</strong>: Third line for entering address information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Line3); }
			set { Entity.Attributes[Fields.Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Description</strong>: Longitude for the address for the competitor.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Longitude); }
			set { Entity.Attributes[Fields.Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the competitor address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the competitor address was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the competitor address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Name</para>
		/// <para><strong>Description</strong>: Name used to identify the competitor address.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent</para>
		/// <para><strong>Description</strong>: Unique identifier of the parent object with which the competitor address is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="competitor"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentId); }
			set { Entity.Attributes[Fields.ParentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: ZIP Code or postal code in the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostalCode); }
			set { Entity.Attributes[Fields.PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post Office Box</para>
		/// <para><strong>Description</strong>: Post office box number in the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostOfficeBox); }
			set { Entity.Attributes[Fields.PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State/Province</para>
		/// <para><strong>Description</strong>: State or province in the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.StateOrProvince); }
			set { Entity.Attributes[Fields.StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Main Phone</para>
		/// <para><strong>Description</strong>: First telephone number for the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone 2</para>
		/// <para><strong>Description</strong>: Second telephone number for the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone 3</para>
		/// <para><strong>Description</strong>: Third telephone number for the competitor address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UPS Zone</para>
		/// <para><strong>Description</strong>: United Parcel Service (UPS) zone for the address of the competitor.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.UPSZone); }
			set { Entity.Attributes[Fields.UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Offset</para>
		/// <para><strong>Description</strong>: UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCOffset); }
			set { Entity.Attributes[Fields.UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}