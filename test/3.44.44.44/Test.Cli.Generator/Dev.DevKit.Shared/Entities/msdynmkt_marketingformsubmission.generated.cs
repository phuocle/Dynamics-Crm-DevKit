//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets
{
	public enum msdynmkt_marketingformsubmissiontype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Capture</para>
		/// <para><strong>Value</strong>: 624,650,001</para>
		/// </summary>
		Form_Capture = 624_650_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Embed</para>
		/// <para><strong>Value</strong>: 624,650,000</para>
		/// </summary>
		Form_Embed = 624_650_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Standalone</para>
		/// <para><strong>Value</strong>: 624,650,002</para>
		/// </summary>
		Form_Standalone = 624_650_002
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmation Pending</para>
		/// <para><strong>Value</strong>: 575,440,004</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Confirmation_Pending = 575_440_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure</para>
		/// <para><strong>Value</strong>: 575,440,001</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Failure = 575_440_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure after Confirmation</para>
		/// <para><strong>Value</strong>: 575,440,005</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Failure_after_Confirmation = 575_440_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finished</para>
		/// <para><strong>Value</strong>: 575,440,003</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Finished = 575_440_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 575,440,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Pending = 575_440_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Success</para>
		/// <para><strong>Value</strong>: 575,440,002</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Success = 575_440_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warning</para>
		/// <para><strong>Value</strong>: 575,440,006</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Warning = 575_440_006
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_marketingformsubmission : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_compliancesettings4id = "msdynmkt_compliancesettings4id";
			public const string msdynmkt_contactableemail = "msdynmkt_contactableemail";
			public const string msdynmkt_createdentity = "msdynmkt_createdentity";
			public const string msdynmkt_customerjourneyid = "msdynmkt_customerjourneyid";
			public const string msdynmkt_emailid = "msdynmkt_emailid";
			public const string msdynmkt_eventregistration = "msdynmkt_eventregistration";
			public const string msdynmkt_failuredescription = "msdynmkt_failuredescription";
			public const string msdynmkt_linkedsubmissionid = "msdynmkt_linkedsubmissionid";
			public const string msdynmkt_marketingformid = "msdynmkt_marketingformid";
			public const string msdynmkt_marketingformsubmissionId = "msdynmkt_marketingformsubmissionid";
			public const string msdynmkt_marketingformsubmissiontype = "msdynmkt_marketingformsubmissiontype";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_pageurl = "msdynmkt_pageurl";
			public const string msdynmkt_submittedvalues = "msdynmkt_submittedvalues";
			public const string msdynmkt_trackingid = "msdynmkt_trackingid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_marketingformsubmission";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11357;
		public const string EntityCollectionSchemaName = "msdynmkt_marketingformsubmissions";
		public const string EntityDisplayCollectionName = "Form Submissions";
		public const string DisplayName = "Form Submission";
		public const string EntitySetName = "msdynmkt_marketingformsubmissions";
		public const string EntityLogicalCollectionName = "msdynmkt_marketingformsubmissions";
		public const string EntityPrimaryIdAttribute = "msdynmkt_marketingformsubmissionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_marketingformsubmission";
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission(Guid msdynmkt_marketingformsubmissionId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_marketingformsubmissionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_marketingformsubmission"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_marketingformsubmission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_marketingformsubmission(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_marketingformsubmission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_marketingformsubmission(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_marketingformsubmission(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliance profile</para>
		/// <para><strong>Description</strong>: Unique identifier for Compliance profile associated with Form Submission.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_compliancesettings4"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_compliancesettings4id
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_compliancesettings4id); }
			set { Entity.Attributes[Fields.msdynmkt_compliancesettings4id] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_contactableemail
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_contactableemail); }
			set { Entity.Attributes[Fields.msdynmkt_contactableemail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Record</para>
		/// <para><strong>Description</strong>: Affected Record Link associated with Form Submission.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_createdentitylink"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_createdentity
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_createdentity); }
			set { Entity.Attributes[Fields.msdynmkt_createdentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source customer journey</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_journey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_customerjourneyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_customerjourneyid); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source email</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_emailid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_emailid); }
			set { Entity.Attributes[Fields.msdynmkt_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event Registration</para>
		/// <para><strong>Description</strong>: Event Registration associated with Form Submission.</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_eventregistration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_eventregistration
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_eventregistration); }
			set { Entity.Attributes[Fields.msdynmkt_eventregistration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure Description</para>
		/// <para><strong>Description</strong>: Failure Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_failuredescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_failuredescription); }
			set { Entity.Attributes[Fields.msdynmkt_failuredescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Submission Id</para>
		/// <para><strong>Description</strong>: Linked Submission Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_linkedsubmissionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_linkedsubmissionid); }
			set { Entity.Attributes[Fields.msdynmkt_linkedsubmissionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form</para>
		/// <para><strong>Description</strong>: Form associated with Form Submission.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_marketingformid); }
			set { Entity.Attributes[Fields.msdynmkt_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Submission ID</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_marketingformsubmissionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_marketingformsubmissionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submission Type</para>
		/// <para><strong>Description</strong>: Marketing form submission type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.msdynmkt_marketingformsubmissiontype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.msdynmkt_marketingformsubmissiontype? msdynmkt_marketingformsubmissiontype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_marketingformsubmissiontype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.msdynmkt_marketingformsubmissiontype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_marketingformsubmissiontype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_marketingformsubmissiontype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the Form Submission.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Page URL</para>
		/// <para><strong>Description</strong>: The URL of the page where the form is hosted</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_pageurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_pageurl); }
			set { Entity.Attributes[Fields.msdynmkt_pageurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted Values</para>
		/// <para><strong>Description</strong>: Submitted Values</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_submittedvalues
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_submittedvalues); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Submission Id</para>
		/// <para><strong>Description</strong>: Tracking Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_trackingid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_trackingid); }
			set { Entity.Attributes[Fields.msdynmkt_trackingid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Form Submission</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Form Submission</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_marketingformsubmissionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}