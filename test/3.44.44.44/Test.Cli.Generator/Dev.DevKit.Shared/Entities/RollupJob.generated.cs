//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RollupJobOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Completed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Locked</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Locked = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ready = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Suspended</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Suspended = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 32</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Canceled = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceling</para>
		/// <para><strong>Value</strong>: 22</para>
		/// <para><strong>StateCode.Locked</strong></para>
		/// </summary>
		Canceling = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 31</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Failed = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 20</para>
		/// <para><strong>StateCode.Locked</strong></para>
		/// </summary>
		In_Progress = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pausing</para>
		/// <para><strong>Value</strong>: 21</para>
		/// <para><strong>StateCode.Locked</strong></para>
		/// </summary>
		Pausing = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Succeeded</para>
		/// <para><strong>Value</strong>: 30</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Succeeded = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Suspended</strong></para>
		/// </summary>
		Waiting = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting For Resources</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Ready</strong></para>
		/// </summary>
		Waiting_For_Resources = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RollupJob : EntityBase
	{
		public struct Fields
		{
			public const string DepthProcessed = "depthprocessed";
			public const string PostponeUntil = "postponeuntil";
			public const string RecordCreatedOn = "recordcreatedon";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RetryCount = "retrycount";
			public const string RollupJobId = "rollupjobid";
			public const string RollupPropertiesId = "rolluppropertiesid";
			public const string SourceEntityTypeCode = "sourceentitytypecode";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
		}
		public const string EntityLogicalName = "rollupjob";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9511;
		public const string EntityCollectionSchemaName = "RollupJobs";
		public const string EntityDisplayCollectionName = "Rollup Jobs";
		public const string DisplayName = "Rollup Job";
		public const string EntitySetName = "rollupjobs";
		public const string EntityLogicalCollectionName = "rollupjobs";
		public const string EntityPrimaryIdAttribute = "rollupjobid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RollupJob";
		[DebuggerNonUserCode()]
		public RollupJob()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupJob(Guid RollupJobId)
		{
			Entity = new Entity(EntityLogicalName, RollupJobId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupJob(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupJob"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RollupJob(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupJob"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupJob(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupJob(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupJob"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupJob(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupJob(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupJob(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DepthProcessed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DepthProcessed); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeUntil); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RecordCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RecordCreatedOn); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RetryCount); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RollupJobId2
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RollupJobId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="rollupproperties"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollupPropertiesId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollupPropertiesId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SourceEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SourceEntityTypeCode); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupJobOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupJobOptionSets.StateCode.Ready"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupJobOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupJobOptionSets.StateCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupJobOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupJobOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupJobOptionSets.StatusCode)value.Value;
			}
		}
	}
}