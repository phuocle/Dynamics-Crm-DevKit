//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_defaultAgentInputLanguage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic - Saudi Arabia</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic_Saudi_Arabia = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Basque - Spain</para>
		/// <para><strong>Value</strong>: 1,069</para>
		/// </summary>
		Basque_Spain = 1_069,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bulgarian - Bulgaria</para>
		/// <para><strong>Value</strong>: 1,026</para>
		/// </summary>
		Bulgarian_Bulgaria = 1_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Catalan - Spain</para>
		/// <para><strong>Value</strong>: 1,027</para>
		/// </summary>
		Catalan_Spain = 1_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - China</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_China = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - Hong Kong</para>
		/// <para><strong>Value</strong>: 3,076</para>
		/// </summary>
		Chinese_Hong_Kong = 3_076,
		/// <summary>
		/// <para><strong>Display Name</strong>: Croatian - Croatia</para>
		/// <para><strong>Value</strong>: 1,050</para>
		/// </summary>
		Croatian_Croatia = 1_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech - Czech Republic</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech_Czech_Republic = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish - Denmark</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish_Denmark = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch - Netherlands</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch_Netherlands = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English - United States</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English_United_States = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Estonian - Estonia</para>
		/// <para><strong>Value</strong>: 1,061</para>
		/// </summary>
		Estonian_Estonia = 1_061,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish - Finland</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish_Finland = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French - France</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French_France = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Galician - Spain</para>
		/// <para><strong>Value</strong>: 1,110</para>
		/// </summary>
		Galician_Spain = 1_110,
		/// <summary>
		/// <para><strong>Display Name</strong>: German - Germany</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German_Germany = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek - Greece</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek_Greece = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew - Israel</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew_Israel = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi - India</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi_India = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hungarian - Hungary</para>
		/// <para><strong>Value</strong>: 1,038</para>
		/// </summary>
		Hungarian_Hungary = 1_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian - Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian - Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese - Japan</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese_Japan = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kazakh - Kazakhstan</para>
		/// <para><strong>Value</strong>: 1,087</para>
		/// </summary>
		Kazakh_Kazakhstan = 1_087,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean - Korea</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean_Korea = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Latvian - Latvia</para>
		/// <para><strong>Value</strong>: 1,062</para>
		/// </summary>
		Latvian_Latvia = 1_062,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lithuanian - Lithuania</para>
		/// <para><strong>Value</strong>: 1,063</para>
		/// </summary>
		Lithuanian_Lithuania = 1_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Malay - Malaysia</para>
		/// <para><strong>Value</strong>: 1,086</para>
		/// </summary>
		Malay_Malaysia = 1_086,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian Bokmal - Norway</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian_Bokmal_Norway = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish - Poland</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish_Poland = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Brazil</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Portugal</para>
		/// <para><strong>Value</strong>: 2,070</para>
		/// </summary>
		Portuguese_Portugal = 2_070,
		/// <summary>
		/// <para><strong>Display Name</strong>: Romanian - Romania</para>
		/// <para><strong>Value</strong>: 1,048</para>
		/// </summary>
		Romanian_Romania = 1_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian - Russia</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian_Russia = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Cyrillic) - Serbia</para>
		/// <para><strong>Value</strong>: 3,098</para>
		/// </summary>
		Serbian_Cyrillic_Serbia = 3_098,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Latin) - Serbia</para>
		/// <para><strong>Value</strong>: 2,074</para>
		/// </summary>
		Serbian_Latin_Serbia = 2_074,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovak - Slovakia</para>
		/// <para><strong>Value</strong>: 1,051</para>
		/// </summary>
		Slovak_Slovakia = 1_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovenian - Slovenia</para>
		/// <para><strong>Value</strong>: 1,060</para>
		/// </summary>
		Slovenian_Slovenia = 1_060,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish - Spain</para>
		/// <para><strong>Value</strong>: 3,082</para>
		/// </summary>
		Spanish_Spain = 3_082,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish - Sweden</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish_Sweden = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai - Thailand</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai_Thailand = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish - Turkey</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish_Turkey = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ukrainian - Ukraine</para>
		/// <para><strong>Value</strong>: 1,058</para>
		/// </summary>
		Ukrainian_Ukraine = 1_058,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vietnamese - Vietnam</para>
		/// <para><strong>Value</strong>: 1,066</para>
		/// </summary>
		Vietnamese_Vietnam = 1_066
	}
	public enum msdyn_preferredagentbackupmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: NextBestAssignment</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		NextBestAssignment = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: NoAssignment</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		NoAssignment = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_omnichannelconfiguration : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_defaultAgentInputLanguage = "msdyn_defaultagentinputlanguage";
			public const string msdyn_delegated_prioritization_migration = "msdyn_delegated_prioritization_migration";
			public const string msdyn_dnd_presence_lookup = "msdyn_dnd_presence_lookup";
			public const string msdyn_enable_advance_entity_routing = "msdyn_enable_advance_entity_routing";
			public const string msdyn_enable_agent_reject_notifications = "msdyn_enable_agent_reject_notifications";
			public const string msdyn_enable_missed_notifications = "msdyn_enable_missed_notifications";
			public const string msdyn_enable_new_consult_exp = "msdyn_enable_new_consult_exp";
			public const string msdyn_enable_preferred_agent_routing = "msdyn_enable_preferred_agent_routing";
			public const string msdyn_enable_supervisor_assign = "msdyn_enable_supervisor_assign";
			public const string msdyn_enable_supervisor_forceclose = "msdyn_enable_supervisor_forceclose";
			public const string msdyn_enable_supervisor_monitor = "msdyn_enable_supervisor_monitor";
			public const string msdyn_enable_supervisor_transfer = "msdyn_enable_supervisor_transfer";
			public const string msdyn_enable_unified_routing_diagnostic = "msdyn_enable_unified_routing_diagnostic";
			public const string msdyn_enable_visitorjourney = "msdyn_enable_visitorjourney";
			public const string msdyn_enablemarkdown = "msdyn_enablemarkdown";
			public const string msdyn_enablenewconversationform = "msdyn_enablenewconversationform";
			public const string msdyn_EnableRealTimeTranslation = "msdyn_enablerealtimetranslation";
			public const string msdyn_enablesoundnotifications = "msdyn_enablesoundnotifications";
			public const string msdyn_inactive_presence_lookup = "msdyn_inactive_presence_lookup";
			public const string msdyn_isdefaultpersonamapped = "msdyn_isdefaultpersonamapped";
			public const string msdyn_ispersonalizationofsoundenabled = "msdyn_ispersonalizationofsoundenabled";
			public const string msdyn_isPersonalMessagesEnabled = "msdyn_ispersonalmessagesenabled";
			public const string msdyn_ispersonasecurityrolemappingenabled = "msdyn_ispersonasecurityrolemappingenabled";
			public const string msdyn_IsSkillBasedRoutingEnabled = "msdyn_isskillbasedroutingenabled";
			public const string msdyn_IsUpdateSkillsEnabled = "msdyn_isupdateskillsenabled";
			public const string msdyn_maskforagent = "msdyn_maskforagent";
			public const string msdyn_maskforcustomer = "msdyn_maskforcustomer";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_number_of_declines_allowed = "msdyn_number_of_declines_allowed";
			public const string msdyn_omnichannelconfigurationId = "msdyn_omnichannelconfigurationid";
			public const string msdyn_preferredagentbackupmode = "msdyn_preferredagentbackupmode";
			public const string msdyn_SoundFormControl = "msdyn_soundformcontrol";
			public const string msdyn_translationwebresourceurl = "msdyn_translationwebresourceurl";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_omnichannelconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10714;
		public const string EntityCollectionSchemaName = "msdyn_omnichannelconfigurations";
		public const string EntityDisplayCollectionName = "Omnichannel Configurations";
		public const string DisplayName = "Omnichannel Configuration";
		public const string EntitySetName = "msdyn_omnichannelconfigurations";
		public const string EntityLogicalCollectionName = "msdyn_omnichannelconfigurations";
		public const string EntityPrimaryIdAttribute = "msdyn_omnichannelconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_omnichannelconfiguration";
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration(Guid msdyn_omnichannelconfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_omnichannelconfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_omnichannelconfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_omnichannelconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_omnichannelconfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_omnichannelconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_omnichannelconfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_omnichannelconfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default input language</para>
		/// <para><strong>Description</strong>: Default language in which customer&apos;s messages are translated for an org</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_defaultAgentInputLanguage"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_defaultAgentInputLanguage.English_United_States"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_defaultAgentInputLanguage? msdyn_defaultAgentInputLanguage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_defaultAgentInputLanguage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_defaultAgentInputLanguage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_defaultAgentInputLanguage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_defaultAgentInputLanguage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status of migration for Delegated Prioritization</para>
		/// <para><strong>Description</strong>: Store if migration for Delegated Prioritization is complete/not complete.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_delegated_prioritization_migration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_delegated_prioritization_migration); }
			set { Entity.Attributes[Fields.msdyn_delegated_prioritization_migration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DND Presnce</para>
		/// <para><strong>Description</strong>: Lookup to display DND presence.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_presence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_dnd_presence_lookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_dnd_presence_lookup); }
			set { Entity.Attributes[Fields.msdyn_dnd_presence_lookup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable advance entity routing</para>
		/// <para><strong>Description</strong>: Setting to change advance entity routing for the org.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_advance_entity_routing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_advance_entity_routing); }
			set { Entity.Attributes[Fields.msdyn_enable_advance_entity_routing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Agent Reject Notification Setting</para>
		/// <para><strong>Description</strong>: Setting to change agent status when agent rejects a notification.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_agent_reject_notifications
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_agent_reject_notifications); }
			set { Entity.Attributes[Fields.msdyn_enable_agent_reject_notifications] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable missed notifications setting</para>
		/// <para><strong>Description</strong>: Setting to change agent status when a notification has been missed.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_missed_notifications
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_missed_notifications); }
			set { Entity.Attributes[Fields.msdyn_enable_missed_notifications] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable consult pane</para>
		/// <para><strong>Description</strong>: Enable consult pane</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_new_consult_exp
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_new_consult_exp); }
			set { Entity.Attributes[Fields.msdyn_enable_new_consult_exp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable preferred agent routing</para>
		/// <para><strong>Description</strong>: Setting to enable/disable preferred agent routing for an organization.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_preferred_agent_routing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_preferred_agent_routing); }
			set { Entity.Attributes[Fields.msdyn_enable_preferred_agent_routing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable supervisor assign</para>
		/// <para><strong>Description</strong>: Enables supervisor assign feature for the org</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_supervisor_assign
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_supervisor_assign); }
			set { Entity.Attributes[Fields.msdyn_enable_supervisor_assign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable supervisor force close</para>
		/// <para><strong>Description</strong>: Enables supervisor force close feature for the org</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_supervisor_forceclose
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_supervisor_forceclose); }
			set { Entity.Attributes[Fields.msdyn_enable_supervisor_forceclose] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable supervisor monitor</para>
		/// <para><strong>Description</strong>: Enables supervisor monitor feature for the org</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_supervisor_monitor
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_supervisor_monitor); }
			set { Entity.Attributes[Fields.msdyn_enable_supervisor_monitor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable supervisor transfer</para>
		/// <para><strong>Description</strong>: Enables supervisor transfer feature for the org</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_supervisor_transfer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_supervisor_transfer); }
			set { Entity.Attributes[Fields.msdyn_enable_supervisor_transfer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable unified routing diagnostic</para>
		/// <para><strong>Description</strong>: Setting to change unified routing diagnostic for the org.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_unified_routing_diagnostic
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_unified_routing_diagnostic); }
			set { Entity.Attributes[Fields.msdyn_enable_unified_routing_diagnostic] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable self service</para>
		/// <para><strong>Description</strong>: Enables self service feature for the org</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enable_visitorjourney
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enable_visitorjourney); }
			set { Entity.Attributes[Fields.msdyn_enable_visitorjourney] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Markdown</para>
		/// <para><strong>Description</strong>: Enable markdown support for messages</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablemarkdown
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablemarkdown); }
			set { Entity.Attributes[Fields.msdyn_enablemarkdown] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable new conversation form</para>
		/// <para><strong>Description</strong>: Enable new conversation form feature</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablenewconversationform
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablenewconversationform); }
			set { Entity.Attributes[Fields.msdyn_enablenewconversationform] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Real Time Translation</para>
		/// <para><strong>Description</strong>: Enable real time translation feature for the org</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableRealTimeTranslation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableRealTimeTranslation); }
			set { Entity.Attributes[Fields.msdyn_EnableRealTimeTranslation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable sound notifications</para>
		/// <para><strong>Description</strong>: Enable sound notifications feature</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablesoundnotifications
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablesoundnotifications); }
			set { Entity.Attributes[Fields.msdyn_enablesoundnotifications] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Presence</para>
		/// <para><strong>Description</strong>: Lookup to display inactive presence settings.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_presence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_inactive_presence_lookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_inactive_presence_lookup); }
			set { Entity.Attributes[Fields.msdyn_inactive_presence_lookup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: isdefaultpersonamapped</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdefaultpersonamapped
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdefaultpersonamapped); }
			set { Entity.Attributes[Fields.msdyn_isdefaultpersonamapped] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow agents to create personal sound settings</para>
		/// <para><strong>Description</strong>: Allow agents to create personal sound settings</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ispersonalizationofsoundenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ispersonalizationofsoundenabled); }
			set { Entity.Attributes[Fields.msdyn_ispersonalizationofsoundenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable personal messages</para>
		/// <para><strong>Description</strong>: Enable personal messages feature for the org</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isPersonalMessagesEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isPersonalMessagesEnabled); }
			set { Entity.Attributes[Fields.msdyn_isPersonalMessagesEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ispersonasecurityrolemappingenabled</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ispersonasecurityrolemappingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ispersonasecurityrolemappingenabled); }
			set { Entity.Attributes[Fields.msdyn_ispersonasecurityrolemappingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Skill Based Routing</para>
		/// <para><strong>Description</strong>: Enable Skill Based Routing for Agents &amp; Supervisors</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsSkillBasedRoutingEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsSkillBasedRoutingEnabled); }
			set { Entity.Attributes[Fields.msdyn_IsSkillBasedRoutingEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable update skill control</para>
		/// <para><strong>Description</strong>: This will enable agents to view and update skills for a conversation.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsUpdateSkillsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsUpdateSkillsEnabled); }
			set { Entity.Attributes[Fields.msdyn_IsUpdateSkillsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mask for agent</para>
		/// <para><strong>Description</strong>: Mask agent data</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_maskforagent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_maskforagent); }
			set { Entity.Attributes[Fields.msdyn_maskforagent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mask for customer</para>
		/// <para><strong>Description</strong>: Mask customer data</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_maskforcustomer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_maskforcustomer); }
			set { Entity.Attributes[Fields.msdyn_maskforcustomer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number Of Declines Allowed</para>
		/// <para><strong>Description</strong>: Number of times an agent can reject or time-out notification.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_number_of_declines_allowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_number_of_declines_allowed); }
			set { Entity.Attributes[Fields.msdyn_number_of_declines_allowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Omnichannel Configuration</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_omnichannelconfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_omnichannelconfigurationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Agent Backup Mode</para>
		/// <para><strong>Description</strong>: Setting the Preferred Agent Backup Mode for Preferred Agent Routing.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_preferredagentbackupmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_preferredagentbackupmode.NextBestAssignment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_preferredagentbackupmode? msdyn_preferredagentbackupmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_preferredagentbackupmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.msdyn_preferredagentbackupmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_preferredagentbackupmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_preferredagentbackupmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sound Form Control</para>
		/// <para><strong>Description</strong>: Field to host sound form control</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SoundFormControl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SoundFormControl); }
			set { Entity.Attributes[Fields.msdyn_SoundFormControl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Web resource URL</para>
		/// <para><strong>Description</strong>: Webresource URL used for real time translation of the messages</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_translationwebresourceurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_translationwebresourceurl); }
			set { Entity.Attributes[Fields.msdyn_translationwebresourceurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Omnichannel Configuration</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Omnichannel Configuration</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_omnichannelconfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}