//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets
{
	public enum msdynmkt_parentstatuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 100</para>
		/// </summary>
		Inactive = 100,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live editing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Live_editing = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready to send</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ready_to_send = 2
	}
	public enum msdynmkt_target
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: _blank</para>
		/// <para><strong>Value</strong>: 164,230,001</para>
		/// </summary>
		_blank = 164_230_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: _parent</para>
		/// <para><strong>Value</strong>: 164,230,002</para>
		/// </summary>
		_parent = 164_230_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: _self</para>
		/// <para><strong>Value</strong>: 164,230,000</para>
		/// </summary>
		_self = 164_230_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: _top</para>
		/// <para><strong>Value</strong>: 164,230,003</para>
		/// </summary>
		_top = 164_230_003
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_buttonstyle : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_alias = "msdynmkt_alias";
			public const string msdynmkt_aliasplaceholder = "msdynmkt_aliasplaceholder";
			public const string msdynmkt_alignment = "msdynmkt_alignment";
			public const string msdynmkt_autowidth = "msdynmkt_autowidth";
			public const string msdynmkt_bordercolor = "msdynmkt_bordercolor";
			public const string msdynmkt_bordersize = "msdynmkt_bordersize";
			public const string msdynmkt_borderstyle = "msdynmkt_borderstyle";
			public const string msdynmkt_buttoncolor = "msdynmkt_buttoncolor";
			public const string msdynmkt_buttonstyleId = "msdynmkt_buttonstyleid";
			public const string msdynmkt_buttontext = "msdynmkt_buttontext";
			public const string msdynmkt_emailcolorpalette = "msdynmkt_emailcolorpalette";
			public const string msdynmkt_fittotext = "msdynmkt_fittotext";
			public const string msdynmkt_fontfamily = "msdynmkt_fontfamily";
			public const string msdynmkt_fontitalicstyle = "msdynmkt_fontitalicstyle";
			public const string msdynmkt_fontsize = "msdynmkt_fontsize";
			public const string msdynmkt_fontweight = "msdynmkt_fontweight";
			public const string msdynmkt_friendlyname = "msdynmkt_friendlyname";
			public const string msdynmkt_height = "msdynmkt_height";
			public const string msdynmkt_linkto = "msdynmkt_linkto";
			public const string msdynmkt_marginbottom = "msdynmkt_marginbottom";
			public const string msdynmkt_marginleft = "msdynmkt_marginleft";
			public const string msdynmkt_marginright = "msdynmkt_marginright";
			public const string msdynmkt_margintop = "msdynmkt_margintop";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_paddingbottom = "msdynmkt_paddingbottom";
			public const string msdynmkt_paddingleft = "msdynmkt_paddingleft";
			public const string msdynmkt_paddingright = "msdynmkt_paddingright";
			public const string msdynmkt_paddingtop = "msdynmkt_paddingtop";
			public const string msdynmkt_parentstatuscode = "msdynmkt_parentstatuscode";
			public const string msdynmkt_placeholders = "msdynmkt_placeholders";
			public const string msdynmkt_roundedcorners = "msdynmkt_roundedcorners";
			public const string msdynmkt_target = "msdynmkt_target";
			public const string msdynmkt_textdecoration = "msdynmkt_textdecoration";
			public const string msdynmkt_textfontstyle = "msdynmkt_textfontstyle";
			public const string msdynmkt_textstylecolor = "msdynmkt_textstylecolor";
			public const string msdynmkt_themecolorpalette = "msdynmkt_themecolorpalette";
			public const string msdynmkt_tracking = "msdynmkt_tracking";
			public const string msdynmkt_verticalalign = "msdynmkt_verticalalign";
			public const string msdynmkt_width = "msdynmkt_width";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_buttonstyle";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11325;
		public const string EntityCollectionSchemaName = "msdynmkt_buttonstyles";
		public const string EntityDisplayCollectionName = "Buttons style";
		public const string DisplayName = "Button style";
		public const string EntitySetName = "msdynmkt_buttonstyles";
		public const string EntityLogicalCollectionName = "msdynmkt_buttonstyles";
		public const string EntityPrimaryIdAttribute = "msdynmkt_buttonstyleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_buttonstyle";
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle(Guid msdynmkt_buttonstyleId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_buttonstyleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_buttonstyle"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_buttonstyle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_buttonstyle(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_buttonstyle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_buttonstyle(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_buttonstyle(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button alias</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_alias
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_alias); }
			set { Entity.Attributes[Fields.msdynmkt_alias] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button alias placeholder</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_aliasplaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_aliasplaceholder); }
			set { Entity.Attributes[Fields.msdynmkt_aliasplaceholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alignment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_alignment
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_alignment); }
			set { Entity.Attributes[Fields.msdynmkt_alignment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto width</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_autowidth
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_autowidth); }
			set { Entity.Attributes[Fields.msdynmkt_autowidth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_bordercolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_bordercolor); }
			set { Entity.Attributes[Fields.msdynmkt_bordercolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_bordersize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_bordersize); }
			set { Entity.Attributes[Fields.msdynmkt_bordersize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_borderstyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_borderstyle); }
			set { Entity.Attributes[Fields.msdynmkt_borderstyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_buttoncolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_buttoncolor); }
			set { Entity.Attributes[Fields.msdynmkt_buttoncolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button style</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_buttonstyleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_buttonstyleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_buttontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_buttontext); }
			set { Entity.Attributes[Fields.msdynmkt_buttontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email color palette</para>
		/// <para><strong>Description</strong>: The colors present in the email body</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_emailcolorpalette
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_emailcolorpalette); }
			set { Entity.Attributes[Fields.msdynmkt_emailcolorpalette] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fit to text</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_fittotext
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_fittotext); }
			set { Entity.Attributes[Fields.msdynmkt_fittotext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font family</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fontfamily
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fontfamily); }
			set { Entity.Attributes[Fields.msdynmkt_fontfamily] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font italic style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fontitalicstyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fontitalicstyle); }
			set { Entity.Attributes[Fields.msdynmkt_fontitalicstyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fontsize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fontsize); }
			set { Entity.Attributes[Fields.msdynmkt_fontsize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font weight</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fontweight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fontweight); }
			set { Entity.Attributes[Fields.msdynmkt_fontweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Friendly Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_friendlyname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_friendlyname); }
			set { Entity.Attributes[Fields.msdynmkt_friendlyname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Height</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_height
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_height); }
			set { Entity.Attributes[Fields.msdynmkt_height] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Link to</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_linkto
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_linkto); }
			set { Entity.Attributes[Fields.msdynmkt_linkto] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Margin bottom</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_marginbottom
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_marginbottom); }
			set { Entity.Attributes[Fields.msdynmkt_marginbottom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Margin left</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_marginleft
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_marginleft); }
			set { Entity.Attributes[Fields.msdynmkt_marginleft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Margin right</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_marginright
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_marginright); }
			set { Entity.Attributes[Fields.msdynmkt_marginright] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Margin top</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_margintop
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_margintop); }
			set { Entity.Attributes[Fields.msdynmkt_margintop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Padding bottom</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_paddingbottom
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_paddingbottom); }
			set { Entity.Attributes[Fields.msdynmkt_paddingbottom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Padding left</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_paddingleft
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_paddingleft); }
			set { Entity.Attributes[Fields.msdynmkt_paddingleft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Padding right</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_paddingright
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_paddingright); }
			set { Entity.Attributes[Fields.msdynmkt_paddingright] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Padding top</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_paddingtop
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_paddingtop); }
			set { Entity.Attributes[Fields.msdynmkt_paddingtop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Status Code</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_parentstatuscode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_parentstatuscode.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_parentstatuscode? msdynmkt_parentstatuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_parentstatuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_parentstatuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_parentstatuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_parentstatuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Placeholders</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_placeholders
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_placeholders); }
			set { Entity.Attributes[Fields.msdynmkt_placeholders] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounded corners</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_roundedcorners
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_roundedcorners); }
			set { Entity.Attributes[Fields.msdynmkt_roundedcorners] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_target"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_target._self"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_target? msdynmkt_target
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_target);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.msdynmkt_target)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_target] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_target] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text decoration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_textdecoration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_textdecoration); }
			set { Entity.Attributes[Fields.msdynmkt_textdecoration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text font style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_textfontstyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_textfontstyle); }
			set { Entity.Attributes[Fields.msdynmkt_textfontstyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text style color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_textstylecolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_textstylecolor); }
			set { Entity.Attributes[Fields.msdynmkt_textstylecolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Theme color palette</para>
		/// <para><strong>Description</strong>: The colors set in the theme color palette</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_themecolorpalette
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_themecolorpalette); }
			set { Entity.Attributes[Fields.msdynmkt_themecolorpalette] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tracking</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>On</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_tracking
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_tracking); }
			set { Entity.Attributes[Fields.msdynmkt_tracking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vertical alignment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_verticalalign
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_verticalalign); }
			set { Entity.Attributes[Fields.msdynmkt_verticalalign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Width</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_width
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_width); }
			set { Entity.Attributes[Fields.msdynmkt_width] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Button style</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Button style</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_buttonstyleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}