//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SystemFormOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum FormActivationState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Inactive = 0
	}
	public enum FormPresentation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AirForm</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		AirForm = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ClassicForm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		ClassicForm = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ConvertedICForm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ConvertedICForm = 2
	}
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AppointmentBook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		AppointmentBook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: AppointmentBookBackup</para>
		/// <para><strong>Value</strong>: 102</para>
		/// </summary>
		AppointmentBookBackup = 102,
		/// <summary>
		/// <para><strong>Display Name</strong>: Card</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Card = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contextual Dashboard</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Contextual_Dashboard = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dashboard</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dashboard = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dialog</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Dialog = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: InteractionCentricDashboard</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		InteractionCentricDashboard = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Main</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Main = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Main - Interactive experience</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Main_Interactive_experience = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: MainBackup</para>
		/// <para><strong>Value</strong>: 101</para>
		/// </summary>
		MainBackup = 101,
		/// <summary>
		/// <para><strong>Display Name</strong>: MiniCampaignBO</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		MiniCampaignBO = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile - Express</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Mobile_Express = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100</para>
		/// </summary>
		Other = 100,
		/// <summary>
		/// <para><strong>Display Name</strong>: Power BI Dashboard</para>
		/// <para><strong>Value</strong>: 103</para>
		/// </summary>
		Power_BI_Dashboard = 103,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preview</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Preview = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Create</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Quick_Create = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick View Form</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Quick_View_Form = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task Flow Form</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Task_Flow_Form = 9
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SystemForm : EntityBase
	{
		public struct Fields
		{
			public const string AncestorFormId = "ancestorformid";
			public const string ComponentState = "componentstate";
			public const string Description = "description";
			public const string FormActivationState = "formactivationstate";
			public const string FormId = "formid";
			public const string FormIdUnique = "formidunique";
			public const string FormJson = "formjson";
			public const string FormPresentation = "formpresentation";
			public const string FormXml = "formxml";
			public const string FormXmlManaged = "formxmlmanaged";
			public const string IntroducedVersion = "introducedversion";
			public const string IsAIRMerged = "isairmerged";
			public const string IsDefault = "isdefault";
			public const string IsDesktopEnabled = "isdesktopenabled";
			public const string IsManaged = "ismanaged";
			public const string IsTabletEnabled = "istabletenabled";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string PublishedOn = "publishedon";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Type = "type";
			public const string UniqueName = "uniquename";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "systemform";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1030;
		public const string EntityCollectionSchemaName = "SystemForms";
		public const string EntityDisplayCollectionName = "System Forms";
		public const string DisplayName = "System Form";
		public const string EntitySetName = "systemforms";
		public const string EntityLogicalCollectionName = "systemforms";
		public const string EntityPrimaryIdAttribute = "formid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SystemForm";
		[DebuggerNonUserCode()]
		public SystemForm()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemForm(Guid SystemFormId)
		{
			Entity = new Entity(EntityLogicalName, SystemFormId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemForm(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemForm"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SystemForm(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemForm"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemForm(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemForm(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemForm"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemForm(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemForm(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemForm(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Form</para>
		/// <para><strong>Description</strong>: Unique identifier of the parent form.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AncestorFormId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AncestorFormId); }
			set { Entity.Attributes[Fields.AncestorFormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the form or dashboard.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form State</para>
		/// <para><strong>Description</strong>: Specifies the state of the form.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState? FormActivationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FormActivationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormActivationState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FormActivationState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FormActivationState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the record type form.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormId); }
			set { Entity.Attributes[Fields.FormId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the form used when synchronizing customizations for the Microsoft Dynamics 365 client for Outlook.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormIdUnique); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Json representation of the form layout.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FormJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.FormJson); }
			set { Entity.Attributes[Fields.FormJson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AIR Refreshed</para>
		/// <para><strong>Description</strong>: Specifies whether this form is in the updated UI layout in Microsoft Dynamics CRM 2015 or Microsoft Dynamics CRM Online 2015 Update.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation.ClassicForm"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation? FormPresentation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FormPresentation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.FormPresentation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FormPresentation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FormPresentation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: XML representation of the form layout.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FormXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.FormXml); }
			set { Entity.Attributes[Fields.FormXml] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: formXml diff as in a managed solution. for internal use only</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FormXmlManaged
		{
			get { return Entity.GetAttributeValue<string>(Fields.FormXmlManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Introduced Version</para>
		/// <para><strong>Description</strong>: Version in which the form is introduced.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Refreshed</para>
		/// <para><strong>Description</strong>: Specifies whether this form is merged with the updated UI layout in Microsoft Dynamics CRM 2015 or Microsoft Dynamics CRM Online 2015 Update.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAIRMerged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAIRMerged); }
			set { Entity.Attributes[Fields.IsAIRMerged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Form</para>
		/// <para><strong>Description</strong>: Information that specifies whether the form or the dashboard is the system default.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Desktop Enabled</para>
		/// <para><strong>Description</strong>: Information that specifies whether the dashboard is enabled for desktop.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDesktopEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDesktopEnabled); }
			set { Entity.Attributes[Fields.IsDesktopEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Tablet Enabled</para>
		/// <para><strong>Description</strong>: Information that specifies whether the dashboard is enabled for tablet.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTabletEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTabletEnabled); }
			set { Entity.Attributes[Fields.IsTabletEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the form.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Name</para>
		/// <para><strong>Description</strong>: Code that represents the record type.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the organization.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published On</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PublishedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PublishedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Type</para>
		/// <para><strong>Description</strong>: Type of the form, for example, Dashboard or Preview.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemFormOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemFormOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemFormOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Name</para>
		/// <para><strong>Description</strong>: Unique Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Version
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Version); }
			set { Entity.Attributes[Fields.Version] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Represents a version of customizations to be synchronized with the Microsoft Dynamics 365 client for Outlook.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}