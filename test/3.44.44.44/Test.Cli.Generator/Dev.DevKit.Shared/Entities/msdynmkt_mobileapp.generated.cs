//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets
{
	public enum msdynmkt_validationfcm
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Checking ...</para>
		/// <para><strong>Value</strong>: 295,660,001</para>
		/// </summary>
		Checking = 295_660_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 295,660,003</para>
		/// </summary>
		Invalid = 295_660_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 295,660,000</para>
		/// </summary>
		Not_started = 295_660_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 295,660,002</para>
		/// </summary>
		Valid = 295_660_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid connected</para>
		/// <para><strong>Value</strong>: 295,660,004</para>
		/// </summary>
		Valid_connected = 295_660_004
	}
	public enum msdynmkt_validationios
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Checking ...</para>
		/// <para><strong>Value</strong>: 295,660,001</para>
		/// </summary>
		Checking = 295_660_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 295,660,003</para>
		/// </summary>
		Invalid = 295_660_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 295,660,000</para>
		/// </summary>
		Not_started = 295_660_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 295,660,002</para>
		/// </summary>
		Valid = 295_660_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid connected</para>
		/// <para><strong>Value</strong>: 295,660,004</para>
		/// </summary>
		Valid_connected = 295_660_004
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_mobileapp : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_activefcm = "msdynmkt_activefcm";
			public const string msdynmkt_activeios = "msdynmkt_activeios";
			public const string msdynmkt_apikey = "msdynmkt_apikey";
			public const string msdynmkt_apitoken = "msdynmkt_apitoken";
			public const string msdynmkt_applicationmode = "msdynmkt_applicationmode";
			public const string msdynmkt_authenticationmode = "msdynmkt_authenticationmode";
			public const string msdynmkt_bundleId = "msdynmkt_bundleid";
			public const string msdynmkt_certificate1 = "msdynmkt_certificate1";
			public const string msdynmkt_certificate2 = "msdynmkt_certificate2";
			public const string msdynmkt_certificate3 = "msdynmkt_certificate3";
			public const string msdynmkt_certificate4 = "msdynmkt_certificate4";
			public const string msdynmkt_certificate5 = "msdynmkt_certificate5";
			public const string msdynmkt_certificateName = "msdynmkt_certificatename";
			public const string msdynmkt_description = "msdynmkt_description";
			public const string msdynmkt_keyid = "msdynmkt_keyid";
			public const string msdynmkt_mobileappId = "msdynmkt_mobileappid";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_password = "msdynmkt_password";
			public const string msdynmkt_signingkey = "msdynmkt_signingkey";
			public const string msdynmkt_teamId = "msdynmkt_teamid";
			public const string msdynmkt_uionly_value_endpoint = "msdynmkt_uionly_value_endpoint";
			public const string msdynmkt_uionly_value_organizationid = "msdynmkt_uionly_value_organizationid";
			public const string msdynmkt_validationfcm = "msdynmkt_validationfcm";
			public const string msdynmkt_validationios = "msdynmkt_validationios";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_mobileapp";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11333;
		public const string EntityCollectionSchemaName = "msdynmkt_mobileapps";
		public const string EntityDisplayCollectionName = "Mobile app configurations";
		public const string DisplayName = "Mobile app configuration";
		public const string EntitySetName = "msdynmkt_mobileapps";
		public const string EntityLogicalCollectionName = "msdynmkt_mobileapps";
		public const string EntityPrimaryIdAttribute = "msdynmkt_mobileappid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_mobileapp";
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp(Guid msdynmkt_mobileappId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_mobileappId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileapp"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileapp"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_mobileapp(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileapp"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_mobileapp(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapp(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active FCM</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>On</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_activefcm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_activefcm); }
			set { Entity.Attributes[Fields.msdynmkt_activefcm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active iOS</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>On</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_activeios
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_activeios); }
			set { Entity.Attributes[Fields.msdynmkt_activeios] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API Key</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_apikey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_apikey); }
			set { Entity.Attributes[Fields.msdynmkt_apikey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API token</para>
		/// <para><strong>Description</strong>: Unique identifier for API token associated with mobile application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_apitoken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_apitoken); }
			set { Entity.Attributes[Fields.msdynmkt_apitoken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application mode</para>
		/// <para><strong>Two Option</strong> - [<strong>Sandbox</strong>]: true - [<strong>Production</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Production</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_applicationmode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_applicationmode); }
			set { Entity.Attributes[Fields.msdynmkt_applicationmode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication mode</para>
		/// <para><strong>Two Option</strong> - [<strong>Token</strong>]: true - [<strong>Certificate</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Certificate</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_authenticationmode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_authenticationmode); }
			set { Entity.Attributes[Fields.msdynmkt_authenticationmode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bundle Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_bundleId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_bundleId); }
			set { Entity.Attributes[Fields.msdynmkt_bundleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 1</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate1); }
			set { Entity.Attributes[Fields.msdynmkt_certificate1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 2</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate2); }
			set { Entity.Attributes[Fields.msdynmkt_certificate2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 3</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate3); }
			set { Entity.Attributes[Fields.msdynmkt_certificate3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 4</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate4
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate4); }
			set { Entity.Attributes[Fields.msdynmkt_certificate4] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 5</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate5
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate5); }
			set { Entity.Attributes[Fields.msdynmkt_certificate5] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificateName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificateName); }
			set { Entity.Attributes[Fields.msdynmkt_certificateName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: The description of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_description); }
			set { Entity.Attributes[Fields.msdynmkt_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Key Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_keyid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_keyid); }
			set { Entity.Attributes[Fields.msdynmkt_keyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Application Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_mobileappId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_mobileappId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate Password</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_password
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_password); }
			set { Entity.Attributes[Fields.msdynmkt_password] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Signing Key</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_signingkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_signingkey); }
			set { Entity.Attributes[Fields.msdynmkt_signingkey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Team Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_teamId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_teamId); }
			set { Entity.Attributes[Fields.msdynmkt_teamId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Public endpoint</para>
		/// <para><strong>Description</strong>: The public endpoint - ui only value</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_uionly_value_endpoint
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_uionly_value_endpoint); }
			set { Entity.Attributes[Fields.msdynmkt_uionly_value_endpoint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: The organization id - ui only value.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_uionly_value_organizationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_uionly_value_organizationid); }
			set { Entity.Attributes[Fields.msdynmkt_uionly_value_organizationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android validation status</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationfcm"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationfcm.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationfcm? msdynmkt_validationfcm
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_validationfcm);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationfcm)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_validationfcm] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_validationfcm] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: iOS validation status</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationios"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationios.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationios? msdynmkt_validationios
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_validationios);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.msdynmkt_validationios)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_validationios] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_validationios] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Overriden created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the mobile device</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the mobile device</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}