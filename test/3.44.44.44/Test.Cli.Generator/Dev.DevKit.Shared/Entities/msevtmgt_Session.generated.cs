//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:41
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets
{
	public enum msevtmgt_allowmeetingchat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Disabled = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Enabled = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: In-meeting only</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_meeting_only = 100_000_002
	}
	public enum msevtmgt_AudienceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Advanced = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: General</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		General = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Intermediate</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Intermediate = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Introductory</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Introductory = 100_000_001
	}
	public enum msevtmgt_autoadmittedusers
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Everyone</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Everyone = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Only me</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Only_me = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: People I invite</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		People_I_invite = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: People in my organization and guests</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		People_in_my_organization_and_guests = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: People in my organization, trusted organizations and guests</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		People_in_my_organization_trusted_organizations_and_guests = 100_000_002
	}
	public enum msevtmgt_AVSupport
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_ByInvitationOnly
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_CamerasPermitted
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_creationsource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamics</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Dynamics = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Microsoft_Teams = 100_000_002
	}
	public enum msevtmgt_descriptorsyncstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Going_live = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live failed</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Going_live_failed = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Modifying capacity</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Modifying_capacity = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Modifying capacity failed</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Modifying_capacity_failed = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Synced</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Not_Synced = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Synced</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Synced = 100_000_000
	}
	public enum msevtmgt_FlipChart
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_Industry
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Architecture and engineering</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Architecture_and_engineering = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Financial services</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Financial_services = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manufacturing</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Manufacturing = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Media, entertainment</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Media_entertainment = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		Other = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Professional services</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Professional_services = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public sector</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Public_sector = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retail</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Retail = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wholesale and distribution</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		Wholesale_and_distribution = 100_000_007
	}
	public enum msevtmgt_InternetConnection
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Simplified)</para>
		/// <para><strong>Value</strong>: 100,000,009</para>
		/// </summary>
		Chinese_Simplified = 100_000_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Traditional)</para>
		/// <para><strong>Value</strong>: 100,000,013</para>
		/// </summary>
		Chinese_Traditional = 100_000_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Dutch = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		English = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: French</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		French = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: German</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		German = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 100,000,012</para>
		/// </summary>
		Hebrew = 100_000_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Italian = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese</para>
		/// <para><strong>Value</strong>: 100,000,010</para>
		/// </summary>
		Japanese = 100_000_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean</para>
		/// <para><strong>Value</strong>: 100,000,011</para>
		/// </summary>
		Korean = 100_000_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		Portuguese = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Russian = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Spanish = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		Turkish = 100_000_007
	}
	public enum msevtmgt_NDA
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_PublishStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelled</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Cancelled = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Draft = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Going_live = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Live = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready to go live</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Ready_to_go_live = 100_000_001
	}
	public enum msevtmgt_RecordingsPermitted
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_sessionformat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hybrid</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Hybrid = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: On site</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		On_site = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Webinar = 100_000_002
	}
	public enum msevtmgt_SessionType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Brainstorming</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Brainstorming = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Breakout</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Breakout = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: General</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		General = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hands-on/lab</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Hands_onlab = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keynote</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Keynote = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Training</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Training = 100_000_005
	}
	public enum msevtmgt_streamingprovider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Other = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Live Events</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Teams_Live_Events = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Meetings</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Teams_Meetings = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Town Hall</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Teams_Town_Hall = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Virtual Events</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Teams_Virtual_Events = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Webinars</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Teams_Webinars = 100_000_004
	}
	public enum msevtmgt_VideoConferencing
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_WaitlistthisSession
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Yes = 100_000_002
	}
	public enum msevtmgt_WhiteBoard
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_Session : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msevtmgt_allowattendeestounmute = "msevtmgt_allowattendeestounmute";
			public const string msevtmgt_allowcameraforattendees = "msevtmgt_allowcameraforattendees";
			public const string msevtmgt_allowexternalpresenters = "msevtmgt_allowexternalpresenters";
			public const string msevtmgt_allowmeetingchat = "msevtmgt_allowmeetingchat";
			public const string msevtmgt_allowpstnsserstobypasslobby = "msevtmgt_allowpstnsserstobypasslobby";
			public const string msevtmgt_allowteamsmeetingreactions = "msevtmgt_allowteamsmeetingreactions";
			public const string msevtmgt_attendeeengagementreport = "msevtmgt_attendeeengagementreport";
			public const string msevtmgt_attendeeurl = "msevtmgt_attendeeurl";
			public const string msevtmgt_AudienceType = "msevtmgt_audiencetype";
			public const string msevtmgt_autoadmittedusers = "msevtmgt_autoadmittedusers";
			public const string msevtmgt_autorecordingenabled = "msevtmgt_autorecordingenabled";
			public const string msevtmgt_AVSupport = "msevtmgt_avsupport";
			public const string msevtmgt_baserecurrentsessionid = "msevtmgt_baserecurrentsessionid";
			public const string msevtmgt_building = "msevtmgt_building";
			public const string msevtmgt_ByInvitationOnly = "msevtmgt_byinvitationonly";
			public const string msevtmgt_calendarcontent = "msevtmgt_calendarcontent";
			public const string msevtmgt_calendarcontent_plaintext = "msevtmgt_calendarcontent_plaintext";
			public const string msevtmgt_CamerasPermitted = "msevtmgt_cameraspermitted";
			public const string msevtmgt_changemeetingoptions = "msevtmgt_changemeetingoptions";
			public const string msevtmgt_CheckInCount = "msevtmgt_checkincount";
			public const string msevtmgt_creationsource = "msevtmgt_creationsource";
			public const string msevtmgt_descriptorsyncstatus = "msevtmgt_descriptorsyncstatus";
			public const string msevtmgt_DetailedDescription = "msevtmgt_detaileddescription";
			public const string msevtmgt_DurationMins = "msevtmgt_durationmins";
			public const string msevtmgt_EndTime = "msevtmgt_endtime";
			public const string msevtmgt_entryexitannouncementsenabled = "msevtmgt_entryexitannouncementsenabled";
			public const string msevtmgt_Event = "msevtmgt_event";
			public const string msevtmgt_EventSpeakerId = "msevtmgt_eventspeakerid";
			public const string msevtmgt_ExternalUrl = "msevtmgt_externalurl";
			public const string msevtmgt_FlipChart = "msevtmgt_flipchart";
			public const string msevtmgt_Industry = "msevtmgt_industry";
			public const string msevtmgt_InternetConnection = "msevtmgt_internetconnection";
			public const string msevtmgt_isoutofsync = "msevtmgt_isoutofsync";
			public const string msevtmgt_Keywords = "msevtmgt_keywords";
			public const string msevtmgt_Language = "msevtmgt_language";
			public const string msevtmgt_lastteamssyncdate = "msevtmgt_lastteamssyncdate";
			public const string msevtmgt_layout = "msevtmgt_layout";
			public const string msevtmgt_Name = "msevtmgt_name";
			public const string msevtmgt_NDA = "msevtmgt_nda";
			public const string msevtmgt_PassSessions = "msevtmgt_passsessions";
			public const string msevtmgt_PresentationManagerUrl = "msevtmgt_presentationmanagerurl";
			public const string msevtmgt_previousnumberoffreeslots = "msevtmgt_previousnumberoffreeslots";
			public const string msevtmgt_Producer = "msevtmgt_producer";
			public const string msevtmgt_PublishStatus = "msevtmgt_publishstatus";
			public const string msevtmgt_qna = "msevtmgt_qna";
			public const string msevtmgt_recordingforattendees = "msevtmgt_recordingforattendees";
			public const string msevtmgt_recordingforproducersandspeakers = "msevtmgt_recordingforproducersandspeakers";
			public const string msevtmgt_RecordingsPermitted = "msevtmgt_recordingspermitted";
			public const string msevtmgt_recurrencepattern = "msevtmgt_recurrencepattern";
			public const string msevtmgt_RegistrationCount = "msevtmgt_registrationcount";
			public const string msevtmgt_registrationcounterlock = "msevtmgt_registrationcounterlock";
			public const string msevtmgt_room = "msevtmgt_room";
			public const string msevtmgt_SessionCode = "msevtmgt_sessioncode";
			public const string msevtmgt_sessionformat = "msevtmgt_sessionformat";
			public const string msevtmgt_SessionId = "msevtmgt_sessionid";
			public const string msevtmgt_SessionMaxCapacity = "msevtmgt_sessionmaxcapacity";
			public const string msevtmgt_SessionObjectives = "msevtmgt_sessionobjectives";
			public const string msevtmgt_SessionPreRequisites = "msevtmgt_sessionprerequisites";
			public const string msevtmgt_SessionSummary = "msevtmgt_sessionsummary";
			public const string msevtmgt_SessionType = "msevtmgt_sessiontype";
			public const string msevtmgt_showwaitlist = "msevtmgt_showwaitlist";
			public const string msevtmgt_StartTime = "msevtmgt_starttime";
			public const string msevtmgt_streamingenabled = "msevtmgt_streamingenabled";
			public const string msevtmgt_streamingprovider = "msevtmgt_streamingprovider";
			public const string msevtmgt_streamowner = "msevtmgt_streamowner";
			public const string msevtmgt_teamsinvitationhtml = "msevtmgt_teamsinvitationhtml";
			public const string msevtmgt_TotalNumberOfQuestionsAsked = "msevtmgt_totalnumberofquestionsasked";
			public const string msevtmgt_TotalNumberOfQuestionsAsked_Date = "msevtmgt_totalnumberofquestionsasked_date";
			public const string msevtmgt_TotalNumberOfQuestionsAsked_State = "msevtmgt_totalnumberofquestionsasked_state";
			public const string msevtmgt_Venue = "msevtmgt_venue";
			public const string msevtmgt_VideoConferencing = "msevtmgt_videoconferencing";
			public const string msevtmgt_WaitlistthisSession = "msevtmgt_waitlistthissession";
			public const string msevtmgt_WebinarConfigurationId = "msevtmgt_webinarconfigurationid";
			public const string msevtmgt_WebinarID = "msevtmgt_webinarid";
			public const string msevtmgt_webinarnotificationseen = "msevtmgt_webinarnotificationseen";
			public const string msevtmgt_webinaroperation = "msevtmgt_webinaroperation";
			public const string msevtmgt_webinarstatus = "msevtmgt_webinarstatus";
			public const string msevtmgt_webinarstatusreason = "msevtmgt_webinarstatusreason";
			public const string msevtmgt_WebinarType = "msevtmgt_webinartype";
			public const string msevtmgt_webinarurl = "msevtmgt_webinarurl";
			public const string msevtmgt_WhiteBoard = "msevtmgt_whiteboard";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_session";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11114;
		public const string EntityCollectionSchemaName = "msevtmgt_Sessions";
		public const string EntityDisplayCollectionName = "Sessions";
		public const string DisplayName = "Session";
		public const string EntitySetName = "msevtmgt_sessions";
		public const string EntityLogicalCollectionName = "msevtmgt_sessions";
		public const string EntityPrimaryIdAttribute = "msevtmgt_sessionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_Session";
		[DebuggerNonUserCode()]
		public msevtmgt_Session()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Session(Guid msevtmgt_SessionId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_SessionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Session(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Session"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_Session(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Session"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_Session(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_Session(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Session"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_Session(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_Session(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Session(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow attendees to unmute</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowattendeestounmute
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowattendeestounmute); }
			set { Entity.Attributes[Fields.msevtmgt_allowattendeestounmute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow camera for attendees</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowcameraforattendees
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowcameraforattendees); }
			set { Entity.Attributes[Fields.msevtmgt_allowcameraforattendees] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do you want to allow external presenters</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowexternalpresenters
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowexternalpresenters); }
			set { Entity.Attributes[Fields.msevtmgt_allowexternalpresenters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow meeting chat</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_allowmeetingchat"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_allowmeetingchat.Enabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_allowmeetingchat? msevtmgt_allowmeetingchat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_allowmeetingchat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_allowmeetingchat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_allowmeetingchat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_allowmeetingchat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Always let callers bypass the lobby</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowpstnsserstobypasslobby
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowpstnsserstobypasslobby); }
			set { Entity.Attributes[Fields.msevtmgt_allowpstnsserstobypasslobby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow reactions</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowteamsmeetingreactions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowteamsmeetingreactions); }
			set { Entity.Attributes[Fields.msevtmgt_allowteamsmeetingreactions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attendee engagement report</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_attendeeengagementreport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_attendeeengagementreport); }
			set { Entity.Attributes[Fields.msevtmgt_attendeeengagementreport] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_attendeeurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_attendeeurl); }
			set { Entity.Attributes[Fields.msevtmgt_attendeeurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Audience type</para>
		/// <para><strong>Description</strong>: The intended audience for the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_AudienceType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_AudienceType? msevtmgt_AudienceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_AudienceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_AudienceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_AudienceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_AudienceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Who can bypass the lobby?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_autoadmittedusers"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_autoadmittedusers.People_in_my_organization_and_guests"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_autoadmittedusers? msevtmgt_autoadmittedusers
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_autoadmittedusers);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_autoadmittedusers)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_autoadmittedusers] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_autoadmittedusers] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record automatically</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_autorecordingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_autorecordingenabled); }
			set { Entity.Attributes[Fields.msevtmgt_autorecordingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/V support</para>
		/// <para><strong>Description</strong>: Audio/video support</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_AVSupport"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_AVSupport? msevtmgt_AVSupport
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_AVSupport);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_AVSupport)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_AVSupport] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_AVSupport] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Recurrent SessionId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_baserecurrentsessionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_baserecurrentsessionid); }
			set { Entity.Attributes[Fields.msevtmgt_baserecurrentsessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Building</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_building"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_building
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_building); }
			set { Entity.Attributes[Fields.msevtmgt_building] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: By invitation only</para>
		/// <para><strong>Description</strong>: Access is by invitation only</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_ByInvitationOnly"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_ByInvitationOnly.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_ByInvitationOnly? msevtmgt_ByInvitationOnly
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_ByInvitationOnly);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_ByInvitationOnly)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_ByInvitationOnly] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_ByInvitationOnly] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HTML calendar content</para>
		/// <para><strong>Description</strong>: Rich text calendar content for session.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_calendarcontent
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_calendarcontent); }
			set { Entity.Attributes[Fields.msevtmgt_calendarcontent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text calendar content</para>
		/// <para><strong>Description</strong>: Plain text calendar content for sessions.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_calendarcontent_plaintext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_calendarcontent_plaintext); }
			set { Entity.Attributes[Fields.msevtmgt_calendarcontent_plaintext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cameras permitted</para>
		/// <para><strong>Description</strong>: Are cameras permitted?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_CamerasPermitted"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_CamerasPermitted.Yes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_CamerasPermitted? msevtmgt_CamerasPermitted
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_CamerasPermitted);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_CamerasPermitted)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_CamerasPermitted] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_CamerasPermitted] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Change meeting options</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_changemeetingoptions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_changemeetingoptions); }
			set { Entity.Attributes[Fields.msevtmgt_changemeetingoptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check-in count</para>
		/// <para><strong>Description</strong>: Check-in count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_CheckInCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_CheckInCount); }
			set { Entity.Attributes[Fields.msevtmgt_CheckInCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Creation source</para>
		/// <para><strong>Description</strong>: Creation source</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_creationsource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_creationsource? msevtmgt_creationsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_creationsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_creationsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_creationsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_creationsource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Descriptor sync status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_descriptorsyncstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_descriptorsyncstatus.Synced"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_descriptorsyncstatus? msevtmgt_descriptorsyncstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_descriptorsyncstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_descriptorsyncstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_descriptorsyncstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_descriptorsyncstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Detailed description</para>
		/// <para><strong>Description</strong>: Detailed description of the session</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_DetailedDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_DetailedDescription); }
			set { Entity.Attributes[Fields.msevtmgt_DetailedDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration (minutes)</para>
		/// <para><strong>Description</strong>: Session duration in minutes</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_DurationMins
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_DurationMins); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End time</para>
		/// <para><strong>Description</strong>: End time of the session</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_EndTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_EndTime); }
			set { Entity.Attributes[Fields.msevtmgt_EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Announce when callers join or leave</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_entryexitannouncementsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_entryexitannouncementsenabled); }
			set { Entity.Attributes[Fields.msevtmgt_entryexitannouncementsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Description</strong>: Unique identifier for the event associated with the event session</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msevtmgt_event"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_Event
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_Event); }
			set { Entity.Attributes[Fields.msevtmgt_Event] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event speaker</para>
		/// <para><strong>Description</strong>: Unique identifier for the speaker associated with the session</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_speaker"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_EventSpeakerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_EventSpeakerId); }
			set { Entity.Attributes[Fields.msevtmgt_EventSpeakerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session URL</para>
		/// <para><strong>Description</strong>: External URL for the session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_ExternalUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_ExternalUrl); }
			set { Entity.Attributes[Fields.msevtmgt_ExternalUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flip-chart</para>
		/// <para><strong>Description</strong>: A flip-chart is available for the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_FlipChart"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_FlipChart? msevtmgt_FlipChart
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_FlipChart);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_FlipChart)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_FlipChart] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_FlipChart] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Industry</para>
		/// <para><strong>Description</strong>: Industry of the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_Industry"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_Industry? msevtmgt_Industry
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_Industry);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_Industry)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_Industry] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_Industry] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internet connection</para>
		/// <para><strong>Description</strong>: Are internet connections available?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_InternetConnection"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_InternetConnection? msevtmgt_InternetConnection
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_InternetConnection);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_InternetConnection)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_InternetConnection] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_InternetConnection] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session is out of sync</para>
		/// <para><strong>Description</strong>: Field specifying if a streamed session is out of synchronization with its provider.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_isoutofsync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_isoutofsync); }
			set { Entity.Attributes[Fields.msevtmgt_isoutofsync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords</para>
		/// <para><strong>Description</strong>: A comma-delimited list of keywords for this session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Keywords); }
			set { Entity.Attributes[Fields.msevtmgt_Keywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: The language of the webinar</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_Language"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_Language? msevtmgt_Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last sync with Teams date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_lastteamssyncdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_lastteamssyncdate); }
			set { Entity.Attributes[Fields.msevtmgt_lastteamssyncdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Layout</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_layout"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_layout
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_layout); }
			set { Entity.Attributes[Fields.msevtmgt_layout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session title</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Name); }
			set { Entity.Attributes[Fields.msevtmgt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NDA</para>
		/// <para><strong>Description</strong>: Non disclosure agreement</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_NDA"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_NDA? msevtmgt_NDA
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_NDA);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_NDA)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_NDA] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_NDA] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product pass sessions</para>
		/// <para><strong>Description</strong>: Unique identifier for the product associated with the session</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_pass"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_PassSessions
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_PassSessions); }
			set { Entity.Attributes[Fields.msevtmgt_PassSessions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Presentation manager URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_PresentationManagerUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_PresentationManagerUrl); }
			set { Entity.Attributes[Fields.msevtmgt_PresentationManagerUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous number of free slots</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_previousnumberoffreeslots
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_previousnumberoffreeslots); }
			set { Entity.Attributes[Fields.msevtmgt_previousnumberoffreeslots] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Producer</para>
		/// <para><strong>Description</strong>: Producer of the session</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_eventteammember"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_Producer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_Producer); }
			set { Entity.Attributes[Fields.msevtmgt_Producer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publish status</para>
		/// <para><strong>Description</strong>: Publish status of the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_PublishStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_PublishStatus.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_PublishStatus? msevtmgt_PublishStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PublishStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_PublishStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PublishStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PublishStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do you want to enable Q/A for this event</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_qna
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_qna); }
			set { Entity.Attributes[Fields.msevtmgt_qna] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording available to attendees</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_recordingforattendees
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_recordingforattendees); }
			set { Entity.Attributes[Fields.msevtmgt_recordingforattendees] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording available to producers and speakers</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_recordingforproducersandspeakers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_recordingforproducersandspeakers); }
			set { Entity.Attributes[Fields.msevtmgt_recordingforproducersandspeakers] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recordings permitted</para>
		/// <para><strong>Description</strong>: Are recordings permitted?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_RecordingsPermitted"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_RecordingsPermitted? msevtmgt_RecordingsPermitted
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_RecordingsPermitted);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_RecordingsPermitted)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_RecordingsPermitted] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_RecordingsPermitted] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence pattern</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_recurrencepattern
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_recurrencepattern); }
			set { Entity.Attributes[Fields.msevtmgt_recurrencepattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration count</para>
		/// <para><strong>Description</strong>: Number of registrations for this session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_RegistrationCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_RegistrationCount); }
			set { Entity.Attributes[Fields.msevtmgt_RegistrationCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session registration counter lock</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_registrationcounterlock
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_registrationcounterlock); }
			set { Entity.Attributes[Fields.msevtmgt_registrationcounterlock] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Room</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_room"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_room
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_room); }
			set { Entity.Attributes[Fields.msevtmgt_room] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session code</para>
		/// <para><strong>Description</strong>: A code for the session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_SessionCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_SessionCode); }
			set { Entity.Attributes[Fields.msevtmgt_SessionCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session Format</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_sessionformat"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_sessionformat.On_site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_sessionformat? msevtmgt_sessionformat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_sessionformat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_sessionformat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_sessionformat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_sessionformat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_SessionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_SessionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session max. capacity</para>
		/// <para><strong>Description</strong>: Maximum capacity of the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_SessionMaxCapacity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_SessionMaxCapacity); }
			set { Entity.Attributes[Fields.msevtmgt_SessionMaxCapacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session Objectives</para>
		/// <para><strong>Description</strong>: Objectives of the session</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_SessionObjectives
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_SessionObjectives); }
			set { Entity.Attributes[Fields.msevtmgt_SessionObjectives] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session Prerequisites</para>
		/// <para><strong>Description</strong>: Prerequisites for the session</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_SessionPreRequisites
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_SessionPreRequisites); }
			set { Entity.Attributes[Fields.msevtmgt_SessionPreRequisites] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session summary</para>
		/// <para><strong>Description</strong>: Summary of the session</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 700</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_SessionSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_SessionSummary); }
			set { Entity.Attributes[Fields.msevtmgt_SessionSummary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session type</para>
		/// <para><strong>Description</strong>: Type of the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_SessionType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_SessionType? msevtmgt_SessionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SessionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_SessionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SessionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SessionType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show waitlist</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_showwaitlist
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_showwaitlist); }
			set { Entity.Attributes[Fields.msevtmgt_showwaitlist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start time</para>
		/// <para><strong>Description</strong>: The time the session will begin</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_StartTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_StartTime); }
			set { Entity.Attributes[Fields.msevtmgt_StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Streamed session</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_streamingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_streamingenabled); }
			set { Entity.Attributes[Fields.msevtmgt_streamingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Streaming provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_streamingprovider"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_streamingprovider? msevtmgt_streamingprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_streamingprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_streamingprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_streamingprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_streamingprovider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Streamed session owner</para>
		/// <para><strong>Description</strong>: User that owns the streamed session.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_streamowner
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_streamowner); }
			set { Entity.Attributes[Fields.msevtmgt_streamowner] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation HTML</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_teamsinvitationhtml
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_teamsinvitationhtml); }
			set { Entity.Attributes[Fields.msevtmgt_teamsinvitationhtml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total number of questions asked</para>
		/// <para><strong>Description</strong>: Total numbers of questions asked at the session</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_TotalNumberOfQuestionsAsked
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_TotalNumberOfQuestionsAsked); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total number of questions asked (Last Updated On)</para>
		/// <para><strong>Description</strong>: Last Updated time of rollup field Total number of questions asked.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_TotalNumberOfQuestionsAsked_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_TotalNumberOfQuestionsAsked_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total number of questions asked (State)</para>
		/// <para><strong>Description</strong>: State of rollup field Total number of questions asked.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_TotalNumberOfQuestionsAsked_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_TotalNumberOfQuestionsAsked_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Venue</para>
		/// <para><strong>Description</strong>: Active venue records for this session</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_venue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_Venue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_Venue); }
			set { Entity.Attributes[Fields.msevtmgt_Venue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Video conferencing</para>
		/// <para><strong>Description</strong>: Video conferencing is available for the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_VideoConferencing"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_VideoConferencing? msevtmgt_VideoConferencing
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_VideoConferencing);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_VideoConferencing)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_VideoConferencing] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_VideoConferencing] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Waitlist this session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_WaitlistthisSession"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_WaitlistthisSession? msevtmgt_WaitlistthisSession
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_WaitlistthisSession);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_WaitlistthisSession)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_WaitlistthisSession] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_WaitlistthisSession] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar configuration</para>
		/// <para><strong>Description</strong>: Webinar configuration</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_webinarconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_WebinarConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_WebinarConfigurationId); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarConfigurationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar ID</para>
		/// <para><strong>Description</strong>: Webinar ID of the session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_WebinarID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_WebinarID); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar notification seen</para>
		/// <para><strong>Description</strong>: Indicates whether the webinar notification has been seen</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_webinarnotificationseen
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_webinarnotificationseen); }
			set { Entity.Attributes[Fields.msevtmgt_webinarnotificationseen] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar operation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinaroperation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinaroperation); }
			set { Entity.Attributes[Fields.msevtmgt_webinaroperation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar status</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinarstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinarstatus); }
			set { Entity.Attributes[Fields.msevtmgt_webinarstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar status reason</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinarstatusreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinarstatusreason); }
			set { Entity.Attributes[Fields.msevtmgt_webinarstatusreason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar type</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_webinartype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_WebinarType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_WebinarType); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinarurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinarurl); }
			set { Entity.Attributes[Fields.msevtmgt_webinarurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Whiteboard</para>
		/// <para><strong>Description</strong>: A white board is available for the session</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_WhiteBoard"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_WhiteBoard? msevtmgt_WhiteBoard
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_WhiteBoard);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.msevtmgt_WhiteBoard)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_WhiteBoard] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_WhiteBoard] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the session</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Reason for the status of the session</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}