//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets
{
	public enum msdyncrm_dividerstyle
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dashed</para>
		/// <para><strong>Value</strong>: 164,230,003</para>
		/// </summary>
		Dashed = 164_230_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dotted</para>
		/// <para><strong>Value</strong>: 164,230,002</para>
		/// </summary>
		Dotted = 164_230_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Double</para>
		/// <para><strong>Value</strong>: 164,230,004</para>
		/// </summary>
		Double = 164_230_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 164,230,000</para>
		/// </summary>
		None = 164_230_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Solid</para>
		/// <para><strong>Value</strong>: 164,230,001</para>
		/// </summary>
		Solid = 164_230_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_generalstyles : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_bordercolor = "msdyncrm_bordercolor";
			public const string msdyncrm_bordersize = "msdyncrm_bordersize";
			public const string msdyncrm_borderstyle = "msdyncrm_borderstyle";
			public const string msdyncrm_buttoncolor = "msdyncrm_buttoncolor";
			public const string msdyncrm_dividercolor = "msdyncrm_dividercolor";
			public const string msdyncrm_dividerlinestyle = "msdyncrm_dividerlinestyle";
			public const string msdyncrm_dividersize = "msdyncrm_dividersize";
			public const string msdyncrm_dividerstyle = "msdyncrm_dividerstyle";
			public const string msdyncrm_emailcolorpalette = "msdyncrm_emailcolorpalette";
			public const string msdyncrm_emailwidth = "msdyncrm_emailwidth";
			public const string msdyncrm_font = "msdyncrm_font";
			public const string msdyncrm_fontsize = "msdyncrm_fontsize";
			public const string msdyncrm_generalstylesId = "msdyncrm_generalstylesid";
			public const string msdyncrm_heading1color = "msdyncrm_heading1color";
			public const string msdyncrm_heading1font = "msdyncrm_heading1font";
			public const string msdyncrm_heading1size = "msdyncrm_heading1size";
			public const string msdyncrm_heading2color = "msdyncrm_heading2color";
			public const string msdyncrm_heading2font = "msdyncrm_heading2font";
			public const string msdyncrm_heading2size = "msdyncrm_heading2size";
			public const string msdyncrm_heading3color = "msdyncrm_heading3color";
			public const string msdyncrm_heading3font = "msdyncrm_heading3font";
			public const string msdyncrm_heading3size = "msdyncrm_heading3size";
			public const string msdyncrm_innerbackgroundcolor = "msdyncrm_innerbackgroundcolor";
			public const string msdyncrm_lineheight = "msdyncrm_lineheight";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_outerbackgroundcolor = "msdyncrm_outerbackgroundcolor";
			public const string msdyncrm_paragraphcolor = "msdyncrm_paragraphcolor";
			public const string msdyncrm_paragraphfont = "msdyncrm_paragraphfont";
			public const string msdyncrm_paragraphsize = "msdyncrm_paragraphsize";
			public const string msdyncrm_plaintextfullwidth = "msdyncrm_plaintextfullwidth";
			public const string msdyncrm_roundedcorners = "msdyncrm_roundedcorners";
			public const string msdyncrm_textdecoration = "msdyncrm_textdecoration";
			public const string msdyncrm_textfontweight = "msdyncrm_textfontweight";
			public const string msdyncrm_textitalicstyle = "msdyncrm_textitalicstyle";
			public const string msdyncrm_textlinkfontweight = "msdyncrm_textlinkfontweight";
			public const string msdyncrm_textlinkitalicstyle = "msdyncrm_textlinkitalicstyle";
			public const string msdyncrm_textlinkstylecolor = "msdyncrm_textlinkstylecolor";
			public const string msdyncrm_textlinkstylefont = "msdyncrm_textlinkstylefont";
			public const string msdyncrm_textlinktextdecoration = "msdyncrm_textlinktextdecoration";
			public const string msdyncrm_textstylecolor = "msdyncrm_textstylecolor";
			public const string msdyncrm_textstylefont = "msdyncrm_textstylefont";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_generalstyles";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10622;
		public const string EntityCollectionSchemaName = "msdyncrm_generalstyleses";
		public const string EntityDisplayCollectionName = "General styles";
		public const string DisplayName = "General styles";
		public const string EntitySetName = "msdyncrm_generalstyleses";
		public const string EntityLogicalCollectionName = "msdyncrm_generalstyleses";
		public const string EntityPrimaryIdAttribute = "msdyncrm_generalstylesid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_generalstyles";
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles(Guid msdyncrm_generalstylesId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_generalstylesId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_generalstyles"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_generalstyles"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_generalstyles(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_generalstyles"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_generalstyles(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_generalstyles(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_bordercolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_bordercolor); }
			set { Entity.Attributes[Fields.msdyncrm_bordercolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_bordersize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_bordersize); }
			set { Entity.Attributes[Fields.msdyncrm_bordersize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Border style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_borderstyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_borderstyle); }
			set { Entity.Attributes[Fields.msdyncrm_borderstyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Button color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_buttoncolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_buttoncolor); }
			set { Entity.Attributes[Fields.msdyncrm_buttoncolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Divider color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_dividercolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_dividercolor); }
			set { Entity.Attributes[Fields.msdyncrm_dividercolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Divider line style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_dividerlinestyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_dividerlinestyle); }
			set { Entity.Attributes[Fields.msdyncrm_dividerlinestyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Divider size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_dividersize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_dividersize); }
			set { Entity.Attributes[Fields.msdyncrm_dividersize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Divider style</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.msdyncrm_dividerstyle"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.msdyncrm_dividerstyle.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.msdyncrm_dividerstyle? msdyncrm_dividerstyle
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_dividerstyle);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.msdyncrm_dividerstyle)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_dividerstyle] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_dividerstyle] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email color palette</para>
		/// <para><strong>Description</strong>: The colors present in the email body</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailcolorpalette
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailcolorpalette); }
			set { Entity.Attributes[Fields.msdyncrm_emailcolorpalette] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email width</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailwidth
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailwidth); }
			set { Entity.Attributes[Fields.msdyncrm_emailwidth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_font
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_font); }
			set { Entity.Attributes[Fields.msdyncrm_font] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Font size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_fontsize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_fontsize); }
			set { Entity.Attributes[Fields.msdyncrm_fontsize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: General styles</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_generalstylesId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_generalstylesId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 1 color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading1color
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading1color); }
			set { Entity.Attributes[Fields.msdyncrm_heading1color] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 1 font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading1font
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading1font); }
			set { Entity.Attributes[Fields.msdyncrm_heading1font] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 1 size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading1size
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading1size); }
			set { Entity.Attributes[Fields.msdyncrm_heading1size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 2 color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading2color
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading2color); }
			set { Entity.Attributes[Fields.msdyncrm_heading2color] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 2 font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading2font
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading2font); }
			set { Entity.Attributes[Fields.msdyncrm_heading2font] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 2 size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading2size
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading2size); }
			set { Entity.Attributes[Fields.msdyncrm_heading2size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 3 color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading3color
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading3color); }
			set { Entity.Attributes[Fields.msdyncrm_heading3color] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 3 font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading3font
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading3font); }
			set { Entity.Attributes[Fields.msdyncrm_heading3font] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Heading 3 size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_heading3size
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_heading3size); }
			set { Entity.Attributes[Fields.msdyncrm_heading3size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inner background color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_innerbackgroundcolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_innerbackgroundcolor); }
			set { Entity.Attributes[Fields.msdyncrm_innerbackgroundcolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Line height</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_lineheight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_lineheight); }
			set { Entity.Attributes[Fields.msdyncrm_lineheight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outer background color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_outerbackgroundcolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_outerbackgroundcolor); }
			set { Entity.Attributes[Fields.msdyncrm_outerbackgroundcolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Paragraph color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paragraphcolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paragraphcolor); }
			set { Entity.Attributes[Fields.msdyncrm_paragraphcolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Paragraph font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paragraphfont
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paragraphfont); }
			set { Entity.Attributes[Fields.msdyncrm_paragraphfont] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Paragraph size</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paragraphsize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paragraphsize); }
			set { Entity.Attributes[Fields.msdyncrm_paragraphsize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plain text full width</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_plaintextfullwidth
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_plaintextfullwidth); }
			set { Entity.Attributes[Fields.msdyncrm_plaintextfullwidth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounded corners</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_roundedcorners
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_roundedcorners); }
			set { Entity.Attributes[Fields.msdyncrm_roundedcorners] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text decoration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textdecoration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textdecoration); }
			set { Entity.Attributes[Fields.msdyncrm_textdecoration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text font weight</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textfontweight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textfontweight); }
			set { Entity.Attributes[Fields.msdyncrm_textfontweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text italic style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textitalicstyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textitalicstyle); }
			set { Entity.Attributes[Fields.msdyncrm_textitalicstyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text link font weight</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textlinkfontweight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textlinkfontweight); }
			set { Entity.Attributes[Fields.msdyncrm_textlinkfontweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text link italic style</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textlinkitalicstyle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textlinkitalicstyle); }
			set { Entity.Attributes[Fields.msdyncrm_textlinkitalicstyle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text link style color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textlinkstylecolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textlinkstylecolor); }
			set { Entity.Attributes[Fields.msdyncrm_textlinkstylecolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text link style font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textlinkstylefont
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textlinkstylefont); }
			set { Entity.Attributes[Fields.msdyncrm_textlinkstylefont] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text link text decoration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textlinktextdecoration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textlinktextdecoration); }
			set { Entity.Attributes[Fields.msdyncrm_textlinktextdecoration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text style color</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textstylecolor
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textstylecolor); }
			set { Entity.Attributes[Fields.msdyncrm_textstylecolor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text style font</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_textstylefont
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_textstylefont); }
			set { Entity.Attributes[Fields.msdyncrm_textstylefont] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the General styles</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the General styles</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_generalstylesOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}