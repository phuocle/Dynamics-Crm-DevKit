//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_forecastrecurrence : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_actualparticipatingrecordsfetchxml = "msdyn_actualparticipatingrecordsfetchxml";
			public const string msdyn_failureinfo = "msdyn_failureinfo";
			public const string msdyn_forecastdefinitionid = "msdyn_forecastdefinitionid";
			public const string msdyn_forecastrecurrenceId = "msdyn_forecastrecurrenceid";
			public const string msdyn_inprogressparticipatingrecordsfetchxml = "msdyn_inprogressparticipatingrecordsfetchxml";
			public const string msdyn_ishierarchylocked = "msdyn_ishierarchylocked";
			public const string msdyn_lastrecalculatedon = "msdyn_lastrecalculatedon";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_recalculatestatuschangedon = "msdyn_recalculatestatuschangedon";
			public const string msdyn_recalculationstarttime = "msdyn_recalculationstarttime";
			public const string msdyn_recalculationstatus = "msdyn_recalculationstatus";
			public const string msdyn_recalculationstatusdescription = "msdyn_recalculationstatusdescription";
			public const string msdyn_recurrenceindex = "msdyn_recurrenceindex";
			public const string msdyn_validfrom = "msdyn_validfrom";
			public const string msdyn_validto = "msdyn_validto";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_forecastrecurrence";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10531;
		public const string EntityCollectionSchemaName = "msdyn_forecastrecurrences";
		public const string EntityDisplayCollectionName = "Forecast recurrences";
		public const string DisplayName = "Forecast recurrence";
		public const string EntitySetName = "msdyn_forecastrecurrences";
		public const string EntityLogicalCollectionName = "msdyn_forecastrecurrences";
		public const string EntityPrimaryIdAttribute = "msdyn_forecastrecurrenceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_forecastrecurrence";
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence(Guid msdyn_forecastrecurrenceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_forecastrecurrenceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastrecurrence"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastrecurrence"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_forecastrecurrence(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastrecurrence"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_forecastrecurrence(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastrecurrence(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed participating opportunities FetchXML</para>
		/// <para><strong>Description</strong>: Stores the FetchXML for participating records for closed opportunities. For internal use.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_actualparticipatingrecordsfetchxml
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_actualparticipatingrecordsfetchxml); }
			set { Entity.Attributes[Fields.msdyn_actualparticipatingrecordsfetchxml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure info</para>
		/// <para><strong>Description</strong>: Stores information about why the recalculation of forecast hierarchy failed.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_failureinfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_failureinfo); }
			set { Entity.Attributes[Fields.msdyn_failureinfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast definition</para>
		/// <para><strong>Description</strong>: Unique identifier for the forecast definition that is associated with the forecast recurrence.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_forecastdefinition"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_forecastdefinitionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_forecastdefinitionid); }
			set { Entity.Attributes[Fields.msdyn_forecastdefinitionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast recurrence</para>
		/// <para><strong>Description</strong>: Unique identifier for the forecast recurrence.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_forecastrecurrenceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_forecastrecurrenceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inprogress participating opportunities FetchXML</para>
		/// <para><strong>Description</strong>: Stores the FetchXML for participating records for inprogress opportunities. For internal use.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inprogressparticipatingrecordsfetchxml
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inprogressparticipatingrecordsfetchxml); }
			set { Entity.Attributes[Fields.msdyn_inprogressparticipatingrecordsfetchxml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsHierarchyLocked</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ishierarchylocked
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ishierarchylocked); }
			set { Entity.Attributes[Fields.msdyn_ishierarchylocked] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last recalculated on</para>
		/// <para><strong>Description</strong>: The date and time when the forecast hierarchy was successfully recalculated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastrecalculatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastrecalculatedon); }
			set { Entity.Attributes[Fields.msdyn_lastrecalculatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Shows the name of the forecast recurrence.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RecalculateStatusChangedOn</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_recalculatestatuschangedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_recalculatestatuschangedon); }
			set { Entity.Attributes[Fields.msdyn_recalculatestatuschangedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HierarchyLastLockedOn</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_recalculationstarttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_recalculationstarttime); }
			set { Entity.Attributes[Fields.msdyn_recalculationstarttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recalculation status</para>
		/// <para><strong>Description</strong>: Shows the recalculation status for the forecast recurrence hierarchy.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_recalculationstatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_recalculationstatus); }
			set { Entity.Attributes[Fields.msdyn_recalculationstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recalculation status description</para>
		/// <para><strong>Description</strong>: Stores the description for the recalculation status of forecast hierarchy.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recalculationstatusdescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recalculationstatusdescription); }
			set { Entity.Attributes[Fields.msdyn_recalculationstatusdescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence index</para>
		/// <para><strong>Description</strong>: Stores the recurrence index that is associated with the forecast recurrence hierarchy.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 99</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_recurrenceindex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_recurrenceindex); }
			set { Entity.Attributes[Fields.msdyn_recurrenceindex] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid from</para>
		/// <para><strong>Description</strong>: Shows the date from which the forecast is applicable. The date and time are displayed in the time zone selected in Dynamics 365 Customer Engagement apps options.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? msdyn_validfrom
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.msdyn_validfrom);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.msdyn_validfrom] = dateTime;
				}
				else
					Entity.Attributes[Fields.msdyn_validfrom] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid to</para>
		/// <para><strong>Description</strong>: Shows the date till which the forecast is applicable. The date and time are displayed in the time zone selected in Dynamics 365 Customer Engagement apps options.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? msdyn_validto
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.msdyn_validto);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.msdyn_validto] = dateTime;
				}
				else
					Entity.Attributes[Fields.msdyn_validto] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Forecast Recurrence</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Forecast Recurrence</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastrecurrenceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}