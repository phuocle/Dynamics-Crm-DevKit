//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.botcomponentOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum ComponentType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot entity</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bot_entity = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot entity (V2)</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Bot_entity_V2 = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot File Attachment</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Bot_File_Attachment = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot translations (V2)</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Bot_translations_V2 = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot variable</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bot_variable = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot variable (V2)</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Bot_variable_V2 = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Settings</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Copilot_Settings = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPT</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Custom_GPT = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dialog</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Dialog = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dialog schema</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Dialog_schema = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: External Trigger</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		External_Trigger = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Source</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Knowledge_Source = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Language generation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Language_generation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Language understanding</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Language_understanding = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skill</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Skill = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skill (V2)</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Skill_V2 = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Topic</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Topic = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Topic (V2)</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Topic_V2 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trigger</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Trigger = 5
	}
	public enum Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Simplified)</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_Simplified = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Traditional)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Chinese_Traditional = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: English (Australia)</para>
		/// <para><strong>Value</strong>: 3,081</para>
		/// </summary>
		English_Australia = 3_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: English (United Kingdom)</para>
		/// <para><strong>Value</strong>: 2,057</para>
		/// </summary>
		English_United_Kingdom = 2_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: French (Canada)</para>
		/// <para><strong>Value</strong>: 3,084</para>
		/// </summary>
		French_Canada = 3_084,
		/// <summary>
		/// <para><strong>Display Name</strong>: German</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese (Brazilian)</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazilian = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish</para>
		/// <para><strong>Value</strong>: 1,034</para>
		/// </summary>
		Spanish = 1_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish (United States)</para>
		/// <para><strong>Value</strong>: 21,514</para>
		/// </summary>
		Spanish_United_States = 21_514,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish = 1_055
	}
	public enum ReusePolicy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Private</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Private = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Public = 2
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class botcomponent : EntityBase
	{
		public struct Fields
		{
			public const string AccentColor = "accentcolor";
			public const string botcomponentId = "botcomponentid";
			public const string Category = "category";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string ComponentType = "componenttype";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Data = "data";
			public const string Description = "description";
			public const string FileData = "filedata";
			public const string FileData_name = "filedata_name";
			public const string HelpLink = "helplink";
			public const string IconUrl = "iconurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string Language = "language";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentBotComponentCollectionId = "parentbotcomponentcollectionid";
			public const string ParentBotComponentId = "parentbotcomponentid";
			public const string ParentBotId = "parentbotid";
			public const string ReusePolicy = "reusepolicy";
			public const string SchemaName = "schemaname";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "botcomponent";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10153;
		public const string EntityCollectionSchemaName = "botcomponents";
		public const string EntityDisplayCollectionName = "Copilot components";
		public const string DisplayName = "Copilot component";
		public const string EntitySetName = "botcomponents";
		public const string EntityLogicalCollectionName = "botcomponents";
		public const string EntityPrimaryIdAttribute = "botcomponentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "botcomponent";
		[DebuggerNonUserCode()]
		public botcomponent()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public botcomponent(Guid botcomponentId)
		{
			Entity = new Entity(EntityLogicalName, botcomponentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public botcomponent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="botcomponent"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public botcomponent(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="botcomponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public botcomponent(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new botcomponent(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="botcomponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public botcomponent(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new botcomponent(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public botcomponent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accent Color</para>
		/// <para><strong>Description</strong>: Accent Color for this re-usable component</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 7</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AccentColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.AccentColor); }
			set { Entity.Attributes[Fields.AccentColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BotComponent</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid botcomponentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.botcomponentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Description</strong>: The category of Copilot component.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ComponentType</para>
		/// <para><strong>Description</strong>: The sub type of Copilot component.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType? ComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ComponentType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content</para>
		/// <para><strong>Description</strong>: The content or metadata of the Bot Component that defines its structure and properties.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Obi Data</para>
		/// <para><strong>Description</strong>: The content of the Bot Component in OBI format</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Contains searchable text for the bot component</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: filedata</para>
		/// <para><strong>Description</strong>: This is a file type attribute to store File attachments.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileData_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileData_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Help Link</para>
		/// <para><strong>Description</strong>: Link to learn More about this component</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HelpLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.HelpLink); }
			set { Entity.Attributes[Fields.HelpLink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Icon Url</para>
		/// <para><strong>Description</strong>: Icon Url for this component</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IconUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.IconUrl); }
			set { Entity.Attributes[Fields.IconUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: Language of the copilot component</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language? Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ParentBotComponentCollection</para>
		/// <para><strong>Description</strong>: Unique identifier for Copilot component collection associated with Copilot component.</para>
		/// <para><strong>Lookup</strong>: <see cref="botcomponentcollection"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotComponentCollectionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotComponentCollectionId); }
			set { Entity.Attributes[Fields.ParentBotComponentCollectionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent copilot component</para>
		/// <para><strong>Description</strong>: Unique identifier for Copilot component associated with Copilot component.</para>
		/// <para><strong>Lookup</strong>: <see cref="botcomponent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotComponentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotComponentId); }
			set { Entity.Attributes[Fields.ParentBotComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: parentbotid</para>
		/// <para><strong>Description</strong>: Unique identifier for Bot associated with the Component.</para>
		/// <para><strong>Lookup</strong>: <see cref="bot"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBotId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBotId); }
			set { Entity.Attributes[Fields.ParentBotId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reuse Policy</para>
		/// <para><strong>Description</strong>: Reuse Policy for the copilot component</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy? ReusePolicy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReusePolicy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.ReusePolicy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReusePolicy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReusePolicy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SchemaName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaName); }
			set { Entity.Attributes[Fields.SchemaName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the BotComponent</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the BotComponent</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botcomponentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}