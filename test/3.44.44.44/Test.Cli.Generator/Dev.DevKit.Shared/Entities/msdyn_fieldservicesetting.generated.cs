//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets
{
	public enum msdyn_DefaultCrewStrategy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cascade and Accept Cascade Completely (Not Recommended)</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Cascade_and_Accept_Cascade_Completely_Not_Recommended = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew Leader Management</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Crew_Leader_Management = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew Member Self-Management</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Crew_Member_Self_Management = 192_350_002
	}
	public enum msdyn_DefaultWorkOrderCompletedStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 690,970,005</para>
		/// </summary>
		Canceled = 690_970_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Completed = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		In_Progress = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Posted</para>
		/// <para><strong>Value</strong>: 690,970,004</para>
		/// </summary>
		Posted = 690_970_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Scheduled = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unscheduled</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Unscheduled = 690_970_000
	}
	public enum msdyn_HistoricalDataFilter
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: All</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		All = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Last 12 Months</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Last_12_Months = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Last 3 Months</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Last_3_Months = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Last 6 Months</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Last_6_Months = 100_000_001
	}
	public enum msdyn_InspectionAnalyticsFrequency
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Custom = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Daily</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Daily = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Immediately</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Immediately = 100_000_001
	}
	public enum msdyn_ProductCostOrder
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Current/Standard</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		CurrentStandard = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Standard/Current</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		StandardCurrent = 690_970_000
	}
	public enum msdyn_RunFrequencyOfIncidentTypeRecommendation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Once a Week</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Once_a_Week = 192_350_000
	}
	public enum msdyn_TimeCostActualsSource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Journals on Post of Work Order</para>
		/// <para><strong>Value</strong>: 192,354,000</para>
		/// </summary>
		Booking_Journals_on_Post_of_Work_Order = 192_354_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Time Entry Approval</para>
		/// <para><strong>Value</strong>: 192,354,001</para>
		/// </summary>
		Work_Order_Time_Entry_Approval = 192_354_001
	}
	public enum msdyn_TimeEntryGenerationStrategy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-Generate from Booking Timestamps</para>
		/// <para><strong>Value</strong>: 192,355,201</para>
		/// </summary>
		Auto_Generate_from_Booking_Timestamps = 192_355_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 192,355,200</para>
		/// </summary>
		Manual = 192_355_200
	}
	public enum msdyn_TimestampFrequency
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Per Booking Status Change</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Per_Booking_Status_Change = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Per Field Service Status Change</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Per_Field_Service_Status_Change = 192_350_001
	}
	public enum msdyn_UndefinedBookingLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore Location</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Ignore_Location = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous Known Location</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Previous_Known_Location = 690_970_000
	}
	public enum msdyn_UseofProductsOutofStock
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirm</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Confirm = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Restrict</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Restrict = 690_970_001
	}
	public enum msdyn_WorkOrderInvoiceCreation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Never</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Never = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Work Order Posted</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		On_Work_Order_Posted = 690_970_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_fieldservicesetting : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdvancedSettings = "msdyn_advancedsettings";
			public const string msdyn_AgreementPrefix = "msdyn_agreementprefix";
			public const string msdyn_AgreementRecordGeneration = "msdyn_agreementrecordgeneration";
			public const string msdyn_AgreementStartingNumber = "msdyn_agreementstartingnumber";
			public const string msdyn_AnalyticsIngestDataInXDays = "msdyn_analyticsingestdatainxdays";
			public const string msdyn_AnalyticsPostponeIngestionUntil = "msdyn_analyticspostponeingestionuntil";
			public const string msdyn_AnalyticsSpreadOutPostponeIngestionUntil = "msdyn_analyticsspreadoutpostponeingestionuntil";
			public const string msdyn_AutoAllocateEstimatedProducts = "msdyn_autoallocateestimatedproducts";
			public const string msdyn_AutoGenerateWOforAgreementBookings = "msdyn_autogeneratewoforagreementbooking";
			public const string msdyn_AutoGeoCodeAddresses = "msdyn_autogeocodeaddresses";
			public const string msdyn_AutoNumberingOptIn = "msdyn_autonumberingoptin";
			public const string msdyn_BookingAlertTemplate = "msdyn_bookingalerttemplate";
			public const string msdyn_BreakPayType = "msdyn_breakpaytype";
			public const string msdyn_BusinessClosurePayType = "msdyn_businessclosurepaytype";
			public const string msdyn_CalculateCost = "msdyn_calculatecost";
			public const string msdyn_CalculatePrice = "msdyn_calculateprice";
			public const string msdyn_CalculateTax = "msdyn_calculatetax";
			public const string msdyn_CancelCurrentSlotsWhenMoving = "msdyn_cancelcurrentslotswhenmoving";
			public const string msdyn_CustomGPSData = "msdyn_customgpsdata";
			public const string msdyn_CustomGPSLatitudefield = "msdyn_customgpslatitudefield";
			public const string msdyn_CustomGPSLocationentity = "msdyn_customgpslocationentity";
			public const string msdyn_CustomGPSLongitudefield = "msdyn_customgpslongitudefield";
			public const string msdyn_CustomGPSResourcefield = "msdyn_customgpsresourcefield";
			public const string msdyn_CustomGPSTimestampfield = "msdyn_customgpstimestampfield";
			public const string msdyn_DatabaseVersion = "msdyn_databaseversion";
			public const string msdyn_datepopulationtype = "msdyn_datepopulationtype";
			public const string msdyn_DeactivateBookingWhenCanceled = "msdyn_deactivatebookingwhencanceled";
			public const string msdyn_DeactivateBookingWhenCompleted = "msdyn_deactivatebookingwhencompleted";
			public const string msdyn_DeactivateWorkOrderWhenCanceled = "msdyn_deactivateworkorderwhencanceled";
			public const string msdyn_DeactivateWorkOrderWhenPosted = "msdyn_deactivateworkorderwhenposted";
			public const string msdyn_DefaultBookingDuration = "msdyn_defaultbookingduration";
			public const string msdyn_DefaultCanceledBookingStatus = "msdyn_defaultcanceledbookingstatus";
			public const string msdyn_DefaultCrewStrategy = "msdyn_defaultcrewstrategy";
			public const string msdyn_DefaultRadiusUnit = "msdyn_defaultradiusunit";
			public const string msdyn_DefaultRadiusValue = "msdyn_defaultradiusvalue";
			public const string msdyn_DefaultScheduledBookingStatus = "msdyn_defaultscheduledbookingstatus";
			public const string msdyn_DefaultWarehouse = "msdyn_defaultwarehouse";
			public const string msdyn_DefaultWorkOrderCompletedStatus = "msdyn_defaultworkordercompletedstatus";
			public const string msdyn_disablecustomerassetvalidation = "msdyn_disablecustomerassetvalidation";
			public const string msdyn_DisableRemoteAssistBookingStatusChanges = "msdyn_disableremoteassistbookingstatuschanges";
			public const string msdyn_EnableAddressSuggestions = "msdyn_enableaddresssuggestions";
			public const string msdyn_EnableIncidentTypeRecommendation = "msdyn_enableincidenttyperecommendation";
			public const string msdyn_EnableLegacyScheduleAssistant = "msdyn_enablelegacyscheduleassistant";
			public const string msdyn_EnableMainFormDialogForSubgrids = "msdyn_enablemainformdialogforsubgrids";
			public const string msdyn_EnableNTE = "msdyn_enablente";
			public const string msdyn_EnableSuggestedDuration = "msdyn_enablesuggestedduration";
			public const string msdyn_EnhancedBackgroundProcessing = "msdyn_enhancedbackgroundprocessing";
			public const string msdyn_EntityNumberLength = "msdyn_entitynumberlength";
			public const string msdyn_fieldservicesettingId = "msdyn_fieldservicesettingid";
			public const string msdyn_GenerateActuals = "msdyn_generateactuals";
			public const string msdyn_GenerateAgreementInvoicesXDaysInAdvance = "msdyn_generateagreementinvoicesxdaysinadvance";
			public const string msdyn_GenerateAgreementWOXDaysInAdvance = "msdyn_generateagreementwoxdaysinadvance";
			public const string msdyn_GenerateBookingDatesXMonthsInAdvance = "msdyn_generatebookingdatesxmonthsinadvance";
			public const string msdyn_GenerateInvoiceDatesXMonthsInAdvance = "msdyn_generateinvoicedatesxmonthsinadvance";
			public const string msdyn_GPSLocationExpiresAfterXMinutes = "msdyn_gpslocationexpiresafterxminutes";
			public const string msdyn_HistoricalDataFilter = "msdyn_historicaldatafilter";
			public const string msdyn_InspectionAnalyticsEnabled = "msdyn_inspectionanalyticsenabled";
			public const string msdyn_InspectionAnalyticsEnabledOn = "msdyn_inspectionanalyticsenabledon";
			public const string msdyn_InspectionAnalyticsFrequency = "msdyn_inspectionanalyticsfrequency";
			public const string msdyn_InspectionAnalyticsRecommendedTime = "msdyn_inspectionanalyticsrecommendedtime";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_InventoryAdjustmentPrefix = "msdyn_inventoryadjustmentprefix";
			public const string msdyn_InventoryAdjustmentStartingNumber = "msdyn_inventoryadjustmentstartingnumber";
			public const string msdyn_InventoryTransferPrefix = "msdyn_inventorytransferprefix";
			public const string msdyn_InventoryTransferStartingNumber = "msdyn_inventorytransferstartingnumber";
			public const string msdyn_LastRunOfIncidentTypeRecommendation = "msdyn_lastrunofincidenttyperecommendation";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_NotificationTimeout = "msdyn_notificationtimeout";
			public const string msdyn_OvertimePayType = "msdyn_overtimepaytype";
			public const string msdyn_PostponeNumberCleanupUntil = "msdyn_postponenumbercleanupuntil";
			public const string msdyn_ProductCostOrder = "msdyn_productcostorder";
			public const string msdyn_PurchaseOrderApprovalRequired = "msdyn_purchaseorderapprovalrequired";
			public const string msdyn_PurchaseOrderPrefix = "msdyn_purchaseorderprefix";
			public const string msdyn_PurchaseOrderStartingNumber = "msdyn_purchaseorderstartingnumber";
			public const string msdyn_ResourcesSynchronizationTimeout = "msdyn_resourcessynchronizationtimeout";
			public const string msdyn_ReturnTopXRecommendations = "msdyn_returntopxrecommendations";
			public const string msdyn_RMAPrefix = "msdyn_rmaprefix";
			public const string msdyn_RMAStartingNumber = "msdyn_rmastartingnumber";
			public const string msdyn_RTVPrefix = "msdyn_rtvprefix";
			public const string msdyn_RTVStartingNumber = "msdyn_rtvstartingnumber";
			public const string msdyn_RunFrequencyOfIncidentTypeRecommendation = "msdyn_runfrequencyofincidenttyperecommendation";
			public const string msdyn_SAAutoFilterServiceTerritory = "msdyn_saautofilterserviceterritory";
			public const string msdyn_SchedulerBusinessUnitDetailsView = "msdyn_schedulerbusinessunitdetailsview";
			public const string msdyn_SchedulerBusinessUnitTooltipView = "msdyn_schedulerbusinessunittooltipview";
			public const string msdyn_SchedulerCoreDetailsView = "msdyn_schedulercoredetailsview";
			public const string msdyn_SchedulerCoreSlotTextTemplate = "msdyn_schedulercoreslottexttemplate";
			public const string msdyn_SchedulerCoreTooltipView = "msdyn_schedulercoretooltipview";
			public const string msdyn_SchedulerFieldServiceDetailsView = "msdyn_schedulerfieldservicedetailsview";
			public const string msdyn_SchedulerFieldServiceSlotTextTemplate = "msdyn_schedulerfieldserviceslottexttemplate";
			public const string msdyn_SchedulerFieldServiceTooltipView = "msdyn_schedulerfieldservicetooltipview";
			public const string msdyn_SchedulerResourceDetailsView = "msdyn_schedulerresourcedetailsview";
			public const string msdyn_SchedulerResourceTooltipView = "msdyn_schedulerresourcetooltipview";
			public const string msdyn_SchedulerUnscheduledView = "msdyn_schedulerunscheduledview";
			public const string msdyn_sdkapimapkey = "msdyn_sdkapimapkey";
			public const string msdyn_ShowSimplifiedWorkOrderCommands = "msdyn_showsimplifiedworkordercommands";
			public const string msdyn_suggestreparentingcustomerassets = "msdyn_suggestreparentingcustomerassets";
			public const string msdyn_TimeCostActualsSource = "msdyn_timecostactualssource";
			public const string msdyn_TimeEntryGenerationStrategy = "msdyn_timeentrygenerationstrategy";
			public const string msdyn_TimestampFrequency = "msdyn_timestampfrequency";
			public const string msdyn_TravelChargeItemId = "msdyn_travelchargeitemid";
			public const string msdyn_TravelPayType = "msdyn_travelpaytype";
			public const string msdyn_TravelTimeRescheduling = "msdyn_traveltimerescheduling";
			public const string msdyn_UndefinedBookingLocation = "msdyn_undefinedbookinglocation";
			public const string msdyn_UnscheduledWOTooltipsViewId = "msdyn_unscheduledwotooltipsviewid";
			public const string msdyn_UseofProductsOutofStock = "msdyn_useofproductsoutofstock";
			public const string msdyn_WorkOrderInvoiceCreation = "msdyn_workorderinvoicecreation";
			public const string msdyn_WorkOrderPrefix = "msdyn_workorderprefix";
			public const string msdyn_WorkOrderStartingNumber = "msdyn_workorderstartingnumber";
			public const string msdyn_WorkPayType = "msdyn_workpaytype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_fieldservicesetting";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11661;
		public const string EntityCollectionSchemaName = "msdyn_fieldservicesettings";
		public const string EntityDisplayCollectionName = "Field Service Settings";
		public const string DisplayName = "Field Service Setting";
		public const string EntitySetName = "msdyn_fieldservicesettings";
		public const string EntityLogicalCollectionName = "msdyn_fieldservicesettings";
		public const string EntityPrimaryIdAttribute = "msdyn_fieldservicesettingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_fieldservicesetting";
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Guid msdyn_fieldservicesettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_fieldservicesettingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_fieldservicesetting"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_fieldservicesetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_fieldservicesetting(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_fieldservicesetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_fieldservicesetting(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced Settings</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AdvancedSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AdvancedSettings); }
			set { Entity.Attributes[Fields.msdyn_AdvancedSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement Prefix (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AgreementPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AgreementPrefix); }
			set { Entity.Attributes[Fields.msdyn_AgreementPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement Record Generation Timing</para>
		/// <para><strong>Description</strong>: This field defines the time of day when Work Orders and Invoices are generated by the Agreement Booking Setups and Agreement Invoice Setups where the timing was not defined on the related Agreement.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AgreementRecordGenerationUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AgreementRecordGeneration); }
			set { Entity.Attributes[Fields.msdyn_AgreementRecordGeneration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement Starting Number</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AgreementStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AgreementStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_AgreementStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analytics Ingestion in X Days</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 365</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AnalyticsIngestDataInXDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AnalyticsIngestDataInXDays); }
			set { Entity.Attributes[Fields.msdyn_AnalyticsIngestDataInXDays] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Analytics Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AnalyticsPostponeIngestionUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AnalyticsPostponeIngestionUntil); }
			set { Entity.Attributes[Fields.msdyn_AnalyticsPostponeIngestionUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Spread Out Scheduled Analytics Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AnalyticsSpreadOutPostponeIngestionUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AnalyticsSpreadOutPostponeIngestionUntil); }
			set { Entity.Attributes[Fields.msdyn_AnalyticsSpreadOutPostponeIngestionUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Allocate Estimated Products</para>
		/// <para><strong>Description</strong>: If enabled then Allocated will be automatically set when entering a Work order Product with a Line Status of Estimate.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoAllocateEstimatedProducts
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoAllocateEstimatedProducts); }
			set { Entity.Attributes[Fields.msdyn_AutoAllocateEstimatedProducts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Generate WO for Agreement Booking</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoGenerateWOforAgreementBookings
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoGenerateWOforAgreementBookings); }
			set { Entity.Attributes[Fields.msdyn_AutoGenerateWOforAgreementBookings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Geo Code Addresses</para>
		/// <para><strong>Description</strong>: If set then the system will automatically geo code addresses when the address has been updated and the record is saved</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoGeoCodeAddresses
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoGeoCodeAddresses); }
			set { Entity.Attributes[Fields.msdyn_AutoGeoCodeAddresses] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-Numbering Opt In</para>
		/// <para><strong>Description</strong>: For Internal Use. If Yes the org is opted in for use of latest autonumbering implementation. If No the org is not opted in.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoNumberingOptIn
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoNumberingOptIn); }
			set { Entity.Attributes[Fields.msdyn_AutoNumberingOptIn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert Template (Deprecated)</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingAlertTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingAlertTemplate); }
			set { Entity.Attributes[Fields.msdyn_BookingAlertTemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Break Pay Type</para>
		/// <para><strong>Description</strong>: Default Pay Type to be used for Break hours</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resourcepaytype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BreakPayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BreakPayType); }
			set { Entity.Attributes[Fields.msdyn_BreakPayType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Closure Pay Type</para>
		/// <para><strong>Description</strong>: Default Pay Type to be used for business closure work hours</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resourcepaytype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BusinessClosurePayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BusinessClosurePayType); }
			set { Entity.Attributes[Fields.msdyn_BusinessClosurePayType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculate Cost</para>
		/// <para><strong>Description</strong>: When disabled, all cost calculation logic on work orders, work order products, and work order services will be disabled and relevant cost fields will be hidden.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CalculateCost
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CalculateCost); }
			set { Entity.Attributes[Fields.msdyn_CalculateCost] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculate Price</para>
		/// <para><strong>Description</strong>: When disabled, all price calculation logic on work orders, work order products, and work order services will be disabled and relevant pricing fields will be hidden.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CalculatePrice
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CalculatePrice); }
			set { Entity.Attributes[Fields.msdyn_CalculatePrice] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculate Tax</para>
		/// <para><strong>Description</strong>: On disabling, all tax related fields will be removed and no tax calculations will be performed.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CalculateTax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CalculateTax); }
			set { Entity.Attributes[Fields.msdyn_CalculateTax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancel Current Slots When Moving (Deprecated)</para>
		/// <para><strong>Description</strong>: Select whether, when moving open slots to the next day, to leave the old slots and change their status to &quot;Cancel.&quot;</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CancelCurrentSlotsWhenMoving
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CancelCurrentSlotsWhenMoving); }
			set { Entity.Attributes[Fields.msdyn_CancelCurrentSlotsWhenMoving] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPS Data (Deprecated)</para>
		/// <para><strong>Description</strong>: If enabled system will use custom entity for its source of Geo Locations for resources to be displayed on map view</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CustomGPSData
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CustomGPSData); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPS Latitude field (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the logical name of the latitude field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSLatitudefield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSLatitudefield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSLatitudefield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPS Location entity (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the logical name of custom entity to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSLocationentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSLocationentity); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSLocationentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPS Longitude field (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the logical name of the longitude field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSLongitudefield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSLongitudefield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSLongitudefield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPS Resource field (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the logical name of the resource field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSResourcefield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSResourcefield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSResourcefield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom GPS Timestamp field (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the logical name of the timestamp field to be used for geolocations.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSTimestampfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSTimestampfield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSTimestampfield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Database Version</para>
		/// <para><strong>Description</strong>: For Internal Use</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DatabaseVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DatabaseVersion); }
			set { Entity.Attributes[Fields.msdyn_DatabaseVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre/Post Booking Flexibility Date Field Population</para>
		/// <para><strong>Description</strong>: Pre/Post Booking Flexibility Date Field Population.</para>
		/// <para><strong>Two Option</strong> - [<strong>Populate Time From Promised/Time To Promised</strong>]: true - [<strong>Populate Date Window Start/Date Window End</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Populate Date Window Start/Date Window End</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_datepopulationtype
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_datepopulationtype); }
			set { Entity.Attributes[Fields.msdyn_datepopulationtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivate Booking When Canceled (Deprecated)</para>
		/// <para><strong>Description</strong>: Select whether the system should deactivate the resource booking when the system status is changed to &quot;Canceled.&quot;</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateBookingWhenCanceled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateBookingWhenCanceled); }
			set { Entity.Attributes[Fields.msdyn_DeactivateBookingWhenCanceled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivate Booking When Completed (Deprecated)</para>
		/// <para><strong>Description</strong>: Select whether the system should deactivate the resource booking when the system status is changed to &quot;Completed.&quot;</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateBookingWhenCompleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateBookingWhenCompleted); }
			set { Entity.Attributes[Fields.msdyn_DeactivateBookingWhenCompleted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivate Work Order When Canceled (Deprecated)</para>
		/// <para><strong>Description</strong>: Select whether the system should deactivate the work order when the system status is changed to &quot;Closed - Canceled.&quot;</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateWorkOrderWhenCanceled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateWorkOrderWhenCanceled); }
			set { Entity.Attributes[Fields.msdyn_DeactivateWorkOrderWhenCanceled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivate Work Order When Posted (Deprecated)</para>
		/// <para><strong>Description</strong>: Select whether the system should deactivate the work order when the system status is changed to &quot;Closed - Posted.&quot;</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateWorkOrderWhenPosted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateWorkOrderWhenPosted); }
			set { Entity.Attributes[Fields.msdyn_DeactivateWorkOrderWhenPosted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Booking Duration (Deprecated)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultBookingDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultBookingDuration); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Canceled Booking Status (Deprecated)</para>
		/// <para><strong>Lookup</strong>: <see cref="bookingstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultCanceledBookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultCanceledBookingStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultCanceledBookingStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Crew Strategy</para>
		/// <para><strong>Description</strong>: Default Crew Strategy</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultCrewStrategy"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultCrewStrategy? msdyn_DefaultCrewStrategy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DefaultCrewStrategy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultCrewStrategy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DefaultCrewStrategy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DefaultCrewStrategy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Radius Unit (Deprecated)</para>
		/// <para><strong>Two Option</strong> - [<strong>mi</strong>]: true - [<strong>km</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mi</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DefaultRadiusUnit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DefaultRadiusUnit); }
			set { Entity.Attributes[Fields.msdyn_DefaultRadiusUnit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Radius Value (Deprecated)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultRadiusValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultRadiusValue); }
			set { Entity.Attributes[Fields.msdyn_DefaultRadiusValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Scheduled Booking Status (Deprecated)</para>
		/// <para><strong>Lookup</strong>: <see cref="bookingstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultScheduledBookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultScheduledBookingStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultScheduledBookingStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Warehouse</para>
		/// <para><strong>Description</strong>: Shows the warehouse associated with the field service setting.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_warehouse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultWarehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultWarehouse); }
			set { Entity.Attributes[Fields.msdyn_DefaultWarehouse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Work Order Completed Status</para>
		/// <para><strong>Description</strong>: Select whether the default work order completed status is either &quot;Completed&quot; or &quot;Posted.&quot;</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultWorkOrderCompletedStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultWorkOrderCompletedStatus.Completed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultWorkOrderCompletedStatus? msdyn_DefaultWorkOrderCompletedStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DefaultWorkOrderCompletedStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultWorkOrderCompletedStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DefaultWorkOrderCompletedStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DefaultWorkOrderCompletedStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Customer Asset Validation</para>
		/// <para><strong>Description</strong>: This field turns off validation on customer asset for service account</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_disablecustomerassetvalidation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_disablecustomerassetvalidation); }
			set { Entity.Attributes[Fields.msdyn_disablecustomerassetvalidation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Booking Status Changes on Remote Assist</para>
		/// <para><strong>Description</strong>: Specifies whether users can make booking status changes in the Remote Assist application.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableRemoteAssistBookingStatusChanges
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableRemoteAssistBookingStatusChanges); }
			set { Entity.Attributes[Fields.msdyn_DisableRemoteAssistBookingStatusChanges] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Address Suggestions</para>
		/// <para><strong>Description</strong>: If enabled then address suggestions will be displayed when editing the address on the account, contact, user, or work order form.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableAddressSuggestions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableAddressSuggestions); }
			set { Entity.Attributes[Fields.msdyn_EnableAddressSuggestions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Incident Type Suggestion</para>
		/// <para><strong>Description</strong>: Enable Incident Type Suggestion. When enabled, the system will generate suggestions to improve Incident Types based on completed Work Orders.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableIncidentTypeRecommendation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableIncidentTypeRecommendation); }
			set { Entity.Attributes[Fields.msdyn_EnableIncidentTypeRecommendation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Legacy Schedule Assistant (Deprecated)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableLegacyScheduleAssistant
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableLegacyScheduleAssistant); }
			set { Entity.Attributes[Fields.msdyn_EnableLegacyScheduleAssistant] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Subgrid Records Open as Popups</para>
		/// <para><strong>Description</strong>: When enabled, specific Work Order subgrid records open in a pop-up within the context of the parent (WO Service Task, WO Product, WO Service, WO Incident, Booking, and Time Entry).</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableMainFormDialogForSubgrids
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableMainFormDialogForSubgrids); }
			set { Entity.Attributes[Fields.msdyn_EnableMainFormDialogForSubgrids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable not-to-exceed</para>
		/// <para><strong>Description</strong>: Identifies whether not-to-exceed capability is enabled in Field Service application.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableNTE
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableNTE); }
			set { Entity.Attributes[Fields.msdyn_EnableNTE] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enables the suggested duration functionality</para>
		/// <para><strong>Description</strong>: Enable Suggested Duration for Incident Type. System will calculate Suggested Duration daily or on demand based on historical bookings</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableSuggestedDuration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableSuggestedDuration); }
			set { Entity.Attributes[Fields.msdyn_EnableSuggestedDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use Enhanced Background Processing (Preview)</para>
		/// <para><strong>Description</strong>: When this option is enabled, all asynchronous Field Service background processes will be processed through Flow or asynchronous plugins instead of the historic Field Service workflows. See documentation for more details.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnhancedBackgroundProcessing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnhancedBackgroundProcessing); }
			set { Entity.Attributes[Fields.msdyn_EnhancedBackgroundProcessing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Number Length  (Deprecated)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EntityNumberLength
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EntityNumberLength); }
			set { Entity.Attributes[Fields.msdyn_EntityNumberLength] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Service Setting</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_fieldservicesettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_fieldservicesettingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generate Actuals</para>
		/// <para><strong>Description</strong>: On disabling, actuals will not be generated.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_GenerateActuals
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_GenerateActuals); }
			set { Entity.Attributes[Fields.msdyn_GenerateActuals] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generate Agreement Invoices X Days In Advance</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateAgreementInvoicesXDaysInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateAgreementInvoicesXDaysInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateAgreementInvoicesXDaysInAdvance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generate Agreement WO X Days In Advance</para>
		/// <para><strong>Description</strong>: Specify default how many days in advance of the Agreement Booking Date the system should automatically generate a Work Order</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateAgreementWOXDaysInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateAgreementWOXDaysInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateAgreementWOXDaysInAdvance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generate Booking Dates X Months In Advance</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateBookingDatesXMonthsInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateBookingDatesXMonthsInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateBookingDatesXMonthsInAdvance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generate Invoice Dates X Months In Advance</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateInvoiceDatesXMonthsInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateInvoiceDatesXMonthsInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateInvoiceDatesXMonthsInAdvance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GPS Location Expires After X Minutes (Deprecated)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GPSLocationExpiresAfterXMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GPSLocationExpiresAfterXMinutes); }
			set { Entity.Attributes[Fields.msdyn_GPSLocationExpiresAfterXMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Historical Data Filter</para>
		/// <para><strong>Description</strong>: Choose the range of date to use for suggested duration calculation</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_HistoricalDataFilter"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_HistoricalDataFilter.Last_3_Months"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_HistoricalDataFilter? msdyn_HistoricalDataFilter
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_HistoricalDataFilter);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_HistoricalDataFilter)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_HistoricalDataFilter] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_HistoricalDataFilter] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analytics Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_InspectionAnalyticsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_InspectionAnalyticsEnabled); }
			set { Entity.Attributes[Fields.msdyn_InspectionAnalyticsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analytics Enabled On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_InspectionAnalyticsEnabledOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_InspectionAnalyticsEnabledOn); }
			set { Entity.Attributes[Fields.msdyn_InspectionAnalyticsEnabledOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analytics Frequency</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_InspectionAnalyticsFrequency"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_InspectionAnalyticsFrequency.Daily"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_InspectionAnalyticsFrequency? msdyn_InspectionAnalyticsFrequency
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_InspectionAnalyticsFrequency);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_InspectionAnalyticsFrequency)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_InspectionAnalyticsFrequency] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_InspectionAnalyticsFrequency] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analytics Ingestion Time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_InspectionAnalyticsRecommendedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_InspectionAnalyticsRecommendedTime); }
			set { Entity.Attributes[Fields.msdyn_InspectionAnalyticsRecommendedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For Field Service internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Adjustment Prefix (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the prefix to be added to the inventory adjustment numbers.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InventoryAdjustmentPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InventoryAdjustmentPrefix); }
			set { Entity.Attributes[Fields.msdyn_InventoryAdjustmentPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Adjustment Starting Number</para>
		/// <para><strong>Description</strong>: Shows the number to be used as the starting number for inventory adjustments.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_InventoryAdjustmentStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_InventoryAdjustmentStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_InventoryAdjustmentStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Transfer Prefix (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the prefix to be added to the inventory transfer numbers.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InventoryTransferPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InventoryTransferPrefix); }
			set { Entity.Attributes[Fields.msdyn_InventoryTransferPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Transfer Starting Number</para>
		/// <para><strong>Description</strong>: Shows the number to be used as the starting number for inventory transfers.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_InventoryTransferStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_InventoryTransferStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_InventoryTransferStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Run Of Incident Type Suggestion</para>
		/// <para><strong>Description</strong>: Shows when the last run of incident type suggestion happens.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastRunOfIncidentTypeRecommendationUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastRunOfIncidentTypeRecommendation); }
			set { Entity.Attributes[Fields.msdyn_LastRunOfIncidentTypeRecommendation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Enter the name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notification Timeout (In sec) (Deprecated)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_NotificationTimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_NotificationTimeout); }
			set { Entity.Attributes[Fields.msdyn_NotificationTimeout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Overtime Pay Type</para>
		/// <para><strong>Description</strong>: Default Pay Type to be used for overtime work hours</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resourcepaytype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OvertimePayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OvertimePayType); }
			set { Entity.Attributes[Fields.msdyn_OvertimePayType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Postpone Number Cleanup Until</para>
		/// <para><strong>Description</strong>: Shows the date when cleanup of unique numbers will occur.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_PostponeNumberCleanupUntil
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_PostponeNumberCleanupUntil); }
			set { Entity.Attributes[Fields.msdyn_PostponeNumberCleanupUntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Cost Order</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_ProductCostOrder"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_ProductCostOrder.StandardCurrent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_ProductCostOrder? msdyn_ProductCostOrder
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ProductCostOrder);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_ProductCostOrder)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ProductCostOrder] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ProductCostOrder] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Approval Required</para>
		/// <para><strong>Description</strong>: Enable if a Purchase Order requires approval in order for the status to be changed to Submitted</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PurchaseOrderApprovalRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PurchaseOrderApprovalRequired); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderApprovalRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Prefix (Deprecated)</para>
		/// <para><strong>Description</strong>: Shows the prefix to be added to the purchase order numbers.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 25</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PurchaseOrderPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PurchaseOrderPrefix); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Starting Number</para>
		/// <para><strong>Description</strong>: Shows the number to be used as starting number for the automatically generated purchase order number.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PurchaseOrderStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PurchaseOrderStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resources Synchronization Timeout (Deprecated)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ResourcesSynchronizationTimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ResourcesSynchronizationTimeout); }
			set { Entity.Attributes[Fields.msdyn_ResourcesSynchronizationTimeout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Return Top X Suggestions</para>
		/// <para><strong>Description</strong>: Return Top X suggstion result from last run.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ReturnTopXRecommendations
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ReturnTopXRecommendations); }
			set { Entity.Attributes[Fields.msdyn_ReturnTopXRecommendations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RMA Prefix (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RMAPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RMAPrefix); }
			set { Entity.Attributes[Fields.msdyn_RMAPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RMA Starting Number</para>
		/// <para><strong>Description</strong>: Shows the number to be used as the starting number for the automatically generation RMA number.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RMAStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RMAStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_RMAStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RTV Prefix (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RTVPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RTVPrefix); }
			set { Entity.Attributes[Fields.msdyn_RTVPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RTV Starting Number</para>
		/// <para><strong>Description</strong>: Shows the number to be used as the starting number for the automatically generated RTV number.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RTVStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RTVStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_RTVStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Run Frequency Of Incident Type Suggestion</para>
		/// <para><strong>Description</strong>: Specify the run frequency of incident type suggestion.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_RunFrequencyOfIncidentTypeRecommendation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_RunFrequencyOfIncidentTypeRecommendation.Once_a_Week"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_RunFrequencyOfIncidentTypeRecommendation? msdyn_RunFrequencyOfIncidentTypeRecommendation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_RunFrequencyOfIncidentTypeRecommendation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_RunFrequencyOfIncidentTypeRecommendation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RunFrequencyOfIncidentTypeRecommendation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_RunFrequencyOfIncidentTypeRecommendation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Filter Service Territory (Deprecated)</para>
		/// <para><strong>Description</strong>: Select whether the schedule assistant should automatically filter the results based on the territory set on the work order.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAAutoFilterServiceTerritory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAAutoFilterServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_SAAutoFilterServiceTerritory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Business Unit Details View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerBusinessUnitDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerBusinessUnitDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerBusinessUnitDetailsView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Business Unit Tooltip View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerBusinessUnitTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerBusinessUnitTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerBusinessUnitTooltipView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Core Details View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreDetailsView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Core Slot Text Template (Deprecated)</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreSlotTextTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreSlotTextTemplate); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreSlotTextTemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Core Tooltip View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreTooltipView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Field Service Details View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceDetailsView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Field Service Slot Text Template (Deprecated)</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceSlotTextTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceSlotTextTemplate); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceSlotTextTemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Field Service Tooltip View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceTooltipView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Resource Details View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerResourceDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerResourceDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerResourceDetailsView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Resource Tooltip View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerResourceTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerResourceTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerResourceTooltipView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduler Unscheduled View (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerUnscheduledView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerUnscheduledView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerUnscheduledView] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bing API Key (Deprecated)</para>
		/// <para><strong>Description</strong>: Api key for map</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sdkapimapkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sdkapimapkey); }
			set { Entity.Attributes[Fields.msdyn_sdkapimapkey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show Simplified Work Order Commands</para>
		/// <para><strong>Description</strong>: Enable/disable out of the box logic to show or hide commands on the Work Order form and list view. If yes, only the most relevant buttons will be displayed.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ShowSimplifiedWorkOrderCommands
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ShowSimplifiedWorkOrderCommands); }
			set { Entity.Attributes[Fields.msdyn_ShowSimplifiedWorkOrderCommands] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggest Reparenting Customer Assets</para>
		/// <para><strong>Description</strong>: On enabling provides a dialog on change on customer asset/service account of workorder to make the account of customer asset same as service account of work order</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_suggestreparentingcustomerassets
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_suggestreparentingcustomerassets); }
			set { Entity.Attributes[Fields.msdyn_suggestreparentingcustomerassets] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Cost Actuals Source</para>
		/// <para><strong>Description</strong>: The Field Service solution automatically generates Actuals records. Actuals with a Transaction Type of &quot;Cost&quot; and a Transaction Class of &quot;Time&quot; can be generated when the Work Order is set to Closed-Posted from the related Booking&apos;s Booking Journals (Booking Journals on Post of Work Order) or when a Work Order related Time Entry is marked as Approved (Work Order Time Entry Approval).</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeCostActualsSource"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeCostActualsSource.Booking_Journals_on_Post_of_Work_Order"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeCostActualsSource? msdyn_TimeCostActualsSource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TimeCostActualsSource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeCostActualsSource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TimeCostActualsSource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TimeCostActualsSource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Entry Generation Strategy</para>
		/// <para><strong>Description</strong>: Field Service organizations that do not intend to use Time Entry or that wish to generate them via a custom or manual process should set to &apos;Manual.&apos; Otherwise, setting to &quot;Auto-Generate from Booking Timestamps&quot; will ensure that Time Entries are automatically created when a Booking is complete for each span of time between Booking Timestamps.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeEntryGenerationStrategy"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeEntryGenerationStrategy.Manual"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeEntryGenerationStrategy? msdyn_TimeEntryGenerationStrategy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TimeEntryGenerationStrategy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimeEntryGenerationStrategy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TimeEntryGenerationStrategy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TimeEntryGenerationStrategy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Timestamp Frequency</para>
		/// <para><strong>Description</strong>: The Timestamp Frequency setting controls the generation of Booking Timestamps as Bookings progress through Booking Statuses. Timestamps can either generate every time a Booking Status is changed (Per Booking Status) or when changing the Booking Status results in a new underlying Field Service Status (Per Field Service Status).</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimestampFrequency"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimestampFrequency.Per_Field_Service_Status_Change"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimestampFrequency? msdyn_TimestampFrequency
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TimestampFrequency);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_TimestampFrequency)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TimestampFrequency] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TimestampFrequency] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Travel Charge Item</para>
		/// <para><strong>Description</strong>: Product to be used by the system for Travel Charges on Work Orders</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TravelChargeItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TravelChargeItemId); }
			set { Entity.Attributes[Fields.msdyn_TravelChargeItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Travel Pay Type</para>
		/// <para><strong>Description</strong>: Default Pay Type to be used for Travel hours</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resourcepaytype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TravelPayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TravelPayType); }
			set { Entity.Attributes[Fields.msdyn_TravelPayType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Travel Time Rescheduling (Deprecated)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_TravelTimeRescheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_TravelTimeRescheduling); }
			set { Entity.Attributes[Fields.msdyn_TravelTimeRescheduling] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Undefined Booking Location (Deprecated)</para>
		/// <para><strong>Description</strong>: Location for schedules where geo code info has not been defined</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UndefinedBookingLocation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UndefinedBookingLocation.Previous_Known_Location"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UndefinedBookingLocation? msdyn_UndefinedBookingLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_UndefinedBookingLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UndefinedBookingLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UndefinedBookingLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_UndefinedBookingLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unscheduled WO Tooltips View Id (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UnscheduledWOTooltipsViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UnscheduledWOTooltipsViewId); }
			set { Entity.Attributes[Fields.msdyn_UnscheduledWOTooltipsViewId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use of Products Out of Stock</para>
		/// <para><strong>Description</strong>: Specify how the system should react when trying to use products that are out of stock.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UseofProductsOutofStock"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UseofProductsOutofStock.Confirm"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UseofProductsOutofStock? msdyn_UseofProductsOutofStock
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_UseofProductsOutofStock);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UseofProductsOutofStock)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UseofProductsOutofStock] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_UseofProductsOutofStock] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Invoice Creation</para>
		/// <para><strong>Description</strong>: Specify whether the system should automatically generate an invoice for work orders.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_WorkOrderInvoiceCreation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_WorkOrderInvoiceCreation.On_Work_Order_Posted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_WorkOrderInvoiceCreation? msdyn_WorkOrderInvoiceCreation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkOrderInvoiceCreation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_WorkOrderInvoiceCreation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkOrderInvoiceCreation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkOrderInvoiceCreation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Prefix (Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkOrderPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkOrderPrefix); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Starting Number</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_WorkOrderStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_WorkOrderStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderStartingNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Pay Type</para>
		/// <para><strong>Description</strong>: Default Pay Type to be used for regular work hours</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resourcepaytype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkPayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkPayType); }
			set { Entity.Attributes[Fields.msdyn_WorkPayType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Field Service Setting</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Field Service Setting</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_fieldservicesettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}