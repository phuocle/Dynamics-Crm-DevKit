//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets
{
	public enum msdyn_flow_approvalresponse_stage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Basic</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Basic = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Complete</para>
		/// <para><strong>Value</strong>: 192,351,000</para>
		/// </summary>
		Complete = 192_351_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Specified</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Not_Specified = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Committed</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Committed = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reviewing</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Reviewing = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Saved</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Saved = 192_350_001
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_flow_approvalresponse : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_flow_approvalresponse_additionalfields = "msdyn_flow_approvalresponse_additionalfields";
			public const string msdyn_flow_approvalresponse_approval = "msdyn_flow_approvalresponse_approval";
			public const string msdyn_flow_approvalresponse_approvalstagekey = "msdyn_flow_approvalresponse_approvalstagekey";
			public const string msdyn_flow_approvalresponse_comments = "msdyn_flow_approvalresponse_comments";
			public const string msdyn_flow_approvalresponse_name = "msdyn_flow_approvalresponse_name";
			public const string msdyn_flow_approvalresponse_response = "msdyn_flow_approvalresponse_response";
			public const string msdyn_flow_approvalresponse_stage = "msdyn_flow_approvalresponse_stage";
			public const string msdyn_flow_approvalresponse_stepnumber = "msdyn_flow_approvalresponse_stepnumber";
			public const string msdyn_flow_approvalresponseId = "msdyn_flow_approvalresponseid";
			public const string msdyn_flow_approvalresponseidx_approvalid = "msdyn_flow_approvalresponseidx_approvalid";
			public const string msdyn_flow_approvalresponseidx_owninguserid = "msdyn_flow_approvalresponseidx_owninguserid";
			public const string msdyn_flow_approvalresponseidx_stage = "msdyn_flow_approvalresponseidx_stage";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_flow_approvalresponse";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10096;
		public const string EntityCollectionSchemaName = "msdyn_flow_approvalresponses";
		public const string EntityDisplayCollectionName = "Approval Responses";
		public const string DisplayName = "Approval Response";
		public const string EntitySetName = "msdyn_flow_approvalresponses";
		public const string EntityLogicalCollectionName = "msdyn_flow_approvalresponses";
		public const string EntityPrimaryIdAttribute = "msdyn_flow_approvalresponseid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_flow_approvalresponse_name";
		public const string EntitySchemaName = "msdyn_flow_approvalresponse";
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse(Guid msdyn_flow_approvalresponseId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_flow_approvalresponseId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_flow_approvalresponse"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_flow_approvalresponse"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_flow_approvalresponse(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_flow_approvalresponse"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_flow_approvalresponse(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_flow_approvalresponse(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Fields</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponse_additionalfields
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponse_additionalfields); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_additionalfields] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Approval</para>
		/// <para><strong>Description</strong>: The linked approval.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_flow_approval"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_flow_approvalresponse_approval
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_flow_approvalresponse_approval); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_approval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Approval Stage Key</para>
		/// <para><strong>Description</strong>: Lookup key to match approval id and stage in fetch xml.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponse_approvalstagekey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponse_approvalstagekey); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_approvalstagekey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Comments</para>
		/// <para><strong>Description</strong>: The owner&apos;s comments.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponse_comments
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponse_comments); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_comments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the approval response.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponse_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponse_name); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Response</para>
		/// <para><strong>Description</strong>: The owner&apos;s response.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponse_response
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponse_response); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_response] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage</para>
		/// <para><strong>Description</strong>: The assigned stage of the associated approval.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.msdyn_flow_approvalresponse_stage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.msdyn_flow_approvalresponse_stage? msdyn_flow_approvalresponse_stage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_flow_approvalresponse_stage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.msdyn_flow_approvalresponse_stage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_flow_approvalresponse_stage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_flow_approvalresponse_stage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Step Number</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_flow_approvalresponse_stepnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_flow_approvalresponse_stepnumber); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponse_stepnumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Approval Response</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_flow_approvalresponseId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_flow_approvalresponseId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Approval Id Index</para>
		/// <para><strong>Description</strong>: Field mirroring the linked approval for the constraint index.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponseidx_approvalid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponseidx_approvalid); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponseidx_approvalid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User Index</para>
		/// <para><strong>Description</strong>: Field mirroring the owning user id for the constraint index.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponseidx_owninguserid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponseidx_owninguserid); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponseidx_owninguserid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Index</para>
		/// <para><strong>Description</strong>: Field mirroring the stage for the constraint index.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_flow_approvalresponseidx_stage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_flow_approvalresponseidx_stage); }
			set { Entity.Attributes[Fields.msdyn_flow_approvalresponseidx_stage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Approval Response</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: The reason for the status of the response.</para>
		/// <para>Required - <strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_flow_approvalresponseOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}