//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:45
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ProductOptionSets
{
	public enum msdyn_FieldServiceProductType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Inventory = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non-Inventory</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Non_Inventory = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Service = 690_970_002
	}
	public enum ProductStructure
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Product</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Product = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Bundle</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Product_Bundle = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Family</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Product_Family = 2
	}
	public enum ProductTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Flat Fees</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Flat_Fees = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Miscellaneous Charges</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Miscellaneous_Charges = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Inventory</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Sales_Inventory = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Services</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Services = 3
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Draft = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retired</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Retired = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Under Revision</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Under_Revision = 3
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retired</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Retired</strong></para>
		/// </summary>
		Retired = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Under Revision</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Under_Revision</strong></para>
		/// </summary>
		Under_Revision = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Product : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CurrentCost = "currentcost";
			public const string CurrentCost_Base = "currentcost_base";
			public const string DefaultUoMId = "defaultuomid";
			public const string DefaultUoMScheduleId = "defaultuomscheduleid";
			public const string Description = "description";
			public const string DMTImportState = "dmtimportstate";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string HierarchyPath = "hierarchypath";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsKit = "iskit";
			public const string IsReparented = "isreparented";
			public const string IsStockItem = "isstockitem";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_ConvertToCustomerAsset = "msdyn_converttocustomerasset";
			public const string msdyn_DefaultVendor = "msdyn_defaultvendor";
			public const string msdyn_FieldServiceProductType = "msdyn_fieldserviceproducttype";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_PurchaseName = "msdyn_purchasename";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_UPCCode = "msdyn_upccode";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentProductId = "parentproductid";
			public const string Price = "price";
			public const string Price_Base = "price_base";
			public const string PriceLevelId = "pricelevelid";
			public const string ProcessId = "processid";
			public const string ProductId = "productid";
			public const string ProductNumber = "productnumber";
			public const string ProductStructure = "productstructure";
			public const string ProductTypeCode = "producttypecode";
			public const string ProductUrl = "producturl";
			public const string QuantityDecimal = "quantitydecimal";
			public const string QuantityOnHand = "quantityonhand";
			public const string Size = "size";
			public const string StageId = "stageid";
			public const string StandardCost = "standardcost";
			public const string StandardCost_Base = "standardcost_base";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StockVolume = "stockvolume";
			public const string StockWeight = "stockweight";
			public const string SubjectId = "subjectid";
			public const string SupplierName = "suppliername";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string ValidFromDate = "validfromdate";
			public const string ValidToDate = "validtodate";
			public const string VendorID = "vendorid";
			public const string VendorName = "vendorname";
			public const string VendorPartNumber = "vendorpartnumber";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "product";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1024;
		public const string EntityCollectionSchemaName = "Products";
		public const string EntityDisplayCollectionName = "Products";
		public const string DisplayName = "Product";
		public const string EntitySetName = "products";
		public const string EntityLogicalCollectionName = "products";
		public const string EntityPrimaryIdAttribute = "productid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Product";
		[DebuggerNonUserCode()]
		public Product()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Product(Guid ProductId)
		{
			Entity = new Entity(EntityLogicalName, ProductId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Product(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Product"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Product(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Product"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Product(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Product(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Product"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Product(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Product(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Product(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the product.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (External Party)</para>
		/// <para><strong>Description</strong>: Shows the external party who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the product.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Cost</para>
		/// <para><strong>Description</strong>: Current cost for the product item. Used in price calculations.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CurrentCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CurrentCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrentCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CurrentCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Cost (Base)</para>
		/// <para><strong>Description</strong>: Value of the Current Cost in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CurrentCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CurrentCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Unit</para>
		/// <para><strong>Description</strong>: Default unit for the product.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultUoMId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultUoMId); }
			set { Entity.Attributes[Fields.DefaultUoMId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Group</para>
		/// <para><strong>Description</strong>: Default unit group for the product.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="uomschedule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultUoMScheduleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultUoMScheduleId); }
			set { Entity.Attributes[Fields.DefaultUoMScheduleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the product.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Use Only</para>
		/// <para><strong>Description</strong>: Internal Use Only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DMTImportState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DMTImportState); }
			set { Entity.Attributes[Fields.DMTImportState] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the product with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hierarchy Path</para>
		/// <para><strong>Description</strong>: Hierarchy path of the product.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HierarchyPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.HierarchyPath); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Kit</para>
		/// <para><strong>Description</strong>: Information that specifies whether the product is a kit.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsKit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsKit); }
			set { Entity.Attributes[Fields.IsKit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Reparented</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReparented
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReparented); }
			set { Entity.Attributes[Fields.IsReparented] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stock Item</para>
		/// <para><strong>Description</strong>: Information about whether the product is a stock item.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsStockItem
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsStockItem); }
			set { Entity.Attributes[Fields.IsStockItem] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the product.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (External Party)</para>
		/// <para><strong>Description</strong>: Shows the external party who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the product.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Convert to Customer Asset</para>
		/// <para><strong>Description</strong>: Specify whether a product is to be converted to a customer asset. When a product is used on a work order, the system will automatically convert it into a customer asset when the work order is closed.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ConvertToCustomerAsset
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ConvertToCustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_ConvertToCustomerAsset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Vendor</para>
		/// <para><strong>Description</strong>: Default vendor that supplies this product</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultVendor); }
			set { Entity.Attributes[Fields.msdyn_DefaultVendor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Service Product Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.msdyn_FieldServiceProductType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.msdyn_FieldServiceProductType? msdyn_FieldServiceProductType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_FieldServiceProductType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.msdyn_FieldServiceProductType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_FieldServiceProductType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_FieldServiceProductType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR Optout</para>
		/// <para><strong>Description</strong>: Describes whether product is opted out or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Name</para>
		/// <para><strong>Description</strong>: Type the name for the product when used on a purchase order.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PurchaseName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PurchaseName); }
			set { Entity.Attributes[Fields.msdyn_PurchaseName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Taxable</para>
		/// <para><strong>Description</strong>: Select whether the item is taxable. If an item is set as not taxable, it won&apos;t be taxable even on a taxable work order.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UPC Code</para>
		/// <para><strong>Description</strong>: Shows the UPC Code for product. Used for bar code scanning.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UPCCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UPCCode); }
			set { Entity.Attributes[Fields.msdyn_UPCCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the product.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent</para>
		/// <para><strong>Description</strong>: Specifies the parent product family hierarchy.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentProductId); }
			set { Entity.Attributes[Fields.ParentProductId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List Price</para>
		/// <para><strong>Description</strong>: List price for the product item. Used in price calculations.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Price] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List Price (Base)</para>
		/// <para><strong>Description</strong>: Value of the List Price in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Price List</para>
		/// <para><strong>Description</strong>: Select the default price list for the product.</para>
		/// <para><strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product</para>
		/// <para><strong>Description</strong>: Unique identifier of the product.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProductId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProductId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product ID</para>
		/// <para><strong>Description</strong>: User-defined product ID.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductNumber); }
			set { Entity.Attributes[Fields.ProductNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Structure</para>
		/// <para><strong>Description</strong>: Product Structure.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.ProductStructure"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.ProductStructure.Product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.ProductStructure? ProductStructure
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProductStructure);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.ProductStructure)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProductStructure] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProductStructure] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Type</para>
		/// <para><strong>Description</strong>: Type of product.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.ProductTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.ProductTypeCode.Sales_Inventory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.ProductTypeCode? ProductTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProductTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.ProductTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProductTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProductTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: URL</para>
		/// <para><strong>Description</strong>: URL for the Website associated with the product.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductUrl); }
			set { Entity.Attributes[Fields.ProductUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decimals Supported</para>
		/// <para><strong>Description</strong>: Number of decimal places that can be used in monetary amounts for the product.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? QuantityDecimal
		{
			get { return Entity.GetAttributeValue<int?>(Fields.QuantityDecimal); }
			set { Entity.Attributes[Fields.QuantityDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quantity On Hand</para>
		/// <para><strong>Description</strong>: Quantity of the product in stock.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? QuantityOnHand
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.QuantityOnHand); }
			set { Entity.Attributes[Fields.QuantityOnHand] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Size</para>
		/// <para><strong>Description</strong>: Product size.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Size
		{
			get { return Entity.GetAttributeValue<string>(Fields.Size); }
			set { Entity.Attributes[Fields.Size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Standard Cost</para>
		/// <para><strong>Description</strong>: Standard cost for the product item. Used in price calculations.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StandardCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StandardCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StandardCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.StandardCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Standard Cost (Base)</para>
		/// <para><strong>Description</strong>: Value of the Standard Cost in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StandardCost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StandardCost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the product.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.StateCode.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the product.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stock Volume</para>
		/// <para><strong>Description</strong>: Stock volume of the product.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StockVolume
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StockVolume); }
			set { Entity.Attributes[Fields.StockVolume] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stock Weight</para>
		/// <para><strong>Description</strong>: Stock weight of the product.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StockWeight
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StockWeight); }
			set { Entity.Attributes[Fields.StockWeight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Select a category for the product.</para>
		/// <para><strong>Lookup</strong>: <see cref="subject"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Supplier Name</para>
		/// <para><strong>Description</strong>: Name of the product&apos;s supplier.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SupplierName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SupplierName); }
			set { Entity.Attributes[Fields.SupplierName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the product.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid From</para>
		/// <para><strong>Description</strong>: Date from which this product is valid.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? ValidFromDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.ValidFromDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.ValidFromDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.ValidFromDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid To</para>
		/// <para><strong>Description</strong>: Date to which this product is valid.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? ValidToDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.ValidToDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.ValidToDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.ValidToDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor ID</para>
		/// <para><strong>Description</strong>: Unique identifier of vendor supplying the product.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VendorID
		{
			get { return Entity.GetAttributeValue<string>(Fields.VendorID); }
			set { Entity.Attributes[Fields.VendorID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor</para>
		/// <para><strong>Description</strong>: Name of the product vendor.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VendorName
		{
			get { return Entity.GetAttributeValue<string>(Fields.VendorName); }
			set { Entity.Attributes[Fields.VendorName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor Name</para>
		/// <para><strong>Description</strong>: Unique part identifier in vendor catalog of this product.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string VendorPartNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.VendorPartNumber); }
			set { Entity.Attributes[Fields.VendorPartNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}