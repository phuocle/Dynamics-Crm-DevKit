//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets
{
	public enum msfp_status
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 647,390,000</para>
		/// </summary>
		Active = 647_390_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: InActive</para>
		/// <para><strong>Value</strong>: 647,390,001</para>
		/// </summary>
		InActive = 647_390_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msfp_satisfactionmetric : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msfp_description = "msfp_description";
			public const string msfp_historicalcomputedvalue = "msfp_historicalcomputedvalue";
			public const string msfp_issystemkpi = "msfp_issystemkpi";
			public const string msfp_lastcomputedon = "msfp_lastcomputedon";
			public const string msfp_lastcomputedvalue = "msfp_lastcomputedvalue";
			public const string msfp_maximumvalue = "msfp_maximumvalue";
			public const string msfp_minimumvalue = "msfp_minimumvalue";
			public const string msfp_name = "msfp_name";
			public const string msfp_project = "msfp_project";
			public const string msfp_questions = "msfp_questions";
			public const string msfp_satisfactionmetricId = "msfp_satisfactionmetricid";
			public const string msfp_status = "msfp_status";
			public const string msfp_threshold = "msfp_threshold";
			public const string msfp_type = "msfp_type";
			public const string msfp_versionnumber = "msfp_versionnumber";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msfp_satisfactionmetric";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10608;
		public const string EntityCollectionSchemaName = "msfp_satisfactionmetrics";
		public const string EntityDisplayCollectionName = "Customer Voice satisfaction metrics";
		public const string DisplayName = "Customer Voice satisfaction metric";
		public const string EntitySetName = "msfp_satisfactionmetrics";
		public const string EntityLogicalCollectionName = "msfp_satisfactionmetrics";
		public const string EntityPrimaryIdAttribute = "msfp_satisfactionmetricid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msfp_name";
		public const string EntitySchemaName = "msfp_satisfactionmetric";
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Guid msfp_satisfactionmetricId)
		{
			Entity = new Entity(EntityLogicalName, msfp_satisfactionmetricId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_satisfactionmetric"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_satisfactionmetric"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msfp_satisfactionmetric(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_satisfactionmetric"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msfp_satisfactionmetric(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_satisfactionmetric(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the satisfaction metric.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_description); }
			set { Entity.Attributes[Fields.msfp_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Historical computed value</para>
		/// <para><strong>Description</strong>: Historical computed value of the satisfaction metric.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_historicalcomputedvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_historicalcomputedvalue); }
			set { Entity.Attributes[Fields.msfp_historicalcomputedvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is system KPI</para>
		/// <para><strong>Description</strong>: Indicates if the satisfaction metric is system defined or user defined.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_issystemkpi
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_issystemkpi); }
			set { Entity.Attributes[Fields.msfp_issystemkpi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last computed on</para>
		/// <para><strong>Description</strong>: Date and time when the satisfaction metric was last computed.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msfp_lastcomputedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msfp_lastcomputedon); }
			set { Entity.Attributes[Fields.msfp_lastcomputedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Computed Value</para>
		/// <para><strong>Description</strong>: Last computed value of the satisfaction metric.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_lastcomputedvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_lastcomputedvalue); }
			set { Entity.Attributes[Fields.msfp_lastcomputedvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum value</para>
		/// <para><strong>Description</strong>: Maximum value of the satisfaction metric.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_maximumvalue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_maximumvalue); }
			set { Entity.Attributes[Fields.msfp_maximumvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum value</para>
		/// <para><strong>Description</strong>: Minimum value of the satisfaction metric.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_minimumvalue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_minimumvalue); }
			set { Entity.Attributes[Fields.msfp_minimumvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the satisfaction metric.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 550</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_name); }
			set { Entity.Attributes[Fields.msfp_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Project</para>
		/// <para><strong>Description</strong>: Project to which the satisfaction metric belongs.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msfp_project"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msfp_project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msfp_project); }
			set { Entity.Attributes[Fields.msfp_project] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Questions</para>
		/// <para><strong>Description</strong>: Questions on which the satisfaction metric is calculated.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_questions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_questions); }
			set { Entity.Attributes[Fields.msfp_questions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice satisfaction metric</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msfp_satisfactionmetricId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msfp_satisfactionmetricId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the satisfaction metric.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.msfp_status"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.msfp_status.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.msfp_status? msfp_status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msfp_status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.msfp_status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msfp_status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msfp_status] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Threshold</para>
		/// <para><strong>Description</strong>: Threshold value of the satisfaction metric.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_threshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_threshold); }
			set { Entity.Attributes[Fields.msfp_threshold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Type of the satisfaction metric.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_type); }
			set { Entity.Attributes[Fields.msfp_type] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version number</para>
		/// <para><strong>Description</strong>: Version number of the satisfaction metric.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_versionnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_versionnumber); }
			set { Entity.Attributes[Fields.msfp_versionnumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: User who owns the satisfaction metric.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Satisfaction metric</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Satisfaction metric</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_satisfactionmetricOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}