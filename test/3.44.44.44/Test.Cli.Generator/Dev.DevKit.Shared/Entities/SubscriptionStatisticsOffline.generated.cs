//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SubscriptionStatisticsOfflineOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SubscriptionStatisticsOffline : EntityBase
	{
		public struct Fields
		{
			public const string FullSyncRequired = "fullsyncrequired";
			public const string ObjectTypeCode = "objecttypecode";
			public const string SubscriptionId = "subscriptionid";
		}
		public const string EntityLogicalName = "subscriptionstatisticsoffline";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 45;
		public const string EntityCollectionSchemaName = "SubscriptionStatisticsOffline";
		public const string EntityDisplayCollectionName = "Subscription Statistics Offline";
		public const string DisplayName = "Subscription Statistic Offline";
		public const string EntitySetName = "subscriptionstatisticsofflineset";
		public const string EntityLogicalCollectionName = "subscriptionstatisticsoffline";
		public const string EntityPrimaryIdAttribute = "subscriptionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "SubscriptionStatisticsOffline";
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline(Guid SubscriptionStatisticsOfflineId)
		{
			Entity = new Entity(EntityLogicalName, SubscriptionStatisticsOfflineId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SubscriptionStatisticsOffline"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SubscriptionStatisticsOffline"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SubscriptionStatisticsOffline(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SubscriptionStatisticsOffline"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SubscriptionStatisticsOffline(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SubscriptionStatisticsOffline(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FullSyncRequired</para>
		/// <para><strong>Description</strong>: Is full sync required or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FullSyncRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FullSyncRequired); }
			set { Entity.Attributes[Fields.FullSyncRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ObjectTypeCode</para>
		/// <para><strong>Description</strong>: Entity object type code</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SubscriptionId</para>
		/// <para><strong>Description</strong>: Subscription Id</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
	}
}