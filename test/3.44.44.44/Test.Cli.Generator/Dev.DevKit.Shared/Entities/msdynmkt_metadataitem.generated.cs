//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets
{
	public enum msdynmkt_DataType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: BigInt</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		BigInt = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Boolean</para>
		/// <para><strong>Value</strong>: 534,120,015</para>
		/// </summary>
		Boolean = 534_120_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: DateTime</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		DateTime = 534_120_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Decimal</para>
		/// <para><strong>Value</strong>: 534,120,003</para>
		/// </summary>
		Decimal = 534_120_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Double</para>
		/// <para><strong>Value</strong>: 534,120,007</para>
		/// </summary>
		Double = 534_120_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityCollection</para>
		/// <para><strong>Value</strong>: 534,120,020</para>
		/// </summary>
		EntityCollection = 534_120_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityValue</para>
		/// <para><strong>Value</strong>: 534,120,019</para>
		/// </summary>
		EntityValue = 534_120_019,
		/// <summary>
		/// <para><strong>Display Name</strong>: File</para>
		/// <para><strong>Value</strong>: 534,120,006</para>
		/// </summary>
		File = 534_120_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Image</para>
		/// <para><strong>Value</strong>: 534,120,008</para>
		/// </summary>
		Image = 534_120_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Integer</para>
		/// <para><strong>Value</strong>: 534,120,004</para>
		/// </summary>
		Integer = 534_120_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lookup</para>
		/// <para><strong>Value</strong>: 534,120,009</para>
		/// </summary>
		Lookup = 534_120_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: ManyToManyRelationship</para>
		/// <para><strong>Value</strong>: 534,120,018</para>
		/// </summary>
		ManyToManyRelationship = 534_120_018,
		/// <summary>
		/// <para><strong>Display Name</strong>: ManyToOneRelationship</para>
		/// <para><strong>Value</strong>: 534,120,022</para>
		/// </summary>
		ManyToOneRelationship = 534_120_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: Memo</para>
		/// <para><strong>Value</strong>: 534,120,011</para>
		/// </summary>
		Memo = 534_120_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: Money</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Money = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: MultiSelectPicklist</para>
		/// <para><strong>Value</strong>: 534,120,010</para>
		/// </summary>
		MultiSelectPicklist = 534_120_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: OneToManyRelationship</para>
		/// <para><strong>Value</strong>: 534,120,017</para>
		/// </summary>
		OneToManyRelationship = 534_120_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 534,120,021</para>
		/// </summary>
		Other = 534_120_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: Picklist</para>
		/// <para><strong>Value</strong>: 534,120,012</para>
		/// </summary>
		Picklist = 534_120_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>Value</strong>: 534,120,014</para>
		/// </summary>
		State = 534_120_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Value</strong>: 534,120,013</para>
		/// </summary>
		Status = 534_120_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: String</para>
		/// <para><strong>Value</strong>: 534,120,005</para>
		/// </summary>
		String = 534_120_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Uniqueidentifier</para>
		/// <para><strong>Value</strong>: 534,120,016</para>
		/// </summary>
		Uniqueidentifier = 534_120_016
	}
	public enum msdynmkt_DateTimeBehavior
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DateOnly</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		DateOnly = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: TimeZoneIndependent</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		TimeZoneIndependent = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: UserLocal</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		UserLocal = 534_120_002
	}
	public enum msdynmkt_SourceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO Business Event</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		CJO_Business_Event = 534_120_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO Custom Event</para>
		/// <para><strong>Value</strong>: 534,120,003</para>
		/// </summary>
		CJO_Custom_Event = 534_120_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO Interaction Event</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		CJO_Interaction_Event = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dataverse Table</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Dataverse_Table = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: External</para>
		/// <para><strong>Value</strong>: 534,120,005</para>
		/// </summary>
		External = 534_120_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Legal</para>
		/// <para><strong>Value</strong>: 534,120,004</para>
		/// </summary>
		Legal = 534_120_004
	}
	public enum msdynmkt_SourceVirtualTableType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Elastic</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Elastic = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		None = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		Other = 534_120_002
	}
	public enum msdynmkt_StringFormatType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Email = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Json</para>
		/// <para><strong>Value</strong>: 534,120,008</para>
		/// </summary>
		Json = 534_120_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone</para>
		/// <para><strong>Value</strong>: 534,120,007</para>
		/// </summary>
		Phone = 534_120_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: PhoneticGuide</para>
		/// <para><strong>Value</strong>: 534,120,005</para>
		/// </summary>
		PhoneticGuide = 534_120_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: RichText</para>
		/// <para><strong>Value</strong>: 534,120,009</para>
		/// </summary>
		RichText = 534_120_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: Text</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Text = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: TextArea</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		TextArea = 534_120_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: TickerSymbol</para>
		/// <para><strong>Value</strong>: 534,120,004</para>
		/// </summary>
		TickerSymbol = 534_120_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Url</para>
		/// <para><strong>Value</strong>: 534,120,003</para>
		/// </summary>
		Url = 534_120_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: VersionNumber</para>
		/// <para><strong>Value</strong>: 534,120,006</para>
		/// </summary>
		VersionNumber = 534_120_006
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_metadataitem : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_DataType = "msdynmkt_datatype";
			public const string msdynmkt_DateTimeBehavior = "msdynmkt_datetimebehavior";
			public const string msdynmkt_DisplayName = "msdynmkt_displayname";
			public const string msdynmkt_FullMetadataAsJSON = "msdynmkt_fullmetadataasjson";
			public const string msdynmkt_IconPath = "msdynmkt_iconpath";
			public const string msdynmkt_IsRequired = "msdynmkt_isrequired";
			public const string msdynmkt_IsSecured = "msdynmkt_issecured";
			public const string msdynmkt_LanguageCode = "msdynmkt_languagecode";
			public const string msdynmkt_LogicalName = "msdynmkt_logicalname";
			public const string msdynmkt_metadataitemId = "msdynmkt_metadataitemid";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_NativeId = "msdynmkt_nativeid";
			public const string msdynmkt_NavigationPathsAsJSON = "msdynmkt_navigationpathsasjson";
			public const string msdynmkt_ReferencedSourcesAsJSON = "msdynmkt_referencedsourcesasjson";
			public const string msdynmkt_SourceDisplayName = "msdynmkt_sourcedisplayname";
			public const string msdynmkt_SourceIsVirtual = "msdynmkt_sourceisvirtual";
			public const string msdynmkt_SourceLogicalName = "msdynmkt_sourcelogicalname";
			public const string msdynmkt_SourcePrimaryId = "msdynmkt_sourceprimaryid";
			public const string msdynmkt_SourceSetName = "msdynmkt_sourcesetname";
			public const string msdynmkt_SourceType = "msdynmkt_sourcetype";
			public const string msdynmkt_SourceVirtualTableType = "msdynmkt_sourcevirtualtabletype";
			public const string msdynmkt_StringFormatType = "msdynmkt_stringformattype";
			public const string msdynmkt_TargetAudience = "msdynmkt_targetaudienceasjson";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_metadataitem";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10811;
		public const string EntityCollectionSchemaName = "msdynmkt_metadataitems";
		public const string EntityDisplayCollectionName = "Metadata Items";
		public const string DisplayName = "Metadata Item";
		public const string EntitySetName = "msdynmkt_metadataitems";
		public const string EntityLogicalCollectionName = "msdynmkt_metadataitems";
		public const string EntityPrimaryIdAttribute = "msdynmkt_metadataitemid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_metadataitem";
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem(Guid msdynmkt_metadataitemId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_metadataitemId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_metadataitem"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_metadataitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_metadataitem(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_metadataitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_metadataitem(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_metadataitem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_DataType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_DataType? msdynmkt_DataType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_DataType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_DataType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_DataType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_DataType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Time Behavior</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_DateTimeBehavior"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_DateTimeBehavior? msdynmkt_DateTimeBehavior
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_DateTimeBehavior);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_DateTimeBehavior)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_DateTimeBehavior] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_DateTimeBehavior] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_DisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_DisplayName); }
			set { Entity.Attributes[Fields.msdynmkt_DisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Full Metadata As JSON</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_FullMetadataAsJSON
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_FullMetadataAsJSON); }
			set { Entity.Attributes[Fields.msdynmkt_FullMetadataAsJSON] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Icon Path</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_IconPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_IconPath); }
			set { Entity.Attributes[Fields.msdynmkt_IconPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Required</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_IsRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_IsRequired); }
			set { Entity.Attributes[Fields.msdynmkt_IsRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsSecured</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_IsSecured
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_IsSecured); }
			set { Entity.Attributes[Fields.msdynmkt_IsSecured] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language Code</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_LanguageCode); }
			set { Entity.Attributes[Fields.msdynmkt_LanguageCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Logical Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_LogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_LogicalName); }
			set { Entity.Attributes[Fields.msdynmkt_LogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metadata Item</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_metadataitemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_metadataitemId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Native Id</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_NativeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_NativeId); }
			set { Entity.Attributes[Fields.msdynmkt_NativeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Navigation Paths As JSON</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_NavigationPathsAsJSON
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_NavigationPathsAsJSON); }
			set { Entity.Attributes[Fields.msdynmkt_NavigationPathsAsJSON] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Referenced Sources As JSON</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_ReferencedSourcesAsJSON
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_ReferencedSourcesAsJSON); }
			set { Entity.Attributes[Fields.msdynmkt_ReferencedSourcesAsJSON] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Display Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_SourceDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_SourceDisplayName); }
			set { Entity.Attributes[Fields.msdynmkt_SourceDisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Is Virtual</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_SourceIsVirtual
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_SourceIsVirtual); }
			set { Entity.Attributes[Fields.msdynmkt_SourceIsVirtual] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Logical Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_SourceLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_SourceLogicalName); }
			set { Entity.Attributes[Fields.msdynmkt_SourceLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Primary Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_SourcePrimaryId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_SourcePrimaryId); }
			set { Entity.Attributes[Fields.msdynmkt_SourcePrimaryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Set Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_SourceSetName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_SourceSetName); }
			set { Entity.Attributes[Fields.msdynmkt_SourceSetName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_SourceType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_SourceType? msdynmkt_SourceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_SourceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_SourceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_SourceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_SourceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Virtual Table Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_SourceVirtualTableType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_SourceVirtualTableType? msdynmkt_SourceVirtualTableType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_SourceVirtualTableType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_SourceVirtualTableType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_SourceVirtualTableType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_SourceVirtualTableType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: String Format</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_StringFormatType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_StringFormatType? msdynmkt_StringFormatType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_StringFormatType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.msdynmkt_StringFormatType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_StringFormatType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_StringFormatType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Audience As JSON</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_TargetAudience
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_TargetAudience); }
			set { Entity.Attributes[Fields.msdynmkt_TargetAudience] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Metadata Item</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Metadata Item</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_metadataitemOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}