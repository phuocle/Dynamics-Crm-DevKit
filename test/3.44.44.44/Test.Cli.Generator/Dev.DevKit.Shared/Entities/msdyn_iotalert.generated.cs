//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets
{
	public enum msdyn_alerttype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Anomaly</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Anomaly = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Info</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Info = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preventive Maintenance</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Preventive_Maintenance = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Test</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Test = 192_350_003
	}
	public enum msdyn_suggestedpriority
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculating</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Calculating = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		High = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Low = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Suggestions</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		No_Suggestions = 192_350_003
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Closed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		InProgress = 2
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Closed</strong></para>
		/// </summary>
		Closed = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress - Case Created</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		In_Progress_Case_Created = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress - Command Failed</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		In_Progress_Command_Failed = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress - Command Sent</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		In_Progress_Command_Sent = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress - Work Order Created</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		In_Progress_Work_Order_Created = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_iotalert : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AlertData = "msdyn_alertdata";
			public const string msdyn_alertpriorityscore = "msdyn_alertpriorityscore";
			public const string msdyn_AlertTime = "msdyn_alerttime";
			public const string msdyn_AlertToken = "msdyn_alerttoken";
			public const string msdyn_alerttype = "msdyn_alerttype";
			public const string msdyn_AlertURL = "msdyn_alerturl";
			public const string msdyn_case = "msdyn_case";
			public const string msdyn_CustomerAsset = "msdyn_customerasset";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_Device = "msdyn_device";
			public const string msdyn_DeviceID = "msdyn_deviceid";
			public const string msdyn_iotalertId = "msdyn_iotalertid";
			public const string msdyn_LastCommandSent = "msdyn_lastcommandsent";
			public const string msdyn_LastCommandSentTime = "msdyn_lastcommandsenttime";
			public const string msdyn_ParentAlert = "msdyn_parentalert";
			public const string msdyn_ParentAlertToken = "msdyn_parentalerttoken";
			public const string msdyn_suggestedincidenttype = "msdyn_suggestedincidenttype";
			public const string msdyn_suggestedpriority = "msdyn_suggestedpriority";
			public const string msdyn_Workorder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_iotalert";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10402;
		public const string EntityCollectionSchemaName = "msdyn_iotalerts";
		public const string EntityDisplayCollectionName = "IoT Alerts";
		public const string DisplayName = "IoT Alert";
		public const string EntitySetName = "msdyn_iotalerts";
		public const string EntityLogicalCollectionName = "msdyn_iotalerts";
		public const string EntityPrimaryIdAttribute = "msdyn_iotalertid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_description";
		public const string EntitySchemaName = "msdyn_iotalert";
		[DebuggerNonUserCode()]
		public msdyn_iotalert()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_iotalert(Guid msdyn_iotalertId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_iotalertId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_iotalert(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_iotalert"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_iotalert(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_iotalert"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_iotalert(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_iotalert(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_iotalert"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_iotalert(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_iotalert(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_iotalert(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert Data</para>
		/// <para><strong>Description</strong>: Data sent from the device about the alert.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AlertData
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AlertData); }
			set { Entity.Attributes[Fields.msdyn_AlertData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority Score (%)</para>
		/// <para><strong>Description</strong>: The suggested priority score for this alert.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_alertpriorityscore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_alertpriorityscore); }
			set { Entity.Attributes[Fields.msdyn_alertpriorityscore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert Time</para>
		/// <para><strong>Description</strong>: The time the alert was issued.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AlertTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AlertTime); }
			set { Entity.Attributes[Fields.msdyn_AlertTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert Token</para>
		/// <para><strong>Description</strong>: The unique reference to the event id on the IoT provider.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AlertToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AlertToken); }
			set { Entity.Attributes[Fields.msdyn_AlertToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_alerttype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_alerttype.Anomaly"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_alerttype? msdyn_alerttype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_alerttype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_alerttype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_alerttype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_alerttype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert URL</para>
		/// <para><strong>Description</strong>: External URL to view more information about the iot alert.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AlertURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AlertURL); }
			set { Entity.Attributes[Fields.msdyn_AlertURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case</para>
		/// <para><strong>Description</strong>: Case created for this iot alert.</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_case
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_case); }
			set { Entity.Attributes[Fields.msdyn_case] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Asset</para>
		/// <para><strong>Description</strong>: The asset connected to the IoT device that raised the alert.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_customerasset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_CustomerAsset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: A description for the alert.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IoT Device</para>
		/// <para><strong>Description</strong>: The IoT device for which this alert was raised.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_iotdevice"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Device
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Device); }
			set { Entity.Attributes[Fields.msdyn_Device] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Device ID</para>
		/// <para><strong>Description</strong>: The ID of the IoT device that sent the alert.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_DeviceID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_DeviceID); }
			set { Entity.Attributes[Fields.msdyn_DeviceID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IoT Alert</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_iotalertId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_iotalertId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Command Sent</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_iotdevicecommand"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LastCommandSent
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LastCommandSent); }
			set { Entity.Attributes[Fields.msdyn_LastCommandSent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Command Sent Time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastCommandSentTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastCommandSentTime); }
			set { Entity.Attributes[Fields.msdyn_LastCommandSentTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Alert</para>
		/// <para><strong>Description</strong>: Reference to a primary alert. This field is inferred if Primary Alert Token is set.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_iotalert"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ParentAlert
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ParentAlert); }
			set { Entity.Attributes[Fields.msdyn_ParentAlert] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Alert Token</para>
		/// <para><strong>Description</strong>: Reference to a previously created primary iot alert</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ParentAlertToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ParentAlertToken); }
			set { Entity.Attributes[Fields.msdyn_ParentAlertToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type</para>
		/// <para><strong>Description</strong>: The suggested incident type for this alert</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_suggestedincidenttype
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_suggestedincidenttype); }
			set { Entity.Attributes[Fields.msdyn_suggestedincidenttype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggested Priority</para>
		/// <para><strong>Description</strong>: The suggested priority for this alert.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_suggestedpriority"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_suggestedpriority? msdyn_suggestedpriority
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_suggestedpriority);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.msdyn_suggestedpriority)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_suggestedpriority] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_suggestedpriority] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order</para>
		/// <para><strong>Description</strong>: Work order created for this iot alert.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Workorder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Workorder); }
			set { Entity.Attributes[Fields.msdyn_Workorder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the IoT Alert</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert Status</para>
		/// <para><strong>Description</strong>: Reason for the status of the IoT Alert</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_iotalertOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}