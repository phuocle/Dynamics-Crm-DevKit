//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets
{
	public enum msdyncrm_contenttype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Company background</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Company_background = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmation request</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Confirmation_request = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Event information</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Event_information = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Offers and discounts</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Offers_and_discounts = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product information</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Product_information = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product launch</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Product_launch = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Structural</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Structural = 0
	}
	public enum msdyncrm_lastpublishstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Error = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Success</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Success = 1
	}
	public enum msdyncrm_markettype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: All</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		All = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Consumer</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Consumer = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enterprise</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Enterprise = 0
	}
	public enum msdyncrm_optimizedfor
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Desktop</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Desktop = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mobile = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tablet</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Tablet = 1
	}
	public enum msdyncrm_purpose
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Collateral download</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Collateral_download = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact capture</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Contact_capture = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Double Opt-In, Email based confirmation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Double_Opt_In_Email_based_confirmation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Event feedback</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Event_feedback = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Event_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead generation</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lead_generation = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Newsletter subscription</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Newsletter_subscription = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Structural</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Structural = 6
	}
	public enum msdyncrm_type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Event_registration = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Forward to a friend</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Forward_to_a_friend = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Landing page</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Landing_page = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription center</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Subscription_center = 1
	}
	public enum msdyncrm_visualstyle
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Colorful</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Colorful = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dark</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dark = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Light</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Light = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Other = 3
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Error = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Expired = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Going_live = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live, editable</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live_editable = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopped = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping...</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopping = 192_350_007
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_marketingpage : EntityBase
	{
		public struct Fields
		{
			public const string adx_pagetemplateid = "adx_pagetemplateid";
			public const string adx_parentwebpageid = "adx_parentwebpageid";
			public const string adx_webpageid = "adx_webpageid";
			public const string adx_websiteid = "adx_websiteid";
			public const string adx_websitelanguageid = "adx_websitelanguageid";
			public const string adx_webtemplateid = "adx_webtemplateid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_alloweddomains = "msdyncrm_alloweddomains";
			public const string msdyncrm_Content = "msdyncrm_content";
			public const string msdyncrm_contenttype = "msdyncrm_contenttype";
			public const string msdyncrm_forceportalless = "msdyncrm_forceportalless";
			public const string msdyncrm_formpagemapping = "msdyncrm_formpagemapping";
			public const string msdyncrm_formtosave = "msdyncrm_formtosave";
			public const string msdyncrm_full_page_url = "msdyncrm_full_page_url";
			public const string msdyncrm_full_page_urls = "msdyncrm_full_page_urls";
			public const string msdyncrm_iamlive = "msdyncrm_iamlive";
			public const string msdyncrm_insights_placeholder = "msdyncrm_insights_placeholder";
			public const string msdyncrm_lastgoinglivedate = "msdyncrm_lastgoinglivedate";
			public const string msdyncrm_lastpublisheddate = "msdyncrm_lastpublisheddate";
			public const string msdyncrm_lastpublishstate = "msdyncrm_lastpublishstate";
			public const string msdyncrm_lastunpublisheddate = "msdyncrm_lastunpublisheddate";
			public const string msdyncrm_marketingpageId = "msdyncrm_marketingpageid";
			public const string msdyncrm_marketingpagetemplate = "msdyncrm_marketingpagetemplate";
			public const string msdyncrm_marketingprovided = "msdyncrm_marketingprovided";
			public const string msdyncrm_marketingwebsite = "msdyncrm_marketingwebsite";
			public const string msdyncrm_markettype = "msdyncrm_markettype";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_optimizedfor = "msdyncrm_optimizedfor";
			public const string msdyncrm_partialurl = "msdyncrm_partialurl";
			public const string msdyncrm_purpose = "msdyncrm_purpose";
			public const string msdyncrm_remote_websiteid = "msdyncrm_remote_websiteid";
			public const string msdyncrm_type = "msdyncrm_type";
			public const string msdyncrm_visualstyle = "msdyncrm_visualstyle";
			public const string msdyncrm_websitefilter_placeholder = "msdyncrm_websitefilter_placeholder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_marketingpage";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11170;
		public const string EntityCollectionSchemaName = "msdyncrm_marketingpages";
		public const string EntityDisplayCollectionName = "Marketing pages";
		public const string DisplayName = "Marketing page";
		public const string EntitySetName = "msdyncrm_marketingpages";
		public const string EntityLogicalCollectionName = "msdyncrm_marketingpages";
		public const string EntityPrimaryIdAttribute = "msdyncrm_marketingpageid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_marketingpage";
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage(Guid msdyncrm_marketingpageId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_marketingpageId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingpage"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingpage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingpage(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingpage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingpage(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_pagetemplateid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_pagetemplateid); }
			set { Entity.Attributes[Fields.adx_pagetemplateid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_parentwebpageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_parentwebpageid); }
			set { Entity.Attributes[Fields.adx_parentwebpageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_webpageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_webpageid); }
			set { Entity.Attributes[Fields.adx_webpageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_websiteid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_websiteid); }
			set { Entity.Attributes[Fields.adx_websiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_websitelanguageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_websitelanguageid); }
			set { Entity.Attributes[Fields.adx_websitelanguageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_webtemplateid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_webtemplateid); }
			set { Entity.Attributes[Fields.adx_webtemplateid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Known domains</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_alloweddomains
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_alloweddomains); }
			set { Entity.Attributes[Fields.msdyncrm_alloweddomains] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Content); }
			set { Entity.Attributes[Fields.msdyncrm_Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_contenttype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_contenttype? msdyncrm_contenttype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_contenttype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_contenttype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_contenttype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_contenttype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Force portal-less</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_forceportalless
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_forceportalless); }
			set { Entity.Attributes[Fields.msdyncrm_forceportalless] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form page mapping</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_formpagemapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_formpagemapping); }
			set { Entity.Attributes[Fields.msdyncrm_formpagemapping] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form to save</para>
		/// <para><strong>Description</strong>: Form to save</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_formtosave
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_formtosave); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Full page URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_full_page_url
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_full_page_url); }
			set { Entity.Attributes[Fields.msdyncrm_full_page_url] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Full page urls</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_full_page_urls
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_full_page_urls); }
			set { Entity.Attributes[Fields.msdyncrm_full_page_urls] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: flag to check that the page is live</para>
		/// <para><strong>Description</strong>: flag to check that the page is live</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_iamlive
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_iamlive); }
			set { Entity.Attributes[Fields.msdyncrm_iamlive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_insights_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_insights_placeholder); }
			set { Entity.Attributes[Fields.msdyncrm_insights_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last going live date</para>
		/// <para><strong>Description</strong>: Date and time when the marketing page last tried going live</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_lastgoinglivedateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_lastgoinglivedate); }
			set { Entity.Attributes[Fields.msdyncrm_lastgoinglivedate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last published date</para>
		/// <para><strong>Description</strong>: Date and time when the marketing page was last published</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_lastpublisheddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_lastpublisheddate); }
			set { Entity.Attributes[Fields.msdyncrm_lastpublisheddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last published state</para>
		/// <para><strong>Description</strong>: State of last going live attempt</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_lastpublishstate"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_lastpublishstate? msdyncrm_lastpublishstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_lastpublishstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_lastpublishstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_lastpublishstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_lastpublishstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last unpublished date</para>
		/// <para><strong>Description</strong>: Date and time when the marketing page was last unpublished</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_lastunpublisheddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_lastunpublisheddate); }
			set { Entity.Attributes[Fields.msdyncrm_lastunpublisheddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing page</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_marketingpageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_marketingpageId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing page template</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpagetemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingpagetemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingpagetemplate); }
			set { Entity.Attributes[Fields.msdyncrm_marketingpagetemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Provided</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_marketingprovided
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_marketingprovided); }
			set { Entity.Attributes[Fields.msdyncrm_marketingprovided] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing website</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingwebsite
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingwebsite); }
			set { Entity.Attributes[Fields.msdyncrm_marketingwebsite] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Market type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_markettype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_markettype? msdyncrm_markettype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_markettype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_markettype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_markettype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_markettype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the marketing page</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Optimized for</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_optimizedfor"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_optimizedfor? msdyncrm_optimizedfor
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_optimizedfor);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_optimizedfor)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_optimizedfor] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_optimizedfor] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partial URL</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_partialurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_partialurl); }
			set { Entity.Attributes[Fields.msdyncrm_partialurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purpose</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_purpose"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_purpose? msdyncrm_purpose
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_purpose);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_purpose)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_purpose] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_purpose] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Remote website ID</para>
		/// <para><strong>Description</strong>: Unique ID for remote entity instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_remote_websiteid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_remote_websiteid); }
			set { Entity.Attributes[Fields.msdyncrm_remote_websiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_type? msdyncrm_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visual style</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_visualstyle"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_visualstyle? msdyncrm_visualstyle
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_visualstyle);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.msdyncrm_visualstyle)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_visualstyle] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_visualstyle] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_websitefilter_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_websitefilter_placeholder); }
			set { Entity.Attributes[Fields.msdyncrm_websitefilter_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the marketing page</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Marketing page status reason</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: Time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}