//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_copilotemailenabledmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: default</para>
		/// <para><strong>Value</strong>: 133,230,002</para>
		/// </summary>
		_default = 133_230_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: manual</para>
		/// <para><strong>Value</strong>: 133,230,001</para>
		/// </summary>
		manual = 133_230_001
	}
	public enum msdyn_lasttrainingstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,230,102</para>
		/// </summary>
		Completed = 100_230_102,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 100,230,103</para>
		/// </summary>
		Failed = 100_230_103,
		/// <summary>
		/// <para><strong>Display Name</strong>: Initiated</para>
		/// <para><strong>Value</strong>: 100,230,101</para>
		/// </summary>
		Initiated = 100_230_101,
		/// <summary>
		/// <para><strong>Display Name</strong>: InvalidKBFilters</para>
		/// <para><strong>Value</strong>: 100,230,104</para>
		/// </summary>
		InvalidKBFilters = 100_230_104,
		/// <summary>
		/// <para><strong>Display Name</strong>: NoKBArticles</para>
		/// <para><strong>Value</strong>: 100,230,105</para>
		/// </summary>
		NoKBArticles = 100_230_105
	}
	public enum msdyn_systemstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Configuring</para>
		/// <para><strong>Value</strong>: 100,230,002</para>
		/// </summary>
		Configuring = 100_230_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabling</para>
		/// <para><strong>Value</strong>: 100,230,004</para>
		/// </summary>
		Disabling = 100_230_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: FailureConfiguring</para>
		/// <para><strong>Value</strong>: 100,230,005</para>
		/// </summary>
		FailureConfiguring = 100_230_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 100,230,001</para>
		/// </summary>
		New = 100_230_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready</para>
		/// <para><strong>Value</strong>: 100,230,003</para>
		/// </summary>
		Ready = 100_230_003
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_agentcopilotsetting : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentassistenabled = "msdyn_agentassistenabled";
			public const string msdyn_agentassistkbfilter = "msdyn_agentassistkbfilter";
			public const string msdyn_agentassistkbfilterlive = "msdyn_agentassistkbfilterlive";
			public const string msdyn_agentassisturl = "msdyn_agentassisturl";
			public const string msdyn_agentcopilotsettingId = "msdyn_agentcopilotsettingid";
			public const string msdyn_agentlist = "msdyn_agentlist";
			public const string msdyn_allagentsenabled = "msdyn_allagentsenabled";
			public const string msdyn_allowcrossgeo = "msdyn_allowcrossgeo";
			public const string msdyn_allowtranslation = "msdyn_allowtranslation";
			public const string msdyn_allworkstreamsenabled = "msdyn_allworkstreamsenabled";
			public const string msdyn_answerassistenabled = "msdyn_answerassistenabled";
			public const string msdyn_answerassistkbfilter = "msdyn_answerassistkbfilter";
			public const string msdyn_answerassistkbfilterlive = "msdyn_answerassistkbfilterlive";
			public const string msdyn_answerassisturl = "msdyn_answerassisturl";
			public const string msdyn_autocaseclosureenabled = "msdyn_autocaseclosureenabled";
			public const string msdyn_autocaseclosuresettings = "msdyn_autocaseclosuresettings";
			public const string msdyn_casetocaseresolutionmanualflowenabled = "msdyn_casetocaseresolutionmanualflowenabled";
			public const string msdyn_companyscopeurls = "msdyn_companyscopeurls";
			public const string msdyn_consentacceptanceby = "msdyn_consentacceptanceby";
			public const string msdyn_consentacceptedon = "msdyn_consentacceptedon";
			public const string msdyn_conversationtocaseautonomousflowenabled = "msdyn_conversationtocaseautonomousflowenabled";
			public const string msdyn_conversationtocasemanualflowenabled = "msdyn_conversationtocasemanualflowenabled";
			public const string msdyn_copilotcustomconfiguration = "msdyn_copilotcustomconfiguration";
			public const string msdyn_copilotemailenabledmode = "msdyn_copilotemailenabledmode";
			public const string msdyn_copilotembedsettings = "msdyn_copilotembedsettings";
			public const string msdyn_copilotenabled = "msdyn_copilotenabled";
			public const string msdyn_displayname = "msdyn_displayname";
			public const string msdyn_dvcopilotstatus = "msdyn_dvcopilotstatus";
			public const string msdyn_dynamicfilterconfig = "msdyn_dynamicfilterconfig";
			public const string msdyn_dynamicfilterconfiglive = "msdyn_dynamicfilterconfiglive";
			public const string msdyn_emailassistconfiguration = "msdyn_emailassistconfiguration";
			public const string msdyn_emailassistenabled = "msdyn_emailassistenabled";
			public const string msdyn_emailassistkbfilter = "msdyn_emailassistkbfilter";
			public const string msdyn_emailassistkbfilterlive = "msdyn_emailassistkbfilterlive";
			public const string msdyn_emailassisturl = "msdyn_emailassisturl";
			public const string msdyn_emailsentimentenabled = "msdyn_emailsentimentenabled";
			public const string msdyn_interactionsenabled = "msdyn_interactionsenabled";
			public const string msdyn_isdeterministicknowledgeenabled = "msdyn_isdeterministicknowledgeenabled";
			public const string msdyn_isdvcopilotenabled = "msdyn_isdvcopilotenabled";
			public const string msdyn_isemaildefaultonenabledone = "msdyn_isemaildefaultonenabledone";
			public const string msdyn_isknowledgehubconnectorsourceenabled = "msdyn_isknowledgehubconnectorsourceenabled";
			public const string msdyn_kbenabled = "msdyn_kbenabled";
			public const string msdyn_kbfilterallowagentedit = "msdyn_kbfilterallowagentedit";
			public const string msdyn_kbfilterforpersonalization = "msdyn_kbfilterforpersonalization";
			public const string msdyn_kbfilterforpersonalizationlive = "msdyn_kbfilterforpersonalizationlive";
			public const string msdyn_knowledgearticlecountlive = "msdyn_knowledgearticlecountlive";
			public const string msdyn_knowledgearticlesourceenabled = "msdyn_knowledgearticlesourceenabled";
			public const string msdyn_knowledgeconnectorpublishstatus = "msdyn_knowledgeconnectorpublishstatus";
			public const string msdyn_lasttrainingstatus = "msdyn_lasttrainingstatus";
			public const string msdyn_lasttrainingtime = "msdyn_lasttrainingtime";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_pluginconfiguration = "msdyn_pluginconfiguration";
			public const string msdyn_proactivepromptsenabled = "msdyn_proactivepromptsenabled";
			public const string msdyn_searchconfiguration = "msdyn_searchconfiguration";
			public const string msdyn_sharepointsourceenabled = "msdyn_sharepointsourceenabled";
			public const string msdyn_suggestedpromptsenabled = "msdyn_suggestedpromptsenabled";
			public const string msdyn_systemstatus = "msdyn_systemstatus";
			public const string msdyn_transcriptenabled = "msdyn_transcriptenabled";
			public const string msdyn_uniquekey = "msdyn_uniquekey";
			public const string msdyn_useagentlanguage = "msdyn_useagentlanguage";
			public const string msdyn_workstreamlist = "msdyn_workstreamlist";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_agentcopilotsetting";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10867;
		public const string EntityCollectionSchemaName = "msdyn_agentcopilotsettings";
		public const string EntityDisplayCollectionName = "Agent Copilot Settings";
		public const string DisplayName = "Agent Copilot Setting";
		public const string EntitySetName = "msdyn_agentcopilotsettings";
		public const string EntityLogicalCollectionName = "msdyn_agentcopilotsettings";
		public const string EntityPrimaryIdAttribute = "msdyn_agentcopilotsettingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_agentcopilotsetting";
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting(Guid msdyn_agentcopilotsettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_agentcopilotsettingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_agentcopilotsetting"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_agentcopilotsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_agentcopilotsetting(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_agentcopilotsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_agentcopilotsetting(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_agentcopilotsetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Assist Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agentassistenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agentassistenabled); }
			set { Entity.Attributes[Fields.msdyn_agentassistenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Assist KB Filter</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_agentassistkbfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_agentassistkbfilter); }
			set { Entity.Attributes[Fields.msdyn_agentassistkbfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Assist KB Filter Live</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_agentassistkbfilterlive
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_agentassistkbfilterlive); }
			set { Entity.Attributes[Fields.msdyn_agentassistkbfilterlive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Assist Url</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_agentassisturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_agentassisturl); }
			set { Entity.Attributes[Fields.msdyn_agentassisturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Copilot Setting</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_agentcopilotsettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_agentcopilotsettingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Agent List</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_agentlist
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_agentlist); }
			set { Entity.Attributes[Fields.msdyn_agentlist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) All Agents Enabled</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_allagentsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_allagentsenabled); }
			set { Entity.Attributes[Fields.msdyn_allagentsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable For Cross Geo</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_allowcrossgeo
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_allowcrossgeo); }
			set { Entity.Attributes[Fields.msdyn_allowcrossgeo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow agents to translate summaries</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_allowtranslation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_allowtranslation); }
			set { Entity.Attributes[Fields.msdyn_allowtranslation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) All Workstreams Enabled</para>
		/// <para><strong>Description</strong>: (Deprecated) Applies only to Omnichannel features</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_allworkstreamsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_allworkstreamsenabled); }
			set { Entity.Attributes[Fields.msdyn_allworkstreamsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Answer Assist Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_answerassistenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_answerassistenabled); }
			set { Entity.Attributes[Fields.msdyn_answerassistenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Answer Assist KB Filter</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_answerassistkbfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_answerassistkbfilter); }
			set { Entity.Attributes[Fields.msdyn_answerassistkbfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Answer Assist KB Filter Live</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_answerassistkbfilterlive
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_answerassistkbfilterlive); }
			set { Entity.Attributes[Fields.msdyn_answerassistkbfilterlive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Answer Assist Url</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_answerassisturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_answerassisturl); }
			set { Entity.Attributes[Fields.msdyn_answerassisturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Indicates whether case follow-up and closure is turned on or off</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_autocaseclosureenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_autocaseclosureenabled); }
			set { Entity.Attributes[Fields.msdyn_autocaseclosureenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Indicates settings related to auto case closure and follow up</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_autocaseclosuresettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_autocaseclosuresettings); }
			set { Entity.Attributes[Fields.msdyn_autocaseclosuresettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allows Case to Case resolution manual creation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_casetocaseresolutionmanualflowenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_casetocaseresolutionmanualflowenabled); }
			set { Entity.Attributes[Fields.msdyn_casetocaseresolutionmanualflowenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company Scope Urls</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_companyscopeurls
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_companyscopeurls); }
			set { Entity.Attributes[Fields.msdyn_companyscopeurls] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent Acceptance By</para>
		/// <para><strong>Description</strong>: The date before when the admin should have consented</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_consentacceptancebyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_consentacceptanceby); }
			set { Entity.Attributes[Fields.msdyn_consentacceptanceby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent Accepted On</para>
		/// <para><strong>Description</strong>: The date when the admin has most recently consented</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_consentacceptedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_consentacceptedon); }
			set { Entity.Attributes[Fields.msdyn_consentacceptedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allows Conversation to Case autonomous creation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_conversationtocaseautonomousflowenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_conversationtocaseautonomousflowenabled); }
			set { Entity.Attributes[Fields.msdyn_conversationtocaseautonomousflowenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allows Conversation to Case manual creation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_conversationtocasemanualflowenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_conversationtocasemanualflowenabled); }
			set { Entity.Attributes[Fields.msdyn_conversationtocasemanualflowenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Configuration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_copilotcustomconfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_copilotcustomconfiguration); }
			set { Entity.Attributes[Fields.msdyn_copilotcustomconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_copilotemailenabledmode</para>
		/// <para><strong>Description</strong>: Indicates the mode of enablement for email assist.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_copilotemailenabledmode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_copilotemailenabledmode? msdyn_copilotemailenabledmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_copilotemailenabledmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_copilotemailenabledmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_copilotemailenabledmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_copilotemailenabledmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Embed Settings</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_copilotembedsettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_copilotembedsettings); }
			set { Entity.Attributes[Fields.msdyn_copilotembedsettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_copilotenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_copilotenabled); }
			set { Entity.Attributes[Fields.msdyn_copilotenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Name</para>
		/// <para><strong>Description</strong>: The display name of the custom entity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_displayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_displayname); }
			set { Entity.Attributes[Fields.msdyn_displayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dataverse Copilot Status</para>
		/// <para><strong>Description</strong>: Stores the status of the workflow that enables Dataverse Copilot</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_dvcopilotstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_dvcopilotstatus); }
			set { Entity.Attributes[Fields.msdyn_dvcopilotstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamic Filter Configuration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_dynamicfilterconfig
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_dynamicfilterconfig); }
			set { Entity.Attributes[Fields.msdyn_dynamicfilterconfig] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamic Filter Configuration Live</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_dynamicfilterconfiglive
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_dynamicfilterconfiglive); }
			set { Entity.Attributes[Fields.msdyn_dynamicfilterconfiglive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Assist Configuration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_emailassistconfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_emailassistconfiguration); }
			set { Entity.Attributes[Fields.msdyn_emailassistconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Assist Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_emailassistenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_emailassistenabled); }
			set { Entity.Attributes[Fields.msdyn_emailassistenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Assist KB Filter</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_emailassistkbfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_emailassistkbfilter); }
			set { Entity.Attributes[Fields.msdyn_emailassistkbfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Assist KB Filter Live</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_emailassistkbfilterlive
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_emailassistkbfilterlive); }
			set { Entity.Attributes[Fields.msdyn_emailassistkbfilterlive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Assist Url</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_emailassisturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_emailassisturl); }
			set { Entity.Attributes[Fields.msdyn_emailassisturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agents can choose to select view sentiment of the email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_emailsentimentenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_emailsentimentenabled); }
			set { Entity.Attributes[Fields.msdyn_emailsentimentenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interactions Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_interactionsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_interactionsenabled); }
			set { Entity.Attributes[Fields.msdyn_interactionsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Deterministic Knowledge Enabled</para>
		/// <para><strong>Description</strong>: Whether Deterministic Knowledge is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdeterministicknowledgeenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdeterministicknowledgeenabled); }
			set { Entity.Attributes[Fields.msdyn_isdeterministicknowledgeenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Dataverse Copilot Enabled</para>
		/// <para><strong>Description</strong>: Whether Dataverse Copilot is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdvcopilotenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdvcopilotenabled); }
			set { Entity.Attributes[Fields.msdyn_isdvcopilotenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Indicates whether email default enablement was executed</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isemaildefaultonenabledone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isemaildefaultonenabledone); }
			set { Entity.Attributes[Fields.msdyn_isemaildefaultonenabledone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Hub Connector Source Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isknowledgehubconnectorsourceenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isknowledgehubconnectorsourceenabled); }
			set { Entity.Attributes[Fields.msdyn_isknowledgehubconnectorsourceenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) KB Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_kbenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_kbenabled); }
			set { Entity.Attributes[Fields.msdyn_kbenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Agent Edit KB filters</para>
		/// <para><strong>Description</strong>: Determines whether or not agents have the ability to edit their KB filters</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_kbfilterallowagentedit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_kbfilterallowagentedit); }
			set { Entity.Attributes[Fields.msdyn_kbfilterallowagentedit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KB Filter For Personalization</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_kbfilterforpersonalization
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_kbfilterforpersonalization); }
			set { Entity.Attributes[Fields.msdyn_kbfilterforpersonalization] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KB Filter For Personalization Live</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_kbfilterforpersonalizationlive
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_kbfilterforpersonalizationlive); }
			set { Entity.Attributes[Fields.msdyn_kbfilterforpersonalizationlive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Article Count Live</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_knowledgearticlecountlive
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_knowledgearticlecountlive); }
			set { Entity.Attributes[Fields.msdyn_knowledgearticlecountlive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Article Source Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_knowledgearticlesourceenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_knowledgearticlesourceenabled); }
			set { Entity.Attributes[Fields.msdyn_knowledgearticlesourceenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge connector publish status</para>
		/// <para><strong>Description</strong>: Used to store information about the knowledge connectors publish status</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_knowledgeconnectorpublishstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_knowledgeconnectorpublishstatus); }
			set { Entity.Attributes[Fields.msdyn_knowledgeconnectorpublishstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Training Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_lasttrainingstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_lasttrainingstatus? msdyn_lasttrainingstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_lasttrainingstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_lasttrainingstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_lasttrainingstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_lasttrainingstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Training Time</para>
		/// <para><strong>Description</strong>: The date when the last training completed successfully</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lasttrainingtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lasttrainingtime); }
			set { Entity.Attributes[Fields.msdyn_lasttrainingtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plugin Configuration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_pluginconfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_pluginconfiguration); }
			set { Entity.Attributes[Fields.msdyn_pluginconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Proactive Prompts Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_proactivepromptsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_proactivepromptsenabled); }
			set { Entity.Attributes[Fields.msdyn_proactivepromptsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Search Configuration</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_searchconfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_searchconfiguration); }
			set { Entity.Attributes[Fields.msdyn_searchconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SharePoint Source Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_sharepointsourceenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_sharepointsourceenabled); }
			set { Entity.Attributes[Fields.msdyn_sharepointsourceenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggested Prompts Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_suggestedpromptsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_suggestedpromptsenabled); }
			set { Entity.Attributes[Fields.msdyn_suggestedpromptsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: System Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_systemstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_systemstatus.New"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_systemstatus? msdyn_systemstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_systemstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.msdyn_systemstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_systemstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_systemstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transcript Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_transcriptenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_transcriptenabled); }
			set { Entity.Attributes[Fields.msdyn_transcriptenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Unique Key</para>
		/// <para><strong>Description</strong>: (Deprecated) A unique key identifier.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_uniquekey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_uniquekey); }
			set { Entity.Attributes[Fields.msdyn_uniquekey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use Agent Language Enabled</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_useagentlanguage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_useagentlanguage); }
			set { Entity.Attributes[Fields.msdyn_useagentlanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Workstream List</para>
		/// <para><strong>Description</strong>: (Deprecated) Applies only to Omnichannel features</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_workstreamlist
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_workstreamlist); }
			set { Entity.Attributes[Fields.msdyn_workstreamlist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Agent Copilot Setting</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Agent Copilot Setting</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_agentcopilotsettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}