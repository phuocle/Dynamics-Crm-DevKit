//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets
{
	public enum msdynmkt_applicationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Production</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Production = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sandbox</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Sandbox = 1
	}
	public enum msdynmkt_authenticationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Certificate = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Token</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Token = 1
	}
	public enum msdynmkt_fcmauthenticationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Api Key</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Api_Key = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account Json</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Service_Account_Json = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_mobileappchannelinstance : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_apikey = "msdynmkt_apikey";
			public const string msdynmkt_apitoken = "msdynmkt_apitoken";
			public const string msdynmkt_applicationmode = "msdynmkt_applicationmode";
			public const string msdynmkt_authenticationmode = "msdynmkt_authenticationmode";
			public const string msdynmkt_bundleid = "msdynmkt_bundleid";
			public const string msdynmkt_certificate1 = "msdynmkt_certificate1";
			public const string msdynmkt_certificate2 = "msdynmkt_certificate2";
			public const string msdynmkt_certificate3 = "msdynmkt_certificate3";
			public const string msdynmkt_certificate4 = "msdynmkt_certificate4";
			public const string msdynmkt_certificate5 = "msdynmkt_certificate5";
			public const string msdynmkt_certificatename = "msdynmkt_certificatename";
			public const string msdynmkt_description = "msdynmkt_description";
			public const string msdynmkt_fcmauthenticationmode = "msdynmkt_fcmauthenticationmode";
			public const string msdynmkt_keyid = "msdynmkt_keyid";
			public const string msdynmkt_mobileappchannelinstanceId = "msdynmkt_mobileappchannelinstanceid";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_password = "msdynmkt_password";
			public const string msdynmkt_serviceaccountjson1 = "msdynmkt_serviceaccountjson1";
			public const string msdynmkt_serviceaccountjson2 = "msdynmkt_serviceaccountjson2";
			public const string msdynmkt_serviceaccountjson3 = "msdynmkt_serviceaccountjson3";
			public const string msdynmkt_serviceaccountjson4 = "msdynmkt_serviceaccountjson4";
			public const string msdynmkt_serviceaccountjson5 = "msdynmkt_serviceaccountjson5";
			public const string msdynmkt_serviceaccountjsonname = "msdynmkt_serviceaccountjsonname";
			public const string msdynmkt_signingkey = "msdynmkt_signingkey";
			public const string msdynmkt_teamid = "msdynmkt_teamid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_mobileappchannelinstance";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11329;
		public const string EntityCollectionSchemaName = "msdynmkt_mobileappchannelinstances";
		public const string EntityDisplayCollectionName = "Mobile app channel instances";
		public const string DisplayName = "Mobile app channel instance";
		public const string EntitySetName = "msdynmkt_mobileappchannelinstances";
		public const string EntityLogicalCollectionName = "msdynmkt_mobileappchannelinstances";
		public const string EntityPrimaryIdAttribute = "msdynmkt_mobileappchannelinstanceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_mobileappchannelinstance";
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance(Guid msdynmkt_mobileappchannelinstanceId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_mobileappchannelinstanceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileappchannelinstance"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileappchannelinstance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_mobileappchannelinstance(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileappchannelinstance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_mobileappchannelinstance(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileappchannelinstance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API Key</para>
		/// <para><strong>Description</strong>: Unique identifier for API Key associated with FCM mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_apikey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_apikey); }
			set { Entity.Attributes[Fields.msdynmkt_apikey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API token</para>
		/// <para><strong>Description</strong>: Unique identifier for API token associated with mobile app channel instances.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_apitoken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_apitoken); }
			set { Entity.Attributes[Fields.msdynmkt_apitoken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application mode</para>
		/// <para><strong>Description</strong>: Unique identifier for Application mode associated with Apns mobile app instances</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_applicationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_applicationmode.Production"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_applicationmode? msdynmkt_applicationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_applicationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_applicationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_applicationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_applicationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication mode</para>
		/// <para><strong>Description</strong>: Unique identifier for Authentication mode associated with Apns mobile app instances</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_authenticationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_authenticationmode.Certificate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_authenticationmode? msdynmkt_authenticationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_authenticationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_authenticationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_authenticationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_authenticationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bundle Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Bundle Id associated with Apns Token-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_bundleid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_bundleid); }
			set { Entity.Attributes[Fields.msdynmkt_bundleid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 1</para>
		/// <para><strong>Description</strong>: Unique identifier for Certificate1 associated with Apns Cert-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate1); }
			set { Entity.Attributes[Fields.msdynmkt_certificate1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 2</para>
		/// <para><strong>Description</strong>: Unique identifier for Certificate2 associated with Apns Apns Cert-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate2); }
			set { Entity.Attributes[Fields.msdynmkt_certificate2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdynmkt_certificate3</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate3); }
			set { Entity.Attributes[Fields.msdynmkt_certificate3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdynmkt_certificate4</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate4
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate4); }
			set { Entity.Attributes[Fields.msdynmkt_certificate4] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate part 5</para>
		/// <para><strong>Description</strong>: Unique identifier for Certificate5 associated with Apns Cert-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate5
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate5); }
			set { Entity.Attributes[Fields.msdynmkt_certificate5] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate name</para>
		/// <para><strong>Description</strong>: Unique identifier for Certificate name associated with Apns Cert-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificatename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificatename); }
			set { Entity.Attributes[Fields.msdynmkt_certificatename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Unique identifier for the Description</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_description); }
			set { Entity.Attributes[Fields.msdynmkt_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FCM Authentication mode</para>
		/// <para><strong>Description</strong>: Unique identifier for Fcm Authentication mode associated with Fcm mobile app instances</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_fcmauthenticationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_fcmauthenticationmode.Api_Key"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_fcmauthenticationmode? msdynmkt_fcmauthenticationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_fcmauthenticationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.msdynmkt_fcmauthenticationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_fcmauthenticationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_fcmauthenticationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Key Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Key Id associated with Apns Token-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_keyid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_keyid); }
			set { Entity.Attributes[Fields.msdynmkt_keyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile app channel instance Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Mobile app channel instance id</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_mobileappchannelinstanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_mobileappchannelinstanceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Unique identifier for the Name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate Password</para>
		/// <para><strong>Description</strong>: Unique identifier for Certificate Password associated with Apns Cert-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_password
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_password); }
			set { Entity.Attributes[Fields.msdynmkt_password] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account Json part 1</para>
		/// <para><strong>Description</strong>: Unique identifier for ServiceAccountJson1 associated with Fcm json-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_serviceaccountjson1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_serviceaccountjson1); }
			set { Entity.Attributes[Fields.msdynmkt_serviceaccountjson1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account Json part 2</para>
		/// <para><strong>Description</strong>: Unique identifier for ServiceAccountJson2 associated with Apns Fcm json-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_serviceaccountjson2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_serviceaccountjson2); }
			set { Entity.Attributes[Fields.msdynmkt_serviceaccountjson2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdynmkt_serviceaccountjson3</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_serviceaccountjson3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_serviceaccountjson3); }
			set { Entity.Attributes[Fields.msdynmkt_serviceaccountjson3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdynmkt_serviceaccountjson4</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_serviceaccountjson4
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_serviceaccountjson4); }
			set { Entity.Attributes[Fields.msdynmkt_serviceaccountjson4] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account Json part 5</para>
		/// <para><strong>Description</strong>: Unique identifier for ServiceAccountJson5 associated with Fcm json-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_serviceaccountjson5
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_serviceaccountjson5); }
			set { Entity.Attributes[Fields.msdynmkt_serviceaccountjson5] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account Json name</para>
		/// <para><strong>Description</strong>: Unique identifier for ServiceAccountJson name associated with Fcm json-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_serviceaccountjsonname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_serviceaccountjsonname); }
			set { Entity.Attributes[Fields.msdynmkt_serviceaccountjsonname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Signing Key</para>
		/// <para><strong>Description</strong>: Unique identifier for Signing Key associated with Apns Token-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_signingkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_signingkey); }
			set { Entity.Attributes[Fields.msdynmkt_signingkey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Team Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Team Id associated with Apns Token-based mobile app instances</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_teamid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_teamid); }
			set { Entity.Attributes[Fields.msdynmkt_teamid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the mobileapp channel instance</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the mobileapp channel instance</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileappchannelinstanceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}