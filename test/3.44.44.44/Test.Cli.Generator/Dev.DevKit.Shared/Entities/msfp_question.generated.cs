//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msfp_questionOptionSets
{
	public enum msfp_choicetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Multi choice</para>
		/// <para><strong>Value</strong>: 647,390,001</para>
		/// </summary>
		Multi_choice = 647_390_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: none</para>
		/// <para><strong>Value</strong>: 647,390,002</para>
		/// </summary>
		none = 647_390_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Single choice</para>
		/// <para><strong>Value</strong>: 647,390,000</para>
		/// </summary>
		Single_choice = 647_390_000
	}
	public enum msfp_questiontype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Choice</para>
		/// <para><strong>Value</strong>: 647,390,000</para>
		/// </summary>
		Choice = 647_390_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Date</para>
		/// <para><strong>Value</strong>: 647,390,003</para>
		/// </summary>
		Date = 647_390_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Date and time</para>
		/// <para><strong>Value</strong>: 647,390,010</para>
		/// </summary>
		Date_and_time = 647_390_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: Drop-down</para>
		/// <para><strong>Value</strong>: 647,390,011</para>
		/// </summary>
		Drop_down = 647_390_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: File Upload</para>
		/// <para><strong>Value</strong>: 647,390,008</para>
		/// </summary>
		File_Upload = 647_390_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: MatrixChoice</para>
		/// <para><strong>Value</strong>: 647,390,006</para>
		/// </summary>
		MatrixChoice = 647_390_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: MatrixChoiceGroup</para>
		/// <para><strong>Value</strong>: 647,390,005</para>
		/// </summary>
		MatrixChoiceGroup = 647_390_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: NPS</para>
		/// <para><strong>Value</strong>: 647,390,007</para>
		/// </summary>
		NPS = 647_390_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Number</para>
		/// <para><strong>Value</strong>: 647,390,009</para>
		/// </summary>
		Number = 647_390_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ranking</para>
		/// <para><strong>Value</strong>: 647,390,004</para>
		/// </summary>
		Ranking = 647_390_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating</para>
		/// <para><strong>Value</strong>: 647,390,002</para>
		/// </summary>
		Rating = 647_390_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Text</para>
		/// <para><strong>Value</strong>: 647,390,001</para>
		/// </summary>
		Text = 647_390_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msfp_question : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msfp_choicetype = "msfp_choicetype";
			public const string msfp_correctanswer = "msfp_correctanswer";
			public const string msfp_imageproperties = "msfp_imageproperties";
			public const string msfp_Maximumrating = "msfp_maximumrating";
			public const string msfp_multiline = "msfp_multiline";
			public const string msfp_name = "msfp_name";
			public const string msfp_order = "msfp_order";
			public const string msfp_otherproperties = "msfp_otherproperties";
			public const string msfp_PermanentID = "msfp_permanentid";
			public const string msfp_questionchoices = "msfp_questionchoices";
			public const string msfp_questionId = "msfp_questionid";
			public const string msfp_questiontext = "msfp_questiontext";
			public const string msfp_questiontype = "msfp_questiontype";
			public const string msfp_responserequired = "msfp_responserequired";
			public const string msfp_sequence = "msfp_sequence";
			public const string msfp_sourceparentquestionidentifier = "msfp_sourceparentquestionidentifier";
			public const string msfp_Sourcequestionidentifier = "msfp_sourcequestionidentifier";
			public const string msfp_sourcesurveyidentifier = "msfp_sourcesurveyidentifier";
			public const string msfp_subtitle = "msfp_subtitle";
			public const string msfp_Survey = "msfp_survey";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msfp_question";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10606;
		public const string EntityCollectionSchemaName = "msfp_questions";
		public const string EntityDisplayCollectionName = "Customer Voice survey questions";
		public const string DisplayName = "Customer Voice survey question";
		public const string EntitySetName = "msfp_questions";
		public const string EntityLogicalCollectionName = "msfp_questions";
		public const string EntityPrimaryIdAttribute = "msfp_questionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msfp_name";
		public const string EntitySchemaName = "msfp_question";
		[DebuggerNonUserCode()]
		public msfp_question()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_question(Guid msfp_questionId)
		{
			Entity = new Entity(EntityLogicalName, msfp_questionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_question(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_question"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msfp_question(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_question"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msfp_question(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msfp_question(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_question"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msfp_question(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msfp_question(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_question(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Choice question type</para>
		/// <para><strong>Description</strong>: Shows whether the question accepts single line or multiple lines of response.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_choicetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_choicetype? msfp_choicetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msfp_choicetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_choicetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msfp_choicetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msfp_choicetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Correct answer</para>
		/// <para><strong>Description</strong>: Stores the correct answer in case of quizzes.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_correctanswer
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_correctanswer); }
			set { Entity.Attributes[Fields.msfp_correctanswer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Image Properties</para>
		/// <para><strong>Description</strong>: Question image properties in JSON format.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_imageproperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_imageproperties); }
			set { Entity.Attributes[Fields.msfp_imageproperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum rating</para>
		/// <para><strong>Description</strong>: Stores maximum rating of rating question type</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_Maximumrating
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_Maximumrating); }
			set { Entity.Attributes[Fields.msfp_Maximumrating] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Multiple lines</para>
		/// <para><strong>Description</strong>: Shows if the text question is multiple lines or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_multiline
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_multiline); }
			set { Entity.Attributes[Fields.msfp_multiline] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_name); }
			set { Entity.Attributes[Fields.msfp_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order</para>
		/// <para><strong>Description</strong>: Order of the question in the survey.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msfp_order
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msfp_order); }
			set { Entity.Attributes[Fields.msfp_order] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other properties</para>
		/// <para><strong>Description</strong>: Stores other question properties in JSON format.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_otherproperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_otherproperties); }
			set { Entity.Attributes[Fields.msfp_otherproperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permanent ID</para>
		/// <para><strong>Description</strong>: Permanent ID is auto-generated for a new survey question. For a copied survey, the ID is carried over from the original survey question.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_PermanentID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_PermanentID); }
			set { Entity.Attributes[Fields.msfp_PermanentID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Question choices</para>
		/// <para><strong>Description</strong>: Stores the list of answer options</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_questionchoices
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_questionchoices); }
			set { Entity.Attributes[Fields.msfp_questionchoices] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Question</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msfp_questionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msfp_questionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Question text</para>
		/// <para><strong>Description</strong>: Text of the question in the survey.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_questiontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_questiontext); }
			set { Entity.Attributes[Fields.msfp_questiontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Question type</para>
		/// <para><strong>Description</strong>: Stores the type of question to display.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_questiontype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_questiontype? msfp_questiontype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msfp_questiontype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.msfp_questiontype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msfp_questiontype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msfp_questiontype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Response required</para>
		/// <para><strong>Description</strong>: Shows if the question is mandatory.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_responserequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_responserequired); }
			set { Entity.Attributes[Fields.msfp_responserequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence</para>
		/// <para><strong>Description</strong>: Order of the question in the survey.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msfp_sequence
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msfp_sequence); }
			set { Entity.Attributes[Fields.msfp_sequence] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source parent question identifier</para>
		/// <para><strong>Description</strong>: Unique identifier for the parent question in the source application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_sourceparentquestionidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_sourceparentquestionidentifier); }
			set { Entity.Attributes[Fields.msfp_sourceparentquestionidentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source question identifier</para>
		/// <para><strong>Description</strong>: Unique identifier for the question in the source application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_Sourcequestionidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_Sourcequestionidentifier); }
			set { Entity.Attributes[Fields.msfp_Sourcequestionidentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source survey identifier</para>
		/// <para><strong>Description</strong>: Unique identifier for the survey in the source application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_sourcesurveyidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_sourcesurveyidentifier); }
			set { Entity.Attributes[Fields.msfp_sourcesurveyidentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtitle</para>
		/// <para><strong>Description</strong>: Stores subtitle of a question.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_subtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_subtitle); }
			set { Entity.Attributes[Fields.msfp_subtitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey</para>
		/// <para><strong>Description</strong>: Unique identifier of the survey to which the question belongs.</para>
		/// <para><strong>Lookup</strong>: <see cref="msfp_survey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msfp_Survey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msfp_Survey); }
			set { Entity.Attributes[Fields.msfp_Survey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Question</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Question</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_questionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}