//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.EmailOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Appointment = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert</para>
		/// <para><strong>Value</strong>: 11,000</para>
		/// </summary>
		Booking_Alert = 11_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Activity</para>
		/// <para><strong>Value</strong>: 4,402</para>
		/// </summary>
		Campaign_Activity = 4_402,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Response</para>
		/// <para><strong>Value</strong>: 4,401</para>
		/// </summary>
		Campaign_Response = 4_401,
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Resolution</para>
		/// <para><strong>Value</strong>: 4,206</para>
		/// </summary>
		Case_Resolution = 4_206,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation</para>
		/// <para><strong>Value</strong>: 10,691</para>
		/// </summary>
		Conversation = 10_691,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Transcript</para>
		/// <para><strong>Value</strong>: 10,877</para>
		/// </summary>
		Copilot_Transcript = 10_877,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice alert</para>
		/// <para><strong>Value</strong>: 10,600</para>
		/// </summary>
		Customer_Voice_alert = 10_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey invite</para>
		/// <para><strong>Value</strong>: 10,610</para>
		/// </summary>
		Customer_Voice_survey_invite = 10_610,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey response</para>
		/// <para><strong>Value</strong>: 10,612</para>
		/// </summary>
		Customer_Voice_survey_response = 10_612,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invite Redemption</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Invite_Redemption = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Letter</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Letter = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Close</para>
		/// <para><strong>Value</strong>: 4,208</para>
		/// </summary>
		Opportunity_Close = 4_208,
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Close</para>
		/// <para><strong>Value</strong>: 4,209</para>
		/// </summary>
		Order_Close = 4_209,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message</para>
		/// <para><strong>Value</strong>: 11,063</para>
		/// </summary>
		Outbound_message = 11_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_Call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Portal_Comment = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Campaign</para>
		/// <para><strong>Value</strong>: 4,406</para>
		/// </summary>
		Quick_Campaign = 4_406,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Close</para>
		/// <para><strong>Value</strong>: 4,211</para>
		/// </summary>
		Quote_Close = 4_211,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Appointment</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Recurring_Appointment = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Value</strong>: 4,214</para>
		/// </summary>
		Service_Activity = 4_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Value</strong>: 10,708</para>
		/// </summary>
		Session = 10_708,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams chat</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Teams_chat = 10_185,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voicemail</para>
		/// <para><strong>Value</strong>: 11,070</para>
		/// </summary>
		Voicemail = 11_070
	}
	public enum CorrelationMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationIndex</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		ConversationIndex = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomCorrelation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		CustomCorrelation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: InReplyTo</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		InReplyTo = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Skipped = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: SmartMatching</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		SmartMatching = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: TrackingToken</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		TrackingToken = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: XHeader</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		XHeader = 2
	}
	public enum DeliveryPriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum EmailReminderStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: NotSet</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NotSet = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReminderExpired</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ReminderExpired = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReminderInvalid</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		ReminderInvalid = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReminderSet</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ReminderSet = 1
	}
	public enum EmailReminderType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: If I do not receive a reply by</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		If_I_do_not_receive_a_reply_by = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: If the email is not opened by</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		If_the_email_is_not_opened_by = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Remind me anyways at</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Remind_me_anyways_at = 2
	}
	public enum Notifications
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: The message was saved as a Microsoft Dynamics 365 email record, but not all the attachments could be saved with it. An attachment cannot be saved if it is blocked or if its file type is invalid.</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		The_message_was_saved_as_a_Microsoft_Dynamics_365_email_record_but_not_all_the_attachments_could_be_saved_with_it_An_attachment_cannot_be_saved_if_it_is_blocked_or_if_its_file_type_is_invalid = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Truncated body.</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Truncated_body = 2
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Completed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Canceled</strong></para>
		/// </summary>
		Canceled = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Completed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Failed = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending Send</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Pending_Send = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Received</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Received = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sending</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Sending = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sent</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Sent = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Email : EntityBase
	{
		public struct Fields
		{
			public const string AcceptingEntityId = "acceptingentityid";
			public const string ActivityAdditionalParams = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActualDurationMinutes = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string AttachmentCount = "attachmentcount";
			public const string AttachmentOpenCount = "attachmentopencount";
			public const string BaseConversationIndexHash = "baseconversationindexhash";
			public const string bcc = "bcc";
			public const string Category = "category";
			public const string cc = "cc";
			public const string Compressed = "compressed";
			public const string ConversationIndex = "conversationindex";
			public const string ConversationTrackingId = "conversationtrackingid";
			public const string CorrelatedActivityId = "correlatedactivityid";
			public const string correlatedsubjectchanged = "correlatedsubjectchanged";
			public const string CorrelationMethod = "correlationmethod";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DelayedEmailSendTime = "delayedemailsendtime";
			public const string DeliveryAttempts = "deliveryattempts";
			public const string DeliveryPriorityCode = "deliveryprioritycode";
			public const string DeliveryReceiptRequested = "deliveryreceiptrequested";
			public const string Description = "description";
			public const string DescriptionBlobId = "descriptionblobid";
			public const string DescriptionBlobId_name = "descriptionblobid_name";
			public const string DirectionCode = "directioncode";
			public const string EmailReminderExpiryTime = "emailreminderexpirytime";
			public const string EmailReminderStatus = "emailreminderstatus";
			public const string EmailReminderText = "emailremindertext";
			public const string EmailReminderType = "emailremindertype";
			public const string EmailSender = "emailsender";
			public const string EmailTrackingId = "emailtrackingid";
			public const string ExchangeRate = "exchangerate";
			public const string FollowEmailUserPreference = "followemailuserpreference";
			public const string from = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InReplyTo = "inreplyto";
			public const string InternetMessageHeaders = "internetmessageheaders";
			public const string IsBilled = "isbilled";
			public const string IsDuplicateSenderUnresolved = "isduplicatesenderunresolved";
			public const string IsEmailFollowed = "isemailfollowed";
			public const string IsEmailReminderSet = "isemailreminderset";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsSafeDescriptionTruncated = "issafedescriptiontruncated";
			public const string IsUnsafe = "isunsafe";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastOpenedTime = "lastopenedtime";
			public const string LinksClickedCount = "linksclickedcount";
			public const string MessageId = "messageid";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string MessageIdDupCheck = "messageiddupcheck";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_copilotengaged = "msdyn_copilotengaged";
			public const string msdyn_emailengagementinteractions = "msdyn_emailengagementinteractions";
			public const string msdyn_RecipientList = "msdyn_recipientlist";
			public const string Notifications = "notifications";
			public const string OnHoldTime = "onholdtime";
			public const string OpenCount = "opencount";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentActivityId = "parentactivityid";
			public const string PostponeEmailProcessingUntil = "postponeemailprocessinguntil";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ReadReceiptRequested = "readreceiptrequested";
			public const string ReceivingMailboxId = "receivingmailboxid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string related = "related";
			public const string ReminderActionCardId = "reminderactioncardid";
			public const string ReplyCount = "replycount";
			public const string ReservedForInternalUse = "reservedforinternaluse";
			public const string ScheduledDurationMinutes = "scheduleddurationminutes";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string Sender = "sender";
			public const string SenderMailboxId = "sendermailboxid";
			public const string SendersAccount = "sendersaccount";
			public const string SentOn = "senton";
			public const string ServiceId = "serviceid";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subcategory = "subcategory";
			public const string Subject = "subject";
			public const string SubmittedBy = "submittedby";
			public const string TemplateId = "templateid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string to = "to";
			public const string ToRecipients = "torecipients";
			public const string TrackingToken = "trackingtoken";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "email";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4202;
		public const string EntityCollectionSchemaName = "Emails";
		public const string EntityDisplayCollectionName = "Email Messages";
		public const string DisplayName = "Email";
		public const string EntitySetName = "emails";
		public const string EntityLogicalCollectionName = "emails";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "Email";
		[DebuggerNonUserCode()]
		public Email()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Email(Guid EmailId)
		{
			Entity = new Entity(EntityLogicalName, EmailId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Email(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Email"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Email(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Email"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Email(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Email(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Email"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Email(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Email(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Email(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accepting Entity</para>
		/// <para><strong>Description</strong>: The Entity that Accepted the Email</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AcceptingEntityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AcceptingEntityId); }
			set { Entity.Attributes[Fields.AcceptingEntityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Parameters</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
			set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Message</para>
		/// <para><strong>Description</strong>: Unique identifier of the email activity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Type</para>
		/// <para><strong>Description</strong>: Shows the type of activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Type the number of minutes spent creating and sending the email. The duration is used in reporting.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
			set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual End</para>
		/// <para><strong>Description</strong>: Enter the actual end date and time of the email. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the email.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Start</para>
		/// <para><strong>Description</strong>: Enter the actual start date and time for the email. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the email.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment Count</para>
		/// <para><strong>Description</strong>: Shows the umber of attachments of the email message.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AttachmentCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AttachmentCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment Open Count</para>
		/// <para><strong>Description</strong>: Shows the number of times an email attachment has been viewed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AttachmentOpenCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AttachmentOpenCount); }
			set { Entity.Attributes[Fields.AttachmentOpenCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Index (Hash)</para>
		/// <para><strong>Description</strong>: Hash of base of conversation index.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BaseConversationIndexHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BaseConversationIndexHash); }
			set { Entity.Attributes[Fields.BaseConversationIndexHash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bcc</para>
		/// <para><strong>Description</strong>: Enter the recipients that are included on the email distribution, but are not displayed to other recipients.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> bcc
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.bcc).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.bcc] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Description</strong>: Type a category to identify the email type, such as lead outreach, customer follow-up, or service alert, to tie the email to a business group or function.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cc</para>
		/// <para><strong>Description</strong>: Enter the recipients that should be copied on the email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> cc
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.cc).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.cc] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Compression</para>
		/// <para><strong>Description</strong>: Indicates if the body is compressed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Compressed</strong>]: true - [<strong>Not compressed</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Not compressed</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Compressed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Compressed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Index</para>
		/// <para><strong>Description</strong>: Identifier for all the email responses for this conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConversationIndex
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConversationIndex); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Tracking Id</para>
		/// <para><strong>Description</strong>: Conversation Tracking Id.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ConversationTrackingId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ConversationTrackingId); }
			set { Entity.Attributes[Fields.ConversationTrackingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Correlated Activity Id</para>
		/// <para><strong>Description</strong>: Correlated Activity Id</para>
		/// <para><strong>Lookup</strong>: <see cref="email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CorrelatedActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CorrelatedActivityId); }
			set { Entity.Attributes[Fields.CorrelatedActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Correlated subject changed</para>
		/// <para><strong>Description</strong>: Indicates if the subject changed compared to the subject of the correlated email</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? correlatedsubjectchanged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.correlatedsubjectchanged); }
			set { Entity.Attributes[Fields.correlatedsubjectchanged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Correlation Method</para>
		/// <para><strong>Description</strong>: Shows how an email is correlated to an existing email in Microsoft Dynamics 365. XHeader and CustomCorrelation are not used. For system use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod? CorrelationMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CorrelationMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.CorrelationMethod)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send Later</para>
		/// <para><strong>Description</strong>: Enter the expected date and time when email will be sent.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DelayedEmailSendTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DelayedEmailSendTime); }
			set { Entity.Attributes[Fields.DelayedEmailSendTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: No. of Delivery Attempts</para>
		/// <para><strong>Description</strong>: Shows the count of the number of attempts made to send the email. The count is used as an indicator of email routing issues.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DeliveryAttempts
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DeliveryAttempts); }
			set { Entity.Attributes[Fields.DeliveryAttempts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delivery Priority</para>
		/// <para><strong>Description</strong>: Select the priority of delivery of the email to the email server.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode? DeliveryPriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeliveryPriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.DeliveryPriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeliveryPriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeliveryPriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delivery Receipt Requested</para>
		/// <para><strong>Description</strong>: Select whether the sender should receive confirmation that the email was delivered.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DeliveryReceiptRequested
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DeliveryReceiptRequested); }
			set { Entity.Attributes[Fields.DeliveryReceiptRequested] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type the greeting and message text of the email.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description File Id</para>
		/// <para><strong>Description</strong>: File that contains description content.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DescriptionBlobId_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.DescriptionBlobId_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Direction</para>
		/// <para><strong>Description</strong>: Select the direction of the email as incoming or outbound.</para>
		/// <para><strong>Two Option</strong> - [<strong>Outgoing</strong>]: true - [<strong>Incoming</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Outgoing</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DirectionCode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DirectionCode); }
			set { Entity.Attributes[Fields.DirectionCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Reminder Expiry Time</para>
		/// <para><strong>Description</strong>: Shows the date and time when an email reminder expires.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EmailReminderExpiryTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EmailReminderExpiryTime); }
			set { Entity.Attributes[Fields.EmailReminderExpiryTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Reminder Status</para>
		/// <para><strong>Description</strong>: Shows the status of the email reminder.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus.NotSet"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus? EmailReminderStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailReminderStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Reminder Text</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailReminderText
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailReminderText); }
			set { Entity.Attributes[Fields.EmailReminderText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Reminder Type</para>
		/// <para><strong>Description</strong>: Shows the type of the email reminder.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType.If_I_do_not_receive_a_reply_by"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType? EmailReminderType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailReminderType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.EmailReminderType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailReminderType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailReminderType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender</para>
		/// <para><strong>Description</strong>: Shows the sender of the email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="equipment"/>, <see cref="lead"/>, <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EmailSender
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EmailSender); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Tracking Id</para>
		/// <para><strong>Description</strong>: Email Tracking Id.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EmailTrackingId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EmailTrackingId); }
			set { Entity.Attributes[Fields.EmailTrackingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Following</para>
		/// <para><strong>Description</strong>: Select whether the email allows following recipient activities sent from Microsoft Dynamics 365.This is user preference state which can be overridden by system evaluated state.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmailUserPreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmailUserPreference); }
			set { Entity.Attributes[Fields.FollowEmailUserPreference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From</para>
		/// <para><strong>Description</strong>: Enter the sender of the email.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> from
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.from).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.from] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In Reply To Message</para>
		/// <para><strong>Description</strong>: Type the ID of the email message that this email activity is a response to.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InReplyTo
		{
			get { return Entity.GetAttributeValue<string>(Fields.InReplyTo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internet message headers</para>
		/// <para><strong>Description</strong>: Contains a set of internet headers associated to the email message in json format</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InternetMessageHeaders
		{
			get { return Entity.GetAttributeValue<string>(Fields.InternetMessageHeaders); }
			set { Entity.Attributes[Fields.InternetMessageHeaders] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Billed</para>
		/// <para><strong>Description</strong>: Information regarding whether the email activity was billed as part of resolving a case.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Duplicate Sender Unresolved</para>
		/// <para><strong>Description</strong>: Indicates if the sender of the email is unresolved in case of multiple match</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDuplicateSenderUnresolved
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDuplicateSenderUnresolved); }
			set { Entity.Attributes[Fields.IsDuplicateSenderUnresolved] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Followed</para>
		/// <para><strong>Description</strong>: For internal use only. Shows whether this email is followed. This is evaluated state which overrides user selection of follow email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailFollowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailFollowed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reminder Set</para>
		/// <para><strong>Description</strong>: For internal use only. Shows whether this email Reminder is Set.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailReminderSet
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailReminderSet); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Regular Activity</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity is a regular activity type or event type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsSafeDescriptionTruncated</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsSafeDescriptionTruncated
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsSafeDescriptionTruncated); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsUnsafe</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsUnsafe
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsUnsafe); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Workflow Created</para>
		/// <para><strong>Description</strong>: Indication if the email was created by a workflow rule.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date and time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Opened Time</para>
		/// <para><strong>Description</strong>: Shows the latest date and time when email was opened.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOpenedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOpenedTime); }
			set { Entity.Attributes[Fields.LastOpenedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Links Clicked Count</para>
		/// <para><strong>Description</strong>: Shows the number of times a link in an email has been clicked.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LinksClickedCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LinksClickedCount); }
			set { Entity.Attributes[Fields.LinksClickedCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the email message. Used only for email that is received.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessageId); }
			set { Entity.Attributes[Fields.MessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message ID Dup Check</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public Guid? MessageIdDupCheck
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.MessageIdDupCheck); }
			set { Entity.Attributes[Fields.MessageIdDupCheck] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mime Type</para>
		/// <para><strong>Description</strong>: MIME type of the email message data.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Engaged</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_copilotengaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_copilotengaged); }
			set { Entity.Attributes[Fields.msdyn_copilotengaged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email engagement interactions</para>
		/// <para><strong>Description</strong>: Email engagement interactions</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_emailengagementinteractions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_emailengagementinteractions); }
			set { Entity.Attributes[Fields.msdyn_emailengagementinteractions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recipient List</para>
		/// <para><strong>Description</strong>: Individual email will be sent to each recipient.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RecipientList
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RecipientList); }
			set { Entity.Attributes[Fields.msdyn_RecipientList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notifications</para>
		/// <para><strong>Description</strong>: Select the notification code to identify issues with the email recipients or attachments, such as blocked attachments.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications? Notifications
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Notifications);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.Notifications)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Notifications] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Notifications] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows how long, in minutes, that the record was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Open Count</para>
		/// <para><strong>Description</strong>: Shows the number of times an email has been opened.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OpenCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OpenCount); }
			set { Entity.Attributes[Fields.OpenCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the email activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the email activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the email activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Activity Id</para>
		/// <para><strong>Description</strong>: Select the activity that the email is associated with.</para>
		/// <para><strong>Lookup</strong>: <see cref="email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentActivityId); }
			set { Entity.Attributes[Fields.ParentActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delay email processing until</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeEmailProcessingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeEmailProcessingUntil); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Shows the ID of the process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Read Receipt Requested</para>
		/// <para><strong>Description</strong>: Indicates that a read receipt is requested.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReadReceiptRequested
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReadReceiptRequested); }
			set { Entity.Attributes[Fields.ReadReceiptRequested] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Receiving Mailbox</para>
		/// <para><strong>Description</strong>: The Mailbox that Received the Email.</para>
		/// <para><strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ReceivingMailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ReceivingMailboxId); }
			set { Entity.Attributes[Fields.ReceivingMailboxId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Choose the record that the email relates to.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="asyncoperation"/>, <see cref="bookableresourcebooking"/>, <see cref="bookableresourcebookingheader"/>, <see cref="bulkoperation"/>, <see cref="campaign"/>, <see cref="campaignactivity"/>, <see cref="contact"/>, <see cref="contract"/>, <see cref="entitlement"/>, <see cref="entitlementtemplate"/>, <see cref="incident"/>, <see cref="invoice"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="lead"/>, <see cref="msdyncrm_contentsettings"/>, <see cref="msdyncrm_customerjourney"/>, <see cref="msdyncrm_leadscoremodel"/>, <see cref="msdyncrm_linkedinaccount"/>, <see cref="msdyncrm_linkedinactivity"/>, <see cref="msdyncrm_linkedinfieldmapping"/>, <see cref="msdyncrm_linkedinform"/>, <see cref="msdyncrm_linkedinformanswer"/>, <see cref="msdyncrm_linkedinformquestion"/>, <see cref="msdyncrm_linkedinformsubmission"/>, <see cref="msdyncrm_linkedinleadmatchingstrategy"/>, <see cref="msdyncrm_linkedinuserprofile"/>, <see cref="msdyncrm_marketingdynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemaildynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemailtestsend"/>, <see cref="msdyncrm_migration"/>, <see cref="msdyncrm_uicconfig"/>, <see cref="msdyn_agreement"/>, <see cref="msdyn_agreementbookingdate"/>, <see cref="msdyn_agreementbookingincident"/>, <see cref="msdyn_agreementbookingproduct"/>, <see cref="msdyn_agreementbookingservice"/>, <see cref="msdyn_agreementbookingservicetask"/>, <see cref="msdyn_agreementbookingsetup"/>, <see cref="msdyn_agreementinvoicedate"/>, <see cref="msdyn_agreementinvoiceproduct"/>, <see cref="msdyn_agreementinvoicesetup"/>, <see cref="msdyn_bookingalertstatus"/>, <see cref="msdyn_bookingrule"/>, <see cref="msdyn_bookingtimestamp"/>, <see cref="msdyn_customerasset"/>, <see cref="msdyn_fieldservicesetting"/>, <see cref="msdyn_incidenttypecharacteristic"/>, <see cref="msdyn_incidenttypeproduct"/>, <see cref="msdyn_incidenttypeservice"/>, <see cref="msdyn_inventoryadjustment"/>, <see cref="msdyn_inventoryadjustmentproduct"/>, <see cref="msdyn_inventoryjournal"/>, <see cref="msdyn_inventorytransfer"/>, <see cref="msdyn_payment"/>, <see cref="msdyn_paymentdetail"/>, <see cref="msdyn_paymentmethod"/>, <see cref="msdyn_paymentterm"/>, <see cref="msdyn_playbookinstance"/>, <see cref="msdyn_postalbum"/>, <see cref="msdyn_postalcode"/>, <see cref="msdyn_productinventory"/>, <see cref="msdyn_purchaseorder"/>, <see cref="msdyn_purchaseorderbill"/>, <see cref="msdyn_purchaseorderproduct"/>, <see cref="msdyn_purchaseorderreceipt"/>, <see cref="msdyn_purchaseorderreceiptproduct"/>, <see cref="msdyn_purchaseordersubstatus"/>, <see cref="msdyn_quotebookingincident"/>, <see cref="msdyn_quotebookingproduct"/>, <see cref="msdyn_quotebookingservice"/>, <see cref="msdyn_quotebookingservicetask"/>, <see cref="msdyn_resourceterritory"/>, <see cref="msdyn_rma"/>, <see cref="msdyn_rmaproduct"/>, <see cref="msdyn_rmareceipt"/>, <see cref="msdyn_rmareceiptproduct"/>, <see cref="msdyn_rmasubstatus"/>, <see cref="msdyn_rtv"/>, <see cref="msdyn_rtvproduct"/>, <see cref="msdyn_rtvsubstatus"/>, <see cref="msdyn_salessuggestion"/>, <see cref="msdyn_shipvia"/>, <see cref="msdyn_swarm"/>, <see cref="msdyn_systemuserschedulersetting"/>, <see cref="msdyn_timegroup"/>, <see cref="msdyn_timegroupdetail"/>, <see cref="msdyn_timeoffrequest"/>, <see cref="msdyn_warehouse"/>, <see cref="msdyn_workorder"/>, <see cref="msdyn_workordercharacteristic"/>, <see cref="msdyn_workorderincident"/>, <see cref="msdyn_workorderproduct"/>, <see cref="msdyn_workorderresourcerestriction"/>, <see cref="msdyn_workorderservice"/>, <see cref="msdyn_workorderservicetask"/>, <see cref="msevtmgt_checkin"/>, <see cref="msevtmgt_event"/>, <see cref="msevtmgt_eventpurchase"/>, <see cref="msevtmgt_eventpurchaseattendee"/>, <see cref="msevtmgt_eventpurchasepass"/>, <see cref="msevtmgt_eventregistration"/>, <see cref="msevtmgt_hotel"/>, <see cref="msevtmgt_hotelroomallocation"/>, <see cref="msevtmgt_hotelroomreservation"/>, <see cref="msevtmgt_layout"/>, <see cref="msevtmgt_room"/>, <see cref="msevtmgt_session"/>, <see cref="msevtmgt_sessionregistration"/>, <see cref="msevtmgt_sessiontrack"/>, <see cref="msevtmgt_speaker"/>, <see cref="msevtmgt_speakerengagement"/>, <see cref="msevtmgt_sponsorablearticle"/>, <see cref="msevtmgt_sponsorship"/>, <see cref="msevtmgt_venue"/>, <see cref="msevtmgt_webinarconfiguration"/>, <see cref="msevtmgt_webinarprovider"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="opportunity"/>, <see cref="quote"/>, <see cref="salesorder"/>, <see cref="site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related</para>
		/// <para><strong>Description</strong>: Enter the related records for the email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="campaign"/>, <see cref="campaignactivity"/>, <see cref="contact"/>, <see cref="contract"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="incident"/>, <see cref="invoice"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="opportunity"/>, <see cref="queue"/>, <see cref="quote"/>, <see cref="salesorder"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> related
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.related).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.related] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reminder Action Card Id.</para>
		/// <para><strong>Description</strong>: Reminder Action Card Id.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ReminderActionCardId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ReminderActionCardId); }
			set { Entity.Attributes[Fields.ReminderActionCardId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reply Count</para>
		/// <para><strong>Description</strong>: Shows the number of replies received for an email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ReplyCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ReplyCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reserved for internal use</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 40,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReservedForInternalUse
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReservedForInternalUse); }
			set { Entity.Attributes[Fields.ReservedForInternalUse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Duration</para>
		/// <para><strong>Description</strong>: Scheduled duration of the email activity, specified in minutes.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Due Date</para>
		/// <para><strong>Description</strong>: Enter the expected due date and time for the activity to be completed to provide details about when the email will be sent.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date</para>
		/// <para><strong>Description</strong>: Enter the expected start date and time for the activity to provide details about the tentative time when the email activity must be initiated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From</para>
		/// <para><strong>Description</strong>: Sender of the email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Sender
		{
			get { return Entity.GetAttributeValue<string>(Fields.Sender); }
			set { Entity.Attributes[Fields.Sender] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender's Mailbox</para>
		/// <para><strong>Description</strong>: Select the mailbox associated with the sender of the email message.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SenderMailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SenderMailboxId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Senders Account</para>
		/// <para><strong>Description</strong>: Shows the parent account of the sender of the email.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SendersAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SendersAccount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Sent</para>
		/// <para><strong>Description</strong>: Shows the date and time that the email was sent.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SentOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SentOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Unique identifier for the associated service.</para>
		/// <para><strong>Lookup</strong>: <see cref="service"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceId); }
			set { Entity.Attributes[Fields.ServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the email record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this email. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sort Date</para>
		/// <para><strong>Description</strong>: Shows the date and time by which the activities are sorted.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Process Stage</para>
		/// <para><strong>Description</strong>: Shows the ID of the stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Status</para>
		/// <para><strong>Description</strong>: Shows whether the email is open, completed, or canceled. Completed and canceled email is read-only and can&apos;t be edited.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode.Open"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the email&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EmailOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sub-Category</para>
		/// <para><strong>Description</strong>: Type a subcategory to identify the email type and relate the activity to a specific product, sales region, business group, or other function.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subcategory
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
			set { Entity.Attributes[Fields.Subcategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Type a short description about the objective or primary topic of the email.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 800</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted By</para>
		/// <para><strong>Description</strong>: Shows the Microsoft Office Outlook account for the user who submitted the email to Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubmittedBy
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubmittedBy); }
			set { Entity.Attributes[Fields.SubmittedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ID for template used.</para>
		/// <para><strong>Description</strong>: For internal use only. ID for template used in email.</para>
		/// <para><strong>Lookup</strong>: <see cref="template"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TemplateId); }
			set { Entity.Attributes[Fields.TemplateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To</para>
		/// <para><strong>Description</strong>: Enter the account, contact, lead, queue, or user recipients for the email.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> to
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.to).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.to] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To Recipients</para>
		/// <para><strong>Description</strong>: Shows the email addresses corresponding to the recipients.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ToRecipients
		{
			get { return Entity.GetAttributeValue<string>(Fields.ToRecipients); }
			set { Entity.Attributes[Fields.ToRecipients] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tracking Token</para>
		/// <para><strong>Description</strong>: Shows the tracking token assigned to the email to make sure responses are automatically tracked in Microsoft Dynamics 365.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TrackingToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.TrackingToken); }
			set { Entity.Attributes[Fields.TrackingToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the email message.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}