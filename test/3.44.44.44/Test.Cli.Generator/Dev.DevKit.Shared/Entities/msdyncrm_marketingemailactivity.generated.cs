//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets
{
	public enum msdyncrm_abtestdurationunit
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Days</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Days = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hours</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Hours = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Weeks</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Weeks = 192_350_002
	}
	public enum msdyncrm_abtestinconclusiveresult
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Version A</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Version_A = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Version A and Version B (50/50)</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Version_A_and_Version_B_5050 = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Version B</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Version_B = 192_350_001
	}
	public enum msdyncrm_abtestwinningmetric
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Click-through rate</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Click_through_rate = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open rate</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Open_rate = 192_350_000
	}
	public enum msdyncrm_permitteddays
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Friday</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Friday = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monday</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Monday = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Saturday</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Saturday = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sunday</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Sunday = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thursday</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Thursday = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuesday</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Tuesday = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wednesday</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Wednesday = 192_350_002
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_marketingemailactivity : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_abtestdistributionversiona = "msdyncrm_abtestdistributionversiona";
			public const string msdyncrm_abtestdistributionversionb = "msdyncrm_abtestdistributionversionb";
			public const string msdyncrm_abtestdurationunit = "msdyncrm_abtestdurationunit";
			public const string msdyncrm_abtestdurationvalue = "msdyncrm_abtestdurationvalue";
			public const string msdyncrm_abtestid = "msdyncrm_abtestid";
			public const string msdyncrm_abtestinconclusiveresult = "msdyncrm_abtestinconclusiveresult";
			public const string msdyncrm_abtestingenabled = "msdyncrm_abtestingenabled";
			public const string msdyncrm_abtestwinningmetric = "msdyncrm_abtestwinningmetric";
			public const string msdyncrm_automateschedule = "msdyncrm_automateschedule";
			public const string msdyncrm_dependencies = "msdyncrm_dependencies";
			public const string msdyncrm_description = "msdyncrm_description";
			public const string msdyncrm_emailid = "msdyncrm_emailid";
			public const string msdyncrm_expiration = "msdyncrm_expiration";
			public const string msdyncrm_expirationdate = "msdyncrm_expirationdate";
			public const string msdyncrm_insightsdata = "msdyncrm_insightsdata";
			public const string msdyncrm_marketingemailactivityId = "msdyncrm_marketingemailactivityid";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_permitteddays = "msdyncrm_permitteddays";
			public const string msdyncrm_permittedtimeend = "msdyncrm_permittedtimeend";
			public const string msdyncrm_permittedtimestart = "msdyncrm_permittedtimestart";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_marketingemailactivity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11219;
		public const string EntityCollectionSchemaName = "msdyncrm_marketingemailactivities";
		public const string EntityDisplayCollectionName = "Marketing Email Activity";
		public const string DisplayName = "Marketing Email Activity";
		public const string EntitySetName = "msdyncrm_marketingemailactivities";
		public const string EntityLogicalCollectionName = "msdyncrm_marketingemailactivities";
		public const string EntityPrimaryIdAttribute = "msdyncrm_marketingemailactivityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_marketingemailactivity";
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity(Guid msdyncrm_marketingemailactivityId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_marketingemailactivityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingemailactivity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingemailactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingemailactivity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingemailactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingemailactivity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingemailactivity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique ID of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique ID of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique ID of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique ID of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test distribution - version A</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_abtestdistributionversiona
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_abtestdistributionversiona); }
			set { Entity.Attributes[Fields.msdyncrm_abtestdistributionversiona] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test distribution - version B</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_abtestdistributionversionb
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_abtestdistributionversionb); }
			set { Entity.Attributes[Fields.msdyncrm_abtestdistributionversionb] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test duration unit</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestdurationunit"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestdurationunit.Hours"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestdurationunit? msdyncrm_abtestdurationunit
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_abtestdurationunit);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestdurationunit)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_abtestdurationunit] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_abtestdurationunit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test duration value</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_abtestdurationvalue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_abtestdurationvalue); }
			set { Entity.Attributes[Fields.msdyncrm_abtestdurationvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test ID</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemailtest"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_abtestid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_abtestid); }
			set { Entity.Attributes[Fields.msdyncrm_abtestid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test inconclusive result</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestinconclusiveresult"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestinconclusiveresult.Version_A"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestinconclusiveresult? msdyncrm_abtestinconclusiveresult
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_abtestinconclusiveresult);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestinconclusiveresult)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_abtestinconclusiveresult] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_abtestinconclusiveresult] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B testing enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>A/B testing enabled</strong>]: true - [<strong>A/B testing disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>A/B testing disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_abtestingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_abtestingenabled); }
			set { Entity.Attributes[Fields.msdyncrm_abtestingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: A/B test winning metric</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestwinningmetric"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestwinningmetric.Click_through_rate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestwinningmetric? msdyncrm_abtestwinningmetric
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_abtestwinningmetric);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_abtestwinningmetric)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_abtestwinningmetric] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_abtestwinningmetric] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Automate schedule</para>
		/// <para><strong>Two Option</strong> - [<strong>Automated scheduling enabled</strong>]: true - [<strong>Automated scheduling disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Automated scheduling disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_automateschedule
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_automateschedule); }
			set { Entity.Attributes[Fields.msdyncrm_automateschedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dependencies</para>
		/// <para><strong>Description</strong>: Dependencies</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_dependencies
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_dependencies); }
			set { Entity.Attributes[Fields.msdyncrm_dependencies] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_description); }
			set { Entity.Attributes[Fields.msdyncrm_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Email ID</para>
		/// <para><strong>Description</strong>: ID of the Marketing Email</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_emailid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_emailid); }
			set { Entity.Attributes[Fields.msdyncrm_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Automate schedule</para>
		/// <para><strong>Two Option</strong> - [<strong>Email expiration enabled</strong>]: true - [<strong>Email expiration disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Email expiration disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_expiration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_expiration); }
			set { Entity.Attributes[Fields.msdyncrm_expiration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expiration date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_expirationdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_expirationdate); }
			set { Entity.Attributes[Fields.msdyncrm_expirationdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_insightsdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_insightsdata); }
			set { Entity.Attributes[Fields.msdyncrm_insightsdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Email Activity ID</para>
		/// <para><strong>Description</strong>: ID of the Marketing Email Activity</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_marketingemailactivityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_marketingemailactivityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the email activity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permitted Days</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_permitteddays"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_permitteddays> msdyncrm_permitteddays
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_permitteddays>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyncrm_permitteddays);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.msdyncrm_permitteddays)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyncrm_permitteddays] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyncrm_permitteddays] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permitted hours: end</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_permittedtimeendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_permittedtimeend); }
			set { Entity.Attributes[Fields.msdyncrm_permittedtimeend] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permitted hours: start</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_permittedtimestartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_permittedtimestart); }
			set { Entity.Attributes[Fields.msdyncrm_permittedtimestart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique ID of the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique ID of the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique ID of the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingemailactivityOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: Time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}