//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:43
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.OpportunityProductOptionSets
{
	public enum msdyn_LineType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Service Line</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Field_Service_Line = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Project Service Line</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Project_Service_Line = 690_970_000
	}
	public enum PricingErrorCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Currency Attribute Overflow</para>
		/// <para><strong>Value</strong>: 36</para>
		/// </summary>
		Base_Currency_Attribute_Overflow = 36,
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Currency Attribute Underflow</para>
		/// <para><strong>Value</strong>: 37</para>
		/// </summary>
		Base_Currency_Attribute_Underflow = 37,
		/// <summary>
		/// <para><strong>Display Name</strong>: Detail Error</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Detail_Error = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount Type Invalid State</para>
		/// <para><strong>Value</strong>: 27</para>
		/// </summary>
		Discount_Type_Invalid_State = 27,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Discount Type</para>
		/// <para><strong>Value</strong>: 33</para>
		/// </summary>
		Inactive_Discount_Type = 33,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Price Level</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Inactive_Price_Level = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Current Cost</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Invalid_Current_Cost = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Discount</para>
		/// <para><strong>Value</strong>: 28</para>
		/// </summary>
		Invalid_Discount = 28,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Discount Type</para>
		/// <para><strong>Value</strong>: 26</para>
		/// </summary>
		Invalid_Discount_Type = 26,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price</para>
		/// <para><strong>Value</strong>: 19</para>
		/// </summary>
		Invalid_Price = 19,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Amount</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Invalid_Price_Level_Amount = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Currency</para>
		/// <para><strong>Value</strong>: 34</para>
		/// </summary>
		Invalid_Price_Level_Currency = 34,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Percentage</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Invalid_Price_Level_Percentage = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Pricing Code</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Invalid_Pricing_Code = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Pricing Precision</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Invalid_Pricing_Precision = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Product</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Invalid_Product = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Quantity</para>
		/// <para><strong>Value</strong>: 29</para>
		/// </summary>
		Invalid_Quantity = 29,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Amount</para>
		/// <para><strong>Value</strong>: 24</para>
		/// </summary>
		Invalid_Rounding_Amount = 24,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Option</para>
		/// <para><strong>Value</strong>: 23</para>
		/// </summary>
		Invalid_Rounding_Option = 23,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Policy</para>
		/// <para><strong>Value</strong>: 22</para>
		/// </summary>
		Invalid_Rounding_Policy = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Standard Cost</para>
		/// <para><strong>Value</strong>: 21</para>
		/// </summary>
		Invalid_Standard_Cost = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Current Cost</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Missing_Current_Cost = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Missing_Price = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Missing_Price_Level = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level Amount</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Missing_Price_Level_Amount = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level Percentage</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Missing_Price_Level_Percentage = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Pricing Code</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Missing_Pricing_Code = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Missing_Product = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product Default UOM</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Missing_Product_Default_UOM = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product UOM Schedule </para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Missing_Product_UOM_Schedule = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Quantity</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Missing_Quantity = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Standard Cost</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Missing_Standard_Cost = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Unit Price</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Missing_Unit_Price = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing UOM</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Missing_UOM = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Attribute Out Of Range</para>
		/// <para><strong>Value</strong>: 35</para>
		/// </summary>
		Price_Attribute_Out_Of_Range = 35,
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Calculation Error</para>
		/// <para><strong>Value</strong>: 25</para>
		/// </summary>
		Price_Calculation_Error = 25,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Not In Price Level</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Product_Not_In_Price_Level = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transaction currency is not set for the product price list item</para>
		/// <para><strong>Value</strong>: 38</para>
		/// </summary>
		Transaction_currency_is_not_set_for_the_product_price_list_item = 38
	}
	public enum ProductTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bundle</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bundle = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Optional Bundle Product</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Optional_Bundle_Product = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Product = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Project-based Service</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Project_based_Service = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Bundle Product</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Required_Bundle_Product = 3
	}
	public enum PropertyConfigurationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Edit</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Edit = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Configured</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Not_Configured = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rectify</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Rectify = 1
	}
	public enum SkipPriceCalculation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DoPriceCalcAlways</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		DoPriceCalcAlways = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: SkipPriceCalcOnCreate</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		SkipPriceCalcOnCreate = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: SkipPriceCalcOnUpdate</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		SkipPriceCalcOnUpdate = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: SkipPriceCalcOnUpSert</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		SkipPriceCalcOnUpSert = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class OpportunityProduct : EntityBase
	{
		public struct Fields
		{
			public const string BaseAmount = "baseamount";
			public const string BaseAmount_Base = "baseamount_base";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExtendedAmount = "extendedamount";
			public const string ExtendedAmount_Base = "extendedamount_base";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsPriceOverridden = "ispriceoverridden";
			public const string IsProductOverridden = "isproductoverridden";
			public const string LineItemNumber = "lineitemnumber";
			public const string ManualDiscountAmount = "manualdiscountamount";
			public const string ManualDiscountAmount_Base = "manualdiscountamount_base";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Duration = "msdyn_duration";
			public const string msdyn_enddate = "msdyn_enddate";
			public const string msdyn_LineType = "msdyn_linetype";
			public const string msdyn_pricelist = "msdyn_pricelist";
			public const string msdyn_serviceaccount = "msdyn_serviceaccount";
			public const string msdyn_startdate = "msdyn_startdate";
			public const string OpportunityId = "opportunityid";
			public const string OpportunityProductId = "opportunityproductid";
			public const string OpportunityProductName = "opportunityproductname";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentBundleId = "parentbundleid";
			public const string ParentBundleIdRef = "parentbundleidref";
			public const string PricePerUnit = "priceperunit";
			public const string PricePerUnit_Base = "priceperunit_base";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string ProductAssociationId = "productassociationid";
			public const string ProductDescription = "productdescription";
			public const string ProductId = "productid";
			public const string ProductName = "productname";
			public const string ProductTypeCode = "producttypecode";
			public const string PropertyConfigurationStatus = "propertyconfigurationstatus";
			public const string Quantity = "quantity";
			public const string SequenceNumber = "sequencenumber";
			public const string SkipPriceCalculation = "skippricecalculation";
			public const string Tax = "tax";
			public const string Tax_Base = "tax_base";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UoMId = "uomid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string VolumeDiscountAmount = "volumediscountamount";
			public const string VolumeDiscountAmount_Base = "volumediscountamount_base";
		}
		public const string EntityLogicalName = "opportunityproduct";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1083;
		public const string EntityCollectionSchemaName = "OpportunityProducts";
		public const string EntityDisplayCollectionName = "Opportunity Lines";
		public const string DisplayName = "Opportunity Line";
		public const string EntitySetName = "opportunityproducts";
		public const string EntityLogicalCollectionName = "opportunityproducts";
		public const string EntityPrimaryIdAttribute = "opportunityproductid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "opportunityproductname";
		public const string EntitySchemaName = "OpportunityProduct";
		[DebuggerNonUserCode()]
		public OpportunityProduct()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OpportunityProduct(Guid OpportunityProductId)
		{
			Entity = new Entity(EntityLogicalName, OpportunityProductId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OpportunityProduct(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OpportunityProduct"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public OpportunityProduct(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OpportunityProduct"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public OpportunityProduct(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new OpportunityProduct(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="OpportunityProduct"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public OpportunityProduct(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new OpportunityProduct(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public OpportunityProduct(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount</para>
		/// <para><strong>Description</strong>: Shows the total price of the opportunity product, based on the price per unit, volume discount, and quantity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BaseAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BaseAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BaseAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BaseAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BaseAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BaseAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the opportunity product, such as manufacturing details.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Extended amount</para>
		/// <para><strong>Description</strong>: Shows the total amount due for the opportunity product, calculated on the Amount value minus the Manual Discount amount.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExtendedAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ExtendedAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExtendedAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ExtendedAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Extended Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Extended Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExtendedAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ExtendedAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Overridden</para>
		/// <para><strong>Description</strong>: Select whether the pricing on the opportunity product reflects an override of the product catalog pricing.</para>
		/// <para><strong>Two Option</strong> - [<strong>Override Price</strong>]: true - [<strong>Use Default</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Use Default</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPriceOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPriceOverridden); }
			set { Entity.Attributes[Fields.IsPriceOverridden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Select Product</para>
		/// <para><strong>Description</strong>: For system use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Write-In</strong>]: true - [<strong>Existing</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Existing</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsProductOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsProductOverridden); }
			set { Entity.Attributes[Fields.IsProductOverridden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Line Item Number</para>
		/// <para><strong>Description</strong>: Type the line item number for the opportunity product to easily identify the product in the opportunity documents and make sure it&apos;s listed in the correct order.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LineItemNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LineItemNumber); }
			set { Entity.Attributes[Fields.LineItemNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual Discount Amount</para>
		/// <para><strong>Description</strong>: Type the manual discount amount for the opportunity product to deduct any negotiated or other savings from the product total.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ManualDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ManualDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ManualDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ManualDiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Manual Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ManualDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ManualDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the opportunityproduct.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Enter the duration of the agreement</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Duration); }
			set { Entity.Attributes[Fields.msdyn_Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Date</para>
		/// <para><strong>Description</strong>: Enter the end date of the agreement</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_enddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_enddate); }
			set { Entity.Attributes[Fields.msdyn_enddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Line Type</para>
		/// <para><strong>Description</strong>: The field to distinguish the order lines to be of project service or field service</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_LineType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_LineType? msdyn_LineType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LineType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.msdyn_LineType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LineType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LineType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Select a price list for the opportunity line</para>
		/// <para><strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_pricelist
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_pricelist); }
			set { Entity.Attributes[Fields.msdyn_pricelist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account</para>
		/// <para><strong>Description</strong>: Select the service account for the opportunity line</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_serviceaccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_serviceaccount); }
			set { Entity.Attributes[Fields.msdyn_serviceaccount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date</para>
		/// <para><strong>Description</strong>: Start date of the Agreement</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startdate); }
			set { Entity.Attributes[Fields.msdyn_startdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity</para>
		/// <para><strong>Description</strong>: Unique identifier of the opportunity with which the opportunity product is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OpportunityId); }
			set { Entity.Attributes[Fields.OpportunityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Product</para>
		/// <para><strong>Description</strong>: Unique identifier of the opportunity product.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OpportunityProductId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OpportunityProductId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Opportunity Product Name. Added for 1:n referential relationship (internal purposes only)</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OpportunityProductName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OpportunityProductName); }
			set { Entity.Attributes[Fields.OpportunityProductName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Bundle</para>
		/// <para><strong>Description</strong>: Choose the parent bundle associated with this product</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentBundleId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentBundleId); }
			set { Entity.Attributes[Fields.ParentBundleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent bundle product</para>
		/// <para><strong>Description</strong>: Choose the parent bundle associated with this product</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunityproduct"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBundleIdRef
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBundleIdRef); }
			set { Entity.Attributes[Fields.ParentBundleIdRef] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price per unit</para>
		/// <para><strong>Description</strong>: Shows the price per unit of the opportunity product, based on the price list specified on the parent opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? PricePerUnit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.PricePerUnit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricePerUnit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.PricePerUnit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Per Unit (Base)</para>
		/// <para><strong>Description</strong>: Value of the Price Per Unit in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? PricePerUnit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.PricePerUnit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pricing Error</para>
		/// <para><strong>Description</strong>: Select the pricing error for the opportunity product.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PricingErrorCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PricingErrorCode.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PricingErrorCode? PricingErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PricingErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingErrorCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bundle Item Association</para>
		/// <para><strong>Description</strong>: Unique identifier of the product line item association with bundle in the opportunity</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProductAssociationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProductAssociationId); }
			set { Entity.Attributes[Fields.ProductAssociationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Write-In Product</para>
		/// <para><strong>Description</strong>: Type a detailed product description or additional notes about the opportunity product, such as talking points or product updates, that will assist the sales team when they discuss the product with the customer.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductDescription); }
			set { Entity.Attributes[Fields.ProductDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Existing Product</para>
		/// <para><strong>Description</strong>: Choose the product to include on the opportunity to link the product&apos;s pricing and other information to the opportunity.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProductId); }
			set { Entity.Attributes[Fields.ProductId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product name</para>
		/// <para><strong>Description</strong>: Calculated field that will be populated by name and description of the product.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductName); }
			set { Entity.Attributes[Fields.ProductName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product type</para>
		/// <para><strong>Description</strong>: Product Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.ProductTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.ProductTypeCode.Product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.ProductTypeCode? ProductTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProductTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.ProductTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProductTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProductTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Property Configuration</para>
		/// <para><strong>Description</strong>: Status of the property configuration.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PropertyConfigurationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PropertyConfigurationStatus.Not_Configured"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PropertyConfigurationStatus? PropertyConfigurationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PropertyConfigurationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.PropertyConfigurationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PropertyConfigurationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PropertyConfigurationStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quantity</para>
		/// <para><strong>Description</strong>: Type the amount or quantity of the product the customer would like to purchase.</para>
		/// <para>Required - <strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Quantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Quantity); }
			set { Entity.Attributes[Fields.Quantity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Number</para>
		/// <para><strong>Description</strong>: Shows the ID of the data that maintains the sequence.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SequenceNumber); }
			set { Entity.Attributes[Fields.SequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skip Price Calculation</para>
		/// <para><strong>Description</strong>: Skip price calculation</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.SkipPriceCalculation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.SkipPriceCalculation.DoPriceCalcAlways"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.SkipPriceCalculation? SkipPriceCalculation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SkipPriceCalculation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityProductOptionSets.SkipPriceCalculation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SkipPriceCalculation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SkipPriceCalculation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tax</para>
		/// <para><strong>Description</strong>: Type the tax amount to be applied on the opportunity product.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -100,000,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Tax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Tax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Tax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Tax] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tax (Base)</para>
		/// <para><strong>Description</strong>: Value of the Tax in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Tax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Tax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit</para>
		/// <para><strong>Description</strong>: Choose the unit of measurement for the base unit quantity for this purchase, such as each or dozen.</para>
		/// <para><strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UoMId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UoMId); }
			set { Entity.Attributes[Fields.UoMId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Volume Discount</para>
		/// <para><strong>Description</strong>: Shows the discount amount per unit if a specified volume is purchased. Configure volume discounts in the Product Catalog in the Settings area.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? VolumeDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.VolumeDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Volume Discount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Volume Discount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? VolumeDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.VolumeDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}