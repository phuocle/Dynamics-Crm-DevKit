//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ciworkflownode : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_additionalinfoserialized = "msdyn_additionalinfoserialized";
			public const string msdyn_cierrorserialized = "msdyn_cierrorserialized";
			public const string msdyn_cierrorsserialized = "msdyn_cierrorsserialized";
			public const string msdyn_ciworkflownodeId = "msdyn_ciworkflownodeid";
			public const string msdyn_endtimestamp = "msdyn_endtimestamp";
			public const string msdyn_friendlyname = "msdyn_friendlyname";
			public const string msdyn_graphname = "msdyn_graphname";
			public const string msdyn_identifier = "msdyn_identifier";
			public const string msdyn_inputdataserialized = "msdyn_inputdataserialized";
			public const string msdyn_jobidsserialized = "msdyn_jobidsserialized";
			public const string msdyn_lastsuccessfultimestamp = "msdyn_lastsuccessfultimestamp";
			public const string msdyn_lastsuccessjobidsserialized = "msdyn_lastsuccessjobidsserialized";
			public const string msdyn_lastsuccesstaskid = "msdyn_lastsuccesstaskid";
			public const string msdyn_Name = "msdyn_name";
			public const string msdyn_nodename = "msdyn_nodename";
			public const string msdyn_nodeversion = "msdyn_nodeversion";
			public const string msdyn_operationtype = "msdyn_operationtype";
			public const string msdyn_outputdataserialized = "msdyn_outputdataserialized";
			public const string msdyn_selectionreasonserialized = "msdyn_selectionreasonserialized";
			public const string msdyn_starttimestamp = "msdyn_starttimestamp";
			public const string msdyn_submittedtimestamp = "msdyn_submittedtimestamp";
			public const string msdyn_subtype = "msdyn_subtype";
			public const string msdyn_taskid = "msdyn_taskid";
			public const string msdyn_taskstatus = "msdyn_taskstatus";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "msdyn_ciworkflownode";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11460;
		public const string EntityCollectionSchemaName = "msdyn_ciworkflownodes";
		public const string EntityDisplayCollectionName = "CIWorkflowNodes";
		public const string DisplayName = "CIWorkflowNode";
		public const string EntitySetName = "msdyn_ciworkflownodes";
		public const string EntityLogicalCollectionName = "msdyn_ciworkflownodes";
		public const string EntityPrimaryIdAttribute = "msdyn_ciworkflownodeid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_ciworkflownode";
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode(Guid msdyn_ciworkflownodeId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ciworkflownodeId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ciworkflownode"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ciworkflownode"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ciworkflownode(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ciworkflownode"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ciworkflownode(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ciworkflownode(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AdditionalInfoSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_additionalinfoserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_additionalinfoserialized); }
			set { Entity.Attributes[Fields.msdyn_additionalinfoserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CIErrorSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cierrorserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cierrorserialized); }
			set { Entity.Attributes[Fields.msdyn_cierrorserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CIErrorsSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cierrorsserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cierrorsserialized); }
			set { Entity.Attributes[Fields.msdyn_cierrorsserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CIWorkflowNode</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ciworkflownodeId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ciworkflownodeId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EndTimestamp</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_endtimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_endtimestamp); }
			set { Entity.Attributes[Fields.msdyn_endtimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FriendlyName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_friendlyname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_friendlyname); }
			set { Entity.Attributes[Fields.msdyn_friendlyname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GraphName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_graphname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_graphname); }
			set { Entity.Attributes[Fields.msdyn_graphname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Identifier</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_identifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_identifier); }
			set { Entity.Attributes[Fields.msdyn_identifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: InputDataSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inputdataserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inputdataserialized); }
			set { Entity.Attributes[Fields.msdyn_inputdataserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: JobIdsSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_jobidsserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_jobidsserialized); }
			set { Entity.Attributes[Fields.msdyn_jobidsserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LastSuccessfulTimestamp</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastsuccessfultimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastsuccessfultimestamp); }
			set { Entity.Attributes[Fields.msdyn_lastsuccessfultimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LastSuccessJobIdsSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lastsuccessjobidsserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lastsuccessjobidsserialized); }
			set { Entity.Attributes[Fields.msdyn_lastsuccessjobidsserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LastSuccessTaskId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lastsuccesstaskid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lastsuccesstaskid); }
			set { Entity.Attributes[Fields.msdyn_lastsuccesstaskid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Name); }
			set { Entity.Attributes[Fields.msdyn_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NodeName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_nodename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_nodename); }
			set { Entity.Attributes[Fields.msdyn_nodename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NodeVersion</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_nodeversion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_nodeversion); }
			set { Entity.Attributes[Fields.msdyn_nodeversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OperationType</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_operationtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_operationtype); }
			set { Entity.Attributes[Fields.msdyn_operationtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OutputDataSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_outputdataserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_outputdataserialized); }
			set { Entity.Attributes[Fields.msdyn_outputdataserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SelectionReasonSerialized</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_selectionreasonserialized
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_selectionreasonserialized); }
			set { Entity.Attributes[Fields.msdyn_selectionreasonserialized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: StartTimestamp</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_starttimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_starttimestamp); }
			set { Entity.Attributes[Fields.msdyn_starttimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SubmittedTimestamp</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_submittedtimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_submittedtimestamp); }
			set { Entity.Attributes[Fields.msdyn_submittedtimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SubType</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_subtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_subtype); }
			set { Entity.Attributes[Fields.msdyn_subtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TaskId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_taskid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_taskid); }
			set { Entity.Attributes[Fields.msdyn_taskid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TaskStatus</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_taskstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_taskstatus); }
			set { Entity.Attributes[Fields.msdyn_taskstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the CIWorkflowNode</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the CIWorkflowNode</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ciworkflownodeOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}