//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets
{
	public enum msdyn_CalendarTemplate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 3-3-3-4</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		_3_3_3_4 = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: 3-3-4-3</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		_3_3_4_3 = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: 3-4-3-3</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		_3_4_3_3 = 100_000_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: 4-3-3-3</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		_4_3_3_3 = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: 4-4-5</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		_4_4_5 = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: 4-5-4</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		_4_5_4 = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: 5-4-4</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		_5_4_4 = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Broadcast Calendar</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Broadcast_Calendar = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Gregorian</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Gregorian = 100_000_003
	}
	public enum msdyn_periodtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Annually</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Annually = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monthly</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Monthly = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quarterly</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quarterly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Weekly</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Weekly = 2
	}
	public enum msdyn_startingfiscalmonth
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: April</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		April = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: August</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		August = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: December</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		December = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: February</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		February = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: January</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		January = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: July</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		July = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: June</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		June = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: March</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		March = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: May</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		May = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: November</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		November = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: October</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		October = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: September</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		September = 8
	}
	public enum msdyn_startingfiscalquarter
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Q1</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Q1 = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Q2</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Q2 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Q3</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Q3 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Q4</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Q4 = 3
	}
	public enum msdyn_startingfiscalyear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2018</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		FY2018 = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2019</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FY2019 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2020</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		FY2020 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2021</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		FY2021 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2022</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		FY2022 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2023</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		FY2023 = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2024</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		FY2024 = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2025</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		FY2025 = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2026</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		FY2026 = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2027</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		FY2027 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2028</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		FY2028 = 10
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Archived</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Archived = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Failed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		In_progress = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalidated</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Invalidated = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reactivation in progress</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Reactivation_in_progress = 8
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_forecastconfiguration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_addedWeekIndex = "msdyn_addedweekindex";
			public const string msdyn_additionalfilter = "msdyn_additionalfilter";
			public const string msdyn_advancedsettings = "msdyn_advancedsettings";
			public const string msdyn_CalendarTemplate = "msdyn_calendartemplate";
			public const string msdyn_columns = "msdyn_columns";
			public const string msdyn_enddate = "msdyn_enddate";
			public const string msdyn_entitymetadata = "msdyn_entitymetadata";
			public const string msdyn_errormessage = "msdyn_errormessage";
			public const string msdyn_FiscalYearStartDate = "msdyn_fiscalyearstartdate";
			public const string msdyn_forecastcategoryattribute = "msdyn_forecastcategoryattribute";
			public const string msdyn_forecastconfigurationId = "msdyn_forecastconfigurationid";
			public const string msdyn_hierarchyentity = "msdyn_hierarchyentity";
			public const string msdyn_hierarchyfilter = "msdyn_hierarchyfilter";
			public const string msdyn_hierarchyrelationship = "msdyn_hierarchyrelationship";
			public const string msdyn_isdefault = "msdyn_isdefault";
			public const string msdyn_issnapshotscheduled = "msdyn_issnapshotscheduled";
			public const string msdyn_moneyattrcache = "msdyn_moneyattrcache";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_numberofrecurrences = "msdyn_numberofrecurrences";
			public const string msdyn_periodtype = "msdyn_periodtype";
			public const string msdyn_permissionsdata = "msdyn_permissionsdata";
			public const string msdyn_pivots = "msdyn_pivots";
			public const string msdyn_previewFlags = "msdyn_previewflags";
			public const string msdyn_publisheddatetime = "msdyn_publisheddatetime";
			public const string msdyn_relatedentities = "msdyn_relatedentities";
			public const string msdyn_rollupdefaultviewid = "msdyn_rollupdefaultviewid";
			public const string msdyn_rollupentity = "msdyn_rollupentity";
			public const string msdyn_rootentityrecordid = "msdyn_rootentityrecordid";
			public const string msdyn_snapshotschedule = "msdyn_snapshotschedule";
			public const string msdyn_snapshottimezone = "msdyn_forecasttimezone";
			public const string msdyn_startdate = "msdyn_startdate";
			public const string msdyn_startingfiscalmonth = "msdyn_startingfiscalmonth";
			public const string msdyn_startingfiscalquarter = "msdyn_startingfiscalquarter";
			public const string msdyn_startingfiscalyear = "msdyn_startingfiscalyear";
			public const string msdyn_templatetype = "msdyn_templatetype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_forecastconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10524;
		public const string EntityCollectionSchemaName = "msdyn_forecastconfigurations";
		public const string EntityDisplayCollectionName = "Forecast configurations";
		public const string DisplayName = "Forecast Configuration";
		public const string EntitySetName = "msdyn_forecastconfigurations";
		public const string EntityLogicalCollectionName = "msdyn_forecastconfigurations";
		public const string EntityPrimaryIdAttribute = "msdyn_forecastconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_forecastconfiguration";
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration(Guid msdyn_forecastconfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_forecastconfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastconfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_forecastconfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_forecastconfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastconfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: addedWeekIndex</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_addedWeekIndex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_addedWeekIndex); }
			set { Entity.Attributes[Fields.msdyn_addedWeekIndex] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional filters</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_additionalfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_additionalfilter); }
			set { Entity.Attributes[Fields.msdyn_additionalfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Settings</para>
		/// <para><strong>Description</strong>: Forecast configuration settings</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_advancedsettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_advancedsettings); }
			set { Entity.Attributes[Fields.msdyn_advancedsettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar Template</para>
		/// <para><strong>Description</strong>: Fiscal Year Calendar Template</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_CalendarTemplate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_CalendarTemplate.Gregorian"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_CalendarTemplate? msdyn_CalendarTemplate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CalendarTemplate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_CalendarTemplate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CalendarTemplate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CalendarTemplate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Columns</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_columns
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_columns); }
			set { Entity.Attributes[Fields.msdyn_columns] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Date</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_enddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_enddate); }
			set { Entity.Attributes[Fields.msdyn_enddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entities metadata</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entitymetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entitymetadata); }
			set { Entity.Attributes[Fields.msdyn_entitymetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_errormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_errormessage); }
			set { Entity.Attributes[Fields.msdyn_errormessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fiscal Year Start Date</para>
		/// <para><strong>Description</strong>: Fiscal Year Start Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_FiscalYearStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_FiscalYearStartDate); }
			set { Entity.Attributes[Fields.msdyn_FiscalYearStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast category attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_forecastcategoryattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_forecastcategoryattribute); }
			set { Entity.Attributes[Fields.msdyn_forecastcategoryattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast configuration id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_forecastconfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_forecastconfigurationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hierarchy entity</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_hierarchyentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_hierarchyentity); }
			set { Entity.Attributes[Fields.msdyn_hierarchyentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hierarchy filters</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_hierarchyfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_hierarchyfilter); }
			set { Entity.Attributes[Fields.msdyn_hierarchyfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Relationship</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_hierarchyrelationship
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_hierarchyrelationship); }
			set { Entity.Attributes[Fields.msdyn_hierarchyrelationship] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Default</para>
		/// <para><strong>Description</strong>: Determine if FC is default</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdefault); }
			set { Entity.Attributes[Fields.msdyn_isdefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Snapshot Scheduling</para>
		/// <para><strong>Description</strong>: Enable scheduling for forecast snapshots</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_issnapshotscheduled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_issnapshotscheduled); }
			set { Entity.Attributes[Fields.msdyn_issnapshotscheduled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nested dictionary containing base column name for given money column name for every entity</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_moneyattrcache
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_moneyattrcache); }
			set { Entity.Attributes[Fields.msdyn_moneyattrcache] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast configuration name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of recurrences</para>
		/// <para><strong>Description</strong>: Indicate the number of recurrences that the forecast will be generated.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 12</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofrecurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofrecurrences); }
			set { Entity.Attributes[Fields.msdyn_numberofrecurrences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast period</para>
		/// <para><strong>Description</strong>: Select the type of period for which the forecast must be generated.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_periodtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_periodtype.Quarterly"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_periodtype? msdyn_periodtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_periodtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_periodtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_periodtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_periodtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permissions</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_permissionsdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_permissionsdata); }
			set { Entity.Attributes[Fields.msdyn_permissionsdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pivots</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_pivots
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_pivots); }
			set { Entity.Attributes[Fields.msdyn_pivots] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: previewFlags</para>
		/// <para><strong>Description</strong>: Feature Flags</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_previewFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_previewFlags); }
			set { Entity.Attributes[Fields.msdyn_previewFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published date time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_publisheddatetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_publisheddatetime); }
			set { Entity.Attributes[Fields.msdyn_publisheddatetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related entities</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_relatedentities
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_relatedentities); }
			set { Entity.Attributes[Fields.msdyn_relatedentities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup entity default view</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_rollupdefaultviewid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_rollupdefaultviewid); }
			set { Entity.Attributes[Fields.msdyn_rollupdefaultviewid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup entity</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_rollupentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_rollupentity); }
			set { Entity.Attributes[Fields.msdyn_rollupentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Root record Id</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_rootentityrecordid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_rootentityrecordid); }
			set { Entity.Attributes[Fields.msdyn_rootentityrecordid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule governing the forecast snapshot</para>
		/// <para><strong>Description</strong>: Schedule governing the forecast snapshot</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_snapshotschedule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_snapshotschedule); }
			set { Entity.Attributes[Fields.msdyn_snapshotschedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prefered timezone governing the scheduler of forecast snapshot</para>
		/// <para><strong>Description</strong>: Prefered timezone governing the scheduler of forecast snapshot</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_snapshottimezone
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_snapshottimezone); }
			set { Entity.Attributes[Fields.msdyn_snapshottimezone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startdate); }
			set { Entity.Attributes[Fields.msdyn_startdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Starting Fiscal month</para>
		/// <para><strong>Description</strong>: Select the fiscal month for the forecast configuration.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalmonth"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalmonth? msdyn_startingfiscalmonth
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_startingfiscalmonth);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalmonth)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_startingfiscalmonth] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_startingfiscalmonth] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Starting Fiscal quarter</para>
		/// <para><strong>Description</strong>: Select the fiscal quarter for the forecast configuration.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalquarter"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalquarter? msdyn_startingfiscalquarter
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_startingfiscalquarter);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalquarter)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_startingfiscalquarter] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_startingfiscalquarter] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Starting Fiscal year</para>
		/// <para><strong>Description</strong>: Select the fiscal year for the forecast configuration.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalyear"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalyear? msdyn_startingfiscalyear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_startingfiscalyear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.msdyn_startingfiscalyear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_startingfiscalyear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_startingfiscalyear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Template type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_templatetype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_templatetype); }
			set { Entity.Attributes[Fields.msdyn_templatetype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Forecast Configuration</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Forecast Configuration</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastconfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}