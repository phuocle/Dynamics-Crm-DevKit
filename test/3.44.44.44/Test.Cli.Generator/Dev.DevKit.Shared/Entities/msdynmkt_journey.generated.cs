//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets
{
	public enum msdynmkt_frequencycaptype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apply frequency cap by skipping messages</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Apply_frequency_cap_by_skipping_messages = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore frequency cap</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ignore_frequency_cap = 1
	}
	public enum msdynmkt_Purpose
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Double Opt-In</para>
		/// <para><strong>Value</strong>: 721,460,001</para>
		/// </summary>
		Double_Opt_In = 721_460_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing</para>
		/// <para><strong>Value</strong>: 721,460,000</para>
		/// </summary>
		Marketing = 721_460_000
	}
	public enum msdynmkt_triggerType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Event = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: OneTime</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		OneTime = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ongoing</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ongoing = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Recurring = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Completed = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completing</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Completing = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Deleted = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Live = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Publishing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Publishing = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Stopped = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Stopping = 8
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Completed = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completing</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Completing</strong></para>
		/// </summary>
		Completing = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Deleted</strong></para>
		/// </summary>
		Deleted = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draining</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Stopped</strong></para>
		/// </summary>
		Draining = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Live</strong></para>
		/// </summary>
		Live = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Publishing</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Publishing</strong></para>
		/// </summary>
		Publishing = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Stopped</strong></para>
		/// </summary>
		Stopped = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Stopping</strong></para>
		/// </summary>
		Stopping = 9
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_journey : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_baseversionjourneyid = "msdynmkt_baseversionjourneyid";
			public const string msdynmkt_DoubleOptInCompliance = "msdynmkt_doubleoptincompliance";
			public const string msdynmkt_errorDetails = "msdynmkt_errorDetails";
			public const string msdynmkt_flags = "msdynmkt_flags";
			public const string msdynmkt_frequencycaptype = "msdynmkt_frequencycaptype";
			public const string msdynmkt_issupersededbylaterversion = "msdynmkt_issupersededbylaterversion";
			public const string msdynmkt_journeyEndTime = "msdynmkt_journeyendtime";
			public const string msdynmkt_journeyfeatureversionnumber = "msdynmkt_journeyfeatureversionnumber";
			public const string msdynmkt_journeyId = "msdynmkt_journeyid";
			public const string msdynmkt_journeyinstancepartitionenabled = "msdynmkt_journeyinstancepartitionenabled";
			public const string msdynmkt_JourneyJSON = "msdynmkt_journeyjson";
			public const string msdynmkt_JourneyJSONBackup = "msdynmkt_journeyjsonbackup";
			public const string msdynmkt_journeyStartTime = "msdynmkt_journeystarttime";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_Purpose = "msdynmkt_purpose";
			public const string msdynmkt_readyToBeTriggeredBySegmentRefresh = "msdynmkt_readytobetriggeredbysegmentrefresh";
			public const string msdynmkt_templateid = "msdynmkt_templateid";
			public const string msdynmkt_triggerType = "msdynmkt_triggertype";
			public const string msdynmkt_versiondescription = "msdynmkt_versiondescription";
			public const string msdynmkt_versionnumber = "msdynmkt_versionnumber";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_journey";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11287;
		public const string EntityCollectionSchemaName = "msdynmkt_journeies";
		public const string EntityDisplayCollectionName = "Journeys";
		public const string DisplayName = "Journey";
		public const string EntitySetName = "msdynmkt_journeys";
		public const string EntityLogicalCollectionName = "msdynmkt_journeies";
		public const string EntityPrimaryIdAttribute = "msdynmkt_journeyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_journey";
		[DebuggerNonUserCode()]
		public msdynmkt_journey()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_journey(Guid msdynmkt_journeyId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_journeyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_journey(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_journey"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_journey(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_journey"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_journey(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_journey(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_journey"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_journey(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_journey(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_journey(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base version</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdynmkt_baseversionjourneyid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdynmkt_baseversionjourneyid); }
			set { Entity.Attributes[Fields.msdynmkt_baseversionjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Double Opt-In Compliance</para>
		/// <para><strong>Description</strong>: Double Opt-In Compliance lookup if the journey&apos;s purpose is DOI</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_compliancesettings4"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_DoubleOptInCompliance
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_DoubleOptInCompliance); }
			set { Entity.Attributes[Fields.msdynmkt_DoubleOptInCompliance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error Details</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_errorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_errorDetails); }
			set { Entity.Attributes[Fields.msdynmkt_errorDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flags</para>
		/// <para><strong>Description</strong>: Internal usage only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_flags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_flags); }
			set { Entity.Attributes[Fields.msdynmkt_flags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Frequency cap type</para>
		/// <para><strong>Description</strong>: Frequency cap type for the journey</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_frequencycaptype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_frequencycaptype.Apply_frequency_cap_by_skipping_messages"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_frequencycaptype? msdynmkt_frequencycaptype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_frequencycaptype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_frequencycaptype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_frequencycaptype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_frequencycaptype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is superseded by later version</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_issupersededbylaterversion
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_issupersededbylaterversion); }
			set { Entity.Attributes[Fields.msdynmkt_issupersededbylaterversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey end time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_journeyEndTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_journeyEndTime); }
			set { Entity.Attributes[Fields.msdynmkt_journeyEndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey feature version number</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_journeyfeatureversionnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_journeyfeatureversionnumber); }
			set { Entity.Attributes[Fields.msdynmkt_journeyfeatureversionnumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_journeyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_journeyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is journey instance partitioning enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_journeyinstancepartitionenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_journeyinstancepartitionenabled); }
			set { Entity.Attributes[Fields.msdynmkt_journeyinstancepartitionenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey JSON</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_JourneyJSON
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_JourneyJSON); }
			set { Entity.Attributes[Fields.msdynmkt_JourneyJSON] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey JSON Backup</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_JourneyJSONBackup
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_JourneyJSONBackup); }
			set { Entity.Attributes[Fields.msdynmkt_JourneyJSONBackup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey start time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_journeyStartTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_journeyStartTime); }
			set { Entity.Attributes[Fields.msdynmkt_journeyStartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the journey.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Purpose</para>
		/// <para><strong>Description</strong>: Journey&apos;s purpose - Marketing, DOI</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_Purpose"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_Purpose? msdynmkt_Purpose
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_Purpose);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_Purpose)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_Purpose] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_Purpose] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready to be triggered by segment refresh</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_readyToBeTriggeredBySegmentRefresh
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_readyToBeTriggeredBySegmentRefresh); }
			set { Entity.Attributes[Fields.msdynmkt_readyToBeTriggeredBySegmentRefresh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Template ID</para>
		/// <para><strong>Description</strong>: ID of template that journey is created from</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_journeytemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_templateid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_templateid); }
			set { Entity.Attributes[Fields.msdynmkt_templateid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trigger type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_triggerType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_triggerType.Recurring"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_triggerType? msdynmkt_triggerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_triggerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.msdynmkt_triggerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_triggerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_triggerType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey version description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_versiondescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_versiondescription); }
			set { Entity.Attributes[Fields.msdynmkt_versiondescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version number</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_versionnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_versionnumber); }
			set { Entity.Attributes[Fields.msdynmkt_versionnumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Journey</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Journey</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}