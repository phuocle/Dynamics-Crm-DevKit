//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.activitymonitorOptionSets
{
	public enum CurrentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready for Power Automate</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ready_for_Power_Automate = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready for workflow</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ready_for_workflow = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Skipped = 3
	}
	public enum Reason
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: --</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		__0 = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: --</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		__12 = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: --</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		__8 = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: A contact was not created for this sender. This can be that the rule owner doesn't have permission to create contacts.</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		A_contact_was_not_created_for_this_sender_This_can_be_that_the_rule_owner_doesnt_have_permission_to_create_contacts = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: A resolved case is already connected with this record.</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		A_resolved_case_is_already_connected_with_this_record = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: An active case is already connected with this record.</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		An_active_case_is_already_connected_with_this_record = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: An existing entity is already connected with this record.</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		An_existing_entity_is_already_connected_with_this_record = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact creation failed for this sender</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Contact_creation_failed_for_this_sender = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email is coming from an unknown sender.</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Email_is_coming_from_an_unknown_sender = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error matching conditions. Contact Microsoft support.</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Error_matching_conditions_Contact_Microsoft_support = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal failure contact Microsoft support </para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Internal_failure_contact_Microsoft_support = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: No email sender is found.</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		No_email_sender_is_found = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: No valid entitlement for this email sender.</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		No_valid_entitlement_for_this_email_sender = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: No valid entitlement for this email sender. The rule continued with any additional action selected, but skipped the primary action for this email sender.</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		No_valid_entitlement_for_this_email_sender_The_rule_continued_with_any_additional_action_selected_but_skipped_the_primary_action_for_this_email_sender = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: The rule doesn’t have any conditions applicable to the record.</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		The_rule_doesnt_have_any_conditions_applicable_to_the_record = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: The rule is disconnected from the Power Automate flow. To reconnect, please deactivate and reactivate the rule.</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		The_rule_is_disconnected_from_the_Power_Automate_flow_To_reconnect_please_deactivate_and_reactivate_the_rule = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: The rule is disconnected from the workflow. To reconnect, please deactivate and reactivate the rule.</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		The_rule_is_disconnected_from_the_workflow_To_reconnect_please_deactivate_and_reactivate_the_rule = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: The rule requires a connected case to be resolved for a specific amount of time before creating a new one. This connected case has been resolved for less than the amount of time selected.</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		The_rule_requires_a_connected_case_to_be_resolved_for_a_specific_amount_of_time_before_creating_a_new_one_This_connected_case_has_been_resolved_for_less_than_the_amount_of_time_selected = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unable to find the source data for this email.</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unable_to_find_the_source_data_for_this_email = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class activitymonitor : EntityBase
	{
		public struct Fields
		{
			public const string activitymonitorId = "activitymonitorid";
			public const string AdvancedSettings = "advancedsettings";
			public const string ConditionId = "conditionid";
			public const string ContactCreatedByRule = "contactcreatedbyrule";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CurrentState = "currentstate";
			public const string EntitlementCheck = "entitlementcheck";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MonitoredActivityItemId = "monitoredactivityitemid";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Reason = "reason";
			public const string Recommendation = "recommendation";
			public const string RuleId = "ruleid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "activitymonitor";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10367;
		public const string EntityCollectionSchemaName = "activitymonitors";
		public const string EntityDisplayCollectionName = "Activity monitors";
		public const string DisplayName = "Activity monitor";
		public const string EntitySetName = "activitymonitors";
		public const string EntityLogicalCollectionName = "activitymonitors";
		public const string EntityPrimaryIdAttribute = "activitymonitorid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "activitymonitor";
		[DebuggerNonUserCode()]
		public activitymonitor()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public activitymonitor(Guid activitymonitorId)
		{
			Entity = new Entity(EntityLogicalName, activitymonitorId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public activitymonitor(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="activitymonitor"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public activitymonitor(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="activitymonitor"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public activitymonitor(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new activitymonitor(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="activitymonitor"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public activitymonitor(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new activitymonitor(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public activitymonitor(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity monitor id</para>
		/// <para><strong>Description</strong>: Unique identifier for activity monitor.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid activitymonitorId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.activitymonitorId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced settings</para>
		/// <para><strong>Description</strong>: Json string containing advanced setting flags for the matched rule.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdvancedSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdvancedSettings); }
			set { Entity.Attributes[Fields.AdvancedSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Condition name</para>
		/// <para><strong>Description</strong>: Unique identifier for ARC rule item associated with activity monitor.</para>
		/// <para><strong>Lookup</strong>: <see cref="convertruleitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ConditionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ConditionId); }
			set { Entity.Attributes[Fields.ConditionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact created by rule</para>
		/// <para><strong>Description</strong>: Status of contact creation for an unknown sender during ARC runtime.</para>
		/// <para><strong>Two Option</strong> - [<strong>Success</strong>]: true - [<strong>Failed</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Failed</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ContactCreatedByRule
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ContactCreatedByRule); }
			set { Entity.Attributes[Fields.ContactCreatedByRule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluated on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current state</para>
		/// <para><strong>Description</strong>: ARC early exit status.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.activitymonitorOptionSets.CurrentState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.activitymonitorOptionSets.CurrentState.Ready_for_workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.activitymonitorOptionSets.CurrentState? CurrentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CurrentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.activitymonitorOptionSets.CurrentState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CurrentState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CurrentState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entitlement check</para>
		/// <para><strong>Description</strong>: Status of entitlement check during arc runtime.</para>
		/// <para><strong>Two Option</strong> - [<strong>Success</strong>]: true - [<strong>Failed</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Failed</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EntitlementCheck
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EntitlementCheck); }
			set { Entity.Attributes[Fields.EntitlementCheck] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Monitored activity item</para>
		/// <para><strong>Description</strong>: Monitored activity item record.</para>
		/// <para><strong>Lookup</strong>: <see cref="email"/>, <see cref="task"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MonitoredActivityItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MonitoredActivityItemId); }
			set { Entity.Attributes[Fields.MonitoredActivityItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the activity monitor.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reason</para>
		/// <para><strong>Description</strong>: ARC early exit reason</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.activitymonitorOptionSets.Reason"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.activitymonitorOptionSets.Reason.__0"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.activitymonitorOptionSets.Reason? Reason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Reason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.activitymonitorOptionSets.Reason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Reason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Reason] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recommendation</para>
		/// <para><strong>Description</strong>: A rich text field to display recommendation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Recommendation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Recommendation); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rule name</para>
		/// <para><strong>Description</strong>: Unique identifier for ARC rule associated with activity monitor.</para>
		/// <para><strong>Lookup</strong>: <see cref="convertrule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RuleId); }
			set { Entity.Attributes[Fields.RuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Activity monitor</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.activitymonitorOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.activitymonitorOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.activitymonitorOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Activity monitor</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.activitymonitorOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.activitymonitorOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.activitymonitorOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}