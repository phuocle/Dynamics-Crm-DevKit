//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ContactOptionSets
{
	public enum AccountRoleCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Decision Maker</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Decision_Maker = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Employee</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Employee = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Influencer</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Influencer = 3
	}
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Bill_To = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Other = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Primary = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ship_To = 2
	}
	public enum Address1_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: FOB</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FOB = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Charge</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		No_Charge = 2
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Airborne</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Airborne = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: DHL</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		DHL = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FedEx</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Full Load</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Full_Load = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Postal Mail</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Postal_Mail = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: UPS</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		UPS = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Will Call</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Will_Call = 7
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address3_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address3_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address3_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum CustomerSizeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum CustomerTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum EducationCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum FamilyStatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Divorced</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Divorced = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Married</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Married = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Single</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Single = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Widowed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Widowed = 4
	}
	public enum GenderCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Female</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Female = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Male</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Male = 1
	}
	public enum HasChildrenCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum LeadSourceCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum msdyn_decisioninfluencetag
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Blocker</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Blocker = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Decision maker</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Decision_maker = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Influencer</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Influencer = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Unknown = 3
	}
	public enum msdyn_orgchangestatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ignore = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Feedback</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		No_Feedback = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not at Company</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Not_at_Company = 1
	}
	public enum msgdpr_gdprconsent
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: (1) Consent</para>
		/// <para><strong>Value</strong>: 587,030,001</para>
		/// </summary>
		_1_Consent = 587_030_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: (2) Transactional</para>
		/// <para><strong>Value</strong>: 587,030,002</para>
		/// </summary>
		_2_Transactional = 587_030_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: (3) Subscriptions</para>
		/// <para><strong>Value</strong>: 587,030,003</para>
		/// </summary>
		_3_Subscriptions = 587_030_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: (4) Marketing</para>
		/// <para><strong>Value</strong>: 587,030,004</para>
		/// </summary>
		_4_Marketing = 587_030_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: (5) Profiling</para>
		/// <para><strong>Value</strong>: 587,030,005</para>
		/// </summary>
		_5_Profiling = 587_030_005
	}
	public enum mspp_userpreferredlcid
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Basque - Basque</para>
		/// <para><strong>Value</strong>: 1,069</para>
		/// </summary>
		Basque_Basque = 1_069,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bulgarian - Bulgaria</para>
		/// <para><strong>Value</strong>: 1,026</para>
		/// </summary>
		Bulgarian_Bulgaria = 1_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Catalan - Catalan</para>
		/// <para><strong>Value</strong>: 1,027</para>
		/// </summary>
		Catalan_Catalan = 1_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - China</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_China = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - Hong Kong SAR</para>
		/// <para><strong>Value</strong>: 3,076</para>
		/// </summary>
		Chinese_Hong_Kong_SAR = 3_076,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - Traditional</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Chinese_Traditional = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Croatian - Croatia</para>
		/// <para><strong>Value</strong>: 1,050</para>
		/// </summary>
		Croatian_Croatia = 1_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech - Czech Republic</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech_Czech_Republic = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish - Denmark</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish_Denmark = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch - Netherlands</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch_Netherlands = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Estonian - Estonia</para>
		/// <para><strong>Value</strong>: 1,061</para>
		/// </summary>
		Estonian_Estonia = 1_061,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish - Finland</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish_Finland = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French - France</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French_France = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Galician - Spain</para>
		/// <para><strong>Value</strong>: 1,110</para>
		/// </summary>
		Galician_Spain = 1_110,
		/// <summary>
		/// <para><strong>Display Name</strong>: German - Germany</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German_Germany = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek - Greece</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek_Greece = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi - India</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi_India = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hungarian - Hungary</para>
		/// <para><strong>Value</strong>: 1,038</para>
		/// </summary>
		Hungarian_Hungary = 1_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian - Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian - Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese - Japan</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese_Japan = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kazakh - Kazakhstan</para>
		/// <para><strong>Value</strong>: 1,087</para>
		/// </summary>
		Kazakh_Kazakhstan = 1_087,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean - Korea</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean_Korea = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Latvian - Latvia</para>
		/// <para><strong>Value</strong>: 1,062</para>
		/// </summary>
		Latvian_Latvia = 1_062,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lithuanian - Lithuania</para>
		/// <para><strong>Value</strong>: 1,063</para>
		/// </summary>
		Lithuanian_Lithuania = 1_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Malay - Malaysia</para>
		/// <para><strong>Value</strong>: 1,086</para>
		/// </summary>
		Malay_Malaysia = 1_086,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian (Bokmål) - Norway</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian_Bokmal_Norway = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish - Poland</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish_Poland = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Brazil</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Portugal</para>
		/// <para><strong>Value</strong>: 2,070</para>
		/// </summary>
		Portuguese_Portugal = 2_070,
		/// <summary>
		/// <para><strong>Display Name</strong>: Romanian - Romania</para>
		/// <para><strong>Value</strong>: 1,048</para>
		/// </summary>
		Romanian_Romania = 1_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian - Russia</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian_Russia = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Cyrillic) - Serbia</para>
		/// <para><strong>Value</strong>: 3,098</para>
		/// </summary>
		Serbian_Cyrillic_Serbia = 3_098,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Latin) - Serbia</para>
		/// <para><strong>Value</strong>: 2,074</para>
		/// </summary>
		Serbian_Latin_Serbia = 2_074,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovak - Slovakia</para>
		/// <para><strong>Value</strong>: 1,051</para>
		/// </summary>
		Slovak_Slovakia = 1_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovenian - Slovenia</para>
		/// <para><strong>Value</strong>: 1,060</para>
		/// </summary>
		Slovenian_Slovenia = 1_060,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish (Traditional Sort) - Spain</para>
		/// <para><strong>Value</strong>: 3,082</para>
		/// </summary>
		Spanish_Traditional_Sort_Spain = 3_082,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish - Sweden</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish_Sweden = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai - Thailand</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai_Thailand = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish - Türkiye</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish_Turkiye = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ukrainian - Ukraine</para>
		/// <para><strong>Value</strong>: 1,058</para>
		/// </summary>
		Ukrainian_Ukraine = 1_058,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vietnamese - Vietnam</para>
		/// <para><strong>Value</strong>: 1,066</para>
		/// </summary>
		Vietnamese_Vietnam = 1_066
	}
	public enum PaymentTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 2% 10, Net 30</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_2_10_Net_30 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Net 30</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Net_30 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Net 45</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Net_45 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Net 60</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Net_60 = 4
	}
	public enum PreferredAppointmentDayCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Friday</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Friday = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monday</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Monday = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Saturday</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Saturday = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sunday</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Sunday = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thursday</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Thursday = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuesday</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Tuesday = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wednesday</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Wednesday = 3
	}
	public enum PreferredAppointmentTimeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Afternoon</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Afternoon = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Evening</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Evening = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Morning</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Morning = 1
	}
	public enum PreferredContactMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Any</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Any = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Fax = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mail</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Mail = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Phone = 3
	}
	public enum ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
	public enum TerritoryCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Contact : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string AccountRoleCode = "accountrolecode";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_FreightTermsCode = "address1_freighttermscode";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_PrimaryContactName = "address1_primarycontactname";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_FreightTermsCode = "address2_freighttermscode";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_PrimaryContactName = "address2_primarycontactname";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string Address3_AddressId = "address3_addressid";
			public const string Address3_AddressTypeCode = "address3_addresstypecode";
			public const string Address3_City = "address3_city";
			public const string Address3_Composite = "address3_composite";
			public const string Address3_Country = "address3_country";
			public const string Address3_County = "address3_county";
			public const string Address3_Fax = "address3_fax";
			public const string Address3_FreightTermsCode = "address3_freighttermscode";
			public const string Address3_Latitude = "address3_latitude";
			public const string Address3_Line1 = "address3_line1";
			public const string Address3_Line2 = "address3_line2";
			public const string Address3_Line3 = "address3_line3";
			public const string Address3_Longitude = "address3_longitude";
			public const string Address3_Name = "address3_name";
			public const string Address3_PostalCode = "address3_postalcode";
			public const string Address3_PostOfficeBox = "address3_postofficebox";
			public const string Address3_PrimaryContactName = "address3_primarycontactname";
			public const string Address3_ShippingMethodCode = "address3_shippingmethodcode";
			public const string Address3_StateOrProvince = "address3_stateorprovince";
			public const string Address3_Telephone1 = "address3_telephone1";
			public const string Address3_Telephone2 = "address3_telephone2";
			public const string Address3_Telephone3 = "address3_telephone3";
			public const string Address3_UPSZone = "address3_upszone";
			public const string Address3_UTCOffset = "address3_utcoffset";
			public const string adx_ConfirmRemovePassword = "adx_confirmremovepassword";
			public const string Adx_CreatedByIPAddress = "adx_createdbyipaddress";
			public const string Adx_CreatedByUsername = "adx_createdbyusername";
			public const string adx_identity_accessfailedcount = "adx_identity_accessfailedcount";
			public const string adx_identity_emailaddress1confirmed = "adx_identity_emailaddress1confirmed";
			public const string adx_identity_lastsuccessfullogin = "adx_identity_lastsuccessfullogin";
			public const string adx_identity_locallogindisabled = "adx_identity_locallogindisabled";
			public const string adx_identity_lockoutenabled = "adx_identity_lockoutenabled";
			public const string adx_identity_lockoutenddate = "adx_identity_lockoutenddate";
			public const string adx_identity_logonenabled = "adx_identity_logonenabled";
			public const string adx_identity_mobilephoneconfirmed = "adx_identity_mobilephoneconfirmed";
			public const string adx_identity_newpassword = "adx_identity_newpassword";
			public const string adx_identity_passwordhash = "adx_identity_passwordhash";
			public const string adx_identity_securitystamp = "adx_identity_securitystamp";
			public const string adx_identity_twofactorenabled = "adx_identity_twofactorenabled";
			public const string adx_identity_username = "adx_identity_username";
			public const string Adx_ModifiedByIPAddress = "adx_modifiedbyipaddress";
			public const string Adx_ModifiedByUsername = "adx_modifiedbyusername";
			public const string Adx_OrganizationName = "adx_organizationname";
			public const string adx_preferredlcid = "adx_preferredlcid";
			public const string adx_profilealert = "adx_profilealert";
			public const string adx_profilealertdate = "adx_profilealertdate";
			public const string adx_profilealertinstructions = "adx_profilealertinstructions";
			public const string Adx_ProfileIsAnonymous = "adx_profileisanonymous";
			public const string Adx_ProfileLastActivity = "adx_profilelastactivity";
			public const string adx_profilemodifiedon = "adx_profilemodifiedon";
			public const string adx_PublicProfileCopy = "adx_publicprofilecopy";
			public const string Adx_TimeZone = "adx_timezone";
			public const string Aging30 = "aging30";
			public const string Aging30_Base = "aging30_base";
			public const string Aging60 = "aging60";
			public const string Aging60_Base = "aging60_base";
			public const string Aging90 = "aging90";
			public const string Aging90_Base = "aging90_base";
			public const string Anniversary = "anniversary";
			public const string AnnualIncome = "annualincome";
			public const string AnnualIncome_Base = "annualincome_base";
			public const string AssistantName = "assistantname";
			public const string AssistantPhone = "assistantphone";
			public const string BirthDate = "birthdate";
			public const string Business2 = "business2";
			public const string BusinessCard = "businesscard";
			public const string BusinessCardAttributes = "businesscardattributes";
			public const string Callback = "callback";
			public const string ChildrensNames = "childrensnames";
			public const string Company = "company";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedByExternalParty = "createdbyexternalparty";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string CreditLimit_Base = "creditlimit_base";
			public const string CreditOnHold = "creditonhold";
			public const string CustomerSizeCode = "customersizecode";
			public const string CustomerTypeCode = "customertypecode";
			public const string DefaultPriceLevelId = "defaultpricelevelid";
			public const string Department = "department";
			public const string Description = "description";
			public const string DoNotBulkEMail = "donotbulkemail";
			public const string DoNotBulkPostalMail = "donotbulkpostalmail";
			public const string DoNotEMail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string DoNotSendMM = "donotsendmm";
			public const string EducationCode = "educationcode";
			public const string EMailAddress1 = "emailaddress1";
			public const string EMailAddress2 = "emailaddress2";
			public const string EMailAddress3 = "emailaddress3";
			public const string EmployeeId = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExternalUserIdentifier = "externaluseridentifier";
			public const string FamilyStatusCode = "familystatuscode";
			public const string Fax = "fax";
			public const string FirstName = "firstname";
			public const string FollowEmail = "followemail";
			public const string FtpSiteUrl = "ftpsiteurl";
			public const string FullName = "fullname";
			public const string GenderCode = "gendercode";
			public const string GovernmentId = "governmentid";
			public const string HasChildrenCode = "haschildrencode";
			public const string Home2 = "home2";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsAutoCreate = "isautocreate";
			public const string IsBackofficeCustomer = "isbackofficecustomer";
			public const string IsPrivate = "isprivate";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastUsedInCampaign = "lastusedincampaign";
			public const string LeadSourceCode = "leadsourcecode";
			public const string ManagerName = "managername";
			public const string ManagerPhone = "managerphone";
			public const string MarketingOnly = "marketingonly";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MiddleName = "middlename";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByExternalParty = "modifiedbyexternalparty";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msa_managingpartnerid = "msa_managingpartnerid";
			public const string msdyn_contactkpiid = "msdyn_contactkpiid";
			public const string msdyn_decisioninfluencetag = "msdyn_decisioninfluencetag";
			public const string msdyn_disablewebtracking = "msdyn_disablewebtracking";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_isassistantinorgchart = "msdyn_isassistantinorgchart";
			public const string msdyn_isminor = "msdyn_isminor";
			public const string msdyn_isminorwithparentalconsent = "msdyn_isminorwithparentalconsent";
			public const string msdyn_orgchangestatus = "msdyn_orgchangestatus";
			public const string msdyn_portaltermsagreementdate = "msdyn_portaltermsagreementdate";
			public const string msdyn_PrimaryTimeZone = "msdyn_primarytimezone";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyncrm_ContactId = "msdyncrm_contactid";
			public const string msdyncrm_customerjourneyid = "msdyncrm_customerjourneyid";
			public const string msdyncrm_emailid = "msdyncrm_emailid";
			public const string msdyncrm_insights_placeholder = "msdyncrm_insights_placeholder";
			public const string msdyncrm_marketingformid = "msdyncrm_marketingformid";
			public const string msdyncrm_marketingformsubmissiondateprecise = "msdyncrm_marketingformsubmissiondateprecise";
			public const string msdyncrm_marketingpageid = "msdyncrm_marketingpageid";
			public const string msdyncrm_rememberMe = "msdyncrm_rememberme";
			public const string msdyncrm_SegmentMemberId = "msdyncrm_segmentmemberid";
			public const string msdynmkt_customerjourneyid = "msdynmkt_customerjourneyid";
			public const string msdynmkt_emailid = "msdynmkt_emailid";
			public const string msdynmkt_marketingformid = "msdynmkt_marketingformid";
			public const string msevtmgt_aadobjectid = "msevtmgt_aadobjectid";
			public const string msevtmgt_ContactId = "msevtmgt_contactid";
			public const string msevtmgt_originatingeventid = "msevtmgt_originatingeventid";
			public const string msgdpr_consentchangesourceformId = "msgdpr_consentchangesourceformid";
			public const string msgdpr_donottrack = "msgdpr_donottrack";
			public const string msgdpr_gdprconsent = "msgdpr_gdprconsent";
			public const string msgdpr_gdprischild = "msgdpr_gdprischild";
			public const string msgdpr_GDPRParentId = "msgdpr_gdprparentid";
			public const string mspp_userpreferredlcid = "mspp_userpreferredlcid";
			public const string NickName = "nickname";
			public const string NumberOfChildren = "numberofchildren";
			public const string OnHoldTime = "onholdtime";
			public const string OriginatingLeadId = "originatingleadid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Pager = "pager";
			public const string ParentContactId = "parentcontactid";
			public const string ParentCustomerId = "parentcustomerid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PreferredAppointmentDayCode = "preferredappointmentdaycode";
			public const string PreferredAppointmentTimeCode = "preferredappointmenttimecode";
			public const string PreferredContactMethodCode = "preferredcontactmethodcode";
			public const string PreferredEquipmentId = "preferredequipmentid";
			public const string PreferredServiceId = "preferredserviceid";
			public const string PreferredSystemUserId = "preferredsystemuserid";
			public const string ProcessId = "processid";
			public const string Salutation = "salutation";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SpousesName = "spousesname";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubscriptionId = "subscriptionid";
			public const string Suffix = "suffix";
			public const string TeamsFollowed = "teamsfollowed";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TerritoryCode = "territorycode";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteUrl = "websiteurl";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}
		public const string EntityLogicalName = "contact";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2;
		public const string EntityCollectionSchemaName = "Contacts";
		public const string EntityDisplayCollectionName = "Contacts";
		public const string DisplayName = "Contact";
		public const string EntitySetName = "contacts";
		public const string EntityLogicalCollectionName = "contacts";
		public const string EntityPrimaryIdAttribute = "contactid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "fullname";
		public const string EntitySchemaName = "Contact";
		[DebuggerNonUserCode()]
		public Contact()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contact(Guid ContactId)
		{
			Entity = new Entity(EntityLogicalName, ContactId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contact(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contact"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Contact(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contact"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Contact(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Contact(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contact"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Contact(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Contact(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contact(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Unique identifier of the account with which the contact is associated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Role</para>
		/// <para><strong>Description</strong>: Select the contact&apos;s role within the company or sales process, such as decision maker, employee, or influencer.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode? AccountRoleCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccountRoleCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.AccountRoleCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccountRoleCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccountRoleCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Address Type</para>
		/// <para><strong>Description</strong>: Select the primary address type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: City</para>
		/// <para><strong>Description</strong>: Type the city for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1</para>
		/// <para><strong>Description</strong>: Shows the complete primary address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Country/Region</para>
		/// <para><strong>Description</strong>: Type the country or region for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: County</para>
		/// <para><strong>Description</strong>: Type the county for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Freight Terms</para>
		/// <para><strong>Description</strong>: Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode? Address1_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Latitude</para>
		/// <para><strong>Description</strong>: Type the latitude value for the primary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Street 1</para>
		/// <para><strong>Description</strong>: Type the first line of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Street 2</para>
		/// <para><strong>Description</strong>: Type the second line of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Street 3</para>
		/// <para><strong>Description</strong>: Type the third line of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Longitude</para>
		/// <para><strong>Description</strong>: Type the longitude value for the primary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: Type the ZIP Code or postal code for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Post Office Box</para>
		/// <para><strong>Description</strong>: Type the post office box number of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Primary Contact Name</para>
		/// <para><strong>Description</strong>: Type the name of the main contact at the account&apos;s primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address1_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: State/Province</para>
		/// <para><strong>Description</strong>: Type the state or province of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Phone</para>
		/// <para><strong>Description</strong>: Type the main phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Telephone 2</para>
		/// <para><strong>Description</strong>: Type a second phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Telephone 3</para>
		/// <para><strong>Description</strong>: Type a third phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UPS Zone</para>
		/// <para><strong>Description</strong>: Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UTC Offset</para>
		/// <para><strong>Description</strong>: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Address Type</para>
		/// <para><strong>Description</strong>: Select the secondary address type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: City</para>
		/// <para><strong>Description</strong>: Type the city for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2</para>
		/// <para><strong>Description</strong>: Shows the complete secondary address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Country/Region</para>
		/// <para><strong>Description</strong>: Type the country or region for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: County</para>
		/// <para><strong>Description</strong>: Type the county for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Freight Terms</para>
		/// <para><strong>Description</strong>: Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode? Address2_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Latitude</para>
		/// <para><strong>Description</strong>: Type the latitude value for the secondary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Street 1</para>
		/// <para><strong>Description</strong>: Type the first line of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Street 2</para>
		/// <para><strong>Description</strong>: Type the second line of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Street 3</para>
		/// <para><strong>Description</strong>: Type the third line of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Longitude</para>
		/// <para><strong>Description</strong>: Type the longitude value for the secondary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: Type the ZIP Code or postal code for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Post Office Box</para>
		/// <para><strong>Description</strong>: Type the post office box number of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Primary Contact Name</para>
		/// <para><strong>Description</strong>: Type the name of the main contact at the account&apos;s secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address2_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: State/Province</para>
		/// <para><strong>Description</strong>: Type the state or province of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 1</para>
		/// <para><strong>Description</strong>: Type the main phone number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 2</para>
		/// <para><strong>Description</strong>: Type a second phone number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 3</para>
		/// <para><strong>Description</strong>: Type a third phone number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UPS Zone</para>
		/// <para><strong>Description</strong>: Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UTC Offset</para>
		/// <para><strong>Description</strong>: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 3.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address3_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address3_AddressId); }
			set { Entity.Attributes[Fields.Address3_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Address Type</para>
		/// <para><strong>Description</strong>: Select the third address type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode? Address3_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address3_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address3_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: City</para>
		/// <para><strong>Description</strong>: Type the city for the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_City); }
			set { Entity.Attributes[Fields.Address3_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3</para>
		/// <para><strong>Description</strong>: Shows the complete third address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address3: Country/Region</para>
		/// <para><strong>Description</strong>: the country or region for the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Country); }
			set { Entity.Attributes[Fields.Address3_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: County</para>
		/// <para><strong>Description</strong>: Type the county for the third address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_County); }
			set { Entity.Attributes[Fields.Address3_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number associated with the third address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Fax); }
			set { Entity.Attributes[Fields.Address3_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Freight Terms</para>
		/// <para><strong>Description</strong>: Select the freight terms for the third address to make sure shipping orders are processed correctly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode? Address3_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address3_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address3_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Latitude</para>
		/// <para><strong>Description</strong>: Type the latitude value for the third address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address3_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address3_Latitude); }
			set { Entity.Attributes[Fields.Address3_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address3: Street 1</para>
		/// <para><strong>Description</strong>: the first line of the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Line1); }
			set { Entity.Attributes[Fields.Address3_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address3: Street 2</para>
		/// <para><strong>Description</strong>: the second line of the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Line2); }
			set { Entity.Attributes[Fields.Address3_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address3: Street 3</para>
		/// <para><strong>Description</strong>: the third line of the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Line3); }
			set { Entity.Attributes[Fields.Address3_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Longitude</para>
		/// <para><strong>Description</strong>: Type the longitude value for the third address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address3_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address3_Longitude); }
			set { Entity.Attributes[Fields.Address3_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name for the third address, such as Corporate Headquarters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Name); }
			set { Entity.Attributes[Fields.Address3_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address3: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: the ZIP Code or postal code for the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_PostalCode); }
			set { Entity.Attributes[Fields.Address3_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Post Office Box</para>
		/// <para><strong>Description</strong>: the post office box number of the 3rd address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address3_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Primary Contact Name</para>
		/// <para><strong>Description</strong>: Type the name of the main contact at the account&apos;s third address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_PrimaryContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_PrimaryContactName); }
			set { Entity.Attributes[Fields.Address3_PrimaryContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode? Address3_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address3_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.Address3_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address3_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address3_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address3: State/Province</para>
		/// <para><strong>Description</strong>: the state or province of the third address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_StateOrProvince); }
			set { Entity.Attributes[Fields.Address3_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Telephone1</para>
		/// <para><strong>Description</strong>: Type the main phone number associated with the third address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone1); }
			set { Entity.Attributes[Fields.Address3_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Telephone2</para>
		/// <para><strong>Description</strong>: Type a second phone number associated with the third address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone2); }
			set { Entity.Attributes[Fields.Address3_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: Telephone3</para>
		/// <para><strong>Description</strong>: Type a third phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_Telephone3); }
			set { Entity.Attributes[Fields.Address3_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: UPS Zone</para>
		/// <para><strong>Description</strong>: Type the UPS zone of the third address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address3_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address3_UPSZone); }
			set { Entity.Attributes[Fields.Address3_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 3: UTC Offset</para>
		/// <para><strong>Description</strong>: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address3_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address3_UTCOffset); }
			set { Entity.Attributes[Fields.Address3_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirm Remove Password</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_ConfirmRemovePassword
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_ConfirmRemovePassword); }
			set { Entity.Attributes[Fields.adx_ConfirmRemovePassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By IP Address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_CreatedByIPAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By Username</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_CreatedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_CreatedByUsername); }
			set { Entity.Attributes[Fields.Adx_CreatedByUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access Failed Count</para>
		/// <para><strong>Description</strong>: Shows the current count of failed password attempts for the contact.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adx_identity_accessfailedcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adx_identity_accessfailedcount); }
			set { Entity.Attributes[Fields.adx_identity_accessfailedcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Confirmed</para>
		/// <para><strong>Description</strong>: Determines if the email is confirmed by the contact.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_emailaddress1confirmed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_emailaddress1confirmed); }
			set { Entity.Attributes[Fields.adx_identity_emailaddress1confirmed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Successful Login</para>
		/// <para><strong>Description</strong>: Indicates the last date and time the user successfully signed in to a portal.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_identity_lastsuccessfulloginUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_identity_lastsuccessfullogin); }
			set { Entity.Attributes[Fields.adx_identity_lastsuccessfullogin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Local Login Disabled</para>
		/// <para><strong>Description</strong>: Indicates that the contact can no longer sign in to the portal using the local account.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_locallogindisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_locallogindisabled); }
			set { Entity.Attributes[Fields.adx_identity_locallogindisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lockout Enabled</para>
		/// <para><strong>Description</strong>: Determines if this contact will track failed access attempts and become locked after too many failed attempts. To prevent the contact from becoming locked, you can disable this setting.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_lockoutenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_lockoutenabled); }
			set { Entity.Attributes[Fields.adx_identity_lockoutenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lockout End Date</para>
		/// <para><strong>Description</strong>: Shows the moment in time when the locked contact becomes unlocked again.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_identity_lockoutenddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_identity_lockoutenddate); }
			set { Entity.Attributes[Fields.adx_identity_lockoutenddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Login Enabled</para>
		/// <para><strong>Description</strong>: Determines if web authentication is enabled for the contact.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_logonenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_logonenabled); }
			set { Entity.Attributes[Fields.adx_identity_logonenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Phone Confirmed</para>
		/// <para><strong>Description</strong>: Determines if the phone number is confirmed by the contact.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_mobilephoneconfirmed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_mobilephoneconfirmed); }
			set { Entity.Attributes[Fields.adx_identity_mobilephoneconfirmed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: New Password Input</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_newpassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_newpassword); }
			set { Entity.Attributes[Fields.adx_identity_newpassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Password Hash</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_passwordhash
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_passwordhash); }
			set { Entity.Attributes[Fields.adx_identity_passwordhash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Security Stamp</para>
		/// <para><strong>Description</strong>: A token used to manage the web authentication session.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_securitystamp
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_securitystamp); }
			set { Entity.Attributes[Fields.adx_identity_securitystamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Two Factor Enabled</para>
		/// <para><strong>Description</strong>: Determines if two-factor authentication is enabled for the contact.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_identity_twofactorenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_identity_twofactorenabled); }
			set { Entity.Attributes[Fields.adx_identity_twofactorenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User Name</para>
		/// <para><strong>Description</strong>: Shows the user identity for local web authentication.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_identity_username
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_identity_username); }
			set { Entity.Attributes[Fields.adx_identity_username] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By IP Address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByIPAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByIPAddress); }
			set { Entity.Attributes[Fields.Adx_ModifiedByIPAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By Username</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_ModifiedByUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_ModifiedByUsername); }
			set { Entity.Attributes[Fields.Adx_ModifiedByUsername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Adx_OrganizationName
		{
			get { return Entity.GetAttributeValue<string>(Fields.Adx_OrganizationName); }
			set { Entity.Attributes[Fields.Adx_OrganizationName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred LCID (Deprecated)</para>
		/// <para><strong>Description</strong>: User’s preferred portal LCID</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adx_preferredlcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adx_preferredlcid); }
			set { Entity.Attributes[Fields.adx_preferredlcid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile Alert</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adx_profilealert
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adx_profilealert); }
			set { Entity.Attributes[Fields.adx_profilealert] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile Alert Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_profilealertdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_profilealertdate); }
			set { Entity.Attributes[Fields.adx_profilealertdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile Alert Instructions</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,096</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_profilealertinstructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_profilealertinstructions); }
			set { Entity.Attributes[Fields.adx_profilealertinstructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile Is Anonymous</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Adx_ProfileIsAnonymous
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Adx_ProfileIsAnonymous); }
			set { Entity.Attributes[Fields.Adx_ProfileIsAnonymous] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile Last Activity</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? Adx_ProfileLastActivityUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Adx_ProfileLastActivity); }
			set { Entity.Attributes[Fields.Adx_ProfileLastActivity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile Modified On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adx_profilemodifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adx_profilemodifiedon); }
			set { Entity.Attributes[Fields.adx_profilemodifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Public Profile Copy</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 64,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_PublicProfileCopy
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_PublicProfileCopy); }
			set { Entity.Attributes[Fields.adx_PublicProfileCopy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Adx_TimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Adx_TimeZone); }
			set { Entity.Attributes[Fields.Adx_TimeZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aging 30</para>
		/// <para><strong>Description</strong>: For system use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aging 30 (Base)</para>
		/// <para><strong>Description</strong>: Shows the Aging 30 field converted to the system&apos;s default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging30_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging30_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aging 60</para>
		/// <para><strong>Description</strong>: For system use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aging 60 (Base)</para>
		/// <para><strong>Description</strong>: Shows the Aging 60 field converted to the system&apos;s default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging60_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging60_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aging 90</para>
		/// <para><strong>Description</strong>: For system use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aging 90 (Base)</para>
		/// <para><strong>Description</strong>: Shows the Aging 90 field converted to the system&apos;s default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Aging90_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Aging90_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Anniversary</para>
		/// <para><strong>Description</strong>: Enter the date of the contact&apos;s wedding or service anniversary for use in customer gift programs or other communications.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? Anniversary
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.Anniversary);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.Anniversary] = dateTime;
				}
				else
					Entity.Attributes[Fields.Anniversary] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Annual Income</para>
		/// <para><strong>Description</strong>: Type the contact&apos;s annual income for use in profiling and financial analysis.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? AnnualIncome
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.AnnualIncome);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AnnualIncome] = new Money(value.Value);
				else
					Entity.Attributes[Fields.AnnualIncome] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Annual Income (Base)</para>
		/// <para><strong>Description</strong>: Shows the Annual Income field converted to the system&apos;s default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? AnnualIncome_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.AnnualIncome_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assistant</para>
		/// <para><strong>Description</strong>: Type the name of the contact&apos;s assistant.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AssistantName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AssistantName); }
			set { Entity.Attributes[Fields.AssistantName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assistant Phone</para>
		/// <para><strong>Description</strong>: Type the phone number for the contact&apos;s assistant.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AssistantPhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.AssistantPhone); }
			set { Entity.Attributes[Fields.AssistantPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Birthday</para>
		/// <para><strong>Description</strong>: Enter the contact&apos;s birthday for use in customer gift programs or other communications.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? BirthDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.BirthDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.BirthDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.BirthDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Phone 2</para>
		/// <para><strong>Description</strong>: Type a second business phone number for this contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Business2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Business2); }
			set { Entity.Attributes[Fields.Business2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Card</para>
		/// <para><strong>Description</strong>: Stores Image of the Business Card</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCard
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCard); }
			set { Entity.Attributes[Fields.BusinessCard] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BusinessCardAttributes</para>
		/// <para><strong>Description</strong>: Stores Business Card Control Properties.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCardAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCardAttributes); }
			set { Entity.Attributes[Fields.BusinessCardAttributes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Callback Number</para>
		/// <para><strong>Description</strong>: Type a callback phone number for this contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Callback
		{
			get { return Entity.GetAttributeValue<string>(Fields.Callback); }
			set { Entity.Attributes[Fields.Callback] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Children's Names</para>
		/// <para><strong>Description</strong>: Type the names of the contact&apos;s children for reference in communications and client programs.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ChildrensNames
		{
			get { return Entity.GetAttributeValue<string>(Fields.ChildrensNames); }
			set { Entity.Attributes[Fields.ChildrensNames] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company Phone</para>
		/// <para><strong>Description</strong>: Type the company phone of the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Company
		{
			get { return Entity.GetAttributeValue<string>(Fields.Company); }
			set { Entity.Attributes[Fields.Company] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Unique identifier of the contact.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ContactId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ContactId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (External Party)</para>
		/// <para><strong>Description</strong>: Shows the external party who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Credit Limit</para>
		/// <para><strong>Description</strong>: Type the credit limit of the contact for reference when you address invoice and accounting issues with the customer.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreditLimit] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CreditLimit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Credit Limit (Base)</para>
		/// <para><strong>Description</strong>: Shows the Credit Limit field converted to the system&apos;s default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CreditLimit_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CreditLimit_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Credit Hold</para>
		/// <para><strong>Description</strong>: Select whether the contact is on a credit hold, for reference when addressing invoice and accounting issues.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CreditOnHold
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CreditOnHold); }
			set { Entity.Attributes[Fields.CreditOnHold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Size</para>
		/// <para><strong>Description</strong>: Select the size of the contact&apos;s company for segmentation and reporting purposes.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode? CustomerSizeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerSizeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerSizeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerSizeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerSizeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Relationship Type</para>
		/// <para><strong>Description</strong>: Select the category that best describes the relationship between the contact and your organization.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode? CustomerTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CustomerTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.CustomerTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomerTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CustomerTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Choose the default price list associated with the contact to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.</para>
		/// <para><strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultPriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultPriceLevelId); }
			set { Entity.Attributes[Fields.DefaultPriceLevelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Department</para>
		/// <para><strong>Description</strong>: Type the department or business unit where the contact works in the parent company or business.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Department
		{
			get { return Entity.GetAttributeValue<string>(Fields.Department); }
			set { Entity.Attributes[Fields.Department] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the contact, such as an excerpt from the company&apos;s website.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Bulk Emails</para>
		/// <para><strong>Description</strong>: Select whether the contact accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
			set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Bulk Mails</para>
		/// <para><strong>Description</strong>: Select whether the contact accepts bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the letters.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkPostalMail); }
			set { Entity.Attributes[Fields.DoNotBulkPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Emails</para>
		/// <para><strong>Description</strong>: Select whether the contact allows direct email sent from Microsoft Dynamics 365. If Do Not Allow is selected, Microsoft Dynamics 365 will not send the email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
			set { Entity.Attributes[Fields.DoNotEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Faxes</para>
		/// <para><strong>Description</strong>: Select whether the contact allows faxes. If Do Not Allow is selected, the contact will be excluded from any fax activities distributed in marketing campaigns.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
			set { Entity.Attributes[Fields.DoNotFax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Phone Calls</para>
		/// <para><strong>Description</strong>: Select whether the contact accepts phone calls. If Do Not Allow is selected, the contact will be excluded from any phone call activities distributed in marketing campaigns.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
			set { Entity.Attributes[Fields.DoNotPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Mails</para>
		/// <para><strong>Description</strong>: Select whether the contact allows direct mail. If Do Not Allow is selected, the contact will be excluded from letter activities distributed in marketing campaigns.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
			set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send Marketing Materials</para>
		/// <para><strong>Description</strong>: Select whether the contact accepts marketing materials, such as brochures or catalogs. Contacts that opt out can be excluded from marketing initiatives.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Send</strong>]: true - [<strong>Send</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Send</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendMM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
			set { Entity.Attributes[Fields.DoNotSendMM] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Education</para>
		/// <para><strong>Description</strong>: Select the contact&apos;s highest level of education for use in segmentation and analysis.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode? EducationCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EducationCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.EducationCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EducationCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EducationCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Type the primary email address for the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress1
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
			set { Entity.Attributes[Fields.EMailAddress1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address 2</para>
		/// <para><strong>Description</strong>: Type the secondary email address for the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
			set { Entity.Attributes[Fields.EMailAddress2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address 3</para>
		/// <para><strong>Description</strong>: Type an alternate email address for the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress3
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
			set { Entity.Attributes[Fields.EMailAddress3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Employee</para>
		/// <para><strong>Description</strong>: Type the employee ID or number for the contact for reference in orders, service cases, or other communications with the contact&apos;s organization.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmployeeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmployeeId); }
			set { Entity.Attributes[Fields.EmployeeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Image Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External User Identifier</para>
		/// <para><strong>Description</strong>: Identifier for an external user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalUserIdentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalUserIdentifier); }
			set { Entity.Attributes[Fields.ExternalUserIdentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marital Status</para>
		/// <para><strong>Description</strong>: Select the marital status of the contact for reference in follow-up phone calls and other communications.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode? FamilyStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FamilyStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.FamilyStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FamilyStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FamilyStatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number for the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Name</para>
		/// <para><strong>Description</strong>: Type the contact&apos;s first name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow Email Activity</para>
		/// <para><strong>Description</strong>: Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the contact.</para>
		/// <para><strong>Two Option</strong> - [<strong>Allow</strong>]: true - [<strong>Do Not Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
			set { Entity.Attributes[Fields.FollowEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FTP Site</para>
		/// <para><strong>Description</strong>: Type the URL for the contact&apos;s FTP site to enable users to access data and share documents.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FtpSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.FtpSiteUrl); }
			set { Entity.Attributes[Fields.FtpSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Full Name</para>
		/// <para><strong>Description</strong>: Combines and shows the contact&apos;s first and last names so that the full name can be displayed in views and reports.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Gender</para>
		/// <para><strong>Description</strong>: Select the contact&apos;s gender to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode? GenderCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.GenderCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.GenderCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.GenderCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.GenderCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Government</para>
		/// <para><strong>Description</strong>: Type the passport number or other government ID for the contact for use in documents or reports.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GovernmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GovernmentId); }
			set { Entity.Attributes[Fields.GovernmentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Has Children</para>
		/// <para><strong>Description</strong>: Select whether the contact has any children for reference in follow-up phone calls and other communications.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode? HasChildrenCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.HasChildrenCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.HasChildrenCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.HasChildrenCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.HasChildrenCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Home Phone 2</para>
		/// <para><strong>Description</strong>: Type a second home phone number for this contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Home2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Home2); }
			set { Entity.Attributes[Fields.Home2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-created</para>
		/// <para><strong>Description</strong>: Information about whether the contact was auto-created when promoting an email or an appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoCreate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Back Office Customer</para>
		/// <para><strong>Description</strong>: Select whether the contact exists in a separate accounting or other system, such as Microsoft Dynamics GP or another ERP database, for use in integration processes.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBackofficeCustomer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBackofficeCustomer); }
			set { Entity.Attributes[Fields.IsBackofficeCustomer] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Job Title</para>
		/// <para><strong>Description</strong>: Type the job title of the contact to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Name</para>
		/// <para><strong>Description</strong>: Type the contact&apos;s last name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date and time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Date Included in Campaign</para>
		/// <para><strong>Description</strong>: Shows the date when the contact was last included in a marketing campaign or quick campaign.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedInCampaignUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
			set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead Source</para>
		/// <para><strong>Description</strong>: Select the primary marketing source that directed the contact to your organization.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode? LeadSourceCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadSourceCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.LeadSourceCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LeadSourceCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LeadSourceCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manager</para>
		/// <para><strong>Description</strong>: Type the name of the contact&apos;s manager for use in escalating issues or other follow-up communications with the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ManagerName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ManagerName); }
			set { Entity.Attributes[Fields.ManagerName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manager Phone</para>
		/// <para><strong>Description</strong>: Type the phone number for the contact&apos;s manager.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ManagerPhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.ManagerPhone); }
			set { Entity.Attributes[Fields.ManagerPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Only</para>
		/// <para><strong>Description</strong>: Whether is only for marketing</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? MarketingOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.MarketingOnly); }
			set { Entity.Attributes[Fields.MarketingOnly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Master ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the master contact for merge.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merged</para>
		/// <para><strong>Description</strong>: Shows whether the account has been merged with a master contact.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Middle Name</para>
		/// <para><strong>Description</strong>: Type the contact&apos;s middle name or initial to make sure the contact is addressed correctly.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Phone</para>
		/// <para><strong>Description</strong>: Type the mobile phone number for the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (External Party)</para>
		/// <para><strong>Description</strong>: Shows the external party who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="externalparty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedByExternalParty
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedByExternalParty); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Managing Partner</para>
		/// <para><strong>Description</strong>: Unique identifier for Account associated with Contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msa_managingpartnerid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msa_managingpartnerid); }
			set { Entity.Attributes[Fields.msa_managingpartnerid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI</para>
		/// <para><strong>Description</strong>: Maps to contact KPI records</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_contactkpiitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_contactkpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_contactkpiid); }
			set { Entity.Attributes[Fields.msdyn_contactkpiid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decision influence labels</para>
		/// <para><strong>Description</strong>: Indicate buying influence using labels</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_decisioninfluencetag"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_decisioninfluencetag? msdyn_decisioninfluencetag
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_decisioninfluencetag);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_decisioninfluencetag)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_decisioninfluencetag] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_decisioninfluencetag] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Web Tracking</para>
		/// <para><strong>Description</strong>: Indicates that the contact has opted out of web tracking.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_disablewebtracking
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_disablewebtracking); }
			set { Entity.Attributes[Fields.msdyn_disablewebtracking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR Optout</para>
		/// <para><strong>Description</strong>: Describes whether contact is opted out or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Assistant</para>
		/// <para><strong>Description</strong>: Describes if the contact is an assistant in org chart</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isassistantinorgchart
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isassistantinorgchart); }
			set { Entity.Attributes[Fields.msdyn_isassistantinorgchart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Minor</para>
		/// <para><strong>Description</strong>: Indicates that the contact is considered a minor in their jurisdiction.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isminor
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isminor); }
			set { Entity.Attributes[Fields.msdyn_isminor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Minor with Parental Consent</para>
		/// <para><strong>Description</strong>: Indicates that the contact is considered a minor in their jurisdiction and has parental consent.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isminorwithparentalconsent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isminorwithparentalconsent); }
			set { Entity.Attributes[Fields.msdyn_isminorwithparentalconsent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Not at Company Flag</para>
		/// <para><strong>Description</strong>: Whether or not the contact belongs to the associated account</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_orgchangestatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_orgchangestatus.No_Feedback"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_orgchangestatus? msdyn_orgchangestatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_orgchangestatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.msdyn_orgchangestatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_orgchangestatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_orgchangestatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Terms Agreement Date</para>
		/// <para><strong>Description</strong>: Indicates the date and time that the person agreed to the portal terms and conditions.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_portaltermsagreementdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_portaltermsagreementdate); }
			set { Entity.Attributes[Fields.msdyn_portaltermsagreementdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Time Zone</para>
		/// <para><strong>Description</strong>: Indicates the primary time zone that the contact works on.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PrimaryTimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PrimaryTimeZone); }
			set { Entity.Attributes[Fields.msdyn_PrimaryTimeZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Segment associated with contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SendNow Contact</para>
		/// <para><strong>Description</strong>: Unique identifier for Quick Send Email associated with Contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_quicksendemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_ContactId); }
			set { Entity.Attributes[Fields.msdyncrm_ContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source customer journey (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_customerjourney"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_customerjourneyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_customerjourneyid); }
			set { Entity.Attributes[Fields.msdyncrm_customerjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source email (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_emailid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_emailid); }
			set { Entity.Attributes[Fields.msdyncrm_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_insights_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_insights_placeholder); }
			set { Entity.Attributes[Fields.msdyncrm_insights_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source form (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingformid); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: timestamp of form submission (outbound marketing)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marketingformsubmissiondateprecise
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marketingformsubmissiondateprecise); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformsubmissiondateprecise] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source landing page (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingpageid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingpageid); }
			set { Entity.Attributes[Fields.msdyncrm_marketingpageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Remember me</para>
		/// <para><strong>Two Option</strong> - [<strong>Allow</strong>]: true - [<strong>Do not allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Do not allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_rememberMe
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_rememberMe); }
			set { Entity.Attributes[Fields.msdyncrm_rememberMe] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SegmentMember</para>
		/// <para><strong>Description</strong>: Unique identifier for Segment associated with Contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_SegmentMemberId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_SegmentMemberId); }
			set { Entity.Attributes[Fields.msdyncrm_SegmentMemberId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source customer journey</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_journey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_customerjourneyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_customerjourneyid); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source email</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_emailid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_emailid); }
			set { Entity.Attributes[Fields.msdynmkt_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source form</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_marketingformid); }
			set { Entity.Attributes[Fields.msdynmkt_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Entra Object ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_aadobjectid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_aadobjectid); }
			set { Entity.Attributes[Fields.msevtmgt_aadobjectid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Unique identifier for the check-in associated with the contact</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_checkin"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_ContactId); }
			set { Entity.Attributes[Fields.msevtmgt_ContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating event</para>
		/// <para><strong>Description</strong>: For contacts created by registering for an event in Microsoft Dynamics 365, this identifies the relevant event. This is used to relate the contact to the data on the originating event.</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_event"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_originatingeventid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_originatingeventid); }
			set { Entity.Attributes[Fields.msevtmgt_originatingeventid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: consent change source form Id</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msgdpr_consentchangesourceformId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msgdpr_consentchangesourceformId); }
			set { Entity.Attributes[Fields.msgdpr_consentchangesourceformId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not track</para>
		/// <para><strong>Description</strong>: Select whether contact allows tracking interaction data. If Do Not Allow is selected, Microsoft Dynamics 365 will not save interaction data for the contact.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msgdpr_donottrack
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msgdpr_donottrack); }
			set { Entity.Attributes[Fields.msgdpr_donottrack] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent given</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.msgdpr_gdprconsent"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.msgdpr_gdprconsent._1_Consent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.msgdpr_gdprconsent? msgdpr_gdprconsent
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msgdpr_gdprconsent);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.msgdpr_gdprconsent)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msgdpr_gdprconsent] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msgdpr_gdprconsent] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR is child</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msgdpr_gdprischild
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msgdpr_gdprischild); }
			set { Entity.Attributes[Fields.msgdpr_gdprischild] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent or custodian</para>
		/// <para><strong>Description</strong>: Unique identifier for the contact associated with the contact</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msgdpr_GDPRParentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msgdpr_GDPRParentId); }
			set { Entity.Attributes[Fields.msgdpr_GDPRParentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Language</para>
		/// <para><strong>Description</strong>: User’s preferred portal language</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.mspp_userpreferredlcid"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.mspp_userpreferredlcid? mspp_userpreferredlcid
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_userpreferredlcid);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.mspp_userpreferredlcid)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_userpreferredlcid] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_userpreferredlcid] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nickname</para>
		/// <para><strong>Description</strong>: Type the contact&apos;s nickname.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NickName
		{
			get { return Entity.GetAttributeValue<string>(Fields.NickName); }
			set { Entity.Attributes[Fields.NickName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: No. of Children</para>
		/// <para><strong>Description</strong>: Type the number of children the contact has for reference in follow-up phone calls and other communications.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfChildren
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfChildren); }
			set { Entity.Attributes[Fields.NumberOfChildren] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows how long, in minutes, that the record was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating Lead</para>
		/// <para><strong>Description</strong>: Shows the lead that the contact was created if the contact was created by converting a lead in Microsoft Dynamics 365. This is used to relate the contact to the data on the originating lead for use in reporting and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingLeadId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingLeadId); }
			set { Entity.Attributes[Fields.OriginatingLeadId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the contact.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the contact.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the contact.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pager</para>
		/// <para><strong>Description</strong>: Type the pager number for the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Pager
		{
			get { return Entity.GetAttributeValue<string>(Fields.Pager); }
			set { Entity.Attributes[Fields.Pager] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Contact</para>
		/// <para><strong>Description</strong>: Unique identifier of the parent contact.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company Name</para>
		/// <para><strong>Description</strong>: Select the parent account or parent contact for the contact to provide a quick link to additional details, such as financial information, activities, and opportunities.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentCustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentCustomerId); }
			set { Entity.Attributes[Fields.ParentCustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Participates in Workflow</para>
		/// <para><strong>Description</strong>: Shows whether the contact participates in workflow rules.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Payment Terms</para>
		/// <para><strong>Description</strong>: Select the payment terms to indicate when the customer needs to pay the total amount.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode? PaymentTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PaymentTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Day</para>
		/// <para><strong>Description</strong>: Select the preferred day of the week for service appointments.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode? PreferredAppointmentDayCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentDayCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentDayCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentDayCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Time</para>
		/// <para><strong>Description</strong>: Select the preferred time of day for service appointments.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode.Morning"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode? PreferredAppointmentTimeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAppointmentTimeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredAppointmentTimeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAppointmentTimeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Method of Contact</para>
		/// <para><strong>Description</strong>: Select the preferred method of contact.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode.Any"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.PreferredContactMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredContactMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Facility/Equipment</para>
		/// <para><strong>Description</strong>: Choose the contact&apos;s preferred service facility or equipment to make sure services are scheduled correctly for the customer.</para>
		/// <para><strong>Lookup</strong>: <see cref="equipment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreferredEquipmentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredEquipmentId); }
			set { Entity.Attributes[Fields.PreferredEquipmentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Service</para>
		/// <para><strong>Description</strong>: Choose the contact&apos;s preferred service to make sure services are scheduled correctly for the customer.</para>
		/// <para><strong>Lookup</strong>: <see cref="service"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreferredServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredServiceId); }
			set { Entity.Attributes[Fields.PreferredServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred User</para>
		/// <para><strong>Description</strong>: Choose the regular or preferred customer service representative for reference when scheduling service activities for the contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreferredSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreferredSystemUserId); }
			set { Entity.Attributes[Fields.PreferredSystemUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Shows the ID of the process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Salutation</para>
		/// <para><strong>Description</strong>: Type the salutation of the contact to make sure the contact is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the Contact record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Spouse/Partner Name</para>
		/// <para><strong>Description</strong>: Type the name of the contact&apos;s spouse or partner for reference during calls, events, or other communications with the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SpousesName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SpousesName); }
			set { Entity.Attributes[Fields.SpousesName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Process Stage</para>
		/// <para><strong>Description</strong>: Shows the ID of the stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the contact is active or inactive. Inactive contacts are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the contact&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suffix</para>
		/// <para><strong>Description</strong>: Type the suffix used in the contact&apos;s name, such as Jr. or Sr. to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Suffix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Suffix); }
			set { Entity.Attributes[Fields.Suffix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TeamsFollowed</para>
		/// <para><strong>Description</strong>: Number of users or conversations followed the record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TeamsFollowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TeamsFollowed); }
			set { Entity.Attributes[Fields.TeamsFollowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Phone</para>
		/// <para><strong>Description</strong>: Type the main phone number for this contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Home Phone</para>
		/// <para><strong>Description</strong>: Type a second phone number for this contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Telephone 3</para>
		/// <para><strong>Description</strong>: Type a third phone number for this contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Territory</para>
		/// <para><strong>Description</strong>: Select a region or territory for the contact for use in segmentation and analysis.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode? TerritoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TerritoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContactOptionSets.TerritoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TerritoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TerritoryCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Spent by me</para>
		/// <para><strong>Description</strong>: Total time spent for emails (read and write) and meetings by me in relation to the contact record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the contact.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Type the contact&apos;s professional or personal website or blog URL.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
			set { Entity.Attributes[Fields.WebSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi First Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the contact&apos;s first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Full Name</para>
		/// <para><strong>Description</strong>: Shows the combined Yomi first and last names of the contact so that the full phonetic name can be displayed in views and reports.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Last Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the contact&apos;s last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Middle Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the contact&apos;s middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}