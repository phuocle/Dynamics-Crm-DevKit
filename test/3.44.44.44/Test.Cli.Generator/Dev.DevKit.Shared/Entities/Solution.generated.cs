//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SolutionOptionSets
{
	public enum SolutionType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Internal = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Snapshot</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Snapshot = 1
	}
	public enum SourceControlSyncStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Committed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Committed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Errors in initial sync</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Errors_in_initial_sync = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial sync in progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Initial_sync_in_progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_started = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending changes to be committed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Pending_changes_to_be_committed = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Solution : EntityBase
	{
		public struct Fields
		{
			public const string ConfigurationPageId = "configurationpageid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string EnabledForSourceControlIntegration = "enabledforsourcecontrolintegration";
			public const string FileId = "fileid";
			public const string FileId_name = "fileid_name";
			public const string FriendlyName = "friendlyname";
			public const string InstalledOn = "installedon";
			public const string IsApiManaged = "isapimanaged";
			public const string IsInternal = "isinternal";
			public const string IsManaged = "ismanaged";
			public const string IsVisible = "isvisible";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string ParentSolutionId = "parentsolutionid";
			public const string PinpointAssetId = "pinpointassetid";
			public const string PinpointPublisherId = "pinpointpublisherid";
			public const string PinpointSolutionDefaultLocale = "pinpointsolutiondefaultlocale";
			public const string PinpointSolutionId = "pinpointsolutionid";
			public const string PublisherId = "publisherid";
			public const string SolutionId = "solutionid";
			public const string SolutionPackageVersion = "solutionpackageversion";
			public const string SolutionType = "solutiontype";
			public const string SourceControlSyncStatus = "sourcecontrolsyncstatus";
			public const string TemplateSuffix = "templatesuffix";
			public const string Thumbprint = "thumbprint";
			public const string UniqueName = "uniquename";
			public const string UpdatedOn = "updatedon";
			public const string UpgradeInfo = "upgradeinfo";
			public const string Version = "version";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "solution";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 7100;
		public const string EntityCollectionSchemaName = "Solutions";
		public const string EntityDisplayCollectionName = "Solutions";
		public const string DisplayName = "Solution";
		public const string EntitySetName = "solutions";
		public const string EntityLogicalCollectionName = "solutions";
		public const string EntityPrimaryIdAttribute = "solutionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "friendlyname";
		public const string EntitySchemaName = "Solution";
		[DebuggerNonUserCode()]
		public Solution()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Solution(Guid SolutionId)
		{
			Entity = new Entity(EntityLogicalName, SolutionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Solution(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Solution"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Solution(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Solution"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Solution(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Solution(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Solution"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Solution(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Solution(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Solution(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Configuration Page</para>
		/// <para><strong>Description</strong>: A link to an optional configuration page for this solution.</para>
		/// <para><strong>Lookup</strong>: <see cref="webresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ConfigurationPageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ConfigurationPageId); }
			set { Entity.Attributes[Fields.ConfigurationPageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the solution was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the solution.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled for Source Control Integration</para>
		/// <para><strong>Description</strong>: Indicates if solution is enabled for source control integration</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnabledForSourceControlIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnabledForSourceControlIntegration); }
			set { Entity.Attributes[Fields.EnabledForSourceControlIntegration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Id</para>
		/// <para><strong>Description</strong>: File Id for the blob url used for file storage.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileId_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileId_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Name</para>
		/// <para><strong>Description</strong>: User display name for the solution.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FriendlyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FriendlyName); }
			set { Entity.Attributes[Fields.FriendlyName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Installed On</para>
		/// <para><strong>Description</strong>: Date and time when the solution was installed/upgraded.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InstalledOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InstalledOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Api Managed Solution</para>
		/// <para><strong>Description</strong>: Information about whether the solution is api managed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsApiManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsApiManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is internal solution</para>
		/// <para><strong>Description</strong>: Indicates whether the solution is internal or not.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsInternal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsInternal); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Package Type</para>
		/// <para><strong>Description</strong>: Indicates whether the solution is managed or unmanaged.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Visible Outside Platform</para>
		/// <para><strong>Description</strong>: Indicates whether the solution is visible outside of the platform.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsVisible
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsVisible); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the solution was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the parent solution. Should only be non-null if this solution is a patch.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="solution"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSolutionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSolutionId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PinpointAssetId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PinpointAssetId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Identifier of the publisher of this solution in Microsoft Pinpoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? PinpointPublisherId
		{
			get { return Entity.GetAttributeValue<long?>(Fields.PinpointPublisherId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Default locale of the solution in Microsoft Pinpoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 16</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PinpointSolutionDefaultLocale
		{
			get { return Entity.GetAttributeValue<string>(Fields.PinpointSolutionDefaultLocale); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Identifier of the solution in Microsoft Pinpoint.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? PinpointSolutionId
		{
			get { return Entity.GetAttributeValue<long?>(Fields.PinpointSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publisher</para>
		/// <para><strong>Description</strong>: Unique identifier of the publisher.</para>
		/// <para><strong>Lookup</strong>: <see cref="publisher"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PublisherId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PublisherId); }
			set { Entity.Attributes[Fields.PublisherId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution Identifier</para>
		/// <para><strong>Description</strong>: Unique identifier of the solution.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SolutionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SolutionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution Package Version</para>
		/// <para><strong>Description</strong>: Solution package source organization version</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SolutionPackageVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SolutionPackageVersion); }
			set { Entity.Attributes[Fields.SolutionPackageVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution Type</para>
		/// <para><strong>Description</strong>: Solution Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType? SolutionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SolutionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionOptionSets.SolutionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SolutionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SolutionType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Control Sync Status</para>
		/// <para><strong>Description</strong>: Indicates the current status of source control integration</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionOptionSets.SourceControlSyncStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SolutionOptionSets.SourceControlSyncStatus.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SolutionOptionSets.SourceControlSyncStatus? SourceControlSyncStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SourceControlSyncStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SolutionOptionSets.SourceControlSyncStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SourceControlSyncStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SourceControlSyncStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suffix</para>
		/// <para><strong>Description</strong>: The template suffix of this solution</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 65</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TemplateSuffix
		{
			get { return Entity.GetAttributeValue<string>(Fields.TemplateSuffix); }
			set { Entity.Attributes[Fields.TemplateSuffix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thumbprint</para>
		/// <para><strong>Description</strong>: thumbprint of the solution signature</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 65</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Thumbprint
		{
			get { return Entity.GetAttributeValue<string>(Fields.Thumbprint); }
			set { Entity.Attributes[Fields.Thumbprint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The unique name of this solution</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 65</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Updated On</para>
		/// <para><strong>Description</strong>: Date and time when the solution was updated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? UpdatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.UpdatedOn); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Contains component info for the solution upgrade operation</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UpgradeInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.UpgradeInfo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version</para>
		/// <para><strong>Description</strong>: Solution version, used to identify a solution for upgrades and hotfixes.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Version
		{
			get { return Entity.GetAttributeValue<string>(Fields.Version); }
			set { Entity.Attributes[Fields.Version] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}