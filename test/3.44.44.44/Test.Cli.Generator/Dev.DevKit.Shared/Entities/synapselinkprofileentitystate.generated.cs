//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets
{
	public enum EntitySource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dataverse</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dataverse = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: FnOTables</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FnOTables = 1
	}
	public enum EntityType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Requested</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Requested = 0
	}
	public enum InitialSyncState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Completed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: CompletedWithFailures</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		CompletedWithFailures = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		InProgress = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotStarted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		NotStarted = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Paused</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Paused = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: PostProcessing</para>
		/// <para><strong>Value</strong>: 64</para>
		/// </summary>
		PostProcessing = 64,
		/// <summary>
		/// <para><strong>Display Name</strong>: RequestedInitialData</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		RequestedInitialData = 16
	}
	public enum MetadataState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Created = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Failure = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: MetadataCreating</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		MetadataCreating = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotCreated</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		NotCreated = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: RelationshipCreating</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		RelationshipCreating = 4
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
	public enum SynapseTableCreationState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Completed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Failed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		InProgress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotStarted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NotStarted = 0
	}
	public enum SyncState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Completed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: CompletedWithFailures</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		CompletedWithFailures = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		InProgress = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotStarted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		NotStarted = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Paused</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Paused = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: PostProcessing</para>
		/// <para><strong>Value</strong>: 64</para>
		/// </summary>
		PostProcessing = 64,
		/// <summary>
		/// <para><strong>Display Name</strong>: RequestedInitialData</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		RequestedInitialData = 16
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class synapselinkprofileentitystate : EntityBase
	{
		public struct Fields
		{
			public const string AdditionTime = "additiontime";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CrmRecordCount = "crmrecordcount";
			public const string CrmRecordCountModifiedTime = "crmrecordcountmodifiedtime";
			public const string EntityName = "entityname";
			public const string EntitySource = "entitysource";
			public const string EntityType = "entitytype";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialSyncDataCompletedTime = "initialsyncdatacompletedtime";
			public const string InitialSyncMetadataCreatedTime = "initialsyncmetadatacreatedtime";
			public const string InitialSyncProcessCompletedTime = "initialsyncprocesscompletedtime";
			public const string InitialSyncState = "initialsyncstate";
			public const string LakeRecordCount = "lakerecordcount";
			public const string LakeRecordCountModifiedTime = "lakerecordcountmodifiedtime";
			public const string LastSyncedDataTime = "lastsynceddatatime";
			public const string LastSyncedDataVersion = "lastsynceddataversion";
			public const string LastSyncedMetadataTime = "lastsyncedmetadatatime";
			public const string LastSyncedMetadataVersion = "lastsyncedmetadataversion";
			public const string MetadataState = "metadatastate";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string profile = "profile";
			public const string profileentity = "profileentity";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string synapselinkprofileentitystateId = "synapselinkprofileentitystateid";
			public const string SynapseTableCreationState = "synapsetablecreationstate";
			public const string SyncState = "syncstate";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "synapselinkprofileentitystate";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10047;
		public const string EntityCollectionSchemaName = "synapselinkprofileentitystates";
		public const string EntityDisplayCollectionName = "Synapse Link Profile Entity States";
		public const string DisplayName = "Synapse Link Profile Entity State";
		public const string EntitySetName = "synapselinkprofileentitystates";
		public const string EntityLogicalCollectionName = "synapselinkprofileentitystates";
		public const string EntityPrimaryIdAttribute = "synapselinkprofileentitystateid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "synapselinkprofileentitystate";
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Guid synapselinkprofileentitystateId)
		{
			Entity = new Entity(EntityLogicalName, synapselinkprofileentitystateId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="synapselinkprofileentitystate"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="synapselinkprofileentitystate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new synapselinkprofileentitystate(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="synapselinkprofileentitystate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new synapselinkprofileentitystate(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public synapselinkprofileentitystate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Addition Time</para>
		/// <para><strong>Description</strong>: Addition time of entity</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? AdditionTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.AdditionTime); }
			set { Entity.Attributes[Fields.AdditionTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CRM Record Count</para>
		/// <para><strong>Description</strong>: CRM record count</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? CrmRecordCount
		{
			get { return Entity.GetAttributeValue<long?>(Fields.CrmRecordCount); }
			set { Entity.Attributes[Fields.CrmRecordCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CRM Record Count Modified Time</para>
		/// <para><strong>Description</strong>: CRM record count modified time for entity</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CrmRecordCountModifiedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CrmRecordCountModifiedTime); }
			set { Entity.Attributes[Fields.CrmRecordCountModifiedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityName</para>
		/// <para><strong>Description</strong>: Name of the entity</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity source</para>
		/// <para><strong>Description</strong>: Source of the entity</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntitySource"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntitySource.Dataverse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntitySource? EntitySource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EntitySource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntitySource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EntitySource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EntitySource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityType</para>
		/// <para><strong>Description</strong>: Type of the entity</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntityType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntityType? EntityType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EntityType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.EntityType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EntityType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EntityType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Sync Data Completed Time</para>
		/// <para><strong>Description</strong>: Initial sync data completed time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InitialSyncDataCompletedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InitialSyncDataCompletedTime); }
			set { Entity.Attributes[Fields.InitialSyncDataCompletedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Sync Metadata Created Time</para>
		/// <para><strong>Description</strong>: Initial sync metadata created time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InitialSyncMetadataCreatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InitialSyncMetadataCreatedTime); }
			set { Entity.Attributes[Fields.InitialSyncMetadataCreatedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Sync Process Completed Time</para>
		/// <para><strong>Description</strong>: Initial sync process completed time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? InitialSyncProcessCompletedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.InitialSyncProcessCompletedTime); }
			set { Entity.Attributes[Fields.InitialSyncProcessCompletedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Sync State</para>
		/// <para><strong>Description</strong>: Initial sync state</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.InitialSyncState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.InitialSyncState.NotStarted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.InitialSyncState? InitialSyncState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialSyncState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.InitialSyncState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialSyncState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialSyncState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lake Record Count</para>
		/// <para><strong>Description</strong>: Lake record count</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? LakeRecordCount
		{
			get { return Entity.GetAttributeValue<long?>(Fields.LakeRecordCount); }
			set { Entity.Attributes[Fields.LakeRecordCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lake Record Count Modified Time</para>
		/// <para><strong>Description</strong>: Lake record count modified time for entity</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LakeRecordCountModifiedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LakeRecordCountModifiedTime); }
			set { Entity.Attributes[Fields.LakeRecordCountModifiedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Synced Data Time</para>
		/// <para><strong>Description</strong>: Last synced data time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncedDataTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncedDataTime); }
			set { Entity.Attributes[Fields.LastSyncedDataTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Synced Data Version</para>
		/// <para><strong>Description</strong>: Last synced data version</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 32</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncedDataVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncedDataVersion); }
			set { Entity.Attributes[Fields.LastSyncedDataVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Synced Metadata Time</para>
		/// <para><strong>Description</strong>: Last synced metadata time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncedMetadataTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncedMetadataTime); }
			set { Entity.Attributes[Fields.LastSyncedMetadataTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Synced Metadata Version</para>
		/// <para><strong>Description</strong>: Last synced metadata version</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 32</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastSyncedMetadataVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastSyncedMetadataVersion); }
			set { Entity.Attributes[Fields.LastSyncedMetadataVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metadata State</para>
		/// <para><strong>Description</strong>: Metadata state</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.MetadataState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.MetadataState.NotCreated"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.MetadataState? MetadataState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MetadataState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.MetadataState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MetadataState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MetadataState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile</para>
		/// <para><strong>Description</strong>: Unique identifier for Synapse Link Profile associated with Synapse Link Profile Entity State.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="synapselinkprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference profile
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.profile); }
			set { Entity.Attributes[Fields.profile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ProfileEntity</para>
		/// <para><strong>Description</strong>: Unique identifier for Synapse Link Profile Entity associated with Synapse Link Profile Entity State.</para>
		/// <para><strong>Lookup</strong>: <see cref="synapselinkprofileentity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference profileentity
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.profileentity); }
			set { Entity.Attributes[Fields.profileentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Synapse Link Profile Entity State</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Synapse Link Profile Entity State</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Synapse Link Profile Entity State</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid synapselinkprofileentitystateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.synapselinkprofileentitystateId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Synapse Table Creation State</para>
		/// <para><strong>Description</strong>: Synapse table creation state</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SynapseTableCreationState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SynapseTableCreationState.NotStarted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SynapseTableCreationState? SynapseTableCreationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SynapseTableCreationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SynapseTableCreationState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SynapseTableCreationState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SynapseTableCreationState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SyncState</para>
		/// <para><strong>Description</strong>: Entity sync state</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SyncState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SyncState.NotStarted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SyncState? SyncState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SyncState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.synapselinkprofileentitystateOptionSets.SyncState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SyncState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SyncState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}