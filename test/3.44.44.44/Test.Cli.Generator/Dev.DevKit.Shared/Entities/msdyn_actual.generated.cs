//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_actualOptionSets
{
	public enum msdyn_AdjustmentStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Adjusted</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Adjusted = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Process</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		In_Process = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unadjustable</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Unadjustable = 192_350_002
	}
	public enum msdyn_AmountMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Fixed Price</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Fixed_Price = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Multiply Basis Amount By Percent</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Multiply_Basis_Amount_By_Percent = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Multiply Basis Quantity By Price</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Multiply_Basis_Quantity_By_Price = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Multiply Quantity By Price</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Multiply_Quantity_By_Price = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tax Calculation</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Tax_Calculation = 690_970_000
	}
	public enum msdyn_BillingStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Canceled = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Invoice Created</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Customer_Invoice_Created = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Invoice Posted</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Customer_Invoice_Posted = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unbilled Sales Created</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Unbilled_Sales_Created = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Work order closed - posted</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Work_order_closed_posted = 690_970_000
	}
	public enum msdyn_BillingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chargeable</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Chargeable = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Complimentary</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Complimentary = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non Chargeable</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Non_Chargeable = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Available</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Not_Available = 192_350_003
	}
	public enum msdyn_CustomerType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Account = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Contact = 192_350_002
	}
	public enum msdyn_JournalType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Break</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Break = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Closure</para>
		/// <para><strong>Value</strong>: 690,970,004</para>
		/// </summary>
		Business_Closure = 690_970_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Overtime</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Overtime = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Travel</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Travel = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Working Hours</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Working_Hours = 690_970_000
	}
	public enum msdyn_ProductType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Inventory = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non-Inventory</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Non_Inventory = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Service = 690_970_002
	}
	public enum msdyn_TransactionClassification
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Additional = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Commission</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Commission = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expense</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Expense = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fee</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Fee = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Material</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Material = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Milestone</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Milestone = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tax</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Tax = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Time</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Time = 192_350_000
	}
	public enum msdyn_TransactionTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Billed Sales</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Billed_Sales = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Cost = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inter-Organizational Sales</para>
		/// <para><strong>Value</strong>: 192,350,008</para>
		/// </summary>
		Inter_Organizational_Sales = 192_350_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Project Contract</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Project_Contract = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resourcing Unit Cost</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		Resourcing_Unit_Cost = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unbilled Sales</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Unbilled_Sales = 192_350_005
	}
	public enum msdyn_VendorType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Account = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Contact = 192_350_002
	}
	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Facility = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Onsite</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Onsite = 690_970_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_actual : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AccountCustomer = "msdyn_accountcustomer";
			public const string msdyn_AccountingDate = "msdyn_accountingdate";
			public const string msdyn_AccountVendor = "msdyn_accountvendor";
			public const string msdyn_actualId = "msdyn_actualid";
			public const string msdyn_AdjustmentStatus = "msdyn_adjustmentstatus";
			public const string msdyn_Agreement = "msdyn_agreement";
			public const string msdyn_Amount = "msdyn_amount";
			public const string msdyn_amount_Base = "msdyn_amount_base";
			public const string msdyn_AmountMethod = "msdyn_amountmethod";
			public const string msdyn_BasisAmount = "msdyn_basisamount";
			public const string msdyn_basisamount_Base = "msdyn_basisamount_base";
			public const string msdyn_BasisPrice = "msdyn_basisprice";
			public const string msdyn_basisprice_Base = "msdyn_basisprice_base";
			public const string msdyn_BasisQuantity = "msdyn_basisquantity";
			public const string msdyn_BillingStatus = "msdyn_billingstatus";
			public const string msdyn_BillingType = "msdyn_billingtype";
			public const string msdyn_bookableresource = "msdyn_bookableresource";
			public const string msdyn_ContactCustomer = "msdyn_contactcustomer";
			public const string msdyn_ContactVendor = "msdyn_contactvendor";
			public const string msdyn_CustomerType = "msdyn_customertype";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_DocumentDate = "msdyn_documentdate";
			public const string msdyn_EndDateTime = "msdyn_enddatetime";
			public const string msdyn_ExchangeRateDate = "msdyn_exchangeratedate";
			public const string msdyn_externaldescription = "msdyn_externaldescription";
			public const string msdyn_ExternalReferenceDate = "msdyn_externalreferencedate";
			public const string msdyn_ExternalReferenceID = "msdyn_externalreferenceid";
			public const string msdyn_IncidentType = "msdyn_incidenttype";
			public const string msdyn_Invoice = "msdyn_invoice";
			public const string msdyn_IsJournalized = "msdyn_isjournalized";
			public const string msdyn_JournalType = "msdyn_journaltype";
			public const string msdyn_Percent = "msdyn_percent";
			public const string msdyn_Price = "msdyn_price";
			public const string msdyn_price_Base = "msdyn_price_base";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_ProductType = "msdyn_producttype";
			public const string msdyn_Quantity = "msdyn_quantity";
			public const string msdyn_SalesContract = "msdyn_salescontract";
			public const string msdyn_SalesContractLine = "msdyn_salescontractline";
			public const string msdyn_ServiceAccount = "msdyn_serviceaccount";
			public const string msdyn_ServiceTerritory = "msdyn_serviceterritory";
			public const string msdyn_StartDateTime = "msdyn_startdatetime";
			public const string msdyn_TaxCode = "msdyn_taxcode";
			public const string msdyn_TransactionClassification = "msdyn_transactionclassification";
			public const string msdyn_TransactionTypeCode = "msdyn_transactiontypecode";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitSchedule = "msdyn_unitschedule";
			public const string msdyn_VendorType = "msdyn_vendortype";
			public const string msdyn_Warehouse = "msdyn_warehouse";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string msdyn_WorkOrderType = "msdyn_workordertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_actual";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10997;
		public const string EntityCollectionSchemaName = "msdyn_actuals";
		public const string EntityDisplayCollectionName = "Actuals";
		public const string DisplayName = "Actual";
		public const string EntitySetName = "msdyn_actuals";
		public const string EntityLogicalCollectionName = "msdyn_actuals";
		public const string EntityPrimaryIdAttribute = "msdyn_actualid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_description";
		public const string EntitySchemaName = "msdyn_actual";
		[DebuggerNonUserCode()]
		public msdyn_actual()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_actual(Guid msdyn_actualId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_actualId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_actual(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_actual"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_actual(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_actual"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_actual(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_actual(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_actual"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_actual(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_actual(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_actual(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer ID</para>
		/// <para><strong>Description</strong>: Select the customer.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountCustomer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountCustomer); }
			set { Entity.Attributes[Fields.msdyn_AccountCustomer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accounting Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AccountingDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AccountingDate); }
			set { Entity.Attributes[Fields.msdyn_AccountingDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AccountVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AccountVendor); }
			set { Entity.Attributes[Fields.msdyn_AccountVendor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_actualId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_actualId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Adjustment Status ID</para>
		/// <para><strong>Description</strong>: Shows the adjustment status ID of the transaction.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AdjustmentStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AdjustmentStatus? msdyn_AdjustmentStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AdjustmentStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AdjustmentStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AdjustmentStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AdjustmentStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_agreement"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Agreement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Agreement); }
			set { Entity.Attributes[Fields.msdyn_Agreement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount</para>
		/// <para><strong>Description</strong>: Enter the amount in transaction currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Amount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Amount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Amount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Amount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount (Base currency)</para>
		/// <para><strong>Description</strong>: Enter the value of the amount in the base (organization) currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount Method ID</para>
		/// <para><strong>Description</strong>: Select the method by which the amount was computed.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AmountMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AmountMethod.Multiply_Quantity_By_Price"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AmountMethod? msdyn_AmountMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AmountMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_AmountMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AmountMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AmountMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Basis Amount</para>
		/// <para><strong>Description</strong>: Enter the cost amount of the sales transaction in the transaction currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BasisAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_BasisAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BasisAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_BasisAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Basis Amount (Base currency)</para>
		/// <para><strong>Description</strong>: Enter the cost amount of the sales transaction in the base (organization) currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_basisamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_basisamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Basis Price</para>
		/// <para><strong>Description</strong>: Enter the cost price of the sales transaction in transaction currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BasisPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_BasisPrice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BasisPrice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_BasisPrice] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Basis Price (Base currency)</para>
		/// <para><strong>Description</strong>: Enter the cost price of the sales transaction in base (organization) currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_basisprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_basisprice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Basis Quantity</para>
		/// <para><strong>Description</strong>: Enter the cost quantity of the sales transaction in the base (organization) currency.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_BasisQuantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_BasisQuantity); }
			set { Entity.Attributes[Fields.msdyn_BasisQuantity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing status ID</para>
		/// <para><strong>Description</strong>: Select the billing status ID.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_BillingStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_BillingStatus? msdyn_BillingStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_BillingStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing type ID</para>
		/// <para><strong>Description</strong>: Select the billing type ID.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_BillingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_BillingType? msdyn_BillingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BillingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_BillingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BillingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BillingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bookable Resource</para>
		/// <para><strong>Description</strong>: Shows the bookable resource for which the actual is recorded.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bookableresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bookableresource); }
			set { Entity.Attributes[Fields.msdyn_bookableresource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer contact ID</para>
		/// <para><strong>Description</strong>: Select the customer contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContactCustomer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContactCustomer); }
			set { Entity.Attributes[Fields.msdyn_ContactCustomer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ContactVendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ContactVendor); }
			set { Entity.Attributes[Fields.msdyn_ContactVendor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer type ID</para>
		/// <para><strong>Description</strong>: Select the customer type ID.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_CustomerType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_CustomerType.Account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_CustomerType? msdyn_CustomerType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CustomerType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_CustomerType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CustomerType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CustomerType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type the record description.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Document Date</para>
		/// <para><strong>Description</strong>: Enter the transaction date of the business event.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DocumentDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DocumentDate); }
			set { Entity.Attributes[Fields.msdyn_DocumentDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Date/Time</para>
		/// <para><strong>Description</strong>: Enter the end date and time for this transaction.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_EndDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_EndDateTime); }
			set { Entity.Attributes[Fields.msdyn_EndDateTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate Date</para>
		/// <para><strong>Description</strong>: Enter the date of the exchange rate used for this transaction.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ExchangeRateDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ExchangeRateDate); }
			set { Entity.Attributes[Fields.msdyn_ExchangeRateDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Description</para>
		/// <para><strong>Description</strong>: The external description of the business transaction.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externaldescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externaldescription); }
			set { Entity.Attributes[Fields.msdyn_externaldescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Reference Date</para>
		/// <para><strong>Description</strong>: Stores a date from an external system, such as a journal entry voucher date from an ERP system</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ExternalReferenceDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ExternalReferenceDate); }
			set { Entity.Attributes[Fields.msdyn_ExternalReferenceDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Reference ID</para>
		/// <para><strong>Description</strong>: Stores an ID from an external system, such as the journal entry voucher number from an ERP system.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ExternalReferenceID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ExternalReferenceID); }
			set { Entity.Attributes[Fields.msdyn_ExternalReferenceID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IncidentType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IncidentType); }
			set { Entity.Attributes[Fields.msdyn_IncidentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Invoice</para>
		/// <para><strong>Description</strong>: The unique identifier of an invoice.</para>
		/// <para><strong>Lookup</strong>: <see cref="invoice"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Invoice
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Invoice); }
			set { Entity.Attributes[Fields.msdyn_Invoice] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Journalized</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsJournalized
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsJournalized); }
			set { Entity.Attributes[Fields.msdyn_IsJournalized] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journal Type</para>
		/// <para><strong>Description</strong>: Type of journal for resource cost.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_JournalType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_JournalType? msdyn_JournalType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_JournalType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_JournalType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_JournalType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_JournalType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent</para>
		/// <para><strong>Description</strong>: Enter the percent.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Percent
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Percent); }
			set { Entity.Attributes[Fields.msdyn_Percent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price</para>
		/// <para><strong>Description</strong>: Enter the price in the transaction currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Price
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Price);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Price] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Price] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price (Base)</para>
		/// <para><strong>Description</strong>: Enter the price in the base (organization) currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_price_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_price_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price list ID</para>
		/// <para><strong>Description</strong>: Select the price list.</para>
		/// <para><strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product ID</para>
		/// <para><strong>Description</strong>: Select the product ID.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Product); }
			set { Entity.Attributes[Fields.msdyn_Product] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_ProductType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_ProductType? msdyn_ProductType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ProductType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_ProductType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ProductType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ProductType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quantity</para>
		/// <para><strong>Description</strong>: Enter the quantity.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Quantity
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Quantity); }
			set { Entity.Attributes[Fields.msdyn_Quantity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Project Contract ID</para>
		/// <para><strong>Description</strong>: Select the project contract.</para>
		/// <para><strong>Lookup</strong>: <see cref="salesorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SalesContract
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SalesContract); }
			set { Entity.Attributes[Fields.msdyn_SalesContract] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Project Contract Line</para>
		/// <para><strong>Description</strong>: Type the project contract line.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SalesContractLine
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SalesContractLine); }
			set { Entity.Attributes[Fields.msdyn_SalesContractLine] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account</para>
		/// <para><strong>Description</strong>: Account that was serviced</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceAccount); }
			set { Entity.Attributes[Fields.msdyn_ServiceAccount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Territory</para>
		/// <para><strong>Lookup</strong>: <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceTerritory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_ServiceTerritory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date/Time</para>
		/// <para><strong>Description</strong>: Enter the start date and time.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_StartDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_StartDateTime); }
			set { Entity.Attributes[Fields.msdyn_StartDateTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tax Code</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_taxcode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TaxCode
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TaxCode); }
			set { Entity.Attributes[Fields.msdyn_TaxCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transaction Class</para>
		/// <para><strong>Description</strong>: Shows the transaction classification of this transaction.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_TransactionClassification"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_TransactionClassification? msdyn_TransactionClassification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionClassification);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_TransactionClassification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionClassification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionClassification] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transaction Type</para>
		/// <para><strong>Description</strong>: Shows the transaction type of this transaction.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_TransactionTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_TransactionTypeCode? msdyn_TransactionTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_TransactionTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit of measure</para>
		/// <para><strong>Description</strong>: Select the unit of measure.</para>
		/// <para><strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Schedule</para>
		/// <para><strong>Description</strong>: Select the unit schedule.</para>
		/// <para><strong>Lookup</strong>: <see cref="uomschedule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_UnitSchedule
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_UnitSchedule); }
			set { Entity.Attributes[Fields.msdyn_UnitSchedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_VendorType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_VendorType.Account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_VendorType? msdyn_VendorType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_VendorType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_VendorType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_VendorType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_VendorType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Warehouse</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_warehouse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Warehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Warehouse); }
			set { Entity.Attributes[Fields.msdyn_Warehouse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_WorkLocation"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Type</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workordertype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderType); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Actual</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Actual</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_actualOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Shows the currency associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}