//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class mspp_weblink : EntityBase
	{
		public struct Fields
		{
			public const string mspp_createdby = "mspp_createdby";
			public const string mspp_createdbyipaddress = "mspp_createdbyipaddress";
			public const string mspp_createdbyusername = "mspp_createdbyusername";
			public const string mspp_createdon = "mspp_createdon";
			public const string mspp_description = "mspp_description";
			public const string mspp_disablepagevalidation = "mspp_disablepagevalidation";
			public const string mspp_displayimageonly = "mspp_displayimageonly";
			public const string mspp_displayorder = "mspp_displayorder";
			public const string mspp_displaypagechildlinks = "mspp_displaypagechildlinks";
			public const string mspp_externalurl = "mspp_externalurl";
			public const string mspp_imagealttext = "mspp_imagealttext";
			public const string mspp_imageheight = "mspp_imageheight";
			public const string mspp_imageurl = "mspp_imageurl";
			public const string mspp_imagewidth = "mspp_imagewidth";
			public const string mspp_modifiedby = "mspp_modifiedby";
			public const string mspp_modifiedbyipaddress = "mspp_modifiedbyipaddress";
			public const string mspp_modifiedbyusername = "mspp_modifiedbyusername";
			public const string mspp_modifiedon = "mspp_modifiedon";
			public const string mspp_name = "mspp_name";
			public const string mspp_openinnewwindow = "mspp_openinnewwindow";
			public const string mspp_pageid = "mspp_pageid";
			public const string mspp_parentweblinkid = "mspp_parentweblinkid";
			public const string mspp_publishingstateid = "mspp_publishingstateid";
			public const string mspp_robotsfollowlink = "mspp_robotsfollowlink";
			public const string mspp_weblinkId = "mspp_weblinkid";
			public const string mspp_weblinksetid = "mspp_weblinksetid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
		}
		public const string EntityLogicalName = "mspp_weblink";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10338;
		public const string EntityCollectionSchemaName = "mspp_weblinks";
		public const string EntityDisplayCollectionName = "Web Links";
		public const string DisplayName = "Web Link";
		public const string EntitySetName = "mspp_weblinks";
		public const string EntityLogicalCollectionName = "mspp_weblinks";
		public const string EntityPrimaryIdAttribute = "mspp_weblinkid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "mspp_name";
		public const string EntitySchemaName = "mspp_weblink";
		[DebuggerNonUserCode()]
		public mspp_weblink()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_weblink(Guid mspp_weblinkId)
		{
			Entity = new Entity(EntityLogicalName, mspp_weblinkId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_weblink(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_weblink"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public mspp_weblink(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_weblink"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_weblink(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_weblink(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_weblink"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_weblink(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_weblink(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_weblink(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_createdby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_createdby); }
			set { Entity.Attributes[Fields.mspp_createdby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By IP Address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_createdbyipaddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_createdbyipaddress); }
			set { Entity.Attributes[Fields.mspp_createdbyipaddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By Username</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_createdbyusername
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_createdbyusername); }
			set { Entity.Attributes[Fields.mspp_createdbyusername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_createdon); }
			set { Entity.Attributes[Fields.mspp_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_description); }
			set { Entity.Attributes[Fields.mspp_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Page Validation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_disablepagevalidation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_disablepagevalidation); }
			set { Entity.Attributes[Fields.mspp_disablepagevalidation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Image Only</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_displayimageonly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_displayimageonly); }
			set { Entity.Attributes[Fields.mspp_displayimageonly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Order</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_displayorder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_displayorder); }
			set { Entity.Attributes[Fields.mspp_displayorder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Page Child Links</para>
		/// <para><strong>Description</strong>: Select whether to display the children of the page as child links for this link.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_displaypagechildlinks
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_displaypagechildlinks); }
			set { Entity.Attributes[Fields.mspp_displaypagechildlinks] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Url</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_externalurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_externalurl); }
			set { Entity.Attributes[Fields.mspp_externalurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Image Alt Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_imagealttext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_imagealttext); }
			set { Entity.Attributes[Fields.mspp_imagealttext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Image Height</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_imageheight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_imageheight); }
			set { Entity.Attributes[Fields.mspp_imageheight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Image Url</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_imageurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_imageurl); }
			set { Entity.Attributes[Fields.mspp_imageurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Image Width</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_imagewidth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_imagewidth); }
			set { Entity.Attributes[Fields.mspp_imagewidth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_modifiedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_modifiedby); }
			set { Entity.Attributes[Fields.mspp_modifiedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By IP Address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_modifiedbyipaddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_modifiedbyipaddress); }
			set { Entity.Attributes[Fields.mspp_modifiedbyipaddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By Username</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_modifiedbyusername
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_modifiedbyusername); }
			set { Entity.Attributes[Fields.mspp_modifiedbyusername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was modified.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_modifiedon); }
			set { Entity.Attributes[Fields.mspp_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_name); }
			set { Entity.Attributes[Fields.mspp_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Open In New Window</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_openinnewwindow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_openinnewwindow); }
			set { Entity.Attributes[Fields.mspp_openinnewwindow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Page</para>
		/// <para><strong>Description</strong>: Unique identifier for Web Page associated with Web Link.</para>
		/// <para><strong>Lookup</strong>: <see cref="mspp_webpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_pageid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_pageid); }
			set { Entity.Attributes[Fields.mspp_pageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Web Link</para>
		/// <para><strong>Description</strong>: Unique identifier for parent Web Link associated with Web Link.</para>
		/// <para><strong>Lookup</strong>: <see cref="mspp_weblink"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_parentweblinkid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_parentweblinkid); }
			set { Entity.Attributes[Fields.mspp_parentweblinkid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publishing State</para>
		/// <para><strong>Description</strong>: Unique identifier for Publishing State associated with Web Link.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="mspp_publishingstate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_publishingstateid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_publishingstateid); }
			set { Entity.Attributes[Fields.mspp_publishingstateid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Robots Follow Link</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_robotsfollowlink
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_robotsfollowlink); }
			set { Entity.Attributes[Fields.mspp_robotsfollowlink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Web Link</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid mspp_weblinkId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.mspp_weblinkId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Web Link Set</para>
		/// <para><strong>Description</strong>: Unique identifier for Web Link Set associated with Web Link.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="mspp_weblinkset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_weblinksetid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_weblinksetid); }
			set { Entity.Attributes[Fields.mspp_weblinksetid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Web Link</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Web Link</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_weblinkOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
	}
}