//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ai_conversationtopicclustersnapshotOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ai_conversationtopicclustersnapshot : EntityBase
	{
		public struct Fields
		{
			public const string msdyn_ai_conversationtopicclustersnapshotId = "msdyn_ai_conversationtopicclustersnapshotid";
			public const string msdyn_centroid_id = "msdyn_centroid_id";
			public const string msdyn_centroid_vector = "msdyn_centroid_vector";
			public const string msdyn_cluster_name = "msdyn_cluster_name";
			public const string msdyn_cluster_size = "msdyn_cluster_size";
			public const string msdyn_created_datetime = "msdyn_created_datetime";
			public const string msdyn_items = "msdyn_items";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_user_feedback = "msdyn_user_feedback";
		}
		public const string EntityLogicalName = "msdyn_ai_conversationtopicclustersnapshot";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11579;
		public const string EntityCollectionSchemaName = "msdyn_ai_conversationtopicclustersnapshots";
		public const string EntityDisplayCollectionName = "ai_conversationtopicclustersnapshot";
		public const string DisplayName = "ai_conversationtopicclustersnapshot";
		public const string EntitySetName = "msdyn_ai_conversationtopicclustersnapshots";
		public const string EntityLogicalCollectionName = "msdyn_ai_conversationtopicclustersnapshots";
		public const string EntityPrimaryIdAttribute = "msdyn_ai_conversationtopicclustersnapshotid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_ai_conversationtopicclustersnapshot";
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot(Guid msdyn_ai_conversationtopicclustersnapshotId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ai_conversationtopicclustersnapshotId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ai_conversationtopicclustersnapshot"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ai_conversationtopicclustersnapshot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ai_conversationtopicclustersnapshot(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ai_conversationtopicclustersnapshot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ai_conversationtopicclustersnapshot(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ai_conversationtopicclustersnapshot(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ai_conversationtopicclustersnapshot</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ai_conversationtopicclustersnapshotId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ai_conversationtopicclustersnapshotId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: centroid_id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_centroid_id
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_centroid_id); }
			set { Entity.Attributes[Fields.msdyn_centroid_id] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: centroid_vec</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_centroid_vector
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_centroid_vector); }
			set { Entity.Attributes[Fields.msdyn_centroid_vector] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: cluster_name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cluster_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cluster_name); }
			set { Entity.Attributes[Fields.msdyn_cluster_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: cluster_size</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_cluster_size
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_cluster_size); }
			set { Entity.Attributes[Fields.msdyn_cluster_size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: created_datetime</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_created_datetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_created_datetime); }
			set { Entity.Attributes[Fields.msdyn_created_datetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: items</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_items
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_items); }
			set { Entity.Attributes[Fields.msdyn_items] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: user_feedback</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_user_feedback
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_user_feedback); }
			set { Entity.Attributes[Fields.msdyn_user_feedback] = value; }
		}
	}
}