//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets
{
	public enum msdyncrm_doubleoptinthankyouformat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Open the marketing page after confirmation</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Open_the_marketing_page_after_confirmation = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open the web page after confirmation</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Open_the_web_page_after_confirmation = 192_350_001
	}
	public enum msdyncrm_entityupdatebehavioronsubmit
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contacts and leads</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Contacts_and_leads = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: No update</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		No_update = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Only contacts</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Only_contacts = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Only leads</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Only_leads = 2
	}
	public enum msdyncrm_purpose
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Collateral download</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Collateral_download = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact capture</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Contact_capture = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Double Opt-In, Email based confirmation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Double_Opt_In_Email_based_confirmation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Event feedback</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Event_feedback = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Event_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead generation</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lead_generation = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Newsletter subscription</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Newsletter_subscription = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Structural</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Structural = 6
	}
	public enum msdyncrm_validForPageType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Event_registration = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Forward to a friend</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Forward_to_a_friend = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Landing page</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Landing_page = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription center</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Subscription_center = 1
	}
	public enum msdyncrm_visualstyle
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 1-column</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		_1_column = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: 2-column</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		_2_column = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mixed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mixed = 2
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Error = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Expired = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live, editable</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live_editable = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopped = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_marketingform : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_allowPrefill = "msdyncrm_allowprefill";
			public const string msdyncrm_alwaysgenerateleads = "msdyncrm_alwaysgenerateleads";
			public const string msdyncrm_capturing = "msdyncrm_capturing";
			public const string msdyncrm_capturing_configured = "msdyncrm_capturing_configured";
			public const string msdyncrm_capturing_data = "msdyncrm_capturing_data";
			public const string msdyncrm_capturing_scantime = "msdyncrm_capturing_scantime";
			public const string msdyncrm_ConfirmationMessage = "msdyncrm_confirmationmessage";
			public const string msdyncrm_contactmatchingstrategy = "msdyncrm_contactmatchingstrategy";
			public const string msdyncrm_doubleoptincontentsettings = "msdyncrm_doubleoptincontentsettings";
			public const string msdyncrm_doubleoptinmessage = "msdyncrm_doubleoptinmessage";
			public const string msdyncrm_doubleoptinthankyouformat = "msdyncrm_doubleoptinthankyouformat";
			public const string msdyncrm_doubleoptinthankyoupage = "msdyncrm_doubleoptinthankyoupage";
			public const string msdyncrm_doubleoptinthankyouurl = "msdyncrm_doubleoptinthankyouurl";
			public const string msdyncrm_enabledoubleoptin = "msdyncrm_enabledoubleoptin";
			public const string msdyncrm_entityupdatebehavioronsubmit = "msdyncrm_entityupdatebehavioronsubmit";
			public const string msdyncrm_errorImageUrl = "msdyncrm_errorimageurl";
			public const string msdyncrm_ErrorMessage = "msdyncrm_errormessage";
			public const string msdyncrm_eventmatchingstrategy = "msdyncrm_eventmatchingstrategy";
			public const string msdyncrm_eventmatchingstrategyinfo = "msdyncrm_eventmatchingstrategyinfo";
			public const string msdyncrm_externalhostedforminstructions = "msdyncrm_externalhostedforminstructions";
			public const string msdyncrm_formcontrolmapping = "msdyncrm_formcontrolmapping";
			public const string msdyncrm_FormDefinition = "msdyncrm_formdefinition";
			public const string msdyncrm_formfieldmapping = "msdyncrm_formfieldmapping";
			public const string msdyncrm_formtosave = "msdyncrm_formtosave";
			public const string msdyncrm_info = "msdyncrm_info";
			public const string msdyncrm_insights_placeholder = "msdyncrm_insights_placeholder";
			public const string msdyncrm_keepsuccessfulsubmissions = "msdyncrm_keepsuccessfulsubmissions";
			public const string msdyncrm_leadmatchingstrategy = "msdyncrm_leadmatchingstrategy";
			public const string msdyncrm_LimitExceededMessage = "msdyncrm_limitexceededmessage";
			public const string msdyncrm_marketingformId = "msdyncrm_marketingformid";
			public const string msdyncrm_marketingformtemplate = "msdyncrm_marketingformtemplate";
			public const string msdyncrm_marketingprovided = "msdyncrm_marketingprovided";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_organizationwhitelistdomain = "msdyncrm_organizationwhitelistdomain";
			public const string msdyncrm_publishedformurl = "msdyncrm_publishedformurl";
			public const string msdyncrm_purpose = "msdyncrm_purpose";
			public const string msdyncrm_RedirectURL = "msdyncrm_redirecturl";
			public const string msdyncrm_successImageUrl = "msdyncrm_successimageurl";
			public const string msdyncrm_validForPageType = "msdyncrm_validforpagetype";
			public const string msdyncrm_visualstyle = "msdyncrm_visualstyle";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_marketingform";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11165;
		public const string EntityCollectionSchemaName = "msdyncrm_marketingforms";
		public const string EntityDisplayCollectionName = "Marketing forms";
		public const string DisplayName = "Marketing form";
		public const string EntitySetName = "msdyncrm_marketingforms";
		public const string EntityLogicalCollectionName = "msdyncrm_marketingforms";
		public const string EntityPrimaryIdAttribute = "msdyncrm_marketingformid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_marketingform";
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform(Guid msdyncrm_marketingformId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_marketingformId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingform"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingform"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingform(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingform"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingform(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingform(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prefill fields</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_allowPrefill
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_allowPrefill); }
			set { Entity.Attributes[Fields.msdyncrm_allowPrefill] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Always Generate Leads</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_alwaysgenerateleads
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_alwaysgenerateleads); }
			set { Entity.Attributes[Fields.msdyncrm_alwaysgenerateleads] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form capture</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_capturing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_capturing); }
			set { Entity.Attributes[Fields.msdyncrm_capturing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capturing configured</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_capturing_configured
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_capturing_configured); }
			set { Entity.Attributes[Fields.msdyncrm_capturing_configured] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capturing data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 150,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_capturing_data
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_capturing_data); }
			set { Entity.Attributes[Fields.msdyncrm_capturing_data] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capturing Scan Time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_capturing_scantimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_capturing_scantime); }
			set { Entity.Attributes[Fields.msdyncrm_capturing_scantime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmation message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_ConfirmationMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_ConfirmationMessage); }
			set { Entity.Attributes[Fields.msdyncrm_ConfirmationMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact form matching</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_matchingstrategy"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_contactmatchingstrategy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_contactmatchingstrategy); }
			set { Entity.Attributes[Fields.msdyncrm_contactmatchingstrategy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content settings</para>
		/// <para><strong>Description</strong>: Select the content settings to use for confirmation email.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_contentsettings"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_doubleoptincontentsettings
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_doubleoptincontentsettings); }
			set { Entity.Attributes[Fields.msdyncrm_doubleoptincontentsettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Double opt-in email</para>
		/// <para><strong>Description</strong>: Select the confirmation email to send contacts requesting to submit a form.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_doubleoptinmessage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_doubleoptinmessage); }
			set { Entity.Attributes[Fields.msdyncrm_doubleoptinmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: How to say thank you</para>
		/// <para><strong>Description</strong>: How to say Thank You</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_doubleoptinthankyouformat"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_doubleoptinthankyouformat.Open_the_marketing_page_after_confirmation"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_doubleoptinthankyouformat? msdyncrm_doubleoptinthankyouformat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_doubleoptinthankyouformat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_doubleoptinthankyouformat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_doubleoptinthankyouformat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_doubleoptinthankyouformat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you marketing page</para>
		/// <para><strong>Description</strong>: Marketing Page displayed when customer triggers confirmation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_doubleoptinthankyoupage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_doubleoptinthankyoupage); }
			set { Entity.Attributes[Fields.msdyncrm_doubleoptinthankyoupage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you web page</para>
		/// <para><strong>Description</strong>: Web Page displayed when customer triggers confirmation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_doubleoptinthankyouurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_doubleoptinthankyouurl); }
			set { Entity.Attributes[Fields.msdyncrm_doubleoptinthankyouurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable double opt-in</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_enabledoubleoptin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_enabledoubleoptin); }
			set { Entity.Attributes[Fields.msdyncrm_enabledoubleoptin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update contacts/leads</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_entityupdatebehavioronsubmit"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_entityupdatebehavioronsubmit? msdyncrm_entityupdatebehavioronsubmit
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_entityupdatebehavioronsubmit);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_entityupdatebehavioronsubmit)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_entityupdatebehavioronsubmit] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_entityupdatebehavioronsubmit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error image URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_errorImageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_errorImageUrl); }
			set { Entity.Attributes[Fields.msdyncrm_errorImageUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_ErrorMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_ErrorMessage); }
			set { Entity.Attributes[Fields.msdyncrm_ErrorMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event matching strategy</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_eventmatchingstrategy
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_eventmatchingstrategy); }
			set { Entity.Attributes[Fields.msdyncrm_eventmatchingstrategy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event matching strategy info</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_eventmatchingstrategyinfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_eventmatchingstrategyinfo); }
			set { Entity.Attributes[Fields.msdyncrm_eventmatchingstrategyinfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ExternalHostedFormInstructions</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_externalhostedforminstructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_externalhostedforminstructions); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form control mapping</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_formcontrolmapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_formcontrolmapping); }
			set { Entity.Attributes[Fields.msdyncrm_formcontrolmapping] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form definition</para>
		/// <para><strong>Description</strong>: JSON definition of the fields related to the Marketing form entity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_FormDefinition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_FormDefinition); }
			set { Entity.Attributes[Fields.msdyncrm_FormDefinition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Field Mapping</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 150,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_formfieldmapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_formfieldmapping); }
			set { Entity.Attributes[Fields.msdyncrm_formfieldmapping] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form to save</para>
		/// <para><strong>Description</strong>: Form to save</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_formtosave
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_formtosave); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Info</para>
		/// <para><strong>Description</strong>: Info</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_info
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_info); }
			set { Entity.Attributes[Fields.msdyncrm_info] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_insights_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_insights_placeholder); }
			set { Entity.Attributes[Fields.msdyncrm_insights_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_keepsuccessfulsubmissions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_keepsuccessfulsubmissions); }
			set { Entity.Attributes[Fields.msdyncrm_keepsuccessfulsubmissions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead form matching</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_matchingstrategy"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_leadmatchingstrategy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_leadmatchingstrategy); }
			set { Entity.Attributes[Fields.msdyncrm_leadmatchingstrategy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Limit Exceeded Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LimitExceededMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LimitExceededMessage); }
			set { Entity.Attributes[Fields.msdyncrm_LimitExceededMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing form</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_marketingformId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_marketingformId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing form template</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingformtemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingformtemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingformtemplate); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformtemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Provided</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_marketingprovided
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_marketingprovided); }
			set { Entity.Attributes[Fields.msdyncrm_marketingprovided] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: organizationwhitelistdomain</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_organizationwhitelistdomain
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_organizationwhitelistdomain); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published form url</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_publishedformurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_publishedformurl); }
			set { Entity.Attributes[Fields.msdyncrm_publishedformurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purpose</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_purpose"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_purpose? msdyncrm_purpose
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_purpose);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_purpose)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_purpose] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_purpose] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_RedirectURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_RedirectURL); }
			set { Entity.Attributes[Fields.msdyncrm_RedirectURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Success image URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_successImageUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_successImageUrl); }
			set { Entity.Attributes[Fields.msdyncrm_successImageUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_validForPageType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_validForPageType? msdyncrm_validForPageType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_validForPageType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_validForPageType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_validForPageType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_validForPageType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visual style</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_visualstyle"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_visualstyle? msdyncrm_visualstyle
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_visualstyle);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.msdyncrm_visualstyle)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_visualstyle] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_visualstyle] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique ID for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the person who owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the marketing form</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the marketing form</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingformOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: The time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}