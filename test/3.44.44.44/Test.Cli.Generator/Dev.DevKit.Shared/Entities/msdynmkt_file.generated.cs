//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_fileOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_file : EntityBase
	{
		public struct Fields
		{
			public const string msdynmkt_aitags = "msdynmkt_aitags";
			public const string msdynmkt_binarymetadata = "msdynmkt_binarymetadata";
			public const string msdynmkt_checkedoutto = "msdynmkt_checkedoutto";
			public const string msdynmkt_checkedouttocriteria = "msdynmkt_checkedouttocriteria";
			public const string msdynmkt_cmsid = "msdynmkt_cmsid";
			public const string msdynmkt_cognitiveInformation = "msdynmkt_cognitiveinformation";
			public const string msdynmkt_createddatetime = "msdynmkt_createddatetime";
			public const string msdynmkt_fileId = "msdynmkt_fileid";
			public const string msdynmkt_ischeckedouttome = "msdynmkt_ischeckedouttome";
			public const string msdynmkt_ispublished = "msdynmkt_ispublished";
			public const string msdynmkt_keywords = "msdynmkt_keywords";
			public const string msdynmkt_lastmodified = "msdynmkt_lastmodified";
			public const string msdynmkt_lastmodifiedby = "msdynmkt_lastmodifiedby";
			public const string msdynmkt_lastmodifieddatetime = "msdynmkt_lastmodifieddatetime";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_previewurl = "msdynmkt_previewurl";
			public const string msdynmkt_processingstatus = "msdynmkt_processingstatus";
			public const string msdynmkt_publicUrl = "msdynmkt_publicurl";
			public const string msdynmkt_publishedby = "msdynmkt_publishedby";
			public const string msdynmkt_publisheddatetime = "msdynmkt_publisheddatetime";
			public const string msdynmkt_publishedversion = "msdynmkt_publishedversion";
			public const string msdynmkt_state = "msdynmkt_state";
			public const string msdynmkt_thumbnailUrl = "msdynmkt_thumbnailurl";
			public const string msdynmkt_type = "msdynmkt_type";
			public const string msdynmkt_variantinfo = "msdynmkt_variantinfo";
			public const string msdynmkt_version = "msdynmkt_version";
		}
		public const string EntityLogicalName = "msdynmkt_file";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11312;
		public const string EntityCollectionSchemaName = "msdynmkt_files";
		public const string EntityDisplayCollectionName = "Files";
		public const string DisplayName = "File";
		public const string EntitySetName = "msdynmkt_files";
		public const string EntityLogicalCollectionName = "msdynmkt_files";
		public const string EntityPrimaryIdAttribute = "msdynmkt_fileid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_file";
		[DebuggerNonUserCode()]
		public msdynmkt_file()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_file(Guid msdynmkt_fileId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_fileId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_file(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_file"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_file(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_file"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_file(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_file(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_file"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_file(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_file(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_file(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AI Tags</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_aitags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_aitags); }
			set { Entity.Attributes[Fields.msdynmkt_aitags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Binary Metadata</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_binarymetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_binarymetadata); }
			set { Entity.Attributes[Fields.msdynmkt_binarymetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Checked Out To</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_checkedoutto
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_checkedoutto); }
			set { Entity.Attributes[Fields.msdynmkt_checkedoutto] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Checked Out To Criteria</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_checkedouttocriteria
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_checkedouttocriteria); }
			set { Entity.Attributes[Fields.msdynmkt_checkedouttocriteria] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cms Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_cmsid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_cmsid); }
			set { Entity.Attributes[Fields.msdynmkt_cmsid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cognitive Information</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_cognitiveInformation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_cognitiveInformation); }
			set { Entity.Attributes[Fields.msdynmkt_cognitiveInformation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created Date Time</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_createddatetime
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_createddatetime); }
			set { Entity.Attributes[Fields.msdynmkt_createddatetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_fileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_fileId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Checked Out To Me</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_ischeckedouttome
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_ischeckedouttome); }
			set { Entity.Attributes[Fields.msdynmkt_ischeckedouttome] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Published</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_ispublished
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_ispublished); }
			set { Entity.Attributes[Fields.msdynmkt_ispublished] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_keywords); }
			set { Entity.Attributes[Fields.msdynmkt_keywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Modified</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_lastmodified
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_lastmodified); }
			set { Entity.Attributes[Fields.msdynmkt_lastmodified] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Modified By</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_lastmodifiedby
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_lastmodifiedby); }
			set { Entity.Attributes[Fields.msdynmkt_lastmodifiedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Modified Date Time</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_lastmodifieddatetime
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_lastmodifieddatetime); }
			set { Entity.Attributes[Fields.msdynmkt_lastmodifieddatetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preview Url</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_previewurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_previewurl); }
			set { Entity.Attributes[Fields.msdynmkt_previewurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Status</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_processingstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_processingstatus); }
			set { Entity.Attributes[Fields.msdynmkt_processingstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Public Url</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_publicUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_publicUrl); }
			set { Entity.Attributes[Fields.msdynmkt_publicUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published By</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_publishedby
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_publishedby); }
			set { Entity.Attributes[Fields.msdynmkt_publishedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published Date Time</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_publisheddatetime
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_publisheddatetime); }
			set { Entity.Attributes[Fields.msdynmkt_publisheddatetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published Version</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_publishedversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_publishedversion); }
			set { Entity.Attributes[Fields.msdynmkt_publishedversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_state
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_state); }
			set { Entity.Attributes[Fields.msdynmkt_state] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thumbnail Url</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_thumbnailUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_thumbnailUrl); }
			set { Entity.Attributes[Fields.msdynmkt_thumbnailUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_type); }
			set { Entity.Attributes[Fields.msdynmkt_type] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Variant Info</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_variantinfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_variantinfo); }
			set { Entity.Attributes[Fields.msdynmkt_variantinfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_version
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_version); }
			set { Entity.Attributes[Fields.msdynmkt_version] = value; }
		}
	}
}