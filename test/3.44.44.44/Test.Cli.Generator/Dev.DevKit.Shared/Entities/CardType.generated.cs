//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.CardTypeOptionSets
{
	public enum ClientAvailability
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: MocaAndWeb</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		MocaAndWeb = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: MocaOnly</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		MocaOnly = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: WebClientOnly</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		WebClientOnly = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CardType : EntityBase
	{
		public struct Fields
		{
			public const string Actions = "actions";
			public const string AdaptiveCardTemplate = "adaptivecardtemplate";
			public const string BoolCardOption = "boolcardoption";
			public const string CardName = "cardname";
			public const string CardType = "cardtype";
			public const string CardTypeIcon = "cardtypeicon";
			public const string CardTypeId = "cardtypeid";
			public const string ClientAvailability = "clientavailability";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string GroupCategory = "groupcategory";
			public const string GroupType = "grouptype";
			public const string HasSnoozeDismiss = "hassnoozedismiss";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IntCardOption = "intcardoption";
			public const string IsBaseCard = "isbasecard";
			public const string IsEnabled = "isenabled";
			public const string IsLiveOnly = "isliveonly";
			public const string IsPreviewCard = "ispreviewcard";
			public const string LastSyncTime = "lastsynctime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string Priority = "priority";
			public const string PublisherName = "publishername";
			public const string ScheduleTime = "scheduletime";
			public const string SoftTitle = "softtitle";
			public const string StringCardOption = "stringcardoption";
			public const string SummaryText = "summarytext";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "cardtype";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9983;
		public const string EntityCollectionSchemaName = "CardTypes";
		public const string EntityDisplayCollectionName = "Action Card Type";
		public const string DisplayName = "Action Card Type";
		public const string EntitySetName = "cardtype";
		public const string EntityLogicalCollectionName = "cardtypes";
		public const string EntityPrimaryIdAttribute = "cardtypeid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "cardname";
		public const string EntitySchemaName = "CardType";
		[DebuggerNonUserCode()]
		public CardType()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CardType(Guid CardTypeId)
		{
			Entity = new Entity(EntityLogicalName, CardTypeId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CardType(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CardType"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public CardType(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CardType"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CardType(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CardType(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CardType"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CardType(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CardType(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CardType(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CommandBar Actions JSON definition</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Actions
		{
			get { return Entity.GetAttributeValue<string>(Fields.Actions); }
			set { Entity.Attributes[Fields.Actions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AdaptiveCard template</para>
		/// <para><strong>Description</strong>: AdaptiveCard template.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdaptiveCardTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdaptiveCardTemplate); }
			set { Entity.Attributes[Fields.AdaptiveCardTemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bolean option for a cardtype.</para>
		/// <para><strong>Description</strong>: Bolean option for a cardtype.</para>
		/// <para><strong>Two Option</strong> - [<strong>Check</strong>]: true - [<strong>Uncheck</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Uncheck</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BoolCardOption
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BoolCardOption); }
			set { Entity.Attributes[Fields.BoolCardOption] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CardName</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CardName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CardName); }
			set { Entity.Attributes[Fields.CardName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CardType ENUM</para>
		/// <para><strong>Description</strong>: The CardType ENUM value.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CardType2
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CardType); }
			set { Entity.Attributes[Fields.CardType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CardTypeIcon</para>
		/// <para><strong>Description</strong>: The CardTypeIcon of the card.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CardTypeIcon
		{
			get { return Entity.GetAttributeValue<string>(Fields.CardTypeIcon); }
			set { Entity.Attributes[Fields.CardTypeIcon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CardType</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CardTypeId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.CardTypeId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Card Client Availability</para>
		/// <para><strong>Description</strong>: Determines on which client is this card available on.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.CardTypeOptionSets.ClientAvailability"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CardTypeOptionSets.ClientAvailability? ClientAvailability
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ClientAvailability);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CardTypeOptionSets.ClientAvailability)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ClientAvailability] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ClientAvailability] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ExchangeRate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the CardType with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GroupCategory ENUM</para>
		/// <para><strong>Description</strong>: GroupCategory dictates the grouping of cards in the Assistant.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? GroupCategory
		{
			get { return Entity.GetAttributeValue<int?>(Fields.GroupCategory); }
			set { Entity.Attributes[Fields.GroupCategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GroupType</para>
		/// <para><strong>Description</strong>: Specifies the card group type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GroupType
		{
			get { return Entity.GetAttributeValue<string>(Fields.GroupType); }
			set { Entity.Attributes[Fields.GroupType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HasSnoozeDismiss</para>
		/// <para><strong>Description</strong>: Specifies if the card type has snooze dismiss</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? HasSnoozeDismiss
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.HasSnoozeDismiss); }
			set { Entity.Attributes[Fields.HasSnoozeDismiss] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Any int option for a cardtype.</para>
		/// <para><strong>Description</strong>: Any int option for a cardtype.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IntCardOption
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IntCardOption); }
			set { Entity.Attributes[Fields.IntCardOption] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsBaseCard</para>
		/// <para><strong>Description</strong>: IsBaseCard</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBaseCard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBaseCard); }
			set { Entity.Attributes[Fields.IsBaseCard] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsEnabled</para>
		/// <para><strong>Description</strong>: IsEnabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEnabled); }
			set { Entity.Attributes[Fields.IsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsLiveOnly</para>
		/// <para><strong>Description</strong>: IsLiveOnly</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLiveOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLiveOnly); }
			set { Entity.Attributes[Fields.IsLiveOnly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsPreviewCard</para>
		/// <para><strong>Description</strong>: IsPreviewCard</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPreviewCard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPreviewCard); }
			set { Entity.Attributes[Fields.IsPreviewCard] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LastSyncTime</para>
		/// <para><strong>Description</strong>: This column is updated by the Plugin based on the last fetched data.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastSyncTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastSyncTime); }
			set { Entity.Attributes[Fields.LastSyncTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: The Priority of the CardType</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Priority); }
			set { Entity.Attributes[Fields.Priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PublisherName</para>
		/// <para><strong>Description</strong>: The publisher name of card type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PublisherName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PublisherName); }
			set { Entity.Attributes[Fields.PublisherName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ScheduleTime</para>
		/// <para><strong>Description</strong>: This column is updated by the Plugin based on the last fetched data.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleTime); }
			set { Entity.Attributes[Fields.ScheduleTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Soft Title</para>
		/// <para><strong>Description</strong>: The soft title of the card.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SoftTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.SoftTitle); }
			set { Entity.Attributes[Fields.SoftTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Any string option for a cardtype.</para>
		/// <para><strong>Description</strong>: Any string option for a cardtype.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StringCardOption
		{
			get { return Entity.GetAttributeValue<string>(Fields.StringCardOption); }
			set { Entity.Attributes[Fields.StringCardOption] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Summary Text</para>
		/// <para><strong>Description</strong>: The summary text of the card.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SummaryText
		{
			get { return Entity.GetAttributeValue<string>(Fields.SummaryText); }
			set { Entity.Attributes[Fields.SummaryText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the CardType with respect to the base currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}