//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_FeatureName
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Digital selling task maintenance job</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Digital_selling_task_maintenance_job = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: OOB Suggestions Athena Sync Status</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		OOB_Suggestions_Athena_Sync_Status = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Predictive Forecasting</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Predictive_Forecasting = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrent Assignment</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Recurrent_Assignment = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrent Duplicate Detection</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Recurrent_Duplicate_Detection = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Relationship Analytics</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Relationship_Analytics = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Restore Missing RSA Triggers</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Restore_Missing_RSA_Triggers = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Accelerator Mail Notification to Admin</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Sales_Accelerator_Mail_Notification_to_Admin = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales analytics provisioning trigger</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Sales_analytics_provisioning_trigger = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Cxp provisioning trigger</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Sales_Cxp_provisioning_trigger = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Assignment</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Scheduled_Assignment = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled DataHygiene Validation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Scheduled_DataHygiene_Validation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled DataHygiene Validation Trigger</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Scheduled_DataHygiene_Validation_Trigger = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Maintenance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Scheduled_Maintenance = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Scoring</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Scheduled_Scoring = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync CRUD Data to CDS</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Sync_CRUD_Data_to_CDS = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync CRUD Data to CDS Validation</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Sync_CRUD_Data_to_CDS_Validation = 9
	}
	public enum msdyn_RecordState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Created</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Created = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Missing = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Missing = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_recurringsalesaction : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_CustomActionName = "msdyn_customactionname";
			public const string msdyn_FailureCount = "msdyn_failurecount";
			public const string msdyn_FeatureName = "msdyn_featurename";
			public const string msdyn_IsRecurrencePatternSchedule = "msdyn_isrecurrencepatternschedule";
			public const string msdyn_LastExecutionInfo = "msdyn_lastexecutioninfo";
			public const string msdyn_Payload = "msdyn_payload";
			public const string msdyn_RecordState = "msdyn_recordstate";
			public const string msdyn_recurringsalesactionId = "msdyn_recurringsalesactionid";
			public const string msdyn_RetryCount = "msdyn_retrycount";
			public const string msdyn_Schedule = "msdyn_schedule";
			public const string msdyn_StartDate = "msdyn_startdate";
			public const string msdyn_TriggerName = "msdyn_triggername";
			public const string msdyn_WorkloadName = "msdyn_workloadname";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_recurringsalesaction";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10539;
		public const string EntityCollectionSchemaName = "msdyn_recurringsalesactions";
		public const string EntityDisplayCollectionName = "Recurring Sales Actions";
		public const string DisplayName = "Recurring Sales Action";
		public const string EntitySetName = "msdyn_recurringsalesactions";
		public const string EntityLogicalCollectionName = "msdyn_recurringsalesactions";
		public const string EntityPrimaryIdAttribute = "msdyn_recurringsalesactionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_triggername";
		public const string EntitySchemaName = "msdyn_recurringsalesaction";
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction(Guid msdyn_recurringsalesactionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_recurringsalesactionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_recurringsalesaction"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_recurringsalesaction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_recurringsalesaction(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_recurringsalesaction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_recurringsalesaction(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_recurringsalesaction(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Action Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomActionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomActionName); }
			set { Entity.Attributes[Fields.msdyn_CustomActionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure Count</para>
		/// <para><strong>Description</strong>: Failure Count is used while recreating the missing jobs.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FailureCount); }
			set { Entity.Attributes[Fields.msdyn_FailureCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Feature Name</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.msdyn_FeatureName"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.msdyn_FeatureName? msdyn_FeatureName
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_FeatureName);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.msdyn_FeatureName)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_FeatureName] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_FeatureName] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Recurrence Pattern Schedule</para>
		/// <para><strong>Description</strong>: Indicates whether the schedule is of Recurrence Pattern type.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong></strong>]: true - [<strong></strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong></strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsRecurrencePatternSchedule
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsRecurrencePatternSchedule); }
			set { Entity.Attributes[Fields.msdyn_IsRecurrencePatternSchedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Execution Info</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LastExecutionInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LastExecutionInfo); }
			set { Entity.Attributes[Fields.msdyn_LastExecutionInfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Payload</para>
		/// <para><strong>Description</strong>: Input Data for the Custom Action</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Payload
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Payload); }
			set { Entity.Attributes[Fields.msdyn_Payload] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record State</para>
		/// <para><strong>Description</strong>: State of the record with respect to Jobs Service</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.msdyn_RecordState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.msdyn_RecordState? msdyn_RecordState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_RecordState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.msdyn_RecordState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RecordState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_RecordState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Sales Action</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_recurringsalesactionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_recurringsalesactionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Retry Count</para>
		/// <para><strong>Description</strong>: Retry Count is used to track the retry of job.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RetryCount); }
			set { Entity.Attributes[Fields.msdyn_RetryCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Schedule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Schedule); }
			set { Entity.Attributes[Fields.msdyn_Schedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: StartDate</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_StartDate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_StartDate); }
			set { Entity.Attributes[Fields.msdyn_StartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TriggerName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TriggerName); }
			set { Entity.Attributes[Fields.msdyn_TriggerName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkloadName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkloadName); }
			set { Entity.Attributes[Fields.msdyn_WorkloadName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Recurring Sales Action</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Recurring Sales Action</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurringsalesactionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}