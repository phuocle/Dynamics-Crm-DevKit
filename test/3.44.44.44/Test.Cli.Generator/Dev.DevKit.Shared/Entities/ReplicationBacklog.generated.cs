//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ReplicationBacklogOptionSets
{
	public enum ReplicationBacklogType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Create</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Create = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Delete</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Delete = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Update</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Update = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ReplicationBacklog : EntityBase
	{
		public struct Fields
		{
			public const string Data = "data";
			public const string ReplicationBacklogId = "replicationbacklogid";
			public const string ReplicationBacklogType = "replicationbacklogtype";
			public const string TargetDatacenterId = "targetdatacenterid";
			public const string TargetObjectId = "targetobjectid";
		}
		public const string EntityLogicalName = "replicationbacklog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1140;
		public const string EntityCollectionSchemaName = "ReplicationBacklogs";
		public const string EntityDisplayCollectionName = "Replication Backlogs";
		public const string DisplayName = "Replication Backlog";
		public const string EntitySetName = "replicationbacklogs";
		public const string EntityLogicalCollectionName = "replicationbacklogs";
		public const string EntityPrimaryIdAttribute = "replicationbacklogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "ReplicationBacklog";
		[DebuggerNonUserCode()]
		public ReplicationBacklog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ReplicationBacklog(Guid ReplicationBacklogId)
		{
			Entity = new Entity(EntityLogicalName, ReplicationBacklogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ReplicationBacklog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ReplicationBacklog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ReplicationBacklog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ReplicationBacklog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ReplicationBacklog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ReplicationBacklog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ReplicationBacklog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ReplicationBacklog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ReplicationBacklog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ReplicationBacklog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data</para>
		/// <para><strong>Description</strong>: Additional data related to the replication backlog entry. For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the replication backlog entry.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ReplicationBacklogId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Replication Backlog Type</para>
		/// <para><strong>Description</strong>: The type of replication backlog.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ReplicationBacklogOptionSets.ReplicationBacklogType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ReplicationBacklogOptionSets.ReplicationBacklogType? ReplicationBacklogType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReplicationBacklogType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ReplicationBacklogOptionSets.ReplicationBacklogType)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Data Center Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TargetDatacenterId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TargetDatacenterId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Object Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the target object</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="report"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TargetObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TargetObjectId); }
		}
	}
}