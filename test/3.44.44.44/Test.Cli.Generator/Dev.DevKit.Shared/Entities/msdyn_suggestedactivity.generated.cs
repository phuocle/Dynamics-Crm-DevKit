//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_suggestedactivityOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_suggestedactivity : EntityBase
	{
		public struct Fields
		{
			public const string msdyn_ActivityType = "msdyn_activitytype";
			public const string msdyn_BodyPreview = "msdyn_bodypreview";
			public const string msdyn_createddate = "msdyn_createddate";
			public const string msdyn_duration = "msdyn_duration";
			public const string msdyn_endtime = "msdyn_endtime";
			public const string msdyn_exchangeweblink = "msdyn_exchangeweblink";
			public const string msdyn_Importance = "msdyn_importance";
			public const string msdyn_location = "msdyn_location";
			public const string msdyn_regardingid = "msdyn_regardingid";
			public const string msdyn_regardingname = "msdyn_regardingname";
			public const string msdyn_sender = "msdyn_sender";
			public const string msdyn_sendername = "msdyn_sendername";
			public const string msdyn_starttime = "msdyn_starttime";
			public const string msdyn_Subject = "msdyn_subject";
			public const string msdyn_suggestedactivityId = "msdyn_suggestedactivityid";
			public const string msdyn_to = "msdyn_to";
		}
		public const string EntityLogicalName = "msdyn_suggestedactivity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10555;
		public const string EntityCollectionSchemaName = "msdyn_suggestedactivities";
		public const string EntityDisplayCollectionName = "Activity Suggestions";
		public const string DisplayName = "Suggested Activity";
		public const string EntitySetName = "msdyn_suggestedactivities";
		public const string EntityLogicalCollectionName = "msdyn_suggestedactivities";
		public const string EntityPrimaryIdAttribute = "msdyn_suggestedactivityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_subject";
		public const string EntitySchemaName = "msdyn_suggestedactivity";
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity(Guid msdyn_suggestedactivityId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_suggestedactivityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_suggestedactivity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_suggestedactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_suggestedactivity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_suggestedactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_suggestedactivity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_suggestedactivity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity</para>
		/// <para><strong>Description</strong>: Activity</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ActivityType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ActivityType); }
			set { Entity.Attributes[Fields.msdyn_ActivityType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BodyPreview</para>
		/// <para><strong>Description</strong>: BodyPreview</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BodyPreview
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BodyPreview); }
			set { Entity.Attributes[Fields.msdyn_BodyPreview] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created Date</para>
		/// <para><strong>Description</strong>: Created Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_createddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_createddate); }
			set { Entity.Attributes[Fields.msdyn_createddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Duration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_duration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_duration); }
			set { Entity.Attributes[Fields.msdyn_duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time</para>
		/// <para><strong>Description</strong>: End Time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_endtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_endtime); }
			set { Entity.Attributes[Fields.msdyn_endtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange web link</para>
		/// <para><strong>Description</strong>: Exchange web link</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_exchangeweblink
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_exchangeweblink); }
			set { Entity.Attributes[Fields.msdyn_exchangeweblink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Importance</para>
		/// <para><strong>Description</strong>: Importance</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Importance
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Importance); }
			set { Entity.Attributes[Fields.msdyn_Importance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Location</para>
		/// <para><strong>Description</strong>: Location</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_location
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_location); }
			set { Entity.Attributes[Fields.msdyn_location] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Regarding</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_regardingid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_regardingid); }
			set { Entity.Attributes[Fields.msdyn_regardingid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding Entity</para>
		/// <para><strong>Description</strong>: Regarding Entity</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingname); }
			set { Entity.Attributes[Fields.msdyn_regardingname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender</para>
		/// <para><strong>Description</strong>: Sender</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sender
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sender); }
			set { Entity.Attributes[Fields.msdyn_sender] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender's Name</para>
		/// <para><strong>Description</strong>: Sender&apos;s Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sendername
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sendername); }
			set { Entity.Attributes[Fields.msdyn_sendername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time</para>
		/// <para><strong>Description</strong>: Start Time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_starttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_starttime); }
			set { Entity.Attributes[Fields.msdyn_starttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Subject</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Subject); }
			set { Entity.Attributes[Fields.msdyn_Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggested Activity</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_suggestedactivityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_suggestedactivityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To</para>
		/// <para><strong>Description</strong>: To</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_to
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_to); }
			set { Entity.Attributes[Fields.msdyn_to] = value; }
		}
	}
}