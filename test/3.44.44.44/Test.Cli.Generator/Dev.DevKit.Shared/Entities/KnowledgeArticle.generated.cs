//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets
{
	public enum ExpiredReviewOptions
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Archive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Archive = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Needs Updating</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Needs_Updating = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Republish</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Republish = 1
	}
	public enum msdyn_agentreviewstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Reviewed</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Not_Reviewed = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reviewed By Agent</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Reviewed_By_Agent = 100_000_001
	}
	public enum msdyn_compliancestatecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliant</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Compliant = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non Compliant</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Non_Compliant = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Pending = 100_000_002
	}
	public enum msdyn_creationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Copilot = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Manual = 0
	}
	public enum msdyn_sourceofcreation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: BulkHarvest</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		BulkHarvest = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: DraftAssist</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DraftAssist = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Manual = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: RealTimeHarvest</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		RealTimeHarvest = 2
	}
	public enum Review
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Approved = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Rejected = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Approved = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Archived</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Archived = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discarded</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Discarded = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Expired = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Published = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Scheduled = 2
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Approved</strong></para>
		/// </summary>
		Approved = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Archived</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Archived</strong></para>
		/// </summary>
		Archived = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discarded</para>
		/// <para><strong>Value</strong>: 13</para>
		/// <para><strong>StateCode.Discarded</strong></para>
		/// </summary>
		Discarded = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Expired</strong></para>
		/// </summary>
		Expired = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: In review</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		In_review = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Needs review</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Needs_review_3 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Needs review</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Published</strong></para>
		/// </summary>
		Needs_review_8 = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Proposed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Proposed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Published</strong></para>
		/// </summary>
		Published = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Expired</strong></para>
		/// </summary>
		Rejected_11 = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 14</para>
		/// <para><strong>StateCode.Discarded</strong></para>
		/// </summary>
		Rejected_14 = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Scheduled</strong></para>
		/// </summary>
		Scheduled = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Updating</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Published</strong></para>
		/// </summary>
		Updating = 9
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class KnowledgeArticle : EntityBase
	{
		public struct Fields
		{
			public const string ArticlePublicNumber = "articlepublicnumber";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string ExpirationDate = "expirationdate";
			public const string ExpirationStateId = "expirationstateid";
			public const string ExpirationStatusId = "expirationstatusid";
			public const string ExpiredReviewOptions = "expiredreviewoptions";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsInternal = "isinternal";
			public const string IsLatestVersion = "islatestversion";
			public const string IsPrimary = "isprimary";
			public const string IsRootArticle = "isrootarticle";
			public const string Keywords = "keywords";
			public const string knowledgearticleId = "knowledgearticleid";
			public const string KnowledgeArticleViews = "knowledgearticleviews";
			public const string KnowledgeArticleViews_Date = "knowledgearticleviews_date";
			public const string KnowledgeArticleViews_State = "knowledgearticleviews_state";
			public const string LanguageLocaleId = "languagelocaleid";
			public const string MajorVersionNumber = "majorversionnumber";
			public const string MinorVersionNumber = "minorversionnumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentreviewstatus = "msdyn_agentreviewstatus";
			public const string msdyn_compliancestatecode = "msdyn_compliancestatecode";
			public const string msdyn_contentstore = "msdyn_contentstore";
			public const string msdyn_contentstore_name = "msdyn_contentstore_name";
			public const string msdyn_creationmode = "msdyn_creationmode";
			public const string msdyn_externalreferenceid = "msdyn_externalreferenceid";
			public const string msdyn_ingestedarticleurl = "msdyn_ingestedarticleurl";
			public const string msdyn_integratedsearchproviderid = "msdyn_integratedsearchproviderid";
			public const string msdyn_iscontentsyncedtostore = "msdyn_iscontentsyncedtostore";
			public const string msdyn_isingestedarticle = "msdyn_isingestedarticle";
			public const string msdyn_keywordsdescsuggestioncontrol = "msdyn_keywordsdescsuggestioncontrol";
			public const string msdyn_languagecode = "msdyn_languagecode";
			public const string msdyn_retrycountformigrationtocontentstore = "msdyn_retrycountformigrationtocontentstore";
			public const string msdyn_sourceofcreation = "msdyn_sourceofcreation";
			public const string msdyn_totalcasesimpacted = "msdyn_totalcasesimpacted";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentArticleContentId = "parentarticlecontentid";
			public const string PreviousArticleContentId = "previousarticlecontentid";
			public const string primaryauthorid = "primaryauthorid";
			public const string processid = "processid";
			public const string PublishOn = "publishon";
			public const string PublishStatusId = "publishstatusid";
			public const string Rating = "rating";
			public const string Rating_Count = "rating_count";
			public const string Rating_Date = "rating_date";
			public const string Rating_State = "rating_state";
			public const string Rating_Sum = "rating_sum";
			public const string ReadyForReview = "readyforreview";
			public const string Review = "review";
			public const string RootArticleId = "rootarticleid";
			public const string ScheduledStatusId = "scheduledstatusid";
			public const string SetCategoryAssociations = "setcategoryassociations";
			public const string SetProductAssociations = "setproductassociations";
			public const string stageid = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubjectId = "subjectid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UpdateContent = "updatecontent";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "knowledgearticle";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9953;
		public const string EntityCollectionSchemaName = "KnowledgeArticles";
		public const string EntityDisplayCollectionName = "Knowledge Articles";
		public const string DisplayName = "Knowledge Article";
		public const string EntitySetName = "knowledgearticles";
		public const string EntityLogicalCollectionName = "knowledgearticles";
		public const string EntityPrimaryIdAttribute = "knowledgearticleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "KnowledgeArticle";
		[DebuggerNonUserCode()]
		public KnowledgeArticle()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Guid KnowledgeArticleId)
		{
			Entity = new Entity(EntityLogicalName, KnowledgeArticleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public KnowledgeArticle(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="KnowledgeArticle"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="KnowledgeArticle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new KnowledgeArticle(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="KnowledgeArticle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public KnowledgeArticle(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new KnowledgeArticle(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public KnowledgeArticle(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Article Public Number</para>
		/// <para><strong>Description</strong>: Shows the automatically generated ID exposed to customers, partners, and other external users to reference and look up articles.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ArticlePublicNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ArticlePublicNumber); }
			set { Entity.Attributes[Fields.ArticlePublicNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content</para>
		/// <para><strong>Description</strong>: Shows the body of the article stored in HTML format.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: A short overview of the article, primarily used in search results and for search engine optimization.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 155</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ExchangeRate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expiration Date</para>
		/// <para><strong>Description</strong>: Enter an expiration date for the article. Leave this field blank for no expiration date.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpirationDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpirationDate); }
			set { Entity.Attributes[Fields.ExpirationDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expiration State Id</para>
		/// <para><strong>Description</strong>: Contains the id of the expiration state of the entity.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpirationStateId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpirationStateId); }
			set { Entity.Attributes[Fields.ExpirationStateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired Status</para>
		/// <para><strong>Description</strong>: Contains the id of the expiration status of the entity.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExpirationStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExpirationStatusId); }
			set { Entity.Attributes[Fields.ExpirationStatusId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired Review Options</para>
		/// <para><strong>Description</strong>: Expired Review Options</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions? ExpiredReviewOptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExpiredReviewOptions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.ExpiredReviewOptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ExpiredReviewOptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ExpiredReviewOptions] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal</para>
		/// <para><strong>Description</strong>: Shows whether this article is only visible internally.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsInternal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsInternal); }
			set { Entity.Attributes[Fields.IsInternal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Latest Version</para>
		/// <para><strong>Description</strong>: Shows which version of the knowledge article is the latest version.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLatestVersion
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLatestVersion); }
			set { Entity.Attributes[Fields.IsLatestVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Article</para>
		/// <para><strong>Description</strong>: Select whether the article is the primary article.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrimary
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrimary); }
			set { Entity.Attributes[Fields.IsPrimary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Root Article</para>
		/// <para><strong>Description</strong>: Select whether the article is the root article.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRootArticle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRootArticle); }
			set { Entity.Attributes[Fields.IsRootArticle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords</para>
		/// <para><strong>Description</strong>: Type keywords to be used for searches in knowledge base articles. Separate keywords by using commas.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.Keywords); }
			set { Entity.Attributes[Fields.Keywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Article</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid knowledgearticleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.knowledgearticleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Article Views</para>
		/// <para><strong>Description</strong>: Shows the total number of article views.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KnowledgeArticleViews
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KnowledgeArticleViews); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Article View(Last Updated Time)</para>
		/// <para><strong>Description</strong>: The date time for Knowledge Article View.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? KnowledgeArticleViews_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.KnowledgeArticleViews_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge Article View(State)</para>
		/// <para><strong>Description</strong>: State of Knowledge Article View.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? KnowledgeArticleViews_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.KnowledgeArticleViews_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: Select the language that the article&apos;s content is in.</para>
		/// <para><strong>Lookup</strong>: <see cref="languagelocale"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference LanguageLocaleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.LanguageLocaleId); }
			set { Entity.Attributes[Fields.LanguageLocaleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Major Version Number</para>
		/// <para><strong>Description</strong>: Shows the major version number of this article&apos;s content.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MajorVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MajorVersionNumber); }
			set { Entity.Attributes[Fields.MajorVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minor Version Number</para>
		/// <para><strong>Description</strong>: Shows the minor version number of this article&apos;s content.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinorVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinorVersionNumber); }
			set { Entity.Attributes[Fields.MinorVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Review Status</para>
		/// <para><strong>Description</strong>: field to indicate the agent review status of the article</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus.Not_Reviewed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus? msdyn_agentreviewstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_agentreviewstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_agentreviewstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_agentreviewstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_agentreviewstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliance State</para>
		/// <para><strong>Description</strong>: field to indicate the compliance state of an article</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_compliancestatecode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_compliancestatecode? msdyn_compliancestatecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_compliancestatecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_compliancestatecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_compliancestatecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_compliancestatecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File storage content reference</para>
		/// <para><strong>Description</strong>: Stores the reference to content in file store</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_contentstore_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_contentstore_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Creation Mode</para>
		/// <para><strong>Description</strong>: Opiton set to hold details about article if it is generated by AI or manually created</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_creationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_creationmode.Manual"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_creationmode? msdyn_creationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_creationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_creationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_creationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_creationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Reference Id</para>
		/// <para><strong>Description</strong>: External Reference Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externalreferenceid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externalreferenceid); }
			set { Entity.Attributes[Fields.msdyn_externalreferenceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ingested Article URL</para>
		/// <para><strong>Description</strong>: Ingested article URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ingestedarticleurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ingestedarticleurl); }
			set { Entity.Attributes[Fields.msdyn_ingestedarticleurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Integrated Search Dataprovider Id</para>
		/// <para><strong>Description</strong>: Integrated Search Dataprovider Id</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_integratedsearchprovider"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_integratedsearchproviderid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_integratedsearchproviderid); }
			set { Entity.Attributes[Fields.msdyn_integratedsearchproviderid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is content synced to file storage</para>
		/// <para><strong>Description</strong>: Sets whether the article content is synced to file storage</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_iscontentsyncedtostore
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_iscontentsyncedtostore); }
			set { Entity.Attributes[Fields.msdyn_iscontentsyncedtostore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Ingested Article</para>
		/// <para><strong>Description</strong>: Value is true for all Ingested articles</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isingestedarticle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isingestedarticle); }
			set { Entity.Attributes[Fields.msdyn_isingestedarticle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords and Description Suggestion control</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_keywordsdescsuggestioncontrol
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_keywordsdescsuggestioncontrol); }
			set { Entity.Attributes[Fields.msdyn_keywordsdescsuggestioncontrol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language Code</para>
		/// <para><strong>Description</strong>: The Language Code that the article&apos;s content is in.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_languagecode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_languagecode); }
			set { Entity.Attributes[Fields.msdyn_languagecode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File storage migration retry count</para>
		/// <para><strong>Description</strong>: Displays the number of times migration to file storage retry is attempted for an article</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_retrycountformigrationtocontentstore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_retrycountformigrationtocontentstore); }
			set { Entity.Attributes[Fields.msdyn_retrycountformigrationtocontentstore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source of Creation</para>
		/// <para><strong>Description</strong>: Option set to hold details about article origin, if it is generated from Real Time Harvesting/ Bulk Harvesting/ knowledge draft assist/ Manual</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_sourceofcreation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_sourceofcreation.Manual"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_sourceofcreation? msdyn_sourceofcreation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_sourceofcreation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.msdyn_sourceofcreation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_sourceofcreation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_sourceofcreation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cases Impacted</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totalcasesimpacted
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totalcasesimpacted); }
			set { Entity.Attributes[Fields.msdyn_totalcasesimpacted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Article Content Id</para>
		/// <para><strong>Description</strong>: Contains the id of the parent article content associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentArticleContentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentArticleContentId); }
			set { Entity.Attributes[Fields.ParentArticleContentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous Article Content ID</para>
		/// <para><strong>Description</strong>: Shows the version that the current article was restored from.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreviousArticleContentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreviousArticleContentId); }
			set { Entity.Attributes[Fields.PreviousArticleContentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Author Id</para>
		/// <para><strong>Description</strong>: Contains the id of the primary author associated with the article.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference primaryauthorid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.primaryauthorid); }
			set { Entity.Attributes[Fields.primaryauthorid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publish On</para>
		/// <para><strong>Description</strong>: Date and time when the record was published.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PublishOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PublishOn); }
			set { Entity.Attributes[Fields.PublishOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published Status</para>
		/// <para><strong>Description</strong>: Publish Status of the Article.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PublishStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PublishStatusId); }
			set { Entity.Attributes[Fields.PublishStatusId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating</para>
		/// <para><strong>Description</strong>: Information which specifies how helpful the related record was.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rating
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Rating); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating(Count)</para>
		/// <para><strong>Description</strong>: Rating Count</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating_Count
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating_Count); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating(Last Updated Time)</para>
		/// <para><strong>Description</strong>: The date time for Rating.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? Rating_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.Rating_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating(State)</para>
		/// <para><strong>Description</strong>: State of Rating</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rating_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rating_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating(sum)</para>
		/// <para><strong>Description</strong>: Total sum of Rating</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Rating_Sum
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Rating_Sum); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready For Review</para>
		/// <para><strong>Description</strong>: Ready For Review</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark Complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark Complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReadyForReview
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReadyForReview); }
			set { Entity.Attributes[Fields.ReadyForReview] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Review</para>
		/// <para><strong>Description</strong>: Review</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review? Review
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Review);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.Review)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Review] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Review] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Root Article Id</para>
		/// <para><strong>Description</strong>: Contains the id of the root article.</para>
		/// <para><strong>Lookup</strong>: <see cref="knowledgearticle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RootArticleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RootArticleId); }
			set { Entity.Attributes[Fields.RootArticleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Status</para>
		/// <para><strong>Description</strong>: Contains the id of the scheduled status of the entity.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledStatusId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledStatusId); }
			set { Entity.Attributes[Fields.ScheduledStatusId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Set Category Associations</para>
		/// <para><strong>Description</strong>: Shows whether category associations have been set</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark as Complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark as Complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetCategoryAssociations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetCategoryAssociations); }
			set { Entity.Attributes[Fields.SetCategoryAssociations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Set Product Associations</para>
		/// <para><strong>Description</strong>: Set Product Associations</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark As Complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark As Complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetProductAssociations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetProductAssociations); }
			set { Entity.Attributes[Fields.SetProductAssociations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the article is a draft or is published, archived, or discarded. Draft articles aren&apos;t available externally and can be edited. Published articles are available externally, based on applicable permissions, but can&apos;t be edited. All metadata changes are reflected in the published version. Archived and discarded articles aren&apos;t available externally and can&apos;t be edited.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the article&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.KnowledgeArticleOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Choose the subject of the article to assist with article searches. You can configure subjects under Business Management in the Settings area.</para>
		/// <para><strong>Lookup</strong>: <see cref="subject"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SubjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SubjectId); }
			set { Entity.Attributes[Fields.SubjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: Type a title for the article.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update Content</para>
		/// <para><strong>Description</strong>: Update Content</para>
		/// <para><strong>Two Option</strong> - [<strong>Content Updated</strong>]: true - [<strong>Mark When Completed</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark When Completed</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UpdateContent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UpdateContent); }
			set { Entity.Attributes[Fields.UpdateContent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}