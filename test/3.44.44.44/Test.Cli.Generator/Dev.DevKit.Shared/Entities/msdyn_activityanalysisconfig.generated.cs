//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets
{
	public enum msdyn_communicationfrequency
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Once a day</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Once_a_day = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Once a month</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Once_a_month = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Once a week</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Once_a_week = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Once every couple of weeks</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Once_every_couple_of_weeks = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Once every few days</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Once_every_few_days = 2
	}
	public enum msdyn_currentstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationCompleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		ActivationCompleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationFailed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		ActivationFailed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationInProgress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ActivationInProgress = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationCompleted</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		DeactivationCompleted = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationFailed</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		DeactivationFailed = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationInProgress</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		DeactivationInProgress = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1
	}
	public enum msdyn_datasource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Both</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Both = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: CRM</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		CRM = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: MARS</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		MARS = 2
	}
	public enum msdyn_exchangemarsstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationCompleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		ActivationCompleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationFailed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		ActivationFailed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationFailedDueToOptin</para>
		/// <para><strong>Value</strong>: 401</para>
		/// </summary>
		ActivationFailedDueToOptin_401 = 401,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationFailedDueToOptin</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		ActivationFailedDueToOptin_5 = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationFailedDueToOptinAccess</para>
		/// <para><strong>Value</strong>: 402</para>
		/// </summary>
		ActivationFailedDueToOptinAccess = 402,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationInProgress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ActivationInProgress = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationCompleted</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		DeactivationCompleted = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationInProgress</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		DeactivationInProgress = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1
	}
	public enum msdyn_healthfeaturestatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Disabled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Enabled = 1
	}
	public enum msdyn_linkedinstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationCompleted</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		ActivationCompleted = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationFailed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		ActivationFailed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivationInProgress</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ActivationInProgress = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationCompleted</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		DeactivationCompleted = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationFailed</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		DeactivationFailed = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeactivationInProgress</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		DeactivationInProgress = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: UpgradeFailed</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		UpgradeFailed = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: UpgradeInProgress</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		UpgradeInProgress = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: UpgradePending</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		UpgradePending = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: UpgradeSucceeded</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		UpgradeSucceeded = 11
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_activityanalysisconfig : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_activityanalysisconfigId = "msdyn_activityanalysisconfigid";
			public const string msdyn_communicationfrequency = "msdyn_communicationfrequency";
			public const string msdyn_currentstatus = "msdyn_currentstatus";
			public const string msdyn_datasource = "msdyn_datasource";
			public const string msdyn_emailweight = "msdyn_emailweight";
			public const string msdyn_exchangemarsstatus = "msdyn_exchangemarsstatus";
			public const string msdyn_healthfeaturestatus = "msdyn_healthfeaturestatus";
			public const string msdyn_ignoreexchangeoptincheck = "msdyn_ignoreexchangeoptincheck";
			public const string msdyn_inmailweight = "msdyn_inmailweight";
			public const string msdyn_isaprilpreviewenabled = "msdyn_isaprilpreviewenabled";
			public const string msdyn_islinkedinenabled = "msdyn_islinkedinenabled";
			public const string msdyn_isorgsettingenable = "msdyn_isorgsettingenable";
			public const string msdyn_linkedinstatus = "msdyn_linkedinstatus";
			public const string msdyn_meetingweight = "msdyn_meetingweight";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_oneclickactivityanalysisprovisioning = "msdyn_oneclickactivityanalysisprovisioning";
			public const string msdyn_orgtypesuffix = "msdyn_orgtypesuffix";
			public const string msdyn_otheractivites = "msdyn_otheractivites";
			public const string msdyn_overflowentitylist = "msdyn_overflowentitylist";
			public const string msdyn_phonecallweight = "msdyn_phonecallweight";
			public const string msdyn_taskweight = "msdyn_taskweight";
			public const string msdyn_timelineactivites = "msdyn_timelineactivites";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_activityanalysisconfig";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10565;
		public const string EntityCollectionSchemaName = "msdyn_activityanalysisconfigs";
		public const string EntityDisplayCollectionName = "RelationshipAnalysisConfigs";
		public const string DisplayName = "Relationship Analytics Config";
		public const string EntitySetName = "msdyn_activityanalysisconfigs";
		public const string EntityLogicalCollectionName = "msdyn_activityanalysisconfigs";
		public const string EntityPrimaryIdAttribute = "msdyn_activityanalysisconfigid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_activityanalysisconfig";
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig(Guid msdyn_activityanalysisconfigId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_activityanalysisconfigId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_activityanalysisconfig"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_activityanalysisconfig"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_activityanalysisconfig(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_activityanalysisconfig"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_activityanalysisconfig(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_activityanalysisconfig(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Relationship Analytics Config</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_activityanalysisconfigId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_activityanalysisconfigId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Communication Frequency</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_communicationfrequency"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_communicationfrequency? msdyn_communicationfrequency
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_communicationfrequency);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_communicationfrequency)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_communicationfrequency] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_communicationfrequency] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_currentstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_currentstatus.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_currentstatus? msdyn_currentstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_currentstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_currentstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_currentstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_currentstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Source</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_datasource"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_datasource.CRM"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_datasource? msdyn_datasource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_datasource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_datasource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_datasource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_datasource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Weight</para>
		/// <para><strong>Description</strong>: Shows weight of email activity type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 3 - <strong>MaxValue</strong>: 9</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_emailweight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_emailweight); }
			set { Entity.Attributes[Fields.msdyn_emailweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mars Exchange Status</para>
		/// <para><strong>Description</strong>: Status of Exchange-Mars Connector</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_exchangemarsstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_exchangemarsstatus.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_exchangemarsstatus? msdyn_exchangemarsstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_exchangemarsstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_exchangemarsstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_exchangemarsstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_exchangemarsstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Health Feature Status</para>
		/// <para><strong>Description</strong>: Health Feature Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_healthfeaturestatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_healthfeaturestatus.Enabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_healthfeaturestatus? msdyn_healthfeaturestatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_healthfeaturestatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_healthfeaturestatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_healthfeaturestatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_healthfeaturestatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore Exchange Optin Check</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ignoreexchangeoptincheck
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ignoreexchangeoptincheck); }
			set { Entity.Attributes[Fields.msdyn_ignoreexchangeoptincheck] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: InMail Weight</para>
		/// <para><strong>Description</strong>: Shows weight of InMails activity type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 9</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_inmailweight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_inmailweight); }
			set { Entity.Attributes[Fields.msdyn_inmailweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is April Preview Setting Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isaprilpreviewenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isaprilpreviewenabled); }
			set { Entity.Attributes[Fields.msdyn_isaprilpreviewenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is LinkedIn Analytics Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_islinkedinenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_islinkedinenabled); }
			set { Entity.Attributes[Fields.msdyn_islinkedinenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Org Setting Enable</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isorgsettingenable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isorgsettingenable); }
			set { Entity.Attributes[Fields.msdyn_isorgsettingenable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status of LinkedIn Analytics</para>
		/// <para><strong>Description</strong>: Status of LinkedIn Analytics</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_linkedinstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_linkedinstatus.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_linkedinstatus? msdyn_linkedinstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_linkedinstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.msdyn_linkedinstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_linkedinstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_linkedinstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Meeting Weight</para>
		/// <para><strong>Description</strong>: Shows weight of meeting activity type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 3 - <strong>MaxValue</strong>: 9</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_meetingweight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_meetingweight); }
			set { Entity.Attributes[Fields.msdyn_meetingweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Shows the name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is One Click Activity Analysis Provisioning Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_oneclickactivityanalysisprovisioning
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_oneclickactivityanalysisprovisioning); }
			set { Entity.Attributes[Fields.msdyn_oneclickactivityanalysisprovisioning] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Type Suffix</para>
		/// <para><strong>Description</strong>: Organization Type Suffix Set By Connector</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_orgtypesuffix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_orgtypesuffix); }
			set { Entity.Attributes[Fields.msdyn_orgtypesuffix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Activites</para>
		/// <para><strong>Description</strong>: Shows the weight of default activity type.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_otheractivites
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_otheractivites); }
			set { Entity.Attributes[Fields.msdyn_otheractivites] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scale Limit Exceeded</para>
		/// <para><strong>Description</strong>: Shows the Contact, Opportunity, Lead, and Account entities which have exceeded the scale limit for Relationship Insights.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_overflowentitylist
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_overflowentitylist); }
			set { Entity.Attributes[Fields.msdyn_overflowentitylist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phonecall Weight</para>
		/// <para><strong>Description</strong>: Shows the weight of phone call activity type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 3 - <strong>MaxValue</strong>: 9</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_phonecallweight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_phonecallweight); }
			set { Entity.Attributes[Fields.msdyn_phonecallweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Task Weight</para>
		/// <para><strong>Description</strong>: Shows the weight of task activity type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 3 - <strong>MaxValue</strong>: 9</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_taskweight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_taskweight); }
			set { Entity.Attributes[Fields.msdyn_taskweight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Line Activites</para>
		/// <para><strong>Description</strong>: Shows activities to include on the relationship trend timeline.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_timelineactivites
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_timelineactivites); }
			set { Entity.Attributes[Fields.msdyn_timelineactivites] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization ID</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Relationship Analytics Config</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Relationship Analytics Config</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_activityanalysisconfigOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}