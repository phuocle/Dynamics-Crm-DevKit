//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:45
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets
{
	public enum PricingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency Amount</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Currency_Amount = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent Margin - Current Cost</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Percent_Margin_Current_Cost = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent Margin - Standard Cost</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Percent_Margin_Standard_Cost = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent Markup - Current Cost</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Percent_Markup_Current_Cost = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent Markup - Standard Cost</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Percent_Markup_Standard_Cost = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Percent of List</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Percent_of_List = 2
	}
	public enum QuantitySellingCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No Control</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		No_Control = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Whole</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Whole = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Whole and Fractional</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Whole_and_Fractional = 3
	}
	public enum RoundingOptionCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ends in</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Ends_in = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Multiple of</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Multiple_of = 2
	}
	public enum RoundingPolicyCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Down</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Down = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: To Nearest</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		To_Nearest = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Up</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Up = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ProductPriceLevel : EntityBase
	{
		public struct Fields
		{
			public const string Amount = "amount";
			public const string Amount_Base = "amount_base";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DiscountTypeId = "discounttypeid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string Percentage = "percentage";
			public const string PriceLevelId = "pricelevelid";
			public const string PricingMethodCode = "pricingmethodcode";
			public const string ProcessId = "processid";
			public const string ProductId = "productid";
			public const string ProductNumber = "productnumber";
			public const string ProductPriceLevelId = "productpricelevelid";
			public const string QuantitySellingCode = "quantitysellingcode";
			public const string RoundingOptionAmount = "roundingoptionamount";
			public const string RoundingOptionAmount_Base = "roundingoptionamount_base";
			public const string RoundingOptionCode = "roundingoptioncode";
			public const string RoundingPolicyCode = "roundingpolicycode";
			public const string StageId = "stageid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UoMId = "uomid";
			public const string UoMScheduleId = "uomscheduleid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "productpricelevel";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1026;
		public const string EntityCollectionSchemaName = "ProductPriceLevels";
		public const string EntityDisplayCollectionName = "Price List Items";
		public const string DisplayName = "Price List Item";
		public const string EntitySetName = "productpricelevels";
		public const string EntityLogicalCollectionName = "productpricelevels";
		public const string EntityPrimaryIdAttribute = "productpricelevelid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "productidname";
		public const string EntitySchemaName = "ProductPriceLevel";
		[DebuggerNonUserCode()]
		public ProductPriceLevel()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProductPriceLevel(Guid ProductPriceLevelId)
		{
			Entity = new Entity(EntityLogicalName, ProductPriceLevelId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProductPriceLevel(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProductPriceLevel"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ProductPriceLevel(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProductPriceLevel"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ProductPriceLevel(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ProductPriceLevel(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProductPriceLevel"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ProductPriceLevel(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ProductPriceLevel(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProductPriceLevel(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount</para>
		/// <para><strong>Description</strong>: Monetary amount for the price list.</para>
		/// <para>Required - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Amount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Amount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Amount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Amount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Amount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Amount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the price list.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the price list was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount List</para>
		/// <para><strong>Description</strong>: Unique identifier of the discount list associated with the price list.</para>
		/// <para><strong>Lookup</strong>: <see cref="discounttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DiscountTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DiscountTypeId); }
			set { Entity.Attributes[Fields.DiscountTypeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the price list.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the price list was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the price list.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percentage</para>
		/// <para><strong>Description</strong>: Percentage for the price list.</para>
		/// <para>Required - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Percentage); }
			set { Entity.Attributes[Fields.Percentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Unique identifier of the price level associated with this price list.</para>
		/// <para><strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pricing Method</para>
		/// <para><strong>Description</strong>: Pricing method applied to the price list.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.PricingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.PricingMethodCode.Currency_Amount"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.PricingMethodCode? PricingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.PricingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product</para>
		/// <para><strong>Description</strong>: Product associated with the price list.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProductId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProductId); }
			set { Entity.Attributes[Fields.ProductId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product ID</para>
		/// <para><strong>Description</strong>: User-defined product number.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProductNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProductNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Price List</para>
		/// <para><strong>Description</strong>: Unique identifier of the price list.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProductPriceLevelId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProductPriceLevelId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quantity Selling Option</para>
		/// <para><strong>Description</strong>: Quantity of the product that must be sold for a given price level.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.QuantitySellingCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.QuantitySellingCode.No_Control"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.QuantitySellingCode? QuantitySellingCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QuantitySellingCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.QuantitySellingCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.QuantitySellingCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.QuantitySellingCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounding Amount</para>
		/// <para><strong>Description</strong>: Rounding option amount for the price list.</para>
		/// <para>Required - <strong>Currency</strong> - <strong>MinValue</strong>: -100,000,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? RoundingOptionAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.RoundingOptionAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RoundingOptionAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.RoundingOptionAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounding Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Rounding Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? RoundingOptionAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.RoundingOptionAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounding Option</para>
		/// <para><strong>Description</strong>: Option for rounding the price list.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.RoundingOptionCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.RoundingOptionCode? RoundingOptionCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RoundingOptionCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.RoundingOptionCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RoundingOptionCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RoundingOptionCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounding Policy</para>
		/// <para><strong>Description</strong>: Policy for rounding the price list.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.RoundingPolicyCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.RoundingPolicyCode? RoundingPolicyCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RoundingPolicyCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProductPriceLevelOptionSets.RoundingPolicyCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RoundingPolicyCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RoundingPolicyCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the unit for the price list.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UoMId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UoMId); }
			set { Entity.Attributes[Fields.UoMId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Schedule ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the unit schedule for the price list.</para>
		/// <para><strong>Lookup</strong>: <see cref="uomschedule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UoMScheduleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UoMScheduleId); }
			set { Entity.Attributes[Fields.UoMScheduleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}