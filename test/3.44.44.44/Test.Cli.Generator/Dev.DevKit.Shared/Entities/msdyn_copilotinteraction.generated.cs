//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets
{
	public enum msdyn_interactiontype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AcceptSuggestion</para>
		/// <para><strong>Value</strong>: 100,230,312</para>
		/// </summary>
		AcceptSuggestion = 100_230_312,
		/// <summary>
		/// <para><strong>Display Name</strong>: ArticleProposed</para>
		/// <para><strong>Value</strong>: 100,230,310</para>
		/// </summary>
		ArticleProposed = 100_230_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Available</para>
		/// <para><strong>Value</strong>: 100,230,309</para>
		/// </summary>
		Available = 100_230_309,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copy</para>
		/// <para><strong>Value</strong>: 100,230,304</para>
		/// </summary>
		Copy = 100_230_304,
		/// <summary>
		/// <para><strong>Display Name</strong>: EditAndSend</para>
		/// <para><strong>Value</strong>: 100,230,307</para>
		/// </summary>
		EditAndSend = 100_230_307,
		/// <summary>
		/// <para><strong>Display Name</strong>: ExpandTile</para>
		/// <para><strong>Value</strong>: 100,230,314</para>
		/// </summary>
		ExpandTile = 100_230_314,
		/// <summary>
		/// <para><strong>Display Name</strong>: Generated</para>
		/// <para><strong>Value</strong>: 100,230,305</para>
		/// </summary>
		Generated = 100_230_305,
		/// <summary>
		/// <para><strong>Display Name</strong>: ManualCopy</para>
		/// <para><strong>Value</strong>: 100,230,308</para>
		/// </summary>
		ManualCopy = 100_230_308,
		/// <summary>
		/// <para><strong>Display Name</strong>: MarkAsReviewed</para>
		/// <para><strong>Value</strong>: 100,230,311</para>
		/// </summary>
		MarkAsReviewed = 100_230_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: RequestSolution</para>
		/// <para><strong>Value</strong>: 100,230,315</para>
		/// </summary>
		RequestSolution = 100_230_315,
		/// <summary>
		/// <para><strong>Display Name</strong>: SendToCustomer</para>
		/// <para><strong>Value</strong>: 100,230,306</para>
		/// </summary>
		SendToCustomer = 100_230_306,
		/// <summary>
		/// <para><strong>Display Name</strong>: ThumbsClear</para>
		/// <para><strong>Value</strong>: 100,230,303</para>
		/// </summary>
		ThumbsClear = 100_230_303,
		/// <summary>
		/// <para><strong>Display Name</strong>: ThumbsDown</para>
		/// <para><strong>Value</strong>: 100,230,302</para>
		/// </summary>
		ThumbsDown = 100_230_302,
		/// <summary>
		/// <para><strong>Display Name</strong>: ThumbsUp</para>
		/// <para><strong>Value</strong>: 100,230,301</para>
		/// </summary>
		ThumbsUp = 100_230_301,
		/// <summary>
		/// <para><strong>Display Name</strong>: ViewHistory</para>
		/// <para><strong>Value</strong>: 100,230,313</para>
		/// </summary>
		ViewHistory = 100_230_313
	}
	public enum msdyn_scenariotype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ask a question</para>
		/// <para><strong>Value</strong>: 100,230,201</para>
		/// </summary>
		Ask_a_question = 100_230_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Case summary</para>
		/// <para><strong>Value</strong>: 100,230,205</para>
		/// </summary>
		Case_summary = 100_230_205,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chat Assist</para>
		/// <para><strong>Value</strong>: 100,230,216</para>
		/// </summary>
		Chat_Assist = 100_230_216,
		/// <summary>
		/// <para><strong>Display Name</strong>: Collaborate with SMEs</para>
		/// <para><strong>Value</strong>: 100,230,210</para>
		/// </summary>
		Collaborate_with_SMEs = 100_230_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot</para>
		/// <para><strong>Value</strong>: 100,230,204</para>
		/// </summary>
		Copilot = 100_230_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom entity summary</para>
		/// <para><strong>Value</strong>: 100,230,209</para>
		/// </summary>
		Custom_entity_summary = 100_230_209,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inline Copilot for email</para>
		/// <para><strong>Value</strong>: 100,230,211</para>
		/// </summary>
		Inline_Copilot_for_email = 100_230_211,
		/// <summary>
		/// <para><strong>Display Name</strong>: Intent Assist</para>
		/// <para><strong>Value</strong>: 100,230,213</para>
		/// </summary>
		Intent_Assist = 100_230_213,
		/// <summary>
		/// <para><strong>Display Name</strong>: Knowledge draft assist</para>
		/// <para><strong>Value</strong>: 100,230,208</para>
		/// </summary>
		Knowledge_draft_assist = 100_230_208,
		/// <summary>
		/// <para><strong>Display Name</strong>: knowledge harvest</para>
		/// <para><strong>Value</strong>: 100,230,214</para>
		/// </summary>
		knowledge_harvest = 100_230_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live conversation response</para>
		/// <para><strong>Value</strong>: 100,230,202</para>
		/// </summary>
		Live_conversation_response = 100_230_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live conversation summary</para>
		/// <para><strong>Value</strong>: 100,230,206</para>
		/// </summary>
		Live_conversation_summary = 100_230_206,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolution notes</para>
		/// <para><strong>Value</strong>: 100,230,215</para>
		/// </summary>
		Resolution_notes = 100_230_215,
		/// <summary>
		/// <para><strong>Display Name</strong>: Timeline highlights</para>
		/// <para><strong>Value</strong>: 100,230,207</para>
		/// </summary>
		Timeline_highlights = 100_230_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Timeline next best actions</para>
		/// <para><strong>Value</strong>: 100,230,212</para>
		/// </summary>
		Timeline_next_best_actions = 100_230_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Write an email</para>
		/// <para><strong>Value</strong>: 100,230,203</para>
		/// </summary>
		Write_an_email = 100_230_203
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_copilotinteraction : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_clienttimestamp = "msdyn_clienttimestamp";
			public const string msdyn_copilotinteractionId = "msdyn_copilotinteractionid";
			public const string msdyn_interactioncontext = "msdyn_interactioncontext";
			public const string msdyn_interactiondataid = "msdyn_interactiondataid";
			public const string msdyn_interactionforid = "msdyn_interactionforid";
			public const string msdyn_interactionforlogicalname = "msdyn_interactionforlogicalname";
			public const string msdyn_interactiontype = "msdyn_interactiontype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_scenariorequestid = "msdyn_scenariorequestid";
			public const string msdyn_scenariotype = "msdyn_scenariotype";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_copilotinteraction";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10875;
		public const string EntityCollectionSchemaName = "msdyn_copilotinteractions";
		public const string EntityDisplayCollectionName = "Copilot Interactions";
		public const string DisplayName = "Copilot Interaction";
		public const string EntitySetName = "msdyn_copilotinteractions";
		public const string EntityLogicalCollectionName = "msdyn_copilotinteractions";
		public const string EntityPrimaryIdAttribute = "msdyn_copilotinteractionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_copilotinteraction";
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction(Guid msdyn_copilotinteractionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_copilotinteractionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_copilotinteraction"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_copilotinteraction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_copilotinteraction(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_copilotinteraction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_copilotinteraction(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_copilotinteraction(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client Timestamp</para>
		/// <para><strong>Description</strong>: Utc Timestamp from client</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_clienttimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_clienttimestamp); }
			set { Entity.Attributes[Fields.msdyn_clienttimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Interaction</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_copilotinteractionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_copilotinteractionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interaction Context</para>
		/// <para><strong>Description</strong>: Stores additional context about the interaction</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_interactioncontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_interactioncontext); }
			set { Entity.Attributes[Fields.msdyn_interactioncontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interaction Data Id</para>
		/// <para><strong>Description</strong>: Links to the interaction data record</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_copilotinteractiondata"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_interactiondataid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_interactiondataid); }
			set { Entity.Attributes[Fields.msdyn_interactiondataid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interaction For Id</para>
		/// <para><strong>Description</strong>: Id of the record to which this interaction is associated</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_interactionforid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_interactionforid); }
			set { Entity.Attributes[Fields.msdyn_interactionforid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interaction For Logical Name</para>
		/// <para><strong>Description</strong>: LogicalName of the record to which this interaction is associated</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_interactionforlogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_interactionforlogicalname); }
			set { Entity.Attributes[Fields.msdyn_interactionforlogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interaction Type</para>
		/// <para><strong>Description</strong>: Identifies the type of interaction</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.msdyn_interactiontype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.msdyn_interactiontype? msdyn_interactiontype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_interactiontype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.msdyn_interactiontype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_interactiontype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_interactiontype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scenario Request Id</para>
		/// <para><strong>Description</strong>: Unique identifier that ties the request across layers</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_scenariorequestid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_scenariorequestid); }
			set { Entity.Attributes[Fields.msdyn_scenariorequestid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scenario Type</para>
		/// <para><strong>Description</strong>: Identifies the type of scenario</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.msdyn_scenariotype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.msdyn_scenariotype? msdyn_scenariotype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_scenariotype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.msdyn_scenariotype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_scenariotype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_scenariotype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Copilot Interaction</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Copilot Interaction</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_copilotinteractionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}