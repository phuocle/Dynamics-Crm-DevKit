//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:41
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets
{
	public enum msevtmgt_Area
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Administration</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Administration = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer service</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Customer_service = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Executive/management</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Executivemanagement = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finance</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Finance = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: HR</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		HR = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: IT</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		IT = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Legal</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		Legal = 100_000_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Logistics</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Logistics = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		Marketing = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales</para>
		/// <para><strong>Value</strong>: 100,000,009</para>
		/// </summary>
		Sales = 100_000_009
	}
	public enum msevtmgt_CompanySize
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 10001 or more</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		_10001_or_more = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: 1001 to 2500</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		_1001_to_2500 = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: 101 to 250</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		_101_to_250 = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: 2501 to 5000</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		_2501_to_5000 = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: 251 to 500</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		_251_to_500 = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: 50 or less</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		_50_or_less = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: 5001 to 10000</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		_5001_to_10000 = 100_000_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: 501 to 1000</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		_501_to_1000 = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: 51 to 100</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		_51_to_100 = 100_000_001
	}
	public enum msevtmgt_Industry
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Architecture and engineering</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Architecture_and_engineering = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Financial services</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Financial_services = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manufacturing</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Manufacturing = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Media, entertainment</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Media_entertainment = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		Other = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Professional services</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Professional_services = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public sector</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Public_sector = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retail</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Retail = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wholesale and distribution</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		Wholesale_and_distribution = 100_000_007
	}
	public enum msevtmgt_internalregistrationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		New = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Ready = 100_000_001
	}
	public enum msevtmgt_PrimaryRole
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Attendee</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Attendee = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journalist</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Journalist = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Other = 100_000_002
	}
	public enum msevtmgt_publishingstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed to publish</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Failed_to_publish = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent webinar failed</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Parent_webinar_failed = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Pending = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Published = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar provider error</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Webinar_provider_error = 100_000_004
	}
	public enum msevtmgt_SyncedWithProvider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Yes = 100_000_002
	}
	public enum msevtmgt_YearsInIndustry
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 1 to 5 years</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		_1_to_5_years = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: 5 to 10 years</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		_5_to_10_years = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Over 10 years</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Over_10_years = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Under one year</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Under_one_year = 100_000_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_EventRegistration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_linkedregistrationid = "msdynmkt_linkedregistrationid";
			public const string msevtmgt_Area = "msevtmgt_area";
			public const string msevtmgt_CompanySize = "msevtmgt_companysize";
			public const string msevtmgt_ContactId = "msevtmgt_contactid";
			public const string msevtmgt_correlationid = "msevtmgt_correlationid";
			public const string msevtmgt_createdFromApi = "msevtmgt_createdfromapi";
			public const string msevtmgt_EventId = "msevtmgt_eventid";
			public const string msevtmgt_EventRegistrationId = "msevtmgt_eventregistrationid";
			public const string msevtmgt_eventregistrationticketid = "msevtmgt_eventregistrationticketid";
			public const string msevtmgt_Industry = "msevtmgt_industry";
			public const string msevtmgt_internalregistrationstatus = "msevtmgt_internalregistrationstatus";
			public const string msevtmgt_iscanceled = "msevtmgt_iscanceled";
			public const string msevtmgt_Memo = "msevtmgt_memo";
			public const string msevtmgt_Name = "msevtmgt_name";
			public const string msevtmgt_originaltimestamp = "msevtmgt_originaltimestamp";
			public const string msevtmgt_PrimaryRole = "msevtmgt_primaryrole";
			public const string msevtmgt_publishingstate = "msevtmgt_publishingstate";
			public const string msevtmgt_qrcode = "msevtmgt_qrcode";
			public const string msevtmgt_registeredby = "msevtmgt_registeredby";
			public const string msevtmgt_registrationnotificationseen = "msevtmgt_registrationnotificationseen";
			public const string msevtmgt_registrationoperation = "msevtmgt_registrationoperation";
			public const string msevtmgt_registrationstatus = "msevtmgt_registrationstatus";
			public const string msevtmgt_SyncedWithProvider = "msevtmgt_syncedwithprovider";
			public const string msevtmgt_TimesCheckedIn = "msevtmgt_timescheckedin";
			public const string msevtmgt_WebinarRegistrationID = "msevtmgt_webinarregistrationid";
			public const string msevtmgt_YearsInIndustry = "msevtmgt_yearsinindustry";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_eventregistration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11101;
		public const string EntityCollectionSchemaName = "msevtmgt_EventRegistrations";
		public const string EntityDisplayCollectionName = "Event Registrations";
		public const string DisplayName = "Event Registration";
		public const string EntitySetName = "msevtmgt_eventregistrations";
		public const string EntityLogicalCollectionName = "msevtmgt_eventregistrations";
		public const string EntityPrimaryIdAttribute = "msevtmgt_eventregistrationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_EventRegistration";
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration(Guid msevtmgt_EventRegistrationId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_EventRegistrationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_EventRegistration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_EventRegistration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_EventRegistration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_EventRegistration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_EventRegistration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_EventRegistration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Registration Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_linkedregistrationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_linkedregistrationid); }
			set { Entity.Attributes[Fields.msdynmkt_linkedregistrationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Area</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_Area"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_Area? msevtmgt_Area
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_Area);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_Area)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_Area] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_Area] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company size</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_CompanySize"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_CompanySize? msevtmgt_CompanySize
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_CompanySize);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_CompanySize)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_CompanySize] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_CompanySize] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_ContactId); }
			set { Entity.Attributes[Fields.msevtmgt_ContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Correlation ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_correlationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_correlationid); }
			set { Entity.Attributes[Fields.msevtmgt_correlationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: createdFromApi</para>
		/// <para><strong>Description</strong>: A flag that indicates the origin of the registration</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_createdFromApi
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_createdFromApi); }
			set { Entity.Attributes[Fields.msevtmgt_createdFromApi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Description</strong>: Unique identifier for the event associated with the event registration</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msevtmgt_event"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_EventId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_EventId); }
			set { Entity.Attributes[Fields.msevtmgt_EventId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_EventRegistrationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_EventRegistrationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration ticket</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 36</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_eventregistrationticketid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_eventregistrationticketid); }
			set { Entity.Attributes[Fields.msevtmgt_eventregistrationticketid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Industry</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_Industry"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_Industry? msevtmgt_Industry
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_Industry);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_Industry)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_Industry] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_Industry] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal registration status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_internalregistrationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_internalregistrationstatus? msevtmgt_internalregistrationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_internalregistrationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_internalregistrationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_internalregistrationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_internalregistrationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is canceled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_iscanceled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_iscanceled); }
			set { Entity.Attributes[Fields.msevtmgt_iscanceled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Memo</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Memo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Memo); }
			set { Entity.Attributes[Fields.msevtmgt_Memo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the registration record</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Name); }
			set { Entity.Attributes[Fields.msevtmgt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Original timestamp</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_originaltimestamp
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_originaltimestamp); }
			set { Entity.Attributes[Fields.msevtmgt_originaltimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary role</para>
		/// <para><strong>Description</strong>: Primary role of the event attendee</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_PrimaryRole"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_PrimaryRole? msevtmgt_PrimaryRole
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PrimaryRole);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_PrimaryRole)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PrimaryRole] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PrimaryRole] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publishing state</para>
		/// <para><strong>Description</strong>: The publishing state of the event registration</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_publishingstate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_publishingstate.Pending"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_publishingstate? msevtmgt_publishingstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_publishingstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_publishingstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_publishingstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_publishingstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: QR code</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_qrcode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_qrcode); }
			set { Entity.Attributes[Fields.msevtmgt_qrcode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registered by</para>
		/// <para><strong>Description</strong>: A lookup to the contact who created this event registration</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_registeredby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_registeredby); }
			set { Entity.Attributes[Fields.msevtmgt_registeredby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration notification seen</para>
		/// <para><strong>Description</strong>: Indicates whether the registration creation notification has been seen</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_registrationnotificationseen
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_registrationnotificationseen); }
			set { Entity.Attributes[Fields.msevtmgt_registrationnotificationseen] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration operation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_registrationoperation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_registrationoperation); }
			set { Entity.Attributes[Fields.msevtmgt_registrationoperation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration status</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_registrationstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_registrationstatus); }
			set { Entity.Attributes[Fields.msevtmgt_registrationstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Synced with provider</para>
		/// <para><strong>Description</strong>: A flag that indicates that the registration was synced with the provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_SyncedWithProvider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_SyncedWithProvider.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_SyncedWithProvider? msevtmgt_SyncedWithProvider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SyncedWithProvider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_SyncedWithProvider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SyncedWithProvider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SyncedWithProvider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Times checked-in</para>
		/// <para><strong>Description</strong>: Deprecated attribute</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_TimesCheckedIn
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_TimesCheckedIn); }
			set { Entity.Attributes[Fields.msevtmgt_TimesCheckedIn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar registration ID</para>
		/// <para><strong>Description</strong>: Webinar ID of the event registration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_WebinarRegistrationID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_WebinarRegistrationID); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarRegistrationID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Years in industry</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_YearsInIndustry"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_YearsInIndustry? msevtmgt_YearsInIndustry
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_YearsInIndustry);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.msevtmgt_YearsInIndustry)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_YearsInIndustry] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_YearsInIndustry] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the event registration</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the event registration</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventRegistrationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}