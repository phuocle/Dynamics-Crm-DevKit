//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets
{
	public enum msdyn_salesmotion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1
	}
	public enum msdyn_salesplay
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1
	}
	public enum msdyn_solutionarea
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_worklistsuggestion : EntityBase
	{
		public struct Fields
		{
			public const string msdyn_accessrightsmask = "msdyn_accessrightsmask";
			public const string msdyn_customdata = "msdyn_customdata";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_potentialrevenue = "msdyn_potentialrevenue";
			public const string msdyn_relatedcustomdata = "msdyn_relatedcustomdata";
			public const string msdyn_relatedinsights = "msdyn_relatedinsights";
			public const string msdyn_relatedrecordid = "msdyn_relatedrecordid";
			public const string msdyn_relatedrecordname = "msdyn_relatedrecordname";
			public const string msdyn_relatedrecordtype = "msdyn_relatedrecordtype";
			public const string msdyn_salesmotion = "msdyn_salesmotion";
			public const string msdyn_salesplay = "msdyn_salesplay";
			public const string msdyn_solutionarea = "msdyn_solutionarea";
			public const string msdyn_suggesteddate = "msdyn_suggesteddate";
			public const string msdyn_worklistsuggestionId = "msdyn_worklistsuggestionid";
			public const string OwningUser = "owninguser";
		}
		public const string EntityLogicalName = "msdyn_worklistsuggestion";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10841;
		public const string EntityCollectionSchemaName = "msdyn_worklistsuggestions";
		public const string EntityDisplayCollectionName = "Work List Suggestions";
		public const string DisplayName = "Work List Suggestion";
		public const string EntitySetName = "msdyn_worklistsuggestions";
		public const string EntityLogicalCollectionName = "msdyn_worklistsuggestions";
		public const string EntityPrimaryIdAttribute = "msdyn_worklistsuggestionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_worklistsuggestion";
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion(Guid msdyn_worklistsuggestionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_worklistsuggestionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_worklistsuggestion"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_worklistsuggestion"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_worklistsuggestion(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_worklistsuggestion"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_worklistsuggestion(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_worklistsuggestion(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_accessrightsmask</para>
		/// <para><strong>Description</strong>: User access right value</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_accessrightsmask
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_accessrightsmask); }
			set { Entity.Attributes[Fields.msdyn_accessrightsmask] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Data</para>
		/// <para><strong>Description</strong>: Custom Data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_customdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_customdata); }
			set { Entity.Attributes[Fields.msdyn_customdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Potential Revenue Returns</para>
		/// <para><strong>Description</strong>: Potential Revenue Returns</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_potentialrevenue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_potentialrevenue); }
			set { Entity.Attributes[Fields.msdyn_potentialrevenue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related Custom Data</para>
		/// <para><strong>Description</strong>: Related Custom Data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_relatedcustomdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_relatedcustomdata); }
			set { Entity.Attributes[Fields.msdyn_relatedcustomdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related Insights Custom Data</para>
		/// <para><strong>Description</strong>: Related Insights Custom Data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_relatedinsights
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_relatedinsights); }
			set { Entity.Attributes[Fields.msdyn_relatedinsights] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related record for Suggestion</para>
		/// <para><strong>Description</strong>: Related record for Suggestion</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_relatedrecordid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_relatedrecordid); }
			set { Entity.Attributes[Fields.msdyn_relatedrecordid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related Record Name</para>
		/// <para><strong>Description</strong>: Related Record Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_relatedrecordname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_relatedrecordname); }
			set { Entity.Attributes[Fields.msdyn_relatedrecordname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related Record Type</para>
		/// <para><strong>Description</strong>: Related Record Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_relatedrecordtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_relatedrecordtype); }
			set { Entity.Attributes[Fields.msdyn_relatedrecordtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales motion</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_salesmotion"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_salesmotion? msdyn_salesmotion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesmotion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_salesmotion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesmotion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesmotion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales play</para>
		/// <para><strong>Description</strong>: Sales play</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_salesplay"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_salesplay? msdyn_salesplay
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesplay);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_salesplay)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesplay] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesplay] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution area</para>
		/// <para><strong>Description</strong>: Solution area</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_solutionarea"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_solutionarea? msdyn_solutionarea
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_solutionarea);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_worklistsuggestionOptionSets.msdyn_solutionarea)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_solutionarea] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_solutionarea] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggested date</para>
		/// <para><strong>Description</strong>: Suggested date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_suggesteddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_suggesteddate); }
			set { Entity.Attributes[Fields.msdyn_suggesteddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: worklistsuggestion</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_worklistsuggestionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_worklistsuggestionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
	}
}