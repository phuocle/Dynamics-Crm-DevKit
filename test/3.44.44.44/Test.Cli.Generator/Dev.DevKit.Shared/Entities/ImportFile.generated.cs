//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ImportFileOptionSets
{
	public enum DataDelimiterCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DoubleQuote</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DoubleQuote = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		None = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: SingleQuote</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		SingleQuote = 3
	}
	public enum FieldDelimiterCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Colon</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Colon = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Comma</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Comma = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Semicolon</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Semicolon = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tab</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Tab = 3
	}
	public enum FileTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Attachment = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: CSV</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		CSV = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: XLSX</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		XLSX = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: XML Spreadsheet 2003</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		XML_Spreadsheet_2003 = 1
	}
	public enum ProcessCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ignore = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Internal = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Process = 1
	}
	public enum ProcessingStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Complex Transformation</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Complex_Transformation = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Complete</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Import_Complete = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Pass 1</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Import_Pass_1 = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Pass 2</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Import_Pass_2 = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lookup Transformation</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Lookup_Transformation = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Started</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Not_Started = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner Transformation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Owner_Transformation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parsing</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Parsing = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parsing Complete</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Parsing_Complete = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Picklist Transformation</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Picklist_Transformation = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Key Transformation</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Primary_Key_Transformation = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transformation Complete</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Transformation_Complete = 8
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Completed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Failed = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Importing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Importing = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parsing</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Parsing = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Submitted = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transforming</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Transforming = 2
	}
	public enum UpsertModeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Create</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Create = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Ignore = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Update</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Update = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ImportFile : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalHeaderRow = "additionalheaderrow";
			public const string CompletedOn = "completedon";
			public const string Content = "content";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataDelimiterCode = "datadelimitercode";
			public const string EnableDuplicateDetection = "enableduplicatedetection";
			public const string EntityKeyId = "entitykeyid";
			public const string FailureCount = "failurecount";
			public const string FieldDelimiterCode = "fielddelimitercode";
			public const string FileTypeCode = "filetypecode";
			public const string HeaderRow = "headerrow";
			public const string ImportFileId = "importfileid";
			public const string ImportId = "importid";
			public const string ImportMapId = "importmapid";
			public const string IsFirstRowHeader = "isfirstrowheader";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParsedTableColumnPrefix = "parsedtablecolumnprefix";
			public const string ParsedTableColumnsNumber = "parsedtablecolumnsnumber";
			public const string ParsedTableName = "parsedtablename";
			public const string PartialFailureCount = "partialfailurecount";
			public const string ProcessCode = "processcode";
			public const string ProcessingStatus = "processingstatus";
			public const string ProgressCounter = "progresscounter";
			public const string RecordsOwnerId = "recordsownerid";
			public const string RelatedEntityColumns = "relatedentitycolumns";
			public const string Size = "size";
			public const string Source = "source";
			public const string SourceEntityName = "sourceentityname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SuccessCount = "successcount";
			public const string TargetEntityName = "targetentityname";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalCount = "totalcount";
			public const string UpsertModeCode = "upsertmodecode";
			public const string UseSystemMap = "usesystemmap";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "importfile";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4412;
		public const string EntityCollectionSchemaName = "ImportFiles";
		public const string EntityDisplayCollectionName = "Imports";
		public const string DisplayName = "Import Source File";
		public const string EntitySetName = "importfiles";
		public const string EntityLogicalCollectionName = "importfiles";
		public const string EntityPrimaryIdAttribute = "importfileid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "ImportFile";
		[DebuggerNonUserCode()]
		public ImportFile()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImportFile(Guid ImportFileId)
		{
			Entity = new Entity(EntityLogicalName, ImportFileId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImportFile(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImportFile"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ImportFile(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImportFile"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ImportFile(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ImportFile(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ImportFile"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ImportFile(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ImportFile(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ImportFile(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Header</para>
		/// <para><strong>Description</strong>: Shows the secondary column headers. The additional headers are used during the process of transforming the import file into import data records.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalHeaderRow
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalHeaderRow); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the import associated with the import file was completed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Stores the content of the import file, stored as comma-separated values.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Content
		{
			get { return Entity.GetAttributeValue<string>(Fields.Content); }
			set { Entity.Attributes[Fields.Content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Delimiter</para>
		/// <para><strong>Description</strong>: Select the single-character data delimiter used in the import file. This is typically a single or double quotation mark.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode? DataDelimiterCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataDelimiterCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.DataDelimiterCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataDelimiterCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataDelimiterCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Duplicate Detection</para>
		/// <para><strong>Description</strong>: Select whether duplicate-detection rules should be run against the import job.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EnableDuplicateDetection
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EnableDuplicateDetection); }
			set { Entity.Attributes[Fields.EnableDuplicateDetection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Key ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the Alternate key Id</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityKeyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityKeyId); }
			set { Entity.Attributes[Fields.EntityKeyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Errors</para>
		/// <para><strong>Description</strong>: Shows the number of records in the import file that cannot be imported.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Delimiter</para>
		/// <para><strong>Description</strong>: Select the character that is used to separate each field in the import file. Typically, it is a comma.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode? FieldDelimiterCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FieldDelimiterCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.FieldDelimiterCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FieldDelimiterCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FieldDelimiterCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Type</para>
		/// <para><strong>Description</strong>: Shows the type of source file that is uploaded for import.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode? FileTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FileTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.FileTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FileTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FileTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Header</para>
		/// <para><strong>Description</strong>: Shows a list of each column header in the import file separated by a comma. The header is used for parsing the file during the import job.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HeaderRow
		{
			get { return Entity.GetAttributeValue<string>(Fields.HeaderRow); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import</para>
		/// <para><strong>Description</strong>: Unique identifier of the import file.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ImportFileId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ImportFileId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Job ID</para>
		/// <para><strong>Description</strong>: Choose the import job that the file was uploaded for.</para>
		/// <para><strong>Lookup</strong>: <see cref="import"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportId); }
			set { Entity.Attributes[Fields.ImportId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Map</para>
		/// <para><strong>Description</strong>: Choose a data map to match the import file and its column headers with the record types and fields in Microsoft Dynamics 365. If the column headers in the file match the display names of the target fields in Microsoft Dynamics 365, we import the data automatically. If not, you can manually define matches during import.</para>
		/// <para><strong>Lookup</strong>: <see cref="importmap"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ImportMapId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ImportMapId); }
			set { Entity.Attributes[Fields.ImportMapId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is First Row Header</para>
		/// <para><strong>Description</strong>: Select whether the first row of the import file contains column headings, which are used for data mapping during the import job.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFirstRowHeader
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFirstRowHeader); }
			set { Entity.Attributes[Fields.IsFirstRowHeader] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Name</para>
		/// <para><strong>Description</strong>: Shows the name of the import file. This name is based on the name of the uploaded file.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user who is assigned to follow up with or manage the import file. This field is updated every time the import file is assigned to a different user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Shows the business unit that the record owner belongs to.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the import file.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the import file.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parse Table Column Prefix</para>
		/// <para><strong>Description</strong>: Shows the prefix applied to each column after the import file is parsed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableColumnPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableColumnPrefix); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parse Table Column Number</para>
		/// <para><strong>Description</strong>: Shows the number of columns included in the parsed import file.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ParsedTableColumnsNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ParsedTableColumnsNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parse Table</para>
		/// <para><strong>Description</strong>: Shows the name of the table that contains the parsed data from the import file.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParsedTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParsedTableName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partial Failures</para>
		/// <para><strong>Description</strong>: Shows the number of records in this file that had failures during the import.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PartialFailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PartialFailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Code</para>
		/// <para><strong>Description</strong>: Tells whether the import file should be ignored or processed during the import.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode.Process"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode? ProcessCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProcessCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProcessCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Status</para>
		/// <para><strong>Description</strong>: Shows the import file&apos;s processing status code. This indicates whether the data in the import file has been parsed, transformed, or imported.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus? ProcessingStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessingStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.ProcessingStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Progress Counter</para>
		/// <para><strong>Description</strong>: Shows the progress code for the processing of the import file. This field is used when a paused import job is resumed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProgressCounter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProgressCounter); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Records Owner</para>
		/// <para><strong>Description</strong>: Choose the user that the records created during the import job should be assigned to.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RecordsOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RecordsOwnerId); }
			set { Entity.Attributes[Fields.RecordsOwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Shows the columns that are mapped to a related record type (entity) of the primary record type (entity) included in the import file.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedEntityColumns
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedEntityColumns); }
			set { Entity.Attributes[Fields.RelatedEntityColumns] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Size</para>
		/// <para><strong>Description</strong>: Shows the size of the import file, in kilobytes.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Size
		{
			get { return Entity.GetAttributeValue<string>(Fields.Size); }
			set { Entity.Attributes[Fields.Size] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source</para>
		/// <para><strong>Description</strong>: Shows the name of the data source file uploaded in the import job.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Source
		{
			get { return Entity.GetAttributeValue<string>(Fields.Source); }
			set { Entity.Attributes[Fields.Source] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Entity</para>
		/// <para><strong>Description</strong>: Shows the record type (entity) of the source data.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceEntityName); }
			set { Entity.Attributes[Fields.SourceEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows the status of the import file record. By default, all records are active and can&apos;t be deactivated.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Shows the reason code that explains the import file&apos;s status to identify the stage of the import process, from parsing the data to completed.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Successes</para>
		/// <para><strong>Description</strong>: Shows the number of records in the import file that are imported successfully.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SuccessCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SuccessCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Entity</para>
		/// <para><strong>Description</strong>: Select the target record type (entity) for the records that will be created during the import job.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TargetEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.TargetEntityName); }
			set { Entity.Attributes[Fields.TargetEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Processed</para>
		/// <para><strong>Description</strong>: Shows the total number of records in the import file.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TotalCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TotalCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Upsert Mode</para>
		/// <para><strong>Description</strong>: Select the value which is used for identify the upsert mode. By Default, it is a Create.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode.Create"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode? UpsertModeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpsertModeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ImportFileOptionSets.UpsertModeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpsertModeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpsertModeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use System Map</para>
		/// <para><strong>Description</strong>: Tells whether an automatic system map was applied to the import file, which automatically maps the import data to the target entity in Microsoft Dynamics 365.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseSystemMap
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseSystemMap); }
			set { Entity.Attributes[Fields.UseSystemMap] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}