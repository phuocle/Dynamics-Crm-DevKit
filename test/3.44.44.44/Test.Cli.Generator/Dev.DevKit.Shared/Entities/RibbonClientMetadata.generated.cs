//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RibbonClientMetadataOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RibbonClientMetadata : EntityBase
	{
		public struct Fields
		{
			public const string ComponentState = "componentstate";
			public const string EntityLogicalName = "entitylogicalname";
			public const string RibbonContext = "ribboncontext";
			public const string RibbonId = "ribbonid";
			public const string RibbonIdUnique = "ribbonidunique";
			public const string RibbonJson = "ribbonjson";
			public const string RibbonJsonFileRef = "ribbonjsonfileref";
			public const string RibbonJsonFileRef_name = "ribbonjsonfileref_name";
			public const string SolutionId = "solutionid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "ribbonclientmetadata";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4579;
		public const string EntityCollectionSchemaName = "RibbonClientMetadata";
		public const string EntityDisplayCollectionName = "Ribbon Client Metadata.";
		public const string DisplayName = "Ribbon Client Metadata.";
		public const string EntitySetName = "ribbonclientmetadata";
		public const string EntityLogicalCollectionName = "ribbonclientmetadata";
		public const string EntityPrimaryIdAttribute = "ribbonid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RibbonClientMetadata";
		[DebuggerNonUserCode()]
		public RibbonClientMetadata()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RibbonClientMetadata(Guid RibbonClientMetadataId)
		{
			Entity = new Entity(EntityLogicalName, RibbonClientMetadataId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RibbonClientMetadata(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RibbonClientMetadata"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RibbonClientMetadata(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RibbonClientMetadata"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RibbonClientMetadata(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RibbonClientMetadata(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RibbonClientMetadata"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RibbonClientMetadata(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RibbonClientMetadata(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RibbonClientMetadata(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentState); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Entity logical name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityLogicalName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityLogicalName); }
			set { Entity.Attributes[Fields.EntityLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Ribbon context</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 32</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RibbonContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.RibbonContext); }
			set { Entity.Attributes[Fields.RibbonContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ribbon Client Metadata Identifier.</para>
		/// <para><strong>Description</strong>: Unique identifier of a ribbon client metadata.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RibbonId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RibbonId); }
			set { Entity.Attributes[Fields.RibbonId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the Ribbon client Metadata</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RibbonIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RibbonIdUnique); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Ribbon representation in JSON format.</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RibbonJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.RibbonJson); }
			set { Entity.Attributes[Fields.RibbonJson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RibbonJsonFileRef</para>
		/// <para><strong>Description</strong>: Reference to the Ribbon JSON file on Azure.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RibbonJsonFileRef_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.RibbonJsonFileRef_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}