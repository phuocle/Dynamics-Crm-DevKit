//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.BulkOperationLogOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BulkOperationLog : EntityBase
	{
		public struct Fields
		{
			public const string AdditionalInfo = "additionalinfo";
			public const string BulkOperationId = "bulkoperationid";
			public const string BulkOperationLogId = "bulkoperationlogid";
			public const string CampaignActivityId = "campaignactivityid";
			public const string CreatedObjectId = "createdobjectid";
			public const string ErrorDescriptionFormatted = "errordescriptionformatted";
			public const string ErrorNumber = "errornumber";
			public const string ErrorNumberFormatted = "errornumberformatted";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string RegardingObjectId = "regardingobjectid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "bulkoperationlog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4405;
		public const string EntityCollectionSchemaName = "BulkOperationLogs";
		public const string EntityDisplayCollectionName = "Bulk Operation Logs";
		public const string DisplayName = "Bulk Operation Log";
		public const string EntitySetName = "bulkoperationlogs";
		public const string EntityLogicalCollectionName = "bulkoperationlogs";
		public const string EntityPrimaryIdAttribute = "bulkoperationlogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "BulkOperationLog";
		[DebuggerNonUserCode()]
		public BulkOperationLog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BulkOperationLog(Guid BulkOperationLogId)
		{
			Entity = new Entity(EntityLogicalName, BulkOperationLogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BulkOperationLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BulkOperationLog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public BulkOperationLog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BulkOperationLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BulkOperationLog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BulkOperationLog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BulkOperationLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BulkOperationLog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BulkOperationLog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BulkOperationLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed on Line</para>
		/// <para><strong>Description</strong>: Shows the data value at which an error occurred during the quick campaign.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AdditionalInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.AdditionalInfo); }
			set { Entity.Attributes[Fields.AdditionalInfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bulk Operation Number</para>
		/// <para><strong>Description</strong>: Shows the quick campaign record that the log applies to. This information is used to relate log data to the parent quick campaign.</para>
		/// <para><strong>Lookup</strong>: <see cref="bulkoperation"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BulkOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BulkOperationId); }
			set { Entity.Attributes[Fields.BulkOperationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bulk Operation Log Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the bulk operation log.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BulkOperationLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BulkOperationLogId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Activity Number</para>
		/// <para><strong>Description</strong>: Shows the campaign activity record that the log applies to. This information is used to relate log data to the parent campaign activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="campaignactivity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignActivityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignActivityId); }
			set { Entity.Attributes[Fields.CampaignActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created Object</para>
		/// <para><strong>Description</strong>: Choose the activity or other item created by the bulk operation.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="activitypointer"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedObjectId); }
			set { Entity.Attributes[Fields.CreatedObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error description</para>
		/// <para><strong>Description</strong>: The error description formatted.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDescriptionFormatted
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDescriptionFormatted); }
			set { Entity.Attributes[Fields.ErrorDescriptionFormatted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reason Id</para>
		/// <para><strong>Description</strong>: Shows the error code that is used to troubleshoot issues in the bulk operation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error number</para>
		/// <para><strong>Description</strong>: The error number formatted.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorNumberFormatted
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorNumberFormatted); }
			set { Entity.Attributes[Fields.ErrorNumberFormatted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: name</para>
		/// <para><strong>Description</strong>: name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customers</para>
		/// <para><strong>Description</strong>: Choose the account, contact, lead, or list that the bulk operation log item applies to.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}