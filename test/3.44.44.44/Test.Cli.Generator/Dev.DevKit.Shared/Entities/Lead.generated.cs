//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.LeadOptionSets
{
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum BudgetStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Can Buy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Can_Buy = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: May Buy</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		May_Buy = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Committed Budget</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		No_Committed_Budget = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Will Buy</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Will_Buy = 3
	}
	public enum IndustryCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Accounting</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Accounting = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Agriculture and Non-petrol Natural Resource Extraction</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Agriculture_and_Non_petrol_Natural_Resource_Extraction = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Broadcasting Printing and Publishing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Broadcasting_Printing_and_Publishing = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Brokers</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Brokers = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Building Supply Retail</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Building_Supply_Retail = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Services</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Business_Services = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Consulting</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Consulting = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Consumer Services</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Consumer_Services = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Design, Direction and Creative Management</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Design_Direction_and_Creative_Management = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Distributors, Dispatchers and Processors</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Distributors_Dispatchers_and_Processors = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Doctor's Offices and Clinics</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Doctors_Offices_and_Clinics = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Durable Manufacturing</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Durable_Manufacturing = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Eating and Drinking Places</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Eating_and_Drinking_Places = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Entertainment Retail</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Entertainment_Retail = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Equipment Rental and Leasing</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Equipment_Rental_and_Leasing = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Financial</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Financial = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Food and Tobacco Processing</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Food_and_Tobacco_Processing = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inbound Capital Intensive Processing</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Inbound_Capital_Intensive_Processing = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inbound Repair and Services</para>
		/// <para><strong>Value</strong>: 19</para>
		/// </summary>
		Inbound_Repair_and_Services = 19,
		/// <summary>
		/// <para><strong>Display Name</strong>: Insurance</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Insurance = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Legal Services</para>
		/// <para><strong>Value</strong>: 21</para>
		/// </summary>
		Legal_Services = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non-Durable Merchandise Retail</para>
		/// <para><strong>Value</strong>: 22</para>
		/// </summary>
		Non_Durable_Merchandise_Retail = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound Consumer Service</para>
		/// <para><strong>Value</strong>: 23</para>
		/// </summary>
		Outbound_Consumer_Service = 23,
		/// <summary>
		/// <para><strong>Display Name</strong>: Petrochemical Extraction and Distribution</para>
		/// <para><strong>Value</strong>: 24</para>
		/// </summary>
		Petrochemical_Extraction_and_Distribution = 24,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Retail</para>
		/// <para><strong>Value</strong>: 25</para>
		/// </summary>
		Service_Retail = 25,
		/// <summary>
		/// <para><strong>Display Name</strong>: SIG Affiliations</para>
		/// <para><strong>Value</strong>: 26</para>
		/// </summary>
		SIG_Affiliations = 26,
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Services</para>
		/// <para><strong>Value</strong>: 27</para>
		/// </summary>
		Social_Services = 27,
		/// <summary>
		/// <para><strong>Display Name</strong>: Special Outbound Trade Contractors</para>
		/// <para><strong>Value</strong>: 28</para>
		/// </summary>
		Special_Outbound_Trade_Contractors = 28,
		/// <summary>
		/// <para><strong>Display Name</strong>: Specialty Realty</para>
		/// <para><strong>Value</strong>: 29</para>
		/// </summary>
		Specialty_Realty = 29,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transportation</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Transportation = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Utility Creation and Distribution</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Utility_Creation_and_Distribution = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vehicle Retail</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Vehicle_Retail = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wholesale</para>
		/// <para><strong>Value</strong>: 33</para>
		/// </summary>
		Wholesale = 33
	}
	public enum InitialCommunication
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contacted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Contacted = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Contacted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Not_Contacted = 1
	}
	public enum LeadQualityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cold</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Cold = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hot</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hot = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Warm = 2
	}
	public enum LeadSourceCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Advertisement</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Advertisement = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Employee Referral</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Employee_Referral = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: External Referral</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		External_Referral = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey</para>
		/// <para><strong>Value</strong>: 831,900,000</para>
		/// </summary>
		Journey = 831_900_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Landing page</para>
		/// <para><strong>Value</strong>: 192,350,100</para>
		/// </summary>
		Landing_page = 192_350_100,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Sponsored Form</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		LinkedIn_Sponsored_Form = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Other = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Partner</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Partner = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public Relations</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Public_Relations = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Seminar</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Seminar = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Trade Show</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Trade_Show = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Web = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Word of Mouth</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Word_of_Mouth = 9
	}
	public enum msdyn_LeadGrade
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade A</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Grade_A = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade B</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Grade_B = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade C</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Grade_C = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade D</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Grade_D = 3
	}
	public enum msdyn_LeadScoreTrend
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Declining</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Declining = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Improving</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Improving = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not enough info</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_enough_info = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Steady</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Steady = 1
	}
	public enum msdyn_ordertype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Item based</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Item_based = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service-Maintenance Based</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Service_Maintenance_Based = 690_970_002
	}
	public enum msdyn_salesassignmentresult
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Failed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Succeeded</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Succeeded = 0
	}
	public enum msdyncrm_leadsourcetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Marketing = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Sales = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teleprospect</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Teleprospect = 192_350_002
	}
	public enum Need
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Good to have</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Good_to_have = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Must have</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Must_have = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: No need</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		No_need = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Should have</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Should_have = 1
	}
	public enum PreferredContactMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Any</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Any = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Fax = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mail</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Mail = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Phone = 3
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum PurchaseProcess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Committee</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Committee = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Individual</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Individual = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Unknown = 2
	}
	public enum PurchaseTimeFrame
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Immediate</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Immediate = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Quarter</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Next_Quarter = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: This Quarter</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		This_Quarter = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: This Year</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		This_Year = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Unknown = 4
	}
	public enum SalesStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualify</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Qualify = 0
	}
	public enum SalesStageCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disqualified</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Disqualified = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualified</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Qualified = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Disqualified</strong></para>
		/// </summary>
		Canceled = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cannot Contact</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Disqualified</strong></para>
		/// </summary>
		Cannot_Contact = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contacted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Contacted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lost</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Disqualified</strong></para>
		/// </summary>
		Lost = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Qualified</para>
		/// <para><strong>Value</strong>: 823,270,000</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Marketing_Qualified = 823_270_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		New = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Longer Interested</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Disqualified</strong></para>
		/// </summary>
		No_Longer_Interested = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualified</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Qualified</strong></para>
		/// </summary>
		Qualified = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Lead : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string BudgetAmount = "budgetamount";
			public const string BudgetAmount_Base = "budgetamount_base";
			public const string BudgetStatus = "budgetstatus";
			public const string BusinessCard = "businesscard";
			public const string BusinessCardAttributes = "businesscardattributes";
			public const string CampaignId = "campaignid";
			public const string CompanyName = "companyname";
			public const string ConfirmInterest = "confirminterest";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string DecisionMaker = "decisionmaker";
			public const string Description = "description";
			public const string DoNotBulkEMail = "donotbulkemail";
			public const string DoNotEMail = "donotemail";
			public const string DoNotFax = "donotfax";
			public const string DoNotPhone = "donotphone";
			public const string DoNotPostalMail = "donotpostalmail";
			public const string DoNotSendMM = "donotsendmm";
			public const string EMailAddress1 = "emailaddress1";
			public const string EMailAddress2 = "emailaddress2";
			public const string EMailAddress3 = "emailaddress3";
			public const string EntityImageId = "entityimageid";
			public const string EstimatedAmount = "estimatedamount";
			public const string EstimatedAmount_Base = "estimatedamount_base";
			public const string EstimatedCloseDate = "estimatedclosedate";
			public const string EstimatedValue = "estimatedvalue";
			public const string EvaluateFit = "evaluatefit";
			public const string ExchangeRate = "exchangerate";
			public const string Fax = "fax";
			public const string FirstName = "firstname";
			public const string FollowEmail = "followemail";
			public const string FullName = "fullname";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IndustryCode = "industrycode";
			public const string InitialCommunication = "initialcommunication";
			public const string IsAutoCreate = "isautocreate";
			public const string IsPrivate = "isprivate";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LastUsedInCampaign = "lastusedincampaign";
			public const string LeadId = "leadid";
			public const string LeadQualityCode = "leadqualitycode";
			public const string LeadSourceCode = "leadsourcecode";
			public const string MasterId = "masterid";
			public const string Merged = "merged";
			public const string MiddleName = "middlename";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_LeadGrade = "msdyn_leadgrade";
			public const string msdyn_leadkpiid = "msdyn_leadkpiid";
			public const string msdyn_LeadScore = "msdyn_leadscore";
			public const string msdyn_LeadScoreTrend = "msdyn_leadscoretrend";
			public const string msdyn_ordertype = "msdyn_ordertype";
			public const string msdyn_PredictiveScoreId = "msdyn_predictivescoreid";
			public const string msdyn_salesassignmentresult = "msdyn_salesassignmentresult";
			public const string msdyn_ScoreHistory = "msdyn_scorehistory";
			public const string msdyn_ScoreReasons = "msdyn_scorereasons";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyncrm_code = "msdyncrm_code";
			public const string msdyncrm_companysize = "msdyncrm_companysize";
			public const string msdyncrm_Contactid = "msdyncrm_contactid";
			public const string msdyncrm_customerjourneyid = "msdyncrm_customerjourneyid";
			public const string msdyncrm_degree = "msdyncrm_degree";
			public const string msdyncrm_emailid = "msdyncrm_emailid";
			public const string msdyncrm_fieldofstudy = "msdyncrm_fieldofstudy";
			public const string msdyncrm_graduationdate = "msdyncrm_graduationdate";
			public const string msdyncrm_industry = "msdyncrm_industry";
			public const string msdyncrm_insights_placeholder = "msdyncrm_insights_placeholder";
			public const string msdyncrm_jobfunction = "msdyncrm_jobfunction";
			public const string msdyncrm_latestsubmissiondate = "msdyncrm_latestsubmissiondate";
			public const string msdyncrm_Leadid = "msdyncrm_leadid";
			public const string msdyncrm_leadsourcetype = "msdyncrm_leadsourcetype";
			public const string msdyncrm_LinkedInCampaign = "msdyncrm_linkedincampaign";
			public const string msdyncrm_linkedinsubmissioncount = "msdyncrm_linkedinsubmissioncount";
			public const string msdyncrm_linkedinsubmissioncount_Date = "msdyncrm_linkedinsubmissioncount_date";
			public const string msdyncrm_linkedinsubmissioncount_State = "msdyncrm_linkedinsubmissioncount_state";
			public const string msdyncrm_marketingformid = "msdyncrm_marketingformid";
			public const string msdyncrm_marketingformsubmissiondateprecise = "msdyncrm_marketingformsubmissiondateprecise";
			public const string msdyncrm_marketingpageid = "msdyncrm_marketingpageid";
			public const string msdyncrm_Profileid = "msdyncrm_profileid";
			public const string msdyncrm_PurchaseNeed = "msdyncrm_purchaseneed";
			public const string msdyncrm_Recycled = "msdyncrm_recycled";
			public const string msdyncrm_SalesAccepted = "msdyncrm_salesaccepted";
			public const string msdyncrm_SalesReady = "msdyncrm_salesready";
			public const string msdyncrm_sasToken = "msdyncrm_sastoken";
			public const string msdyncrm_school = "msdyncrm_school";
			public const string msdyncrm_scores = "msdyncrm_scores";
			public const string msdyncrm_scoringgrade = "msdyncrm_scoringgrade";
			public const string msdyncrm_seniority = "msdyncrm_seniority";
			public const string msdyncrm_sourceform = "msdyncrm_sourceform";
			public const string msdyncrm_startdate = "msdyncrm_startdate";
			public const string msdyncrm_TeleProspectAccepted = "msdyncrm_teleprospectaccepted";
			public const string msdyncrm_TeleProspectReady = "msdyncrm_teleprospectready";
			public const string msdyncrm_TriggerRecycle = "msdyncrm_triggerrecycle";
			public const string msdynmkt_customerjourneyid = "msdynmkt_customerjourneyid";
			public const string msdynmkt_emailid = "msdynmkt_emailid";
			public const string msdynmkt_issalesreadysetmanually = "msdynmkt_issalesreadysetmanually";
			public const string msdynmkt_JourneyActionId = "msdynmkt_journeyactionid";
			public const string msdynmkt_marketingformid = "msdynmkt_marketingformid";
			public const string msevtmgt_originatingeventid = "msevtmgt_originatingeventid";
			public const string Need = "need";
			public const string NumberOfEmployees = "numberofemployees";
			public const string OnHoldTime = "onholdtime";
			public const string OriginatingCaseId = "originatingcaseid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Pager = "pager";
			public const string ParentAccountId = "parentaccountid";
			public const string ParentContactId = "parentcontactid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PreferredContactMethodCode = "preferredcontactmethodcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string PurchaseProcess = "purchaseprocess";
			public const string PurchaseTimeFrame = "purchasetimeframe";
			public const string QualificationComments = "qualificationcomments";
			public const string QualifyingOpportunityId = "qualifyingopportunityid";
			public const string RelatedObjectId = "relatedobjectid";
			public const string Revenue = "revenue";
			public const string Revenue_Base = "revenue_base";
			public const string SalesStage = "salesstage";
			public const string SalesStageCode = "salesstagecode";
			public const string Salutation = "salutation";
			public const string ScheduleFollowUp_Prospect = "schedulefollowup_prospect";
			public const string ScheduleFollowUp_Qualify = "schedulefollowup_qualify";
			public const string SIC = "sic";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subject = "subject";
			public const string TeamsFollowed = "teamsfollowed";
			public const string Telephone1 = "telephone1";
			public const string Telephone2 = "telephone2";
			public const string Telephone3 = "telephone3";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteUrl = "websiteurl";
			public const string YomiCompanyName = "yomicompanyname";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}
		public const string EntityLogicalName = "lead";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4;
		public const string EntityCollectionSchemaName = "Leads";
		public const string EntityDisplayCollectionName = "Leads";
		public const string DisplayName = "Lead";
		public const string EntitySetName = "leads";
		public const string EntityLogicalCollectionName = "leads";
		public const string EntityPrimaryIdAttribute = "leadid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "fullname";
		public const string EntitySchemaName = "Lead";
		[DebuggerNonUserCode()]
		public Lead()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Lead(Guid LeadId)
		{
			Entity = new Entity(EntityLogicalName, LeadId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Lead(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Lead"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Lead(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Lead"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Lead(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Lead(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Lead"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Lead(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Lead(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Lead(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Unique identifier of the account with which the lead is associated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Address Type</para>
		/// <para><strong>Description</strong>: Select the primary address type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Description</strong>: Type the city for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1</para>
		/// <para><strong>Description</strong>: Shows the complete primary address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region</para>
		/// <para><strong>Description</strong>: Type the country or region for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: County</para>
		/// <para><strong>Description</strong>: Type the county for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Latitude</para>
		/// <para><strong>Description</strong>: Type the latitude value for the primary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 1</para>
		/// <para><strong>Description</strong>: Type the first line of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 2</para>
		/// <para><strong>Description</strong>: Type the second line of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 3</para>
		/// <para><strong>Description</strong>: Type the third line of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Longitude</para>
		/// <para><strong>Description</strong>: Type the longitude value for the primary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: Type the ZIP Code or postal code for the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Post Office Box</para>
		/// <para><strong>Description</strong>: Type the post office box number of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State/Province</para>
		/// <para><strong>Description</strong>: Type the state or province of the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Telephone 1</para>
		/// <para><strong>Description</strong>: Type the main phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Telephone 2</para>
		/// <para><strong>Description</strong>: Type a second phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Telephone 3</para>
		/// <para><strong>Description</strong>: Type a third phone number associated with the primary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UPS Zone</para>
		/// <para><strong>Description</strong>: Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UTC Offset</para>
		/// <para><strong>Description</strong>: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Address Type</para>
		/// <para><strong>Description</strong>: Select the secondary address type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: City</para>
		/// <para><strong>Description</strong>: Type the city for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2</para>
		/// <para><strong>Description</strong>: Shows the complete secondary address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Country/Region</para>
		/// <para><strong>Description</strong>: Type the country or region for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: County</para>
		/// <para><strong>Description</strong>: Type the county for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Latitude</para>
		/// <para><strong>Description</strong>: Type the latitude value for the secondary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Street 1</para>
		/// <para><strong>Description</strong>: Type the first line of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Street 2</para>
		/// <para><strong>Description</strong>: Type the second line of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Street 3</para>
		/// <para><strong>Description</strong>: Type the third line of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Longitude</para>
		/// <para><strong>Description</strong>: Type the longitude value for the secondary address for use in mapping and other applications.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: Type the ZIP Code or postal code for the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Post Office Box</para>
		/// <para><strong>Description</strong>: Type the post office box number of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: State/Province</para>
		/// <para><strong>Description</strong>: Type the state or province of the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 1</para>
		/// <para><strong>Description</strong>: Type the main phone number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 2</para>
		/// <para><strong>Description</strong>: Type a second phone number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 3</para>
		/// <para><strong>Description</strong>: Type a third phone number associated with the secondary address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UPS Zone</para>
		/// <para><strong>Description</strong>: Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UTC Offset</para>
		/// <para><strong>Description</strong>: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget Amount</para>
		/// <para><strong>Description</strong>: Information about the budget amount of the lead&apos;s company or organization.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BudgetAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Budget Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget</para>
		/// <para><strong>Description</strong>: Information about the budget status of the lead&apos;s company or organization.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.BudgetStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.BudgetStatus? BudgetStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BudgetStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.BudgetStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BudgetStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Card</para>
		/// <para><strong>Description</strong>: Stores Image of the Business Card</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCard
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCard); }
			set { Entity.Attributes[Fields.BusinessCard] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BusinessCardAttributes</para>
		/// <para><strong>Description</strong>: Stores Business Card Control Properties.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BusinessCardAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.BusinessCardAttributes); }
			set { Entity.Attributes[Fields.BusinessCardAttributes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Campaign</para>
		/// <para><strong>Description</strong>: Choose the campaign that the lead was generated from to track the effectiveness of marketing campaigns and identify  communications received by the lead.</para>
		/// <para><strong>Lookup</strong>: <see cref="campaign"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignId); }
			set { Entity.Attributes[Fields.CampaignId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company Name</para>
		/// <para><strong>Description</strong>: Type the name of the company associated with the lead. This becomes the account name when the lead is qualified and converted to a customer account.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CompanyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CompanyName); }
			set { Entity.Attributes[Fields.CompanyName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirm Interest</para>
		/// <para><strong>Description</strong>: Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConfirmInterest
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConfirmInterest); }
			set { Entity.Attributes[Fields.ConfirmInterest] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Unique identifier of the contact with which the lead is associated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Description</strong>: Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decision Maker?</para>
		/// <para><strong>Description</strong>: Select whether your notes include information about who makes the purchase decisions at the lead&apos;s company.</para>
		/// <para><strong>Two Option</strong> - [<strong>completed</strong>]: true - [<strong>mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DecisionMaker
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DecisionMaker); }
			set { Entity.Attributes[Fields.DecisionMaker] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the lead, such as an excerpt from the company&apos;s website.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Bulk Emails</para>
		/// <para><strong>Description</strong>: Select whether the lead accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the lead can be added to marketing lists, but will be excluded from the email.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotBulkEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotBulkEMail); }
			set { Entity.Attributes[Fields.DoNotBulkEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Emails</para>
		/// <para><strong>Description</strong>: Select whether the lead allows direct email sent from Microsoft Dynamics 365.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotEMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotEMail); }
			set { Entity.Attributes[Fields.DoNotEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Faxes</para>
		/// <para><strong>Description</strong>: Select whether the lead allows faxes.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotFax
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotFax); }
			set { Entity.Attributes[Fields.DoNotFax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Phone Calls</para>
		/// <para><strong>Description</strong>: Select whether the lead allows phone calls.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPhone
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPhone); }
			set { Entity.Attributes[Fields.DoNotPhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do not allow Mails</para>
		/// <para><strong>Description</strong>: Select whether the lead allows direct mail.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Allow</strong>]: true - [<strong>Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotPostalMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotPostalMail); }
			set { Entity.Attributes[Fields.DoNotPostalMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing Material</para>
		/// <para><strong>Description</strong>: Select whether the lead accepts marketing materials, such as brochures or catalogs. Leads that opt out can be excluded from marketing initiatives.</para>
		/// <para><strong>Two Option</strong> - [<strong>Do Not Send</strong>]: true - [<strong>Send</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Send</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DoNotSendMM
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DoNotSendMM); }
			set { Entity.Attributes[Fields.DoNotSendMM] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Type the primary email address for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress1
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress1); }
			set { Entity.Attributes[Fields.EMailAddress1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address 2</para>
		/// <para><strong>Description</strong>: Type the secondary email address for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress2); }
			set { Entity.Attributes[Fields.EMailAddress2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address 3</para>
		/// <para><strong>Description</strong>: Type a third email address for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress3
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress3); }
			set { Entity.Attributes[Fields.EMailAddress3] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. Value</para>
		/// <para><strong>Description</strong>: Type the estimated revenue value that this lead will generate to assist in sales forecasting and planning.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EstimatedAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.EstimatedAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. Value (Base)</para>
		/// <para><strong>Description</strong>: Value of the Est. Value in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. Close Date</para>
		/// <para><strong>Description</strong>: Enter the expected close date for the lead, so that the sales team can schedule timely follow-up meetings to move the prospect to the next sales stage.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? EstimatedCloseDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.EstimatedCloseDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.EstimatedCloseDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.EstimatedCloseDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. Value (deprecated)</para>
		/// <para><strong>Description</strong>: Type a numeric value of the lead&apos;s estimated value, such as a product quantity, if no revenue amount can be specified in the Est. Value field. This can be used for sales forecasting and planning.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? EstimatedValue
		{
			get { return Entity.GetAttributeValue<double?>(Fields.EstimatedValue); }
			set { Entity.Attributes[Fields.EstimatedValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluate Fit</para>
		/// <para><strong>Description</strong>: Select whether the fit between the lead&apos;s requirements and your offerings was evaluated.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EvaluateFit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EvaluateFit); }
			set { Entity.Attributes[Fields.EvaluateFit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Description</strong>: Type the fax number for the primary contact for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Fax); }
			set { Entity.Attributes[Fields.Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Name</para>
		/// <para><strong>Description</strong>: Type the first name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow Email Activity</para>
		/// <para><strong>Description</strong>: Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the lead.</para>
		/// <para><strong>Two Option</strong> - [<strong>Allow</strong>]: true - [<strong>Do Not Allow</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Allow</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FollowEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FollowEmail); }
			set { Entity.Attributes[Fields.FollowEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Combines and shows the lead&apos;s first and last names so the full name can be displayed in views and reports.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Industry</para>
		/// <para><strong>Description</strong>: Select the primary industry in which the lead&apos;s business is focused, for use in marketing segmentation and demographic analysis.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.IndustryCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.IndustryCode? IndustryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IndustryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.IndustryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IndustryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IndustryCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Communication</para>
		/// <para><strong>Description</strong>: Choose whether someone from the sales team contacted this lead earlier.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.InitialCommunication"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.InitialCommunication? InitialCommunication
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialCommunication);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.InitialCommunication)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialCommunication] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialCommunication] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-created</para>
		/// <para><strong>Description</strong>: Information about whether the contact was auto-created when promoting an email or an appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAutoCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAutoCreate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Private</para>
		/// <para><strong>Description</strong>: Indicates whether the lead is private or visible to the entire organization.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Job Title</para>
		/// <para><strong>Description</strong>: Type the job title of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Name</para>
		/// <para><strong>Description</strong>: Type the last name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date and time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Campaign Date</para>
		/// <para><strong>Description</strong>: Shows the date when the lead was last included in a marketing campaign or quick campaign.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastUsedInCampaignUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastUsedInCampaign); }
			set { Entity.Attributes[Fields.LastUsedInCampaign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Description</strong>: Unique identifier of the lead.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid LeadId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.LeadId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating</para>
		/// <para><strong>Description</strong>: Select a rating value to indicate the lead&apos;s potential to become a customer.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.LeadQualityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.LeadQualityCode.Warm"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.LeadQualityCode? LeadQualityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadQualityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.LeadQualityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LeadQualityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LeadQualityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead Source</para>
		/// <para><strong>Description</strong>: Select the primary marketing source that prompted the lead to contact you.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.LeadSourceCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.LeadSourceCode? LeadSourceCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LeadSourceCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.LeadSourceCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LeadSourceCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LeadSourceCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Master ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the master lead for merge.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MasterId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MasterId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merged</para>
		/// <para><strong>Description</strong>: Tells whether the lead has been merged with another lead.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Merged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Merged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Middle Name</para>
		/// <para><strong>Description</strong>: Type the middle name or initial of the primary contact for the lead to make sure the prospect is addressed correctly.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Phone</para>
		/// <para><strong>Description</strong>: Type the mobile phone number for the primary contact for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR Optout</para>
		/// <para><strong>Description</strong>: Describes whether lead is opted out or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Lead Grade</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadGrade"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadGrade? msdyn_LeadGrade
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LeadGrade);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadGrade)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LeadGrade] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LeadGrade] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI</para>
		/// <para><strong>Description</strong>: LeadKPIId</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_leadkpiitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_leadkpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_leadkpiid); }
			set { Entity.Attributes[Fields.msdyn_leadkpiid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Lead Score</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_LeadScore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_LeadScore); }
			set { Entity.Attributes[Fields.msdyn_LeadScore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Lead Score Trend</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadScoreTrend"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadScoreTrend? msdyn_LeadScoreTrend
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LeadScoreTrend);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_LeadScoreTrend)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LeadScoreTrend] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LeadScoreTrend] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Whether the Opportunity created when qualifying this Lead is for an Item- based or a Work-based sale</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_ordertype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_ordertype.Item_based"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_ordertype? msdyn_ordertype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ordertype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_ordertype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ordertype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ordertype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Predictive Score</para>
		/// <para><strong>Description</strong>: Predictive score</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_predictivescore"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PredictiveScoreId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PredictiveScoreId); }
			set { Entity.Attributes[Fields.msdyn_PredictiveScoreId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Rule Result</para>
		/// <para><strong>Description</strong>: Result of the assignment rule process</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_salesassignmentresult"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_salesassignmentresult? msdyn_salesassignmentresult
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesassignmentresult);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyn_salesassignmentresult)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesassignmentresult] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesassignmentresult] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Score History</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreHistory
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreHistory); }
			set { Entity.Attributes[Fields.msdyn_ScoreHistory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Score Reasons</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreReasons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreReasons); }
			set { Entity.Attributes[Fields.msdyn_ScoreReasons] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Segment associated with Lead.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_code
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_code); }
			set { Entity.Attributes[Fields.msdyncrm_code] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Company size</para>
		/// <para><strong>Description</strong>: Enter the size of the company the lead belongs to</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_companysize
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_companysize); }
			set { Entity.Attributes[Fields.msdyncrm_companysize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Contactid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Contactid); }
			set { Entity.Attributes[Fields.msdyncrm_Contactid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source customer journey (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_customerjourney"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_customerjourneyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_customerjourneyid); }
			set { Entity.Attributes[Fields.msdyncrm_customerjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Degree</para>
		/// <para><strong>Description</strong>: Enter the highest education level achieved</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_degree
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_degree); }
			set { Entity.Attributes[Fields.msdyncrm_degree] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source email (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_emailid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_emailid); }
			set { Entity.Attributes[Fields.msdyncrm_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field of study</para>
		/// <para><strong>Description</strong>: Enter the lead&apos;s field of study</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_fieldofstudy
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_fieldofstudy); }
			set { Entity.Attributes[Fields.msdyncrm_fieldofstudy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Graduation date</para>
		/// <para><strong>Description</strong>: Enter the lead&apos;s graduation date from the last school or university</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_graduationdate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_graduationdate); }
			set { Entity.Attributes[Fields.msdyncrm_graduationdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Industry</para>
		/// <para><strong>Description</strong>: Enter the industry the lead belongs to</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_industry
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_industry); }
			set { Entity.Attributes[Fields.msdyncrm_industry] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_insights_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_insights_placeholder); }
			set { Entity.Attributes[Fields.msdyncrm_insights_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Job function</para>
		/// <para><strong>Description</strong>: Enter the lead&apos;s job function</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_jobfunction
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_jobfunction); }
			set { Entity.Attributes[Fields.msdyncrm_jobfunction] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latest Form Submission Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_latestsubmissiondateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_latestsubmissiondate); }
			set { Entity.Attributes[Fields.msdyncrm_latestsubmissiondate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Leadid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Leadid); }
			set { Entity.Attributes[Fields.msdyncrm_Leadid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead source type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.msdyncrm_leadsourcetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.msdyncrm_leadsourcetype? msdyncrm_leadsourcetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_leadsourcetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.msdyncrm_leadsourcetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_leadsourcetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_leadsourcetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Campaign</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_linkedincampaign"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_LinkedInCampaign
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_LinkedInCampaign); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInCampaign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Form Submissions</para>
		/// <para><strong>Description</strong>: Number of submissions by this lead</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_linkedinsubmissioncount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_linkedinsubmissioncount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Form Submissions (Last Updated On)</para>
		/// <para><strong>Description</strong>: Last Updated time of rollup field LinkedIn Form Submissions.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_linkedinsubmissioncount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_linkedinsubmissioncount_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Form Submissions (State)</para>
		/// <para><strong>Description</strong>: State of rollup field LinkedIn Form Submissions.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_linkedinsubmissioncount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_linkedinsubmissioncount_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source form (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingformid); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: timestamp of form submission (outbound marketing)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marketingformsubmissiondateprecise
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marketingformsubmissiondateprecise); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformsubmissiondateprecise] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source landing page (outbound marketing)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingpageid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingpageid); }
			set { Entity.Attributes[Fields.msdyncrm_marketingpageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Profileid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Profileid); }
			set { Entity.Attributes[Fields.msdyncrm_Profileid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase need</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_PurchaseNeed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_PurchaseNeed); }
			set { Entity.Attributes[Fields.msdyncrm_PurchaseNeed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recycled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_Recycled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_Recycled); }
			set { Entity.Attributes[Fields.msdyncrm_Recycled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales accepted</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_SalesAccepted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_SalesAccepted); }
			set { Entity.Attributes[Fields.msdyncrm_SalesAccepted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales ready</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_SalesReady
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_SalesReady); }
			set { Entity.Attributes[Fields.msdyncrm_SalesReady] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SAS token</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_sasToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_sasToken); }
			set { Entity.Attributes[Fields.msdyncrm_sasToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: School</para>
		/// <para><strong>Description</strong>: Enter the last school or university attended</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_school
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_school); }
			set { Entity.Attributes[Fields.msdyncrm_school] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scores</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_scores
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_scores); }
			set { Entity.Attributes[Fields.msdyncrm_scores] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scoring grade</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_scoringgrade
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_scoringgrade); }
			set { Entity.Attributes[Fields.msdyncrm_scoringgrade] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Seniority</para>
		/// <para><strong>Description</strong>: Enter the lead&apos;s seniority in their organization</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_seniority
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_seniority); }
			set { Entity.Attributes[Fields.msdyncrm_seniority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source LinkedIn Form</para>
		/// <para><strong>Description</strong>: LinkedIn form this lead came from</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_linkedinform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_sourceform
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_sourceform); }
			set { Entity.Attributes[Fields.msdyncrm_sourceform] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start date</para>
		/// <para><strong>Description</strong>: Enter the start date for the last school or university</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_startdate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_startdate); }
			set { Entity.Attributes[Fields.msdyncrm_startdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Teleprospecting accepted</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_TeleProspectAccepted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_TeleProspectAccepted); }
			set { Entity.Attributes[Fields.msdyncrm_TeleProspectAccepted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Teleprospecting ready</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_TeleProspectReady
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_TeleProspectReady); }
			set { Entity.Attributes[Fields.msdyncrm_TeleProspectReady] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recycle</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_TriggerRecycle
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_TriggerRecycle); }
			set { Entity.Attributes[Fields.msdyncrm_TriggerRecycle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source customer journey</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_journey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_customerjourneyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_customerjourneyid); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source email</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_emailid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_emailid); }
			set { Entity.Attributes[Fields.msdynmkt_emailid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Ready Set Manually</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_issalesreadysetmanually
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_issalesreadysetmanually); }
			set { Entity.Attributes[Fields.msdynmkt_issalesreadysetmanually] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Action Id</para>
		/// <para><strong>Description</strong>: The Journey action id in which the lead is created.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_JourneyActionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_JourneyActionId); }
			set { Entity.Attributes[Fields.msdynmkt_JourneyActionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source form</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_marketingformid); }
			set { Entity.Attributes[Fields.msdynmkt_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating event</para>
		/// <para><strong>Description</strong>: For leads created by registering for an event in Microsoft Dynamics 365, this identifies the relevant event. This is used to relate the lead to the data on the originating event.</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_event"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_originatingeventid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_originatingeventid); }
			set { Entity.Attributes[Fields.msevtmgt_originatingeventid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Need</para>
		/// <para><strong>Description</strong>: Choose how high the level of need is for the lead&apos;s company.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.Need"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.Need? Need
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Need);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.Need)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Need] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Need] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: No. of Employees</para>
		/// <para><strong>Description</strong>: Type the number of employees that work at the company associated with the lead, for use in marketing segmentation and demographic analysis.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfEmployees
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfEmployees); }
			set { Entity.Attributes[Fields.NumberOfEmployees] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows how long, in minutes, that the record was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating Case</para>
		/// <para><strong>Description</strong>: This attribute is used for Sample Service Business Processes.</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingCaseId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingCaseId); }
			set { Entity.Attributes[Fields.OriginatingCaseId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pager</para>
		/// <para><strong>Description</strong>: Type the pager number for the primary contact for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Pager
		{
			get { return Entity.GetAttributeValue<string>(Fields.Pager); }
			set { Entity.Attributes[Fields.Pager] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Account for lead</para>
		/// <para><strong>Description</strong>: Choose an account to connect this lead to, so that the relationship is visible in reports and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
			set { Entity.Attributes[Fields.ParentAccountId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Contact for lead</para>
		/// <para><strong>Description</strong>: Choose a contact to connect this lead to, so that the relationship is visible in reports and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
			set { Entity.Attributes[Fields.ParentContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Participates in Workflow</para>
		/// <para><strong>Description</strong>: Shows whether the lead participates in workflow rules.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Method of Contact</para>
		/// <para><strong>Description</strong>: Select the preferred method of contact.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.PreferredContactMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.PreferredContactMethodCode.Any"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PreferredContactMethodCode? PreferredContactMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredContactMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PreferredContactMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredContactMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredContactMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.PriorityCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Process</para>
		/// <para><strong>Description</strong>: Choose whether an individual or a committee will be involved in the  purchase process for the lead.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseProcess"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseProcess? PurchaseProcess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseProcess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseProcess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseProcess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseProcess] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Timeframe</para>
		/// <para><strong>Description</strong>: Choose how long the lead will likely take to make the purchase, so the sales team will be aware.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseTimeFrame"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseTimeFrame? PurchaseTimeFrame
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseTimeFrame);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.PurchaseTimeFrame)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseTimeFrame] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseTimeFrame] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualification Comments</para>
		/// <para><strong>Description</strong>: Type comments about the qualification or scoring of the lead.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QualificationComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.QualificationComments); }
			set { Entity.Attributes[Fields.QualificationComments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualifying Opportunity</para>
		/// <para><strong>Description</strong>: Choose the opportunity that the lead was qualified on and then converted to.</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QualifyingOpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QualifyingOpportunityId); }
			set { Entity.Attributes[Fields.QualifyingOpportunityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related Campaign Response</para>
		/// <para><strong>Description</strong>: Related Campaign Response.</para>
		/// <para><strong>Lookup</strong>: <see cref="campaignresponse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RelatedObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RelatedObjectId); }
			set { Entity.Attributes[Fields.RelatedObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Annual Revenue</para>
		/// <para><strong>Description</strong>: Type the annual revenue of the company associated with the lead to provide an understanding of the prospect&apos;s business.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Revenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Revenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Annual Revenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the Annual Revenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Revenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Revenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Stage</para>
		/// <para><strong>Description</strong>: Select the sales stage of this lead to aid the sales team in their efforts to convert this lead to an opportunity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStage? SalesStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Stage Code</para>
		/// <para><strong>Description</strong>: Select the sales process stage for the lead to help determine the probability of the lead converting to an opportunity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStageCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStageCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStageCode? SalesStageCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStageCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.SalesStageCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStageCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStageCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Salutation</para>
		/// <para><strong>Description</strong>: Type the salutation of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule Follow Up (Prospect)</para>
		/// <para><strong>Description</strong>: Enter the date and time of the prospecting follow-up meeting with the lead.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowUp_ProspectUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowUp_Prospect); }
			set { Entity.Attributes[Fields.ScheduleFollowUp_Prospect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule Follow Up (Qualify)</para>
		/// <para><strong>Description</strong>: Enter the date and time of the qualifying follow-up meeting with the lead.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowUp_QualifyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowUp_Qualify); }
			set { Entity.Attributes[Fields.ScheduleFollowUp_Qualify] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SIC Code</para>
		/// <para><strong>Description</strong>: Type the Standard Industrial Classification (SIC) code that indicates the lead&apos;s primary industry of business for use in marketing segmentation and demographic analysis.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SIC
		{
			get { return Entity.GetAttributeValue<string>(Fields.SIC); }
			set { Entity.Attributes[Fields.SIC] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the Lead record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the lead is open, qualified, or disqualified. Qualified and disqualified leads are read-only and can&apos;t be edited unless they are reactivated.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.StateCode.Open"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the lead&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.LeadOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.LeadOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.LeadOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Topic</para>
		/// <para><strong>Description</strong>: Type a subject or descriptive name, such as the expected order, company name, or marketing source list, to identify the lead.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TeamsFollowed</para>
		/// <para><strong>Description</strong>: Number of users or conversations followed the record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TeamsFollowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TeamsFollowed); }
			set { Entity.Attributes[Fields.TeamsFollowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Phone</para>
		/// <para><strong>Description</strong>: Type the work phone number for the primary contact for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone1); }
			set { Entity.Attributes[Fields.Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Home Phone</para>
		/// <para><strong>Description</strong>: Type the home phone number for the primary contact for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone2); }
			set { Entity.Attributes[Fields.Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Phone</para>
		/// <para><strong>Description</strong>: Type an alternate phone number for the primary contact for the lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Telephone3); }
			set { Entity.Attributes[Fields.Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Spent by me</para>
		/// <para><strong>Description</strong>: Total time spent for emails (read and write) and meetings by me in relation to the lead record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Type the website URL for the company associated with this lead.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
			set { Entity.Attributes[Fields.WebSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Company Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the lead&apos;s company name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiCompanyName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiCompanyName); }
			set { Entity.Attributes[Fields.YomiCompanyName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi First Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the lead&apos;s first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Full Name</para>
		/// <para><strong>Description</strong>: Combines and shows the lead&apos;s Yomi first and last names so the full phonetic name can be displayed in views and reports.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Last Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the lead&apos;s last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Middle Name</para>
		/// <para><strong>Description</strong>: Type the phonetic spelling of the lead&apos;s middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}