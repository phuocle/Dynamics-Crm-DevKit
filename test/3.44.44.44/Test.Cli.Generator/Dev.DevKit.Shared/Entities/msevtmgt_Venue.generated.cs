//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets
{
	public enum msevtmgt_AccessibleToilets
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_DisabledAccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_DisabledParking
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_PublicTelephoneAvailable
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_WifiAvailable
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_Venue : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msevtmgt_AccessibleToilets = "msevtmgt_accessibletoilets";
			public const string msevtmgt_AdditionalFacilities = "msevtmgt_additionalfacilities";
			public const string msevtmgt_AddressComposite = "msevtmgt_addresscomposite";
			public const string msevtmgt_AddressLine1 = "msevtmgt_addressline1";
			public const string msevtmgt_AddressLine2 = "msevtmgt_addressline2";
			public const string msevtmgt_AddressLine3 = "msevtmgt_addressline3";
			public const string msevtmgt_BuildingId = "msevtmgt_buildingid";
			public const string msevtmgt_City = "msevtmgt_city";
			public const string msevtmgt_Cost = "msevtmgt_cost";
			public const string msevtmgt_cost_Base = "msevtmgt_cost_base";
			public const string msevtmgt_Country = "msevtmgt_country";
			public const string msevtmgt_Description = "msevtmgt_description";
			public const string msevtmgt_DisabledAccess = "msevtmgt_disabledaccess";
			public const string msevtmgt_DisabledParking = "msevtmgt_disabledparking";
			public const string msevtmgt_Email = "msevtmgt_email";
			public const string msevtmgt_EstCapacity = "msevtmgt_estcapacity";
			public const string msevtmgt_layoutId = "msevtmgt_layoutid";
			public const string msevtmgt_Name = "msevtmgt_name";
			public const string msevtmgt_ParentVenueId = "msevtmgt_parentvenueid";
			public const string msevtmgt_PostalCode = "msevtmgt_postalcode";
			public const string msevtmgt_PrimaryContact = "msevtmgt_primarycontact";
			public const string msevtmgt_PublicTelephoneAvailable = "msevtmgt_publictelephoneavailable";
			public const string msevtmgt_RoomId = "msevtmgt_roomid";
			public const string msevtmgt_StateProvince = "msevtmgt_stateprovince";
			public const string msevtmgt_Telephone1 = "msevtmgt_telephone1";
			public const string msevtmgt_Telephone2 = "msevtmgt_telephone2";
			public const string msevtmgt_Telephone3 = "msevtmgt_telephone3";
			public const string msevtmgt_TransactionCurrencyId = "msevtmgt_transactioncurrencyid";
			public const string msevtmgt_VenueId = "msevtmgt_venueid";
			public const string msevtmgt_Website = "msevtmgt_website";
			public const string msevtmgt_WifiAvailable = "msevtmgt_wifiavailable";
			public const string msevtmgt_WifiPassword = "msevtmgt_wifipassword";
			public const string msevtmgt_WifiSSID = "msevtmgt_wifissid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_venue";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11121;
		public const string EntityCollectionSchemaName = "msevtmgt_Venues";
		public const string EntityDisplayCollectionName = "Venues";
		public const string DisplayName = "Venue";
		public const string EntitySetName = "msevtmgt_venues";
		public const string EntityLogicalCollectionName = "msevtmgt_venues";
		public const string EntityPrimaryIdAttribute = "msevtmgt_venueid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_Venue";
		[DebuggerNonUserCode()]
		public msevtmgt_Venue()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Venue(Guid msevtmgt_VenueId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_VenueId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Venue(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Venue"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_Venue(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Venue"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_Venue(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_Venue(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Venue"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_Venue(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_Venue(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Venue(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange rate</para>
		/// <para><strong>Description</strong>: Exchange rate between the base currency and the currency associated with the entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accessible toilets</para>
		/// <para><strong>Description</strong>: Indicates whether accessbile toilets are available for disabled people at this location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_AccessibleToilets"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_AccessibleToilets? msevtmgt_AccessibleToilets
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_AccessibleToilets);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_AccessibleToilets)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_AccessibleToilets] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_AccessibleToilets] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional facilities</para>
		/// <para><strong>Description</strong>: Additional facilities that aren&apos;t covered by the available options</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AdditionalFacilities
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AdditionalFacilities); }
			set { Entity.Attributes[Fields.msevtmgt_AdditionalFacilities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address composite</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AddressComposite
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AddressComposite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address line 1</para>
		/// <para><strong>Description</strong>: Address (not including city, country/region, state or province, or postal code)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AddressLine1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AddressLine1); }
			set { Entity.Attributes[Fields.msevtmgt_AddressLine1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address line 2</para>
		/// <para><strong>Description</strong>: Additional address details</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AddressLine2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AddressLine2); }
			set { Entity.Attributes[Fields.msevtmgt_AddressLine2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address line 3</para>
		/// <para><strong>Description</strong>: Additional address details</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AddressLine3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AddressLine3); }
			set { Entity.Attributes[Fields.msevtmgt_AddressLine3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Building</para>
		/// <para><strong>Description</strong>: Unique identifier for the building associated with the venue</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_building"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_BuildingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_BuildingId); }
			set { Entity.Attributes[Fields.msevtmgt_BuildingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Description</strong>: The city of the address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_City); }
			set { Entity.Attributes[Fields.msevtmgt_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost</para>
		/// <para><strong>Description</strong>: Cost of the venue</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_Cost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_Cost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_Cost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_Cost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost (base)</para>
		/// <para><strong>Description</strong>: Value of the cost (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_cost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_cost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/region</para>
		/// <para><strong>Description</strong>: The country or region of the address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Country); }
			set { Entity.Attributes[Fields.msevtmgt_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the venue</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Description); }
			set { Entity.Attributes[Fields.msevtmgt_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled access</para>
		/// <para><strong>Description</strong>: Indicates whether this location provides easy access for disabled people</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_DisabledAccess"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_DisabledAccess? msevtmgt_DisabledAccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_DisabledAccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_DisabledAccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_DisabledAccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_DisabledAccess] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable parking</para>
		/// <para><strong>Description</strong>: Indicates wheter special parking for disabled people is available at this location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_DisabledParking"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_DisabledParking? msevtmgt_DisabledParking
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_DisabledParking);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_DisabledParking)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_DisabledParking] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_DisabledParking] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Email to contact the venue</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Email
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Email); }
			set { Entity.Attributes[Fields.msevtmgt_Email] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. capacity</para>
		/// <para><strong>Description</strong>: Estimated capacity of the venue</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_EstCapacity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_EstCapacity); }
			set { Entity.Attributes[Fields.msevtmgt_EstCapacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Layout</para>
		/// <para><strong>Description</strong>: Unique identifier for the layout associated with the venue</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_layout"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_layoutId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_layoutId); }
			set { Entity.Attributes[Fields.msevtmgt_layoutId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Name); }
			set { Entity.Attributes[Fields.msevtmgt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent venue</para>
		/// <para><strong>Description</strong>: Unique identifier for the venue associated with the venue</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_venue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_ParentVenueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_ParentVenueId); }
			set { Entity.Attributes[Fields.msevtmgt_ParentVenueId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Postal Code</para>
		/// <para><strong>Description</strong>: The postal code of the address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_PostalCode); }
			set { Entity.Attributes[Fields.msevtmgt_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary contact</para>
		/// <para><strong>Description</strong>: A person who is responsible for the venue</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_PrimaryContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_PrimaryContact); }
			set { Entity.Attributes[Fields.msevtmgt_PrimaryContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Public telephone available</para>
		/// <para><strong>Description</strong>: Indicates whether public telephones are available at this location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_PublicTelephoneAvailable"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_PublicTelephoneAvailable? msevtmgt_PublicTelephoneAvailable
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PublicTelephoneAvailable);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_PublicTelephoneAvailable)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PublicTelephoneAvailable] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PublicTelephoneAvailable] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Room</para>
		/// <para><strong>Description</strong>: Unique identifier for the room associated with the venue</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_room"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_RoomId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_RoomId); }
			set { Entity.Attributes[Fields.msevtmgt_RoomId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State/province</para>
		/// <para><strong>Description</strong>: The state or province of the address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_StateProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_StateProvince); }
			set { Entity.Attributes[Fields.msevtmgt_StateProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Telephone 1</para>
		/// <para><strong>Description</strong>: A telephone number for contacting the venue</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Telephone1); }
			set { Entity.Attributes[Fields.msevtmgt_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Telephone 2</para>
		/// <para><strong>Description</strong>: A telephone number for contacting the venue</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Telephone2); }
			set { Entity.Attributes[Fields.msevtmgt_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Telephone 3</para>
		/// <para><strong>Description</strong>: A telephone number for contacting the venue</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Telephone3); }
			set { Entity.Attributes[Fields.msevtmgt_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_TransactionCurrencyId); }
			set { Entity.Attributes[Fields.msevtmgt_TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Venue</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_VenueId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_VenueId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Website for contacting the venue</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Website
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Website); }
			set { Entity.Attributes[Fields.msevtmgt_Website] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: WiFi available</para>
		/// <para><strong>Description</strong>: Indicates whether WiFi is available at this location.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_WifiAvailable"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_WifiAvailable? msevtmgt_WifiAvailable
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_WifiAvailable);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.msevtmgt_WifiAvailable)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_WifiAvailable] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_WifiAvailable] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: WiFi password</para>
		/// <para><strong>Description</strong>: Only store public WiFi passwords in this field; do not save internal passwords here</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_WifiPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_WifiPassword); }
			set { Entity.Attributes[Fields.msevtmgt_WifiPassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: WiFi SSID</para>
		/// <para><strong>Description</strong>: The service set identifier (network name) of the WiFi network</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_WifiSSID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_WifiSSID); }
			set { Entity.Attributes[Fields.msevtmgt_WifiSSID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the venue</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the venue</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_VenueOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}