//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets
{
	public enum msdyncrm_externalsource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Insight</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Customer_Insight = 192_350_000
	}
	public enum msdyncrm_querytype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Interaction based</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Interaction_based = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile based</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Profile_based = 192_350_001
	}
	public enum msdyncrm_scope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Business unit</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Business_unit = 270_100_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		Organization = 270_100_000
	}
	public enum msdyncrm_segmentactivationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Active = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Disabled = 192_350_001
	}
	public enum msdyncrm_segmenttype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Compound segment</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Compound_segment = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamic segment</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Dynamic_segment = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Static segment</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Static_segment = 192_350_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Error = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Expired = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Going_live = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live editable</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live_editable = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopped = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopping = 192_350_007
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_segment : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_description = "msdyncrm_description";
			public const string msdyncrm_externalsegmenturl = "msdyncrm_externalsegmenturl";
			public const string msdyncrm_externalsource = "msdyncrm_externalsource";
			public const string msdyncrm_islive = "msdyncrm_islive";
			public const string msdyncrm_lastevaluationtime = "msdyncrm_lastevaluationtime";
			public const string msdyncrm_lastupdatedtime = "msdyncrm_lastupdatedtime";
			public const string msdyncrm_nextevaluation = "msdyncrm_nextevaluation";
			public const string msdyncrm_querytype = "msdyncrm_querytype";
			public const string msdyncrm_scope = "msdyncrm_scope";
			public const string msdyncrm_segmentactivationstatus = "msdyncrm_segmentactivationstatus";
			public const string msdyncrm_segmentevaluationdurationinminutes = "msdyncrm_segmentevaluationdurationinminutes";
			public const string msdyncrm_segmentevaluationstate = "msdyncrm_segmentevaluationstate";
			public const string msdyncrm_segmentevaluationtype = "msdyncrm_segmentevaluationtype";
			public const string msdyncrm_segmentfilterquery = "msdyncrm_segmentfilterquery";
			public const string msdyncrm_segmentId = "msdyncrm_segmentid";
			public const string msdyncrm_segmentmemberids = "msdyncrm_segmentmemberids";
			public const string msdyncrm_segmentname = "msdyncrm_segmentname";
			public const string msdyncrm_segmentnameview = "msdyncrm_segmentnameview";
			public const string msdyncrm_segmentprovisioningstate = "msdyncrm_segmentprovisioningstate";
			public const string msdyncrm_segmentquery = "msdyncrm_segmentquery";
			public const string msdyncrm_segmentqueryname = "msdyncrm_segmentqueryname";
			public const string msdyncrm_segmentrefreshrateintervalminutes = "msdyncrm_segmentrefreshrateintervalminutes";
			public const string msdyncrm_segmentsize = "msdyncrm_segmentsize";
			public const string msdyncrm_segmenttargetprofiletypename = "msdyncrm_segmenttargetprofiletypename";
			public const string msdyncrm_SegmentTemplate = "msdyncrm_segmenttemplate";
			public const string msdyncrm_segmenttimezone = "msdyncrm_segmenttimezone";
			public const string msdyncrm_segmenttype = "msdyncrm_segmenttype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_segment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11179;
		public const string EntityCollectionSchemaName = "msdyncrm_segments";
		public const string EntityDisplayCollectionName = "Segments";
		public const string DisplayName = "Segment";
		public const string EntitySetName = "msdyncrm_segments";
		public const string EntityLogicalCollectionName = "msdyncrm_segments";
		public const string EntityPrimaryIdAttribute = "msdyncrm_segmentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_segmentname";
		public const string EntitySchemaName = "msdyncrm_segment";
		[DebuggerNonUserCode()]
		public msdyncrm_segment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_segment(Guid msdyncrm_segmentId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_segmentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_segment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_segment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_segment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_segment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_segment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_segment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_segment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_segment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_segment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_segment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: The segment description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_description); }
			set { Entity.Attributes[Fields.msdyncrm_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Segment URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_externalsegmenturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_externalsegmenturl); }
			set { Entity.Attributes[Fields.msdyncrm_externalsegmenturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Source</para>
		/// <para><strong>Description</strong>: External Source</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_externalsource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_externalsource? msdyncrm_externalsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_externalsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_externalsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_externalsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_externalsource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: flag to check that the segment is live</para>
		/// <para><strong>Description</strong>: flag to check that the segment is live</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_islive
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_islive); }
			set { Entity.Attributes[Fields.msdyncrm_islive] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Evaluation Time</para>
		/// <para><strong>Description</strong>: Last date and time when the segment was evaluated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_lastevaluationtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_lastevaluationtime); }
			set { Entity.Attributes[Fields.msdyncrm_lastevaluationtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Updated Time</para>
		/// <para><strong>Description</strong>: Last date and time when the segment was updated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_lastupdatedtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_lastupdatedtime); }
			set { Entity.Attributes[Fields.msdyncrm_lastupdatedtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Expected Evaluation Time</para>
		/// <para><strong>Description</strong>: Next time we expect the segment to be evaluated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_nextevaluationUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_nextevaluation); }
			set { Entity.Attributes[Fields.msdyncrm_nextevaluation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Query type</para>
		/// <para><strong>Description</strong>: Query type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_querytype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_querytype? msdyncrm_querytype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_querytype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_querytype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_querytype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_querytype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scope</para>
		/// <para><strong>Description</strong>: Business-unit scope for selecting segment members</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_scope"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_scope.Organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_scope? msdyncrm_scope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_scope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_scope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_scope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_scope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activation status</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmentactivationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmentactivationstatus.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmentactivationstatus? msdyncrm_segmentactivationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_segmentactivationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmentactivationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_segmentactivationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_segmentactivationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluation Duration</para>
		/// <para><strong>Description</strong>: Evaluation duration in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_segmentevaluationdurationinminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_segmentevaluationdurationinminutes); }
			set { Entity.Attributes[Fields.msdyncrm_segmentevaluationdurationinminutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluation State</para>
		/// <para><strong>Description</strong>: State of segment evaluation.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentevaluationstate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentevaluationstate); }
			set { Entity.Attributes[Fields.msdyncrm_segmentevaluationstate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluation Type</para>
		/// <para><strong>Description</strong>: Type of segment evaluation.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentevaluationtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentevaluationtype); }
			set { Entity.Attributes[Fields.msdyncrm_segmentevaluationtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Filter query</para>
		/// <para><strong>Description</strong>: Filter query of a static segment</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentfilterquery
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentfilterquery); }
			set { Entity.Attributes[Fields.msdyncrm_segmentfilterquery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_segmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_segmentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Member IDs</para>
		/// <para><strong>Description</strong>: Static segment member IDs</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentmemberids
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentmemberids); }
			set { Entity.Attributes[Fields.msdyncrm_segmentmemberids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentname); }
			set { Entity.Attributes[Fields.msdyncrm_segmentname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentnameview
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentnameview); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioning state</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentprovisioningstate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentprovisioningstate); }
			set { Entity.Attributes[Fields.msdyncrm_segmentprovisioningstate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Query definition</para>
		/// <para><strong>Description</strong>: The segment query definition</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentquery
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentquery); }
			set { Entity.Attributes[Fields.msdyncrm_segmentquery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The display name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmentqueryname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmentqueryname); }
			set { Entity.Attributes[Fields.msdyncrm_segmentqueryname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Refresh Rate</para>
		/// <para><strong>Description</strong>: Segment refresh rate in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_segmentrefreshrateintervalminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_segmentrefreshrateintervalminutes); }
			set { Entity.Attributes[Fields.msdyncrm_segmentrefreshrateintervalminutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Members</para>
		/// <para><strong>Description</strong>: The number of members in the segment</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_segmentsize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_segmentsize); }
			set { Entity.Attributes[Fields.msdyncrm_segmentsize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Profile Type</para>
		/// <para><strong>Description</strong>: Target profile type of segment&apos;s members.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_segmenttargetprofiletypename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_segmenttargetprofiletypename); }
			set { Entity.Attributes[Fields.msdyncrm_segmenttargetprofiletypename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Template</para>
		/// <para><strong>Description</strong>: The template used to create the initial layout of the segment.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_segmenttemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_SegmentTemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_SegmentTemplate); }
			set { Entity.Attributes[Fields.msdyncrm_SegmentTemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone</para>
		/// <para><strong>Description</strong>: Effective time zone for this segment</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_segmenttimezone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_segmenttimezone); }
			set { Entity.Attributes[Fields.msdyncrm_segmenttimezone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment type</para>
		/// <para><strong>Description</strong>: Segment type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmenttype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmenttype.Dynamic_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmenttype? msdyncrm_segmenttype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_segmenttype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.msdyncrm_segmenttype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_segmenttype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_segmenttype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the person who owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the segment</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Segment</para>
		/// <para>Required - <strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_segmentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: Time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}