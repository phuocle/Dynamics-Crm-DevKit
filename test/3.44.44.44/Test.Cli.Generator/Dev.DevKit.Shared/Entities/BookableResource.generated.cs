//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.BookableResourceOptionSets
{
	public enum msdyn_CrewStrategy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cascade and Accept Cascade Completely (Not Recommended)</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Cascade_and_Accept_Cascade_Completely_Not_Recommended = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew Leader Management</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Crew_Leader_Management = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew Member Self-Management</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Crew_Member_Self_Management = 192_350_002
	}
	public enum msdyn_EnableAppointments
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		No = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Yes = 192_350_001
	}
	public enum msdyn_EnableOutlookSchedules
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		No = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Yes = 192_350_001
	}
	public enum msdyn_EndLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Organizational Unit Address</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Organizational_Unit_Address = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Address</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Resource_Address = 690_970_000
	}
	public enum msdyn_GenericType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Center</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Service_Center = 690_970_000
	}
	public enum msdyn_PoolType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Account = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Contact = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Equipment</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Equipment = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Facility = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		User = 192_350_002
	}
	public enum msdyn_StartLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Organizational Unit Address</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Organizational_Unit_Address = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Address</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Resource_Address = 690_970_000
	}
	public enum ResourceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Account = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Contact = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Crew = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Equipment</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Equipment = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Facility = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Generic</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Generic = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pool</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Pool = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		User = 3
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BookableResource : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string BookableResourceId = "bookableresourceid";
			public const string CalendarId = "calendarid";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_BookingsToDrip = "msdyn_bookingstodrip";
			public const string msdyn_CrewStrategy = "msdyn_crewstrategy";
			public const string msdyn_DeriveCapacity = "msdyn_derivecapacity";
			public const string msdyn_DisplayOnScheduleAssistant = "msdyn_displayonscheduleassistant";
			public const string msdyn_DisplayOnScheduleBoard = "msdyn_displayonscheduleboard";
			public const string msdyn_EnableAppointments = "msdyn_enableappointments";
			public const string msdyn_EnabledForFieldServiceMobile = "msdyn_enabledforfieldservicemobile";
			public const string msdyn_EnableDripScheduling = "msdyn_enabledripscheduling";
			public const string msdyn_EnableOutlookSchedules = "msdyn_enableoutlookschedules";
			public const string msdyn_EndLocation = "msdyn_endlocation";
			public const string msdyn_facilityequipmentid = "msdyn_facilityequipmentid";
			public const string msdyn_GenericType = "msdyn_generictype";
			public const string msdyn_HourlyRate = "msdyn_hourlyrate";
			public const string msdyn_hourlyrate_Base = "msdyn_hourlyrate_base";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_locationtimestamp = "msdyn_locationtimestamp";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_OptimalCrewSize = "msdyn_optimalcrewsize";
			public const string msdyn_organizationalunit = "msdyn_organizationalunit";
			public const string msdyn_PoolType = "msdyn_pooltype";
			public const string msdyn_PrimaryEMail = "msdyn_primaryemail";
			public const string msdyn_StartLocation = "msdyn_startlocation";
			public const string msdyn_targetutilization = "msdyn_targetutilization";
			public const string msdyn_TimeOffApprovalRequired = "msdyn_timeoffapprovalrequired";
			public const string msdyn_Warehouse = "msdyn_warehouse";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessId = "processid";
			public const string ResourceType = "resourcetype";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZone = "timezone";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UserId = "userid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "bookableresource";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1150;
		public const string EntityCollectionSchemaName = "BookableResource";
		public const string EntityDisplayCollectionName = "Bookable Resources";
		public const string DisplayName = "Bookable Resource";
		public const string EntitySetName = "bookableresources";
		public const string EntityLogicalCollectionName = "bookableresources";
		public const string EntityPrimaryIdAttribute = "bookableresourceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "BookableResource";
		[DebuggerNonUserCode()]
		public BookableResource()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BookableResource(Guid BookableResourceId)
		{
			Entity = new Entity(EntityLogicalName, BookableResourceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BookableResource(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BookableResource"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public BookableResource(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BookableResource"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BookableResource(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BookableResource(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BookableResource"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BookableResource(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BookableResource(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BookableResource(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Select the account that represents this resource.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
			set { Entity.Attributes[Fields.AccountId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bookable Resource</para>
		/// <para><strong>Description</strong>: Unique identifier of the resource.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BookableResourceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BookableResourceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar</para>
		/// <para><strong>Description</strong>: Specifies the working days and hours of the resource.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Select the contact that represents this resource.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
			set { Entity.Attributes[Fields.ContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ExchangeRate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the bookableresource with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (deprecated) Bookings To Drip</para>
		/// <para><strong>Description</strong>: (deprecated) The number of bookings to drip on the Mobile. This field is disabled/enabled based on Enable Drip Scheduling field</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_BookingsToDrip
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_BookingsToDrip); }
			set { Entity.Attributes[Fields.msdyn_BookingsToDrip] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew Strategy</para>
		/// <para><strong>Description</strong>: Crew Strategy</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_CrewStrategy"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_CrewStrategy? msdyn_CrewStrategy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CrewStrategy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_CrewStrategy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CrewStrategy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CrewStrategy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Derive Capacity From Group Members</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeriveCapacity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeriveCapacity); }
			set { Entity.Attributes[Fields.msdyn_DeriveCapacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable for Availability Search</para>
		/// <para><strong>Description</strong>: Specify if this resource should be enabled for availablity search.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisplayOnScheduleAssistant
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisplayOnScheduleAssistant); }
			set { Entity.Attributes[Fields.msdyn_DisplayOnScheduleAssistant] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display On Schedule Board</para>
		/// <para><strong>Description</strong>: Specify if this resource should be displayed on the schedule board.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisplayOnScheduleBoard
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisplayOnScheduleBoard); }
			set { Entity.Attributes[Fields.msdyn_DisplayOnScheduleBoard] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Include Appointments</para>
		/// <para><strong>Description</strong>: Enable appointments to display on the new schedule board and be considered in availability search for resources.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableAppointments"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableAppointments.Yes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableAppointments? msdyn_EnableAppointments
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableAppointments);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableAppointments)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableAppointments] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableAppointments] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable for Field Service Mobile (legacy Xamarin app)</para>
		/// <para><strong>Description</strong>: Set this field to Yes if this resource requires access to the legacy Field Service Mobile application.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnabledForFieldServiceMobile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnabledForFieldServiceMobile); }
			set { Entity.Attributes[Fields.msdyn_EnabledForFieldServiceMobile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Drip Scheduling</para>
		/// <para><strong>Description</strong>: Enables drip scheduling on the mobile app.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableDripScheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableDripScheduling); }
			set { Entity.Attributes[Fields.msdyn_EnableDripScheduling] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Include Outlook Free/Busy in Search Resource Availability API</para>
		/// <para><strong>Description</strong>: This only applies when directly calling the API. It does not apply when the Book button is clicked on the Schedule Board or on any schedulable entity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableOutlookSchedules"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableOutlookSchedules.Yes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableOutlookSchedules? msdyn_EnableOutlookSchedules
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EnableOutlookSchedules);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EnableOutlookSchedules)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EnableOutlookSchedules] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Location</para>
		/// <para><strong>Description</strong>: Shows the default ending location type when booking daily schedules for this resource.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EndLocation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EndLocation.Location_Agnostic"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EndLocation? msdyn_EndLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_EndLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_EndLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EndLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_EndLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility Equipment</para>
		/// <para><strong>Description</strong>: Unique identifier for Facility Equipment</para>
		/// <para><strong>Lookup</strong>: <see cref="equipment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_facilityequipmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_facilityequipmentid); }
			set { Entity.Attributes[Fields.msdyn_facilityequipmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generic Type (Deprecated)</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_GenericType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_GenericType? msdyn_GenericType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_GenericType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_GenericType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_GenericType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_GenericType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hourly Rate</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_HourlyRate
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_HourlyRate);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_HourlyRate] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_HourlyRate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hourly Rate (Base)</para>
		/// <para><strong>Description</strong>: Value of the Hourly Rate in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_hourlyrate_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_hourlyrate_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Description</strong>: The location latitude.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Timestamp</para>
		/// <para><strong>Description</strong>: The location timestamp.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_locationtimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_locationtimestamp); }
			set { Entity.Attributes[Fields.msdyn_locationtimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Description</strong>: The location longitude.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Optimal Crew Size</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 9,999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_OptimalCrewSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_OptimalCrewSize); }
			set { Entity.Attributes[Fields.msdyn_OptimalCrewSize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organizational Unit</para>
		/// <para><strong>Description</strong>: Organizational Unit that resource belong to</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_organizationalunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_organizationalunit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_organizationalunit); }
			set { Entity.Attributes[Fields.msdyn_organizationalunit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pool Type</para>
		/// <para><strong>Description</strong>: Select whether the pool is an account, contact, user, equipment or a facility of resources.</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType> msdyn_PoolType
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_PoolType);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_PoolType)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_PoolType] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_PoolType] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Email</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PrimaryEMail
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PrimaryEMail); }
			set { Entity.Attributes[Fields.msdyn_PrimaryEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Location</para>
		/// <para><strong>Description</strong>: Shows the default starting location type when booking daily schedules for this resource.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_StartLocation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_StartLocation.Location_Agnostic"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_StartLocation? msdyn_StartLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_StartLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.msdyn_StartLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_StartLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_StartLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Utilization</para>
		/// <para><strong>Description</strong>: Shows the target utilization for the resource.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_targetutilization
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_targetutilization); }
			set { Entity.Attributes[Fields.msdyn_targetutilization] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Off Approval Required</para>
		/// <para><strong>Description</strong>: Specifies if approval required for Time Off Requests.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_TimeOffApprovalRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_TimeOffApprovalRequired); }
			set { Entity.Attributes[Fields.msdyn_TimeOffApprovalRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Warehouse</para>
		/// <para><strong>Description</strong>: Default Warehouse for this resource.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_warehouse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Warehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Warehouse); }
			set { Entity.Attributes[Fields.msdyn_Warehouse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Type the name of the resource.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Type</para>
		/// <para><strong>Description</strong>: Select whether the resource is a user, equipment, contact, account, generic resource or a group of resources.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.ResourceType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.ResourceType.User"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.ResourceType? ResourceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ResourceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.ResourceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ResourceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ResourceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Bookable Resource</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Bookable Resource</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone</para>
		/// <para><strong>Description</strong>: Specifies the timezone for the resource&apos;s working hours.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZone); }
			set { Entity.Attributes[Fields.TimeZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the BookableResource with respect to the base currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Description</strong>: Select the user who represents this resource.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference UserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.UserId); }
			set { Entity.Attributes[Fields.UserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}