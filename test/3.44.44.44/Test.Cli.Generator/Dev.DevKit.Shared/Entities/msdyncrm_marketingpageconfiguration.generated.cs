//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets
{
	public enum msdyncrm_entityupdatebehavioronsubmit
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contacts and leads</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Contacts_and_leads = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: No update</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		No_update = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Only contacts</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Only_contacts = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Only leads</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Only_leads = 2
	}
	public enum msdyncrm_portalinstallationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Failed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Not_started = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Started</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Started = 2
	}
	public enum msdyncrm_portalintegrationtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Force local hosting</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Force_local_hosting = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Force portal hosting</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Force_portal_hosting = 2
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_marketingpageconfiguration : EntityBase
	{
		public struct Fields
		{
			public const string adx_parentwebpageid = "adx_parentwebpageid";
			public const string adx_websiteid = "adx_websiteid";
			public const string adx_websitelanguageid = "adx_websitelanguageid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_allowsubmissiononlyforms = "msdyncrm_allowsubmissiononlyforms";
			public const string msdyncrm_contactcampaignattribute = "msdyncrm_contactcampaignattribute";
			public const string msdyncrm_contactemailattribute = "msdyncrm_contactemailattribute";
			public const string msdyncrm_contactmarketingformattribute = "msdyncrm_contactmarketingformattribute";
			public const string msdyncrm_contactmarketingpageattribute = "msdyncrm_contactmarketingpageattribute";
			public const string msdyncrm_contactmatchingstrategy = "msdyncrm_contactmatchingstrategy";
			public const string msdyncrm_default = "msdyncrm_default";
			public const string msdyncrm_entityupdatebehavioronsubmit = "msdyncrm_entityupdatebehavioronsubmit";
			public const string msdyncrm_insertprivacybanner = "msdyncrm_insertprivacybanner";
			public const string msdyncrm_keepsuccessfulsubmissions = "msdyncrm_keepsuccessfulsubmissions";
			public const string msdyncrm_leadcampaignattribute = "msdyncrm_leadcampaignattribute";
			public const string msdyncrm_leadcontactattribute = "msdyncrm_leadcontactattribute";
			public const string msdyncrm_leademailattribute = "msdyncrm_leademailattribute";
			public const string msdyncrm_leadmarketingformattribute = "msdyncrm_leadmarketingformattribute";
			public const string msdyncrm_leadmarketingpageattribute = "msdyncrm_leadmarketingpageattribute";
			public const string msdyncrm_leadmatchingstrategy = "msdyncrm_leadmatchingstrategy";
			public const string msdyncrm_marketingpageconfigurationId = "msdyncrm_marketingpageconfigurationid";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_organizationtype = "msdyncrm_organizationtype";
			public const string msdyncrm_organizationtype_lastrefresh = "msdyncrm_organizationtype_lastrefresh";
			public const string msdyncrm_portalinstallationstatus = "msdyncrm_portalinstallationstatus";
			public const string msdyncrm_portalintegrationtype = "msdyncrm_portalintegrationtype";
			public const string msdyncrm_privacybannertext = "msdyncrm_privacybannertext";
			public const string msdyncrm_privacypolicylinktext = "msdyncrm_privacypolicylinktext";
			public const string msdyncrm_privacypolicylinkurl = "msdyncrm_privacypolicylinkurl";
			public const string msdyncrm_websitefilter_placeholder = "msdyncrm_websitefilter_placeholder";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_marketingpageconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11171;
		public const string EntityCollectionSchemaName = "msdyncrm_marketingpageconfigurations";
		public const string EntityDisplayCollectionName = "Landing pages";
		public const string DisplayName = "Landing page";
		public const string EntitySetName = "msdyncrm_marketingpageconfigurations";
		public const string EntityLogicalCollectionName = "msdyncrm_marketingpageconfigurations";
		public const string EntityPrimaryIdAttribute = "msdyncrm_marketingpageconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_marketingpageconfiguration";
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration(Guid msdyncrm_marketingpageconfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_marketingpageconfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingpageconfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingpageconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingpageconfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_marketingpageconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_marketingpageconfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_marketingpageconfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_parentwebpageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_parentwebpageid); }
			set { Entity.Attributes[Fields.adx_parentwebpageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_websiteid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_websiteid); }
			set { Entity.Attributes[Fields.adx_websiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 72</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adx_websitelanguageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adx_websitelanguageid); }
			set { Entity.Attributes[Fields.adx_websitelanguageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow form submissions without updating the contact or lead</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_allowsubmissiononlyforms
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_allowsubmissiononlyforms); }
			set { Entity.Attributes[Fields.msdyncrm_allowsubmissiononlyforms] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact source customer journey attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_contactcampaignattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_contactcampaignattribute); }
			set { Entity.Attributes[Fields.msdyncrm_contactcampaignattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact email attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_contactemailattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_contactemailattribute); }
			set { Entity.Attributes[Fields.msdyncrm_contactemailattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact form attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_contactmarketingformattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_contactmarketingformattribute); }
			set { Entity.Attributes[Fields.msdyncrm_contactmarketingformattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact landing page attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_contactmarketingpageattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_contactmarketingpageattribute); }
			set { Entity.Attributes[Fields.msdyncrm_contactmarketingpageattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact form matching</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_matchingstrategy"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_contactmatchingstrategy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_contactmatchingstrategy); }
			set { Entity.Attributes[Fields.msdyncrm_contactmatchingstrategy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_default
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_default); }
			set { Entity.Attributes[Fields.msdyncrm_default] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update contacts/leads</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_entityupdatebehavioronsubmit"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_entityupdatebehavioronsubmit? msdyncrm_entityupdatebehavioronsubmit
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_entityupdatebehavioronsubmit);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_entityupdatebehavioronsubmit)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_entityupdatebehavioronsubmit] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_entityupdatebehavioronsubmit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insert privacy banner</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_insertprivacybanner
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_insertprivacybanner); }
			set { Entity.Attributes[Fields.msdyncrm_insertprivacybanner] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_keepsuccessfulsubmissions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_keepsuccessfulsubmissions); }
			set { Entity.Attributes[Fields.msdyncrm_keepsuccessfulsubmissions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead campaign attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_leadcampaignattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_leadcampaignattribute); }
			set { Entity.Attributes[Fields.msdyncrm_leadcampaignattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead contact attribute</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_leadcontactattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_leadcontactattribute); }
			set { Entity.Attributes[Fields.msdyncrm_leadcontactattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead email attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_leademailattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_leademailattribute); }
			set { Entity.Attributes[Fields.msdyncrm_leademailattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead form attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_leadmarketingformattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_leadmarketingformattribute); }
			set { Entity.Attributes[Fields.msdyncrm_leadmarketingformattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead landing page attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_leadmarketingpageattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_leadmarketingpageattribute); }
			set { Entity.Attributes[Fields.msdyncrm_leadmarketingpageattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead form matching</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_matchingstrategy"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_leadmatchingstrategy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_leadmatchingstrategy); }
			set { Entity.Attributes[Fields.msdyncrm_leadmatchingstrategy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Landing page</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_marketingpageconfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_marketingpageconfigurationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the landing page</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization type</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_organizationtype
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_organizationtype); }
			set { Entity.Attributes[Fields.msdyncrm_organizationtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: lastrefreshtime</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_organizationtype_lastrefresh
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_organizationtype_lastrefresh); }
			set { Entity.Attributes[Fields.msdyncrm_organizationtype_lastrefresh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal installation status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_portalinstallationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_portalinstallationstatus? msdyncrm_portalinstallationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_portalinstallationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_portalinstallationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_portalinstallationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_portalinstallationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal behavior</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_portalintegrationtype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_portalintegrationtype? msdyncrm_portalintegrationtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_portalintegrationtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.msdyncrm_portalintegrationtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_portalintegrationtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_portalintegrationtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Privacy banner text</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_privacybannertext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_privacybannertext); }
			set { Entity.Attributes[Fields.msdyncrm_privacybannertext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Privacy policy link text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_privacypolicylinktext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_privacypolicylinktext); }
			set { Entity.Attributes[Fields.msdyncrm_privacypolicylinktext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Privacy policy link URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_privacypolicylinkurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_privacypolicylinkurl); }
			set { Entity.Attributes[Fields.msdyncrm_privacypolicylinkurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_websitefilter_placeholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_websitefilter_placeholder); }
			set { Entity.Attributes[Fields.msdyncrm_websitefilter_placeholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization ID</para>
		/// <para><strong>Description</strong>: Unique ID of the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the landing page</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: landing page status reason</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_marketingpageconfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: Time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}