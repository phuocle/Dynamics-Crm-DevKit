//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets
{
	public enum msdyn_MigrationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		In_Progress = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Incomplete</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Incomplete = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Migrated</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Migrated = 1
	}
	public enum msdyn_MigrationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Migration = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: PreValidation</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		PreValidation = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_migrationtracker : EntityBase
	{
		public struct Fields
		{
			public const string CorrelationId = "correlationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_CorrelationId = "msdyn_correlationid";
			public const string msdyn_IsMigrationComplete = "msdyn_IsMigrationComplete";
			public const string msdyn_LegacyConvertRuleId = "msdyn_legacyconvertruleid";
			public const string msdyn_LegacyConvertRuleItemId = "msdyn_legacyconvertruleitemid";
			public const string msdyn_LegacyRuleIdName = "msdyn_legacyruleidname";
			public const string msdyn_LegacyRuleIdType = "msdyn_legacyruleidtype";
			public const string msdyn_LegacyRuleItemIdName = "msdyn_legacyruleitemidname";
			public const string msdyn_LegacyRuleItemIdType = "msdyn_legacyruleitemidtype";
			public const string msdyn_LegacySLAId = "msdyn_legacyslaid";
			public const string msdyn_LegacySLAItemId = "msdyn_legacyslaitemid";
			public const string msdyn_MigrationStatus = "msdyn_migrationstatus";
			public const string msdyn_MigrationStatusException = "msdyn_migrationstatusexception";
			public const string msdyn_MigrationStatusReason = "msdyn_migrationstatusreason";
			public const string msdyn_migrationtrackerId = "msdyn_migrationtrackerid";
			public const string msdyn_MigrationType = "msdyn_migrationtype";
			public const string msdyn_ModernConvertRuleId = "msdyn_modernconvertruleid";
			public const string msdyn_ModernConvertRuleItemId = "msdyn_modernconvertruleitemid";
			public const string msdyn_ModernRuleIdName = "msdyn_modernruleidname";
			public const string msdyn_ModernRuleIdType = "msdyn_modernruleidtype";
			public const string msdyn_ModernRuleItemIdName = "msdyn_modernruleitemidname";
			public const string msdyn_ModernRuleItemIdType = "msdyn_modernruleitemidtype";
			public const string msdyn_ModernSLAId = "msdyn_modernslaid";
			public const string msdyn_ModernSLAItemId = "msdyn_modernslaitemid";
			public const string msdyn_Name = "msdyn_name";
			public const string msdyn_Objecttypecode = "msdyn_objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_migrationtracker";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10374;
		public const string EntityCollectionSchemaName = "msdyn_migrationtrackers";
		public const string EntityDisplayCollectionName = "Migration trackers";
		public const string DisplayName = "Migration tracker";
		public const string EntitySetName = "msdyn_migrationtrackers";
		public const string EntityLogicalCollectionName = "msdyn_migrationtrackers";
		public const string EntityPrimaryIdAttribute = "msdyn_migrationtrackerid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_migrationtracker";
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Guid msdyn_migrationtrackerId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_migrationtrackerId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_migrationtracker"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_migrationtracker"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_migrationtracker(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_migrationtracker"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_migrationtracker(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_migrationtracker(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CorrelationId(Deprecated)</para>
		/// <para><strong>Description</strong>: Unique identifier to distinguish each batch of migration(Deprecated)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CorrelationId</para>
		/// <para><strong>Description</strong>: Unique identifier to distinguish each batch of migration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CorrelationId); }
			set { Entity.Attributes[Fields.msdyn_CorrelationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Migration Complete</para>
		/// <para><strong>Description</strong>: Indicates if the migration was successfully completed or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Success</strong>]: true - [<strong>Failure</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Failure</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsMigrationComplete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsMigrationComplete); }
			set { Entity.Attributes[Fields.msdyn_IsMigrationComplete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy Convert Rule</para>
		/// <para><strong>Description</strong>: Id of the legacy ARC rule to be migrated</para>
		/// <para><strong>Lookup</strong>: <see cref="convertrule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacyConvertRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacyConvertRuleId); }
			set { Entity.Attributes[Fields.msdyn_LegacyConvertRuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy convert rule item</para>
		/// <para><strong>Description</strong>: Id of the legacy ARC item to be migrated</para>
		/// <para><strong>Lookup</strong>: <see cref="convertruleitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacyConvertRuleItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacyConvertRuleItemId); }
			set { Entity.Attributes[Fields.msdyn_LegacyConvertRuleItemId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LegacyRuleIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LegacyRuleIdName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy rule type</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LegacyRuleIdType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LegacyRuleIdType); }
			set { Entity.Attributes[Fields.msdyn_LegacyRuleIdType] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LegacyRuleItemIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LegacyRuleItemIdName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy rule item type</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LegacyRuleItemIdType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LegacyRuleItemIdType); }
			set { Entity.Attributes[Fields.msdyn_LegacyRuleItemIdType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy SLA</para>
		/// <para><strong>Description</strong>: Id of the legacy SLA to be migrated</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacySLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacySLAId); }
			set { Entity.Attributes[Fields.msdyn_LegacySLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy sla item</para>
		/// <para><strong>Description</strong>: Id of the legacy SLA item to be migrated</para>
		/// <para><strong>Lookup</strong>: <see cref="slaitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_LegacySLAItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_LegacySLAItemId); }
			set { Entity.Attributes[Fields.msdyn_LegacySLAItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration status</para>
		/// <para><strong>Description</strong>: The overall status of a migration process</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationStatus? msdyn_MigrationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_MigrationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MigrationStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_MigrationStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration status reason exception</para>
		/// <para><strong>Description</strong>: The exception of a certain status</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MigrationStatusException
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MigrationStatusException); }
			set { Entity.Attributes[Fields.msdyn_MigrationStatusException] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration status reason</para>
		/// <para><strong>Description</strong>: The reason of a certain status</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MigrationStatusReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MigrationStatusReason); }
			set { Entity.Attributes[Fields.msdyn_MigrationStatusReason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration tracker id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_migrationtrackerId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_migrationtrackerId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Migration Type</para>
		/// <para><strong>Description</strong>: Indicates whether the request is a pre-validation check or an actual migration run</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationType.PreValidation"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationType? msdyn_MigrationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_MigrationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.msdyn_MigrationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MigrationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_MigrationType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modern Convert rule</para>
		/// <para><strong>Description</strong>: Id of the Uci ARC rule created post migration</para>
		/// <para><strong>Lookup</strong>: <see cref="convertrule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernConvertRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernConvertRuleId); }
			set { Entity.Attributes[Fields.msdyn_ModernConvertRuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modern convert rule item</para>
		/// <para><strong>Description</strong>: Id of the Uci ARC item created post migration</para>
		/// <para><strong>Lookup</strong>: <see cref="convertruleitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernConvertRuleItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernConvertRuleItemId); }
			set { Entity.Attributes[Fields.msdyn_ModernConvertRuleItemId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModernRuleIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModernRuleIdName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modern rule type</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModernRuleIdType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModernRuleIdType); }
			set { Entity.Attributes[Fields.msdyn_ModernRuleIdType] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModernRuleItemIdName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModernRuleItemIdName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Monitored activity type</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ModernRuleItemIdType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ModernRuleItemIdType); }
			set { Entity.Attributes[Fields.msdyn_ModernRuleItemIdType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modern SLA</para>
		/// <para><strong>Description</strong>: Id of the Uci SLA created post migration</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernSLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernSLAId); }
			set { Entity.Attributes[Fields.msdyn_ModernSLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modern SLA item</para>
		/// <para><strong>Description</strong>: Id of the Uci SLA item created post migration</para>
		/// <para><strong>Lookup</strong>: <see cref="slaitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ModernSLAItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ModernSLAItemId); }
			set { Entity.Attributes[Fields.msdyn_ModernSLAItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Name); }
			set { Entity.Attributes[Fields.msdyn_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Object type code</para>
		/// <para><strong>Description</strong>: Object type code</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Objecttypecode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Objecttypecode); }
			set { Entity.Attributes[Fields.msdyn_Objecttypecode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Migration tracker</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Migration tracker</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_migrationtrackerOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}