//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:35
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets
{
	public enum msdyn_LineStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Estimated = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Used</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Used = 690_970_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_workorderservice : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdditionalCost = "msdyn_additionalcost";
			public const string msdyn_additionalcost_Base = "msdyn_additionalcost_base";
			public const string msdyn_AgreementBookingService = "msdyn_agreementbookingservice";
			public const string msdyn_Booking = "msdyn_booking";
			public const string msdyn_CalculatedUnitAmount = "msdyn_calculatedunitamount";
			public const string msdyn_calculatedunitamount_Base = "msdyn_calculatedunitamount_base";
			public const string msdyn_CommissionCosts = "msdyn_commissioncosts";
			public const string msdyn_commissioncosts_Base = "msdyn_commissioncosts_base";
			public const string msdyn_CustomerAsset = "msdyn_customerasset";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_DisableEntitlement = "msdyn_disableentitlement";
			public const string msdyn_DiscountAmount = "msdyn_discountamount";
			public const string msdyn_discountamount_Base = "msdyn_discountamount_base";
			public const string msdyn_DiscountPercent = "msdyn_discountpercent";
			public const string msdyn_Duration = "msdyn_duration";
			public const string msdyn_DurationToBill = "msdyn_durationtobill";
			public const string msdyn_Entitlement = "msdyn_entitlement";
			public const string msdyn_EstimateCalculatedUnitAmount = "msdyn_estimatecalculatedunitamount";
			public const string msdyn_estimatecalculatedunitamount_Base = "msdyn_estimatecalculatedunitamount_base";
			public const string msdyn_EstimateDiscountAmount = "msdyn_estimatediscountamount";
			public const string msdyn_estimatediscountamount_Base = "msdyn_estimatediscountamount_base";
			public const string msdyn_EstimateDiscountPercent = "msdyn_estimatediscountpercent";
			public const string msdyn_EstimateDuration = "msdyn_estimateduration";
			public const string msdyn_EstimateSubtotal = "msdyn_estimatesubtotal";
			public const string msdyn_estimatesubtotal_Base = "msdyn_estimatesubtotal_base";
			public const string msdyn_EstimateTotalAmount = "msdyn_estimatetotalamount";
			public const string msdyn_estimatetotalamount_Base = "msdyn_estimatetotalamount_base";
			public const string msdyn_EstimateTotalCost = "msdyn_estimatetotalcost";
			public const string msdyn_estimatetotalcost_Base = "msdyn_estimatetotalcost_base";
			public const string msdyn_EstimateUnitAmount = "msdyn_estimateunitamount";
			public const string msdyn_estimateunitamount_Base = "msdyn_estimateunitamount_base";
			public const string msdyn_EstimateUnitCost = "msdyn_estimateunitcost";
			public const string msdyn_estimateunitcost_Base = "msdyn_estimateunitcost_base";
			public const string msdyn_InternalDescription = "msdyn_internaldescription";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_LineOrder = "msdyn_lineorder";
			public const string msdyn_LineStatus = "msdyn_linestatus";
			public const string msdyn_MinimumChargeAmount = "msdyn_minimumchargeamount";
			public const string msdyn_minimumchargeamount_Base = "msdyn_minimumchargeamount_base";
			public const string msdyn_MinimumChargeDuration = "msdyn_minimumchargeduration";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_Service = "msdyn_service";
			public const string msdyn_Subtotal = "msdyn_subtotal";
			public const string msdyn_subtotal_Base = "msdyn_subtotal_base";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_TotalCost = "msdyn_totalcost";
			public const string msdyn_totalcost_Base = "msdyn_totalcost_base";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitAmount = "msdyn_unitamount";
			public const string msdyn_unitamount_Base = "msdyn_unitamount_base";
			public const string msdyn_UnitCost = "msdyn_unitcost";
			public const string msdyn_unitcost_Base = "msdyn_unitcost_base";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string msdyn_WorkOrderIncident = "msdyn_workorderincident";
			public const string msdyn_workorderserviceId = "msdyn_workorderserviceid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_workorderservice";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11711;
		public const string EntityCollectionSchemaName = "msdyn_workorderservices";
		public const string EntityDisplayCollectionName = "Work Order Services";
		public const string DisplayName = "Work Order Service";
		public const string EntitySetName = "msdyn_workorderservices";
		public const string EntityLogicalCollectionName = "msdyn_workorderservices";
		public const string EntityPrimaryIdAttribute = "msdyn_workorderserviceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_workorderservice";
		[DebuggerNonUserCode()]
		public msdyn_workorderservice()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Guid msdyn_workorderserviceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_workorderserviceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_workorderservice(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_workorderservice"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_workorderservice"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_workorderservice(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_workorderservice"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_workorderservice(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_workorderservice(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_workorderservice(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Shows the sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Cost</para>
		/// <para><strong>Description</strong>: Enter any additional costs associated with this service. The values are manually entered. Note: additional cost is not unit dependent.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_AdditionalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_AdditionalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AdditionalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_AdditionalCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Cost (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the additional cost in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_additionalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_additionalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement Booking Service</para>
		/// <para><strong>Description</strong>: Agreement Booking Service linked to this Work Order Service</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_agreementbookingservice"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AgreementBookingService
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AgreementBookingService); }
			set { Entity.Attributes[Fields.msdyn_AgreementBookingService] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking</para>
		/// <para><strong>Description</strong>: Shows the resource booking detail where this product was added.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresourcebooking"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Booking
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Booking); }
			set { Entity.Attributes[Fields.msdyn_Booking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculated Unit Amount</para>
		/// <para><strong>Description</strong>: Shows the sale amount per unit calculated by the system considering the minimum charge, if applicable.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CalculatedUnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CalculatedUnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CalculatedUnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CalculatedUnitAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculated Unit Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the calculated unit amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_calculatedunitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_calculatedunitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Commission Costs</para>
		/// <para><strong>Description</strong>: Enter the commission costs associated with this service. The value is manually specified and isn&apos;t automatically calculated.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_CommissionCosts
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_CommissionCosts);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CommissionCosts] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_CommissionCosts] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Commission Costs (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the commission costs in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_commissioncosts_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_commissioncosts_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Asset</para>
		/// <para><strong>Description</strong>: Unique identifier for Customer Asset associated with Work Order Service.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_customerasset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_CustomerAsset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Enter the description of the service as presented to the customer. The value defaults to the description defined on the service.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Entitlement</para>
		/// <para><strong>Description</strong>: Choose whether to disable entitlement selection for this work order service.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableEntitlement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableEntitlement); }
			set { Entity.Attributes[Fields.msdyn_DisableEntitlement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount Amount</para>
		/// <para><strong>Description</strong>: Specify any discount amount on this service. Note: If you enter a discount amount you cannot enter a discount %</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_DiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_DiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_DiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the discount Amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_discountamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_discountamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount %</para>
		/// <para><strong>Description</strong>: Specify any discount % on this service. Note: If you enter a discount % it will overwrite the discount $</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_DiscountPercent
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_DiscountPercent); }
			set { Entity.Attributes[Fields.msdyn_DiscountPercent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Shows the actual duration of service.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Duration); }
			set { Entity.Attributes[Fields.msdyn_Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration To Bill</para>
		/// <para><strong>Description</strong>: Enter the quantity you wish to bill the customer for. By default, this will default to the same value as &quot;Quantity.&quot;</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DurationToBill
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DurationToBill); }
			set { Entity.Attributes[Fields.msdyn_DurationToBill] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entitlement</para>
		/// <para><strong>Description</strong>: Entitlement to apply to the Work Order Service.</para>
		/// <para><strong>Lookup</strong>: <see cref="entitlement"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Entitlement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Entitlement); }
			set { Entity.Attributes[Fields.msdyn_Entitlement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Calculated Unit Amount</para>
		/// <para><strong>Description</strong>: Shows the estimated sale amount per unit calculated by the system considering the initial charge (if applicable).</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateCalculatedUnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateCalculatedUnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateCalculatedUnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateCalculatedUnitAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Calculated Unit Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate calculated unit amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatecalculatedunitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatecalculatedunitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Discount Amount</para>
		/// <para><strong>Description</strong>: Enter a discount amount on the subtotal amount. Note: If you enter a discount amount you cannot enter a discount %</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateDiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate discount amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatediscountamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatediscountamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Discount %</para>
		/// <para><strong>Description</strong>: Enter a discount % on the subtotal amount. Note: If you enter a discount % it will overwrite the discount $</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_EstimateDiscountPercent
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_EstimateDiscountPercent); }
			set { Entity.Attributes[Fields.msdyn_EstimateDiscountPercent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Duration</para>
		/// <para><strong>Description</strong>: Enter the estimated duration of this service.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EstimateDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EstimateDuration); }
			set { Entity.Attributes[Fields.msdyn_EstimateDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Subtotal</para>
		/// <para><strong>Description</strong>: Shows the total amount for this service, excluding discounts.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateSubtotal
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateSubtotal);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateSubtotal] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateSubtotal] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Subtotal (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate subtotal in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatesubtotal_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatesubtotal_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Total Amount</para>
		/// <para><strong>Description</strong>: Shows the estimated total amount of this service, including discounts.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateTotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateTotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateTotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateTotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Total Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate total amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatetotalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatetotalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Total Cost</para>
		/// <para><strong>Description</strong>: Shows the estimated total cost of this service.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateTotalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateTotalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateTotalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateTotalCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Total Cost (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate total cost in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatetotalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatetotalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Unit Amount</para>
		/// <para><strong>Description</strong>: Shows the estimated sale amount per unit.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateUnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateUnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateUnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateUnitAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Unit Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate unit amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimateunitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimateunitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Unit Cost</para>
		/// <para><strong>Description</strong>: Shows the estimated cost amount per unit.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateUnitCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateUnitCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateUnitCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateUnitCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Unit Cost (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate unit cost in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimateunitcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimateunitcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Description</para>
		/// <para><strong>Description</strong>: Enter any internal notes you want to track on this service.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalDescription); }
			set { Entity.Attributes[Fields.msdyn_InternalDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Line Order</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_LineOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_LineOrder); }
			set { Entity.Attributes[Fields.msdyn_LineOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Line Status</para>
		/// <para><strong>Description</strong>: Enter the current status of the line, estimate or used.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.msdyn_LineStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.msdyn_LineStatus.Estimated"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.msdyn_LineStatus? msdyn_LineStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_LineStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.msdyn_LineStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_LineStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_LineStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum Charge Amount</para>
		/// <para><strong>Description</strong>: Enter the amount charged as a minimum charge.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_MinimumChargeAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_MinimumChargeAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_MinimumChargeAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_MinimumChargeAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum Charge Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the minimum charge amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_minimumchargeamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_minimumchargeamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum Charge Duration</para>
		/// <para><strong>Description</strong>: Enter the duration of up to how long the minimum charge applies.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_MinimumChargeDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_MinimumChargeDuration); }
			set { Entity.Attributes[Fields.msdyn_MinimumChargeDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Enter the name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Price List that determines the pricing for this service</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Service proposed or used for this work order</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Service
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Service); }
			set { Entity.Attributes[Fields.msdyn_Service] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtotal</para>
		/// <para><strong>Description</strong>: Enter the total amount excluding discounts.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Subtotal
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_Subtotal);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Subtotal] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_Subtotal] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtotal (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the subtotal in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_subtotal_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_subtotal_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Taxable</para>
		/// <para><strong>Description</strong>: Specify if service is taxable. If you do not wish to charge tax set this field to No.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount</para>
		/// <para>Required - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the total amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cost</para>
		/// <para><strong>Description</strong>: Shows the total cost of this service. This is calculated by (Unit Cost * Units) + Additional Cost + Commission Costs.</para>
		/// <para>Required - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cost (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the total cost in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit</para>
		/// <para><strong>Description</strong>: The unit that determines the final quantity for this service</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Amount</para>
		/// <para><strong>Description</strong>: Enter the amount you want to charge the customer per unit. By default, this is calculated based on the selected price list. The amount can be changed.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_UnitAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_UnitAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UnitAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_UnitAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the unit amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Cost</para>
		/// <para><strong>Description</strong>: Shows the actual cost per unit.</para>
		/// <para>Required - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_UnitCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_UnitCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UnitCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_UnitCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Cost (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the unit cost in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_unitcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_unitcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order</para>
		/// <para><strong>Description</strong>: The work order this service relates to</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Incident</para>
		/// <para><strong>Description</strong>: The Incident related to this product</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorderincident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderIncident
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderIncident); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderIncident] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Service</para>
		/// <para><strong>Description</strong>: Shows the entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_workorderserviceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_workorderserviceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Work Order Service</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Work Order Service</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderserviceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Shows the time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}