//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.botOptionSets
{
	public enum accesscontrolpolicy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Any</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Any = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot readers</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Copilot_readers = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Group membership</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Group_membership = 2
	}
	public enum authenticationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Azure Active Directory</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Custom_Azure_Active_Directory = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Generic OAuth2</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Generic_OAuth2 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Integrated</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Integrated = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unspecified</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unspecified = 0
	}
	public enum authenticationtrigger
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Always</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Always = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: As Needed</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		As_Needed = 0
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Simplified)</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_Simplified = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Traditional)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Chinese_Traditional = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: English (Australia)</para>
		/// <para><strong>Value</strong>: 3,081</para>
		/// </summary>
		English_Australia = 3_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: English (United Kingdom)</para>
		/// <para><strong>Value</strong>: 2,057</para>
		/// </summary>
		English_United_Kingdom = 2_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: French (Canada)</para>
		/// <para><strong>Value</strong>: 3,084</para>
		/// </summary>
		French_Canada = 3_084,
		/// <summary>
		/// <para><strong>Display Name</strong>: German</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese (Brazilian)</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazilian = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish</para>
		/// <para><strong>Value</strong>: 1,034</para>
		/// </summary>
		Spanish = 1_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish (United States)</para>
		/// <para><strong>Value</strong>: 21,514</para>
		/// </summary>
		Spanish_United_States = 21_514,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish = 1_055
	}
	public enum RuntimeProvider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Nuance Mix Shell</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Nuance_Mix_Shell = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Virtual Agents</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Power_Virtual_Agents = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deprovisioned</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Deprovisioned = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: MissingLicense</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		MissingLicense = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioned</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Provisioned = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ProvisionFailed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		ProvisionFailed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioning</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Provisioning = 3
	}
	public enum SupportedLanguages
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Simplified)</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_Simplified = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Traditional)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Chinese_Traditional = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: English (Australia)</para>
		/// <para><strong>Value</strong>: 3,081</para>
		/// </summary>
		English_Australia = 3_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: English (United Kingdom)</para>
		/// <para><strong>Value</strong>: 2,057</para>
		/// </summary>
		English_United_Kingdom = 2_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: French (Canada)</para>
		/// <para><strong>Value</strong>: 3,084</para>
		/// </summary>
		French_Canada = 3_084,
		/// <summary>
		/// <para><strong>Display Name</strong>: German</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese (Brazilian)</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazilian = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish</para>
		/// <para><strong>Value</strong>: 1,034</para>
		/// </summary>
		Spanish = 1_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish (United States)</para>
		/// <para><strong>Value</strong>: 21,514</para>
		/// </summary>
		Spanish_United_States = 21_514,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish = 1_055
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class bot : EntityBase
	{
		public struct Fields
		{
			public const string accesscontrolpolicy = "accesscontrolpolicy";
			public const string applicationmanifestinformation = "applicationmanifestinformation";
			public const string authenticationconfiguration = "authenticationconfiguration";
			public const string authenticationmode = "authenticationmode";
			public const string authenticationtrigger = "authenticationtrigger";
			public const string authorizedsecuritygroupids = "authorizedsecuritygroupids";
			public const string botId = "botid";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string Configuration = "configuration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string iconbase64 = "iconbase64";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string Language = "language";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string Origin = "origin";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProviderConnectionReferenceId = "providerconnectionreferenceid";
			public const string publishedby = "publishedby";
			public const string publishedon = "publishedon";
			public const string RuntimeProvider = "runtimeprovider";
			public const string SchemaName = "schemaname";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportedLanguages = "supportedlanguages";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SynchronizationStatus = "synchronizationstatus";
			public const string Template = "template";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "bot";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10152;
		public const string EntityCollectionSchemaName = "bots";
		public const string EntityDisplayCollectionName = "Copilots";
		public const string DisplayName = "Copilot";
		public const string EntitySetName = "bots";
		public const string EntityLogicalCollectionName = "bots";
		public const string EntityPrimaryIdAttribute = "botid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "bot";
		[DebuggerNonUserCode()]
		public bot()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public bot(Guid botId)
		{
			Entity = new Entity(EntityLogicalName, botId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public bot(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="bot"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public bot(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="bot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public bot(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new bot(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="bot"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public bot(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new bot(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public bot(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access Control Policy</para>
		/// <para><strong>Description</strong>: Defines which users may interact with the bot.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy.Any"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy? accesscontrolpolicy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.accesscontrolpolicy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.accesscontrolpolicy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.accesscontrolpolicy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.accesscontrolpolicy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application Manifest Information</para>
		/// <para><strong>Description</strong>: Stores information with application manifest data such as Teams application information.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string applicationmanifestinformation
		{
			get { return Entity.GetAttributeValue<string>(Fields.applicationmanifestinformation); }
			set { Entity.Attributes[Fields.applicationmanifestinformation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication Configuration Information</para>
		/// <para><strong>Description</strong>: Stores information for the authentication configuration.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string authenticationconfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.authenticationconfiguration); }
			set { Entity.Attributes[Fields.authenticationconfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication Mode</para>
		/// <para><strong>Description</strong>: Defines how the bot should be authenticated to the user.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode.Unspecified"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode? authenticationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.authenticationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.authenticationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.authenticationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.authenticationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication trigger</para>
		/// <para><strong>Description</strong>: Defines at which point authentication for the bot should be triggered. Security can be enforced at the bot entry point, removing the need for explicit authentication nodes in the dialog flow.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger.As_Needed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger? authenticationtrigger
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.authenticationtrigger);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.authenticationtrigger)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.authenticationtrigger] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.authenticationtrigger] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authorized Security Groups</para>
		/// <para><strong>Description</strong>: Contains a comma-delimited list of up to 20 Azure Active Directory Group IDs that are allowed to interact with the bot. This field is ignored if Access Control Policy is not set to Group membership.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 739</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string authorizedsecuritygroupids
		{
			get { return Entity.GetAttributeValue<string>(Fields.authorizedsecuritygroupids); }
			set { Entity.Attributes[Fields.authorizedsecuritygroupids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot</para>
		/// <para><strong>Description</strong>: Unique identifier of the Copilot.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid botId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.botId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Configuration</para>
		/// <para><strong>Description</strong>: Used to store content of bot configuration data.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Configuration
		{
			get { return Entity.GetAttributeValue<string>(Fields.Configuration); }
			set { Entity.Attributes[Fields.Configuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Icon (Base64)</para>
		/// <para><strong>Description</strong>: Used to visually identify your bot in channels and services. Represented in a base64 encoded string. Must be in PNG format, and no larger than 30K in size. This value can be changed at any time.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 51,200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string iconbase64
		{
			get { return Entity.GetAttributeValue<string>(Fields.iconbase64); }
			set { Entity.Attributes[Fields.iconbase64] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: The language identifier (LCID) of this Copilot.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.Language"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.Language.English"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.Language? Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The display name of the Copilot.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Origin</para>
		/// <para><strong>Description</strong>: Used to identify the origin used to create the bot.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Origin
		{
			get { return Entity.GetAttributeValue<string>(Fields.Origin); }
			set { Entity.Attributes[Fields.Origin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Provider connection reference</para>
		/// <para><strong>Description</strong>: Unique identifier for Connection Reference associated with Copilot.</para>
		/// <para><strong>Lookup</strong>: <see cref="connectionreference"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProviderConnectionReferenceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProviderConnectionReferenceId); }
			set { Entity.Attributes[Fields.ProviderConnectionReferenceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last published the bot.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference publishedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.publishedby); }
			set { Entity.Attributes[Fields.publishedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published On</para>
		/// <para><strong>Description</strong>: Date and time when the Copilot was last published</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? publishedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.publishedon); }
			set { Entity.Attributes[Fields.publishedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Runtime provider</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider.Power_Virtual_Agents"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider? RuntimeProvider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RuntimeProvider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.RuntimeProvider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RuntimeProvider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RuntimeProvider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SchemaName</para>
		/// <para><strong>Description</strong>: Unique name identifying the Copilot.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaName); }
			set { Entity.Attributes[Fields.SchemaName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Copilot</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Copilot</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.botOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.botOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Supported languages</para>
		/// <para><strong>Description</strong>: The list of supported languages by this bot</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages> SupportedLanguages
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.SupportedLanguages);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.botOptionSets.SupportedLanguages)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.SupportedLanguages] = null;
				}
				else
				{
					Entity.Attributes[Fields.SupportedLanguages] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SynchronizationStatus</para>
		/// <para><strong>Description</strong>: Used to store information about the synchronization operations of the bot</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SynchronizationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.SynchronizationStatus); }
			set { Entity.Attributes[Fields.SynchronizationStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Template</para>
		/// <para><strong>Description</strong>: Used to identify the template and version used for the bot default content</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Template
		{
			get { return Entity.GetAttributeValue<string>(Fields.Template); }
			set { Entity.Attributes[Fields.Template] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}