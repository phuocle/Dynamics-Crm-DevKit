//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets
{
	public enum msdyn_ownerviewstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hidden</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Hidden = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Seen</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Seen = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unseen</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Unseen = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Fail</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Fail = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Success</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Success = 0
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Delivered</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Success</strong></para>
		/// </summary>
		Delivered = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: InboundProcessingFailure</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Fail</strong></para>
		/// </summary>
		InboundProcessingFailure = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: InboundProcessingSuccessful</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Success</strong></para>
		/// </summary>
		InboundProcessingSuccessful = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotDelivered</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Fail</strong></para>
		/// </summary>
		NotDelivered = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotSent</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Fail</strong></para>
		/// </summary>
		NotSent = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: SendingAborted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Fail</strong></para>
		/// </summary>
		SendingAborted = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: SendingFailed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Fail</strong></para>
		/// </summary>
		SendingFailed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sent</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Success</strong></para>
		/// </summary>
		Sent = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_salesocmessage : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_channeltype = "msdyn_channeltype";
			public const string msdyn_clientactivityid = "msdyn_clientactivityid";
			public const string msdyn_content = "msdyn_content";
			public const string msdyn_conversationid = "msdyn_conversationid";
			public const string msdyn_entityid = "msdyn_entityid";
			public const string msdyn_entityname = "msdyn_entityname";
			public const string msdyn_from = "msdyn_from";
			public const string msdyn_isinbound = "msdyn_isinbound";
			public const string msdyn_messagedetails = "msdyn_messagedetails";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ownerviewstate = "msdyn_ownerviewstate";
			public const string msdyn_salesocmessageId = "msdyn_salesocmessageid";
			public const string msdyn_statusdetails = "msdyn_statusdetails";
			public const string msdyn_to = "msdyn_to";
			public const string msdyn_version = "msdyn_version";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_salesocmessage";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10857;
		public const string EntityCollectionSchemaName = "msdyn_salesocmessages";
		public const string EntityDisplayCollectionName = "SalesOmnichannel Message";
		public const string DisplayName = "SalesOmnichannel Message";
		public const string EntitySetName = "msdyn_salesocmessages";
		public const string EntityLogicalCollectionName = "msdyn_salesocmessages";
		public const string EntityPrimaryIdAttribute = "msdyn_salesocmessageid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_salesocmessage";
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage(Guid msdyn_salesocmessageId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_salesocmessageId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salesocmessage"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salesocmessage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_salesocmessage(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salesocmessage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_salesocmessage(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salesocmessage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: channeltype</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channeltype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channeltype); }
			set { Entity.Attributes[Fields.msdyn_channeltype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ClientActivityId</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_clientactivityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_clientactivityid); }
			set { Entity.Attributes[Fields.msdyn_clientactivityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: content</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_content
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_content); }
			set { Entity.Attributes[Fields.msdyn_content] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: conversationid</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocliveworkitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_conversationid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_conversationid); }
			set { Entity.Attributes[Fields.msdyn_conversationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: entityid</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityid); }
			set { Entity.Attributes[Fields.msdyn_entityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: entityname</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityname); }
			set { Entity.Attributes[Fields.msdyn_entityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: from</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_from
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_from); }
			set { Entity.Attributes[Fields.msdyn_from] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: isinbound</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isinbound
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isinbound); }
			set { Entity.Attributes[Fields.msdyn_isinbound] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Details of the message</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_messagedetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_messagedetails); }
			set { Entity.Attributes[Fields.msdyn_messagedetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ownerviewstate</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.msdyn_ownerviewstate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.msdyn_ownerviewstate.Unseen"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.msdyn_ownerviewstate? msdyn_ownerviewstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ownerviewstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.msdyn_ownerviewstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ownerviewstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ownerviewstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SalesOmnichannel Message</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_salesocmessageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_salesocmessageId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: statusdetails</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_statusdetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_statusdetails); }
			set { Entity.Attributes[Fields.msdyn_statusdetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: to</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_to
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_to); }
			set { Entity.Attributes[Fields.msdyn_to] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: version</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_version
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_version); }
			set { Entity.Attributes[Fields.msdyn_version] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the message</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the message</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesocmessageOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}