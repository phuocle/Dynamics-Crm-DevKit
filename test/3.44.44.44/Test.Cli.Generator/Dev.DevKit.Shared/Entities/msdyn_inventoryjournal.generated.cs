//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets
{
	public enum msdyn_JournalType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Allocated</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Allocated = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hand</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		On_Hand = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Order</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		On_Order = 690_970_001
	}
	public enum msdyn_TransactionType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Adjustment</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Inventory_Adjustment = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Transfer</para>
		/// <para><strong>Value</strong>: 690,970,004</para>
		/// </summary>
		Inventory_Transfer = 690_970_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 690,970,006</para>
		/// </summary>
		Manual = 690_970_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Product</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Purchase_Order_Product = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Receipt</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Purchase_Order_Receipt = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: RMA Product</para>
		/// <para><strong>Value</strong>: 690,970,005</para>
		/// </summary>
		RMA_Product = 690_970_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: WO Product</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		WO_Product = 690_970_002
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_inventoryjournal : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AllocatedToWorkOrder = "msdyn_allocatedtoworkorder";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_InventoryAdjustmentProduct = "msdyn_inventoryadjustmentproduct";
			public const string msdyn_inventoryjournalId = "msdyn_inventoryjournalid";
			public const string msdyn_JournalType = "msdyn_journaltype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OriginatingJournal = "msdyn_originatingjournal";
			public const string msdyn_Product = "msdyn_product";
			public const string msdyn_PurchaseOrderProduct = "msdyn_purchaseorderproduct";
			public const string msdyn_PurchaseOrderReceiptProduct = "msdyn_purchaseorderreceiptproduct";
			public const string msdyn_Quantity = "msdyn_quantity";
			public const string msdyn_Reversal = "msdyn_reversal";
			public const string msdyn_RMAReceiptProduct = "msdyn_rmareceiptproduct";
			public const string msdyn_TransactionType = "msdyn_transactiontype";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_Warehouse = "msdyn_warehouse";
			public const string msdyn_WorkOrderProduct = "msdyn_workorderproduct";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_inventoryjournal";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11673;
		public const string EntityCollectionSchemaName = "msdyn_inventoryjournals";
		public const string EntityDisplayCollectionName = "Inventory Journals";
		public const string DisplayName = "Inventory Journal";
		public const string EntitySetName = "msdyn_inventoryjournals";
		public const string EntityLogicalCollectionName = "msdyn_inventoryjournals";
		public const string EntityPrimaryIdAttribute = "msdyn_inventoryjournalid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_inventoryjournal";
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Guid msdyn_inventoryjournalId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_inventoryjournalId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_inventoryjournal"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_inventoryjournal"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_inventoryjournal(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_inventoryjournal"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_inventoryjournal(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_inventoryjournal(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Shows the sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allocated To Work Order</para>
		/// <para><strong>Description</strong>: Work Order this product is allocated to</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AllocatedToWorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AllocatedToWorkOrder); }
			set { Entity.Attributes[Fields.msdyn_AllocatedToWorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Adjustment Product</para>
		/// <para><strong>Description</strong>: The Inventory Adjustment Product record related to this journal</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_inventoryadjustmentproduct"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_InventoryAdjustmentProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_InventoryAdjustmentProduct); }
			set { Entity.Attributes[Fields.msdyn_InventoryAdjustmentProduct] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inventory Journal</para>
		/// <para><strong>Description</strong>: Shows the entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_inventoryjournalId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_inventoryjournalId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journal Type</para>
		/// <para><strong>Description</strong>: Shows the transaction type of this journal.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_JournalType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_JournalType? msdyn_JournalType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_JournalType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_JournalType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_JournalType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_JournalType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Enter the name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating Journal</para>
		/// <para><strong>Description</strong>: Indicates the Journal reversed by this journal record</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_inventoryjournal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OriginatingJournal
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OriginatingJournal); }
			set { Entity.Attributes[Fields.msdyn_OriginatingJournal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product</para>
		/// <para><strong>Description</strong>: Product this journal relates to</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Product
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Product); }
			set { Entity.Attributes[Fields.msdyn_Product] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Product</para>
		/// <para><strong>Description</strong>: The Purchase Order Product record related to this journal</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_purchaseorderproduct"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PurchaseOrderProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PurchaseOrderProduct); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderProduct] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Receipt Product</para>
		/// <para><strong>Description</strong>: Unique identifier for Purchase Order Receipt Product associated with Inventory Journal.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_purchaseorderreceiptproduct"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PurchaseOrderReceiptProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PurchaseOrderReceiptProduct); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderReceiptProduct] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quantity</para>
		/// <para><strong>Description</strong>: Enter the quantity affected. A positive quantity indicates the receipt of this product into the specified warehouse, whereas a negative indicates a withdrawal.</para>
		/// <para>Required - <strong>Decimal Number</strong> - <strong>MinValue</strong>: -1,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Quantity
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Quantity); }
			set { Entity.Attributes[Fields.msdyn_Quantity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reversal</para>
		/// <para><strong>Description</strong>: Indicates if this Journal reverses a previous journal record</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Reversal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Reversal); }
			set { Entity.Attributes[Fields.msdyn_Reversal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RMA Receipt Product</para>
		/// <para><strong>Description</strong>: The RMA Receipt Product record related to this journal</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_rmareceiptproduct"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RMAReceiptProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RMAReceiptProduct); }
			set { Entity.Attributes[Fields.msdyn_RMAReceiptProduct] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transaction Type</para>
		/// <para><strong>Description</strong>: Shows the transaction type of this journal.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_TransactionType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_TransactionType.Manual"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_TransactionType? msdyn_TransactionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TransactionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.msdyn_TransactionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TransactionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TransactionType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit</para>
		/// <para><strong>Description</strong>: Unit of product used</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Warehouse</para>
		/// <para><strong>Description</strong>: Warehouse affected by this transaction</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_warehouse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Warehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Warehouse); }
			set { Entity.Attributes[Fields.msdyn_Warehouse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Product</para>
		/// <para><strong>Description</strong>: The Work Order Product record related to this journal</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorderproduct"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderProduct
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderProduct); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderProduct] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Inventory Journal</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Inventory Journal</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_inventoryjournalOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Shows the time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}