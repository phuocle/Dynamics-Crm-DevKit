//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets
{
	public enum msdyncrm_matchingstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead creation failed</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Lead_creation_failed = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead matched but not updated</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Lead_matched_but_not_updated = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead update failed</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Lead_update_failed = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Match failed</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Match_failed = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: New lead created</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		New_lead_created = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending lead matching</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Pending_lead_matching = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Updated existing lead</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Updated_existing_lead = 192_350_002
	}
	public enum msdyncrm_processingstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Failed</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Processing_Failed = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Succeeded</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Processing_Succeeded = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unprocessed</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Unprocessed = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_linkedinformsubmission : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncr2_customerjourney = "msdyncr2_customerjourney";
			public const string msdyncrm_contact = "msdyncrm_contact";
			public const string msdyncrm_Lead = "msdyncrm_lead";
			public const string msdyncrm_LinkedInAccountID = "msdyncrm_linkedinaccountid";
			public const string msdyncrm_LinkedInCampaign = "msdyncrm_linkedincampaign";
			public const string msdyncrm_LinkedInCampaignID = "msdyncrm_linkedincampaignid";
			public const string msdyncrm_LinkedInCreativeID = "msdyncrm_linkedincreativeid";
			public const string msdyncrm_LinkedInFormID = "msdyncrm_linkedinformid";
			public const string msdyncrm_LinkedInFormName = "msdyncrm_linkedinformname";
			public const string msdyncrm_linkedinformsubmission_textid = "msdyncrm_linkedinformsubmission_textid";
			public const string msdyncrm_linkedinformsubmissionId = "msdyncrm_linkedinformsubmissionid";
			public const string msdyncrm_LinkedInUserProfileID = "msdyncrm_linkedinuserprofileid";
			public const string msdyncrm_matchingstatus = "msdyncrm_matchingstatus";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_processingstate = "msdyncrm_processingstate";
			public const string msdyncrm_SubmissionDate = "msdyncrm_submissiondate";
			public const string msdyncrm_Type = "msdyncrm_type";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_linkedinformsubmission";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11208;
		public const string EntityCollectionSchemaName = "msdyncrm_linkedinformsubmissions";
		public const string EntityDisplayCollectionName = "LinkedIn Lead Gen Form Submissions";
		public const string DisplayName = "LinkedIn Lead Gen Form Submission";
		public const string EntitySetName = "msdyncrm_linkedinformsubmissions";
		public const string EntityLogicalCollectionName = "msdyncrm_linkedinformsubmissions";
		public const string EntityPrimaryIdAttribute = "msdyncrm_linkedinformsubmissionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_linkedinformsubmission";
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission(Guid msdyncrm_linkedinformsubmissionId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_linkedinformsubmissionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_linkedinformsubmission"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_linkedinformsubmission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_linkedinformsubmission(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_linkedinformsubmission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_linkedinformsubmission(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinformsubmission(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer journey</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_customerjourney"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncr2_customerjourney
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncr2_customerjourney); }
			set { Entity.Attributes[Fields.msdyncr2_customerjourney] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_contact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_contact); }
			set { Entity.Attributes[Fields.msdyncrm_contact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Description</strong>: Dynamics 365 lead associated with this submission</para>
		/// <para><strong>Lookup</strong>: <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_Lead
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_Lead); }
			set { Entity.Attributes[Fields.msdyncrm_Lead] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn account</para>
		/// <para><strong>Description</strong>: LinkedIn account this submission came from</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LinkedInAccountID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LinkedInAccountID); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInAccountID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Campaign</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_linkedincampaign"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_LinkedInCampaign
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_LinkedInCampaign); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInCampaign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn campaign ID</para>
		/// <para><strong>Description</strong>: Indicates which LinkedIn campaign this submission is for</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LinkedInCampaignID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LinkedInCampaignID); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInCampaignID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Creative ID</para>
		/// <para><strong>Description</strong>: Indicates which LinkedIn creative campaign this submission is for</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LinkedInCreativeID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LinkedInCreativeID); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInCreativeID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Lead Gen Form</para>
		/// <para><strong>Description</strong>: LinkedIn form this submission came from</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_linkedinform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_LinkedInFormID
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_LinkedInFormID); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInFormID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Form</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LinkedInFormName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LinkedInFormName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Lead Gen</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_linkedinformsubmission_textid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_linkedinformsubmission_textid); }
			set { Entity.Attributes[Fields.msdyncrm_linkedinformsubmission_textid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn ID</para>
		/// <para><strong>Description</strong>: Indicates the LInkedIn form submission</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_linkedinformsubmissionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_linkedinformsubmissionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn User Profile</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_linkedinuserprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_LinkedInUserProfileID
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_LinkedInUserProfileID); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInUserProfileID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Matching status</para>
		/// <para><strong>Description</strong>: Status of matching and lead association with Dynamics 365</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_matchingstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_matchingstatus.Pending_lead_matching"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_matchingstatus? msdyncrm_matchingstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_matchingstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_matchingstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_matchingstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_matchingstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing State</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_processingstate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_processingstate.Unprocessed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_processingstate? msdyncrm_processingstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_processingstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.msdyncrm_processingstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_processingstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_processingstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submission date</para>
		/// <para><strong>Description</strong>: Date and time submission was captured</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_SubmissionDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_SubmissionDate); }
			set { Entity.Attributes[Fields.msdyncrm_SubmissionDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Submission type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Type); }
			set { Entity.Attributes[Fields.msdyncrm_Type] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Indicates the person who owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the LinkedIn Form Submission</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the LinkedIn Form Submission</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformsubmissionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}