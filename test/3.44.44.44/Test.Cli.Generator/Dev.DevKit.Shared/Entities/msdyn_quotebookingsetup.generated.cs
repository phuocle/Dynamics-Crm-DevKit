//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets
{
	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Facility = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Onsite</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Onsite = 690_970_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_quotebookingsetup : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_autogeneratebooking = "msdyn_autogeneratebooking";
			public const string msdyn_autogenerateworkorder = "msdyn_autogenerateworkorder";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_EstimatedCost = "msdyn_estimatedcost";
			public const string msdyn_estimatedcost_Base = "msdyn_estimatedcost_base";
			public const string msdyn_estimatedduration = "msdyn_estimatedduration";
			public const string msdyn_EstimatedMargin = "msdyn_estimatedmargin";
			public const string msdyn_EstimatedMarginPerWO = "msdyn_estimatedmarginperwo";
			public const string msdyn_EstimatedProductCost = "msdyn_estimatedproductcost";
			public const string msdyn_estimatedproductcost_Base = "msdyn_estimatedproductcost_base";
			public const string msdyn_EstimatedProductRevenue = "msdyn_estimatedproductrevenue";
			public const string msdyn_estimatedproductrevenue_Base = "msdyn_estimatedproductrevenue_base";
			public const string msdyn_EstimatedRevenue = "msdyn_estimatedrevenue";
			public const string msdyn_estimatedrevenue_Base = "msdyn_estimatedrevenue_base";
			public const string msdyn_EstimatedRevenuePerWO = "msdyn_estimatedrevenueperwo";
			public const string msdyn_estimatedrevenueperwo_Base = "msdyn_estimatedrevenueperwo_base";
			public const string msdyn_EstimatedServiceCost = "msdyn_estimatedservicecost";
			public const string msdyn_estimatedservicecost_Base = "msdyn_estimatedservicecost_base";
			public const string msdyn_EstimatedServiceRevenue = "msdyn_estimatedservicerevenue";
			public const string msdyn_estimatedservicerevenue_Base = "msdyn_estimatedservicerevenue_base";
			public const string msdyn_generateworkorderdaysinadvance = "msdyn_generateworkorderdaysinadvance";
			public const string msdyn_Internalflags = "msdyn_Internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_Margin = "msdyn_margin";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_NumberOfWO = "msdyn_numberofwo";
			public const string msdyn_postbookingflexibility = "msdyn_postbookingflexibility";
			public const string msdyn_postponegenerationuntil = "msdyn_postponegenerationuntil";
			public const string msdyn_prebookingflexibility = "msdyn_prebookingflexibility";
			public const string msdyn_preferredresource = "msdyn_preferredresource";
			public const string msdyn_preferredstarttime = "msdyn_preferredstarttime";
			public const string msdyn_priority = "msdyn_priority";
			public const string msdyn_quote = "msdyn_quote";
			public const string msdyn_quotebookingsetupId = "msdyn_quotebookingsetupid";
			public const string msdyn_quotedetail = "msdyn_quotedetail_msdyn_quotebookingset";
			public const string msdyn_QuoteDetailId = "msdyn_quotedetailid";
			public const string msdyn_recurrencesettings = "msdyn_recurrencesettings";
			public const string msdyn_revision = "msdyn_revision";
			public const string msdyn_timewindowend = "msdyn_timewindowend";
			public const string msdyn_timewindowstart = "msdyn_timewindowstart";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_workordersummary = "msdyn_workordersummary";
			public const string msdyn_workordertype = "msdyn_workordertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_quotebookingsetup";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11690;
		public const string EntityCollectionSchemaName = "msdyn_quotebookingsetups";
		public const string EntityDisplayCollectionName = "Quote Booking Setups";
		public const string DisplayName = "Quote Booking Setup";
		public const string EntitySetName = "msdyn_quotebookingsetups";
		public const string EntityLogicalCollectionName = "msdyn_quotebookingsetups";
		public const string EntityPrimaryIdAttribute = "msdyn_quotebookingsetupid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_quotebookingsetup";
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup(Guid msdyn_quotebookingsetupId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_quotebookingsetupId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_quotebookingsetup"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_quotebookingsetup"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_quotebookingsetup(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_quotebookingsetup"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_quotebookingsetup(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_quotebookingsetup(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Generate Booking</para>
		/// <para><strong>Description</strong>: Enable if the system should automatically generate Order Bookings for the Booking Dates of this Booking Setup</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_autogeneratebooking
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_autogeneratebooking); }
			set { Entity.Attributes[Fields.msdyn_autogeneratebooking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Generate Work Order</para>
		/// <para><strong>Description</strong>: Enable if the system should automatically generate Work Orders for the Booking Dates of this Booking Setup</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_autogenerateworkorder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_autogenerateworkorder); }
			set { Entity.Attributes[Fields.msdyn_autogenerateworkorder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type a description of this booking setup.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Cost</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Cost (Base)</para>
		/// <para><strong>Description</strong>: Value of the Estimated Cost in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Duration</para>
		/// <para><strong>Description</strong>: Shows the duration of the booking.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_estimatedduration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_estimatedduration); }
			set { Entity.Attributes[Fields.msdyn_estimatedduration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedMargin</para>
		/// <para><strong>Description</strong>: The estimated margin for this Quote Booking Setup</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedMargin
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstimatedMargin); }
			set { Entity.Attributes[Fields.msdyn_EstimatedMargin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedMarginPerWO</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedMarginPerWO
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_EstimatedMarginPerWO); }
			set { Entity.Attributes[Fields.msdyn_EstimatedMarginPerWO] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedProductCost</para>
		/// <para><strong>Description</strong>: Estimated Costs of all Products that are associated to this Quote Booking Setup</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedProductCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedProductCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedProductCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedProductCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedProductCost (Base)</para>
		/// <para><strong>Description</strong>: Value of the EstimatedProductCost in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedproductcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedproductcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedProductRevenue</para>
		/// <para><strong>Description</strong>: The sum of estimated revenue of all products that are associated to this quote booking setup</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedProductRevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedProductRevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedProductRevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedProductRevenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedProductRevenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the EstimatedProductRevenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedproductrevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedproductrevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Revenue</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedRevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedRevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedRevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedRevenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Revenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the Estimated Revenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedrevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedrevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedRevenuePerWO</para>
		/// <para><strong>Description</strong>: The Estimated Revenue per Work Order</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedRevenuePerWO
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedRevenuePerWO);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedRevenuePerWO] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedRevenuePerWO] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedRevenuePerWO (Base)</para>
		/// <para><strong>Description</strong>: Value of the EstimatedRevenuePerWO in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedrevenueperwo_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedrevenueperwo_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedServiceCost</para>
		/// <para><strong>Description</strong>: The sum of the estimated costs of all quote booking services that are associated to this quote booking setup</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedServiceCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedServiceCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedServiceCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedServiceCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedServiceCost (Base)</para>
		/// <para><strong>Description</strong>: Value of the EstimatedServiceCost in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedservicecost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedservicecost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedServiceRevenue</para>
		/// <para><strong>Description</strong>: The sum of estimated revenue of all services that are associated to this quote booking setup</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimatedServiceRevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimatedServiceRevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimatedServiceRevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimatedServiceRevenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EstimatedServiceRevenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the EstimatedServiceRevenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatedservicerevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatedservicerevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Generate Work Order Days In Advance</para>
		/// <para><strong>Description</strong>: Specify how many days in advance of the Booking Date the system should automatically generate a Work Order</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_generateworkorderdaysinadvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_generateworkorderdaysinadvance); }
			set { Entity.Attributes[Fields.msdyn_generateworkorderdaysinadvance] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Internalflags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Internalflags); }
			set { Entity.Attributes[Fields.msdyn_Internalflags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Description</strong>: Only used when Work Location is a Facility. Latitude is used when trying to locate nearby facilities.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Description</strong>: Only used when Work Location is a Facility. Longitude is used when trying to locate nearby facilities.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Margin</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_Margin
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_Margin); }
			set { Entity.Attributes[Fields.msdyn_Margin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NumberOfWO</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_NumberOfWO
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_NumberOfWO); }
			set { Entity.Attributes[Fields.msdyn_NumberOfWO] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post Booking Flexibility</para>
		/// <para><strong>Description</strong>: Shows the flexibility of days after the booking date.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_postbookingflexibility
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_postbookingflexibility); }
			set { Entity.Attributes[Fields.msdyn_postbookingflexibility] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Postpone Generation Until</para>
		/// <para><strong>Description</strong>: Shows the date until which Work Order generation can be postponed. Intended for internal use. Manipulating values in this field is not supported and can lead to unexpected system behavior.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_postponegenerationuntil
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_postponegenerationuntil); }
			set { Entity.Attributes[Fields.msdyn_postponegenerationuntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre Booking Flexibility</para>
		/// <para><strong>Description</strong>: Shows the flexibility of days prior to the booking date.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_prebookingflexibility
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_prebookingflexibility); }
			set { Entity.Attributes[Fields.msdyn_prebookingflexibility] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Resource</para>
		/// <para><strong>Description</strong>: Preferred Resource to booked</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_preferredresource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_preferredresource); }
			set { Entity.Attributes[Fields.msdyn_preferredresource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Start Time</para>
		/// <para><strong>Description</strong>: Shows the preferred time to booking.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_preferredstarttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_preferredstarttime); }
			set { Entity.Attributes[Fields.msdyn_preferredstarttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Booking Priority</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_priority"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_priority
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_priority); }
			set { Entity.Attributes[Fields.msdyn_priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote</para>
		/// <para><strong>Description</strong>: Quote this Booking Setup relates to</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="quote"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_quote
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_quote); }
			set { Entity.Attributes[Fields.msdyn_quote] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Booking Setup</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_quotebookingsetupId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_quotebookingsetupId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Relationship between Quote Detail and Quote Booking Setup</para>
		/// <para><strong>Description</strong>: Relationship between Quote Detail and Quote Booking Setup</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="quotedetail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_quotedetail
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_quotedetail); }
			set { Entity.Attributes[Fields.msdyn_quotedetail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: QuoteDetailId</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_QuoteDetailId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_QuoteDetailId); }
			set { Entity.Attributes[Fields.msdyn_QuoteDetailId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Settings</para>
		/// <para><strong>Description</strong>: Stores the booking recurrence settings.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recurrencesettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recurrencesettings); }
			set { Entity.Attributes[Fields.msdyn_recurrencesettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Revision</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_revision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_revision); }
			set { Entity.Attributes[Fields.msdyn_revision] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Window End</para>
		/// <para><strong>Description</strong>: Shows the time window up until when this can be booked.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_timewindowendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_timewindowend); }
			set { Entity.Attributes[Fields.msdyn_timewindowend] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Window Start</para>
		/// <para><strong>Description</strong>: Shows the time window from when this can be booked.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_timewindowstartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_timewindowstart); }
			set { Entity.Attributes[Fields.msdyn_timewindowstart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.msdyn_WorkLocation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.msdyn_WorkLocation.Onsite"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Summary</para>
		/// <para><strong>Description</strong>: Shows the work order summary to be set on the work orders generated.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_workordersummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_workordersummary); }
			set { Entity.Attributes[Fields.msdyn_workordersummary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Type</para>
		/// <para><strong>Description</strong>: Work Order Type to be used on generated Work Orders</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_workordertype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workordertype
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workordertype); }
			set { Entity.Attributes[Fields.msdyn_workordertype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Quote Booking Setup</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Quote Booking Setup</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_quotebookingsetupOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}