//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Appointment = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert</para>
		/// <para><strong>Value</strong>: 11,000</para>
		/// </summary>
		Booking_Alert = 11_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Activity</para>
		/// <para><strong>Value</strong>: 4,402</para>
		/// </summary>
		Campaign_Activity = 4_402,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Response</para>
		/// <para><strong>Value</strong>: 4,401</para>
		/// </summary>
		Campaign_Response = 4_401,
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Resolution</para>
		/// <para><strong>Value</strong>: 4,206</para>
		/// </summary>
		Case_Resolution = 4_206,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation</para>
		/// <para><strong>Value</strong>: 10,691</para>
		/// </summary>
		Conversation = 10_691,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Transcript</para>
		/// <para><strong>Value</strong>: 10,877</para>
		/// </summary>
		Copilot_Transcript = 10_877,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice alert</para>
		/// <para><strong>Value</strong>: 10,600</para>
		/// </summary>
		Customer_Voice_alert = 10_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey invite</para>
		/// <para><strong>Value</strong>: 10,610</para>
		/// </summary>
		Customer_Voice_survey_invite = 10_610,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey response</para>
		/// <para><strong>Value</strong>: 10,612</para>
		/// </summary>
		Customer_Voice_survey_response = 10_612,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invite Redemption</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Invite_Redemption = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Letter</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Letter = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Close</para>
		/// <para><strong>Value</strong>: 4,208</para>
		/// </summary>
		Opportunity_Close = 4_208,
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Close</para>
		/// <para><strong>Value</strong>: 4,209</para>
		/// </summary>
		Order_Close = 4_209,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message</para>
		/// <para><strong>Value</strong>: 11,063</para>
		/// </summary>
		Outbound_message = 11_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_Call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Portal_Comment = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Campaign</para>
		/// <para><strong>Value</strong>: 4,406</para>
		/// </summary>
		Quick_Campaign = 4_406,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Close</para>
		/// <para><strong>Value</strong>: 4,211</para>
		/// </summary>
		Quote_Close = 4_211,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Appointment</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Recurring_Appointment = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Value</strong>: 4,214</para>
		/// </summary>
		Service_Activity = 4_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Value</strong>: 10,708</para>
		/// </summary>
		Session = 10_708,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams chat</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Teams_chat = 10_185,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voicemail</para>
		/// <para><strong>Value</strong>: 11,070</para>
		/// </summary>
		Voicemail = 11_070
	}
	public enum ExpansionStateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Full</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Full = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Partial</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Partial = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unexpanded</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unexpanded = 0
	}
	public enum Instance
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: First</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		First = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fourth</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Fourth = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Last</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Last = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Second</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Second = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Third</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Third = 3
	}
	public enum InstanceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Recurring</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Recurring = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Exception</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Recurring_Exception = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Future Exception</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Recurring_Future_Exception = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Instance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Recurring_Instance = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Master</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Recurring_Master = 1
	}
	public enum MonthOfYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: April</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		April = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: August</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		August = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: December</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		December = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: February</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		February = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Month Of Year</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Invalid_Month_Of_Year = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: January</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		January = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: July</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		July = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: June</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		June = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: March</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		March = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: May</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		May = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: November</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		November = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: October</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		October = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: September</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		September = 9
	}
	public enum OnlineMeetingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Meeting</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Teams_Meeting = 1
	}
	public enum PatternEndType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No End Date</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		No_End_Date = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Occurrences</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Occurrences = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pattern End Date</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Pattern_End_Date = 3
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum RecurrencePatternType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Daily</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Daily = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monthly</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Monthly = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Weekly</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Weekly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yearly</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Yearly = 3
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Completed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Scheduled = 3
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Busy</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Scheduled</strong></para>
		/// </summary>
		Busy = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Canceled</strong></para>
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Completed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Free</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Free = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Out of Office</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Scheduled</strong></para>
		/// </summary>
		Out_of_Office = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tentative</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Tentative = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RecurringAppointmentMaster : EntityBase
	{
		public struct Fields
		{
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string Category = "category";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DayOfMonth = "dayofmonth";
			public const string DaysOfWeekMask = "daysofweekmask";
			public const string DeletedExceptionsList = "deletedexceptionslist";
			public const string Description = "description";
			public const string Duration = "duration";
			public const string EffectiveEndDate = "effectiveenddate";
			public const string EffectiveStartDate = "effectivestartdate";
			public const string EndTime = "endtime";
			public const string ExchangeRate = "exchangerate";
			public const string ExpansionStateCode = "expansionstatecode";
			public const string FirstDayOfWeek = "firstdayofweek";
			public const string GlobalObjectId = "globalobjectid";
			public const string GroupId = "groupid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Instance = "instance";
			public const string InstanceTypeCode = "instancetypecode";
			public const string Interval = "interval";
			public const string IsAllDayEvent = "isalldayevent";
			public const string IsBilled = "isbilled";
			public const string IsMapiPrivate = "ismapiprivate";
			public const string IsNthMonthly = "isnthmonthly";
			public const string IsNthYearly = "isnthyearly";
			public const string IsOnlineMeeting = "isonlinemeeting";
			public const string IsRegenerate = "isregenerate";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsUnsafe = "isunsafe";
			public const string IsWeekDayPattern = "isweekdaypattern";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastExpandedInstanceDate = "lastexpandedinstancedate";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MonthOfYear = "monthofyear";
			public const string NextExpansionInstanceDate = "nextexpansioninstancedate";
			public const string Occurrences = "occurrences";
			public const string OnlineMeetingChatId = "onlinemeetingchatid";
			public const string OnlineMeetingId = "onlinemeetingid";
			public const string OnlineMeetingJoinUrl = "onlinemeetingjoinurl";
			public const string OnlineMeetingType = "onlinemeetingtype";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string OutlookOwnerApptId = "outlookownerapptid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PatternEndDate = "patternenddate";
			public const string PatternEndType = "patternendtype";
			public const string PatternStartDate = "patternstartdate";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string RecurrencePatternType = "recurrencepatterntype";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RequiredAttendees = "requiredattendees";
			public const string RuleId = "ruleid";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SeriesStatus = "seriesstatus";
			public const string ServiceId = "serviceid";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StartTime = "starttime";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subcategory = "subcategory";
			public const string Subject = "subject";
			public const string SubscriptionId = "subscriptionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "recurringappointmentmaster";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4251;
		public const string EntityCollectionSchemaName = "RecurringAppointmentMasters";
		public const string EntityDisplayCollectionName = "Recurring Appointments";
		public const string DisplayName = "Recurring Appointment";
		public const string EntitySetName = "recurringappointmentmasters";
		public const string EntityLogicalCollectionName = "recurringappointmentmasters";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "RecurringAppointmentMaster";
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Guid RecurringAppointmentMasterId)
		{
			Entity = new Entity(EntityLogicalName, RecurringAppointmentMasterId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurringAppointmentMaster"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurringAppointmentMaster"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurringAppointmentMaster(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurringAppointmentMaster"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurringAppointmentMaster(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurringAppointmentMaster(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Appointment</para>
		/// <para><strong>Description</strong>: Unique identifier of the recurring appointment series.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Type</para>
		/// <para><strong>Description</strong>: Type of activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Description</strong>: Type a category to identify the recurring appointment type, such as status meeting or service call, to tie the appointment to a business group or function.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Day Of Month</para>
		/// <para><strong>Description</strong>: The day of the month on which the recurring appointment occurs.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 31</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DayOfMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DayOfMonth); }
			set { Entity.Attributes[Fields.DayOfMonth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Days Of Week Mask</para>
		/// <para><strong>Description</strong>: Bitmask that represents the days of the week on which the recurring appointment occurs.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 127</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysOfWeekMask
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysOfWeekMask); }
			set { Entity.Attributes[Fields.DaysOfWeekMask] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Appointments</para>
		/// <para><strong>Description</strong>: List of deleted instances of the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DeletedExceptionsList
		{
			get { return Entity.GetAttributeValue<string>(Fields.DeletedExceptionsList); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the recurring appointment, such as key talking points or objectives.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Duration of the recurring appointment series in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Effective End Date</para>
		/// <para><strong>Description</strong>: Actual end date of the recurring appointment series based on the specified end date and recurrence pattern.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveEndDate); }
			set { Entity.Attributes[Fields.EffectiveEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Effective Start Date</para>
		/// <para><strong>Description</strong>: Actual start date of the recurring appointment series based on the specified start date and recurrence pattern.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveStartDate); }
			set { Entity.Attributes[Fields.EffectiveStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pattern End Time</para>
		/// <para><strong>Description</strong>: End time of the associated activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expansion State Code</para>
		/// <para><strong>Description</strong>: State code to indicate whether the recurring appointment series is expanded fully or partially.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode.Unexpanded"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode? ExpansionStateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ExpansionStateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.ExpansionStateCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Day Of Week</para>
		/// <para><strong>Description</strong>: First day of week for the recurrence pattern.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FirstDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FirstDayOfWeek); }
			set { Entity.Attributes[Fields.FirstDayOfWeek] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outlook Recurring Appointment Master</para>
		/// <para><strong>Description</strong>: Unique Outlook identifier to correlate recurring appointment series across Exchange mailboxes.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GlobalObjectId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GlobalObjectId); }
			set { Entity.Attributes[Fields.GlobalObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Group Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the recurring appointment series for which the recurrence information was updated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="recurringappointmentmaster"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GroupId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Instance</para>
		/// <para><strong>Description</strong>: Specifies the recurring appointment series to occur on every Nth day of a month. Valid for monthly and yearly recurrence patterns only.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.Instance"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.Instance? Instance
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Instance);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.Instance)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Instance] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Instance] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment Type</para>
		/// <para><strong>Description</strong>: Type of instance of a recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode.Not_Recurring"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode? InstanceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.InstanceTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interval</para>
		/// <para><strong>Description</strong>: Number of units of a given recurrence type between occurrences.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Interval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Interval); }
			set { Entity.Attributes[Fields.Interval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: All Day Event</para>
		/// <para><strong>Description</strong>: Select whether the recurring appointment is an all-day event to make sure that the required resources are scheduled for the full day.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAllDayEvent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAllDayEvent); }
			set { Entity.Attributes[Fields.IsAllDayEvent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Billed</para>
		/// <para><strong>Description</strong>: Indicates whether the recurring appointment series was billed as part of resolving a case.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Private</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMapiPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMapiPrivate); }
			set { Entity.Attributes[Fields.IsMapiPrivate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nth Monthly</para>
		/// <para><strong>Description</strong>: Indicates whether the recurring appointment series should occur after every N months. Valid for monthly recurrence pattern only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthMonthly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthMonthly); }
			set { Entity.Attributes[Fields.IsNthMonthly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nth Yearly</para>
		/// <para><strong>Description</strong>: Indicates whether the recurring appointment series should occur after every N years. Valid for yearly recurrence pattern only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthYearly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthYearly); }
			set { Entity.Attributes[Fields.IsNthYearly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Online Meeting</para>
		/// <para><strong>Description</strong>: Displays whether or not this is an online meeting.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOnlineMeeting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOnlineMeeting); }
			set { Entity.Attributes[Fields.IsOnlineMeeting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regenerate</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegenerate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegenerate); }
			set { Entity.Attributes[Fields.IsRegenerate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Regular Activity</para>
		/// <para><strong>Description</strong>: Indicates whether the activity is a regular activity type or event type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsUnsafe</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsUnsafe
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsUnsafe); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Every Weekday</para>
		/// <para><strong>Description</strong>: Indicates whether the weekly recurrence pattern is a daily weekday pattern. Valid for weekly recurrence pattern only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWeekDayPattern
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWeekDayPattern); }
			set { Entity.Attributes[Fields.IsWeekDayPattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Workflow Created</para>
		/// <para><strong>Description</strong>: Indicates whether the recurring appointment series was created from a workflow rule.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Expanded Instance Date</para>
		/// <para><strong>Description</strong>: Date of last expanded instance of a recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastExpandedInstanceDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastExpandedInstanceDate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Location</para>
		/// <para><strong>Description</strong>: Type the location where the recurring appointment will take place, such as a conference room or customer office.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Location
		{
			get { return Entity.GetAttributeValue<string>(Fields.Location); }
			set { Entity.Attributes[Fields.Location] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Month Of Year</para>
		/// <para><strong>Description</strong>: Indicates the month of the year for the recurrence pattern.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear.Invalid_Month_Of_Year"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear? MonthOfYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MonthOfYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.MonthOfYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MonthOfYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MonthOfYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Expanded Instance Date</para>
		/// <para><strong>Description</strong>: Date of the next expanded instance of a recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? NextExpansionInstanceDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.NextExpansionInstanceDate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Occurrences</para>
		/// <para><strong>Description</strong>: Number of appointment occurrences in a recurring appointment series.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Occurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Occurrences); }
			set { Entity.Attributes[Fields.Occurrences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Chat Id</para>
		/// <para><strong>Description</strong>: Shows the online meeting chat id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingChatId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingChatId); }
			set { Entity.Attributes[Fields.OnlineMeetingChatId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Id</para>
		/// <para><strong>Description</strong>: Shows the online meeting id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingId); }
			set { Entity.Attributes[Fields.OnlineMeetingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Join Url</para>
		/// <para><strong>Description</strong>: Shows the online meeting join url.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 600</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingJoinUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingJoinUrl); }
			set { Entity.Attributes[Fields.OnlineMeetingJoinUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Type</para>
		/// <para><strong>Description</strong>: Displays the online meeting type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.OnlineMeetingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.OnlineMeetingType? OnlineMeetingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OnlineMeetingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.OnlineMeetingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OnlineMeetingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OnlineMeetingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Optional Attendees</para>
		/// <para><strong>Description</strong>: Enter the account, contact, lead, user, or other equipment resources that are not needed at the recurring appointment, but can optionally attend.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="equipment"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> OptionalAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.OptionalAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.OptionalAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organizer</para>
		/// <para><strong>Description</strong>: Enter the user who is in charge of coordinating or leading the recurring appointment to make sure the appointment is displayed in the user&apos;s My Activities view.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Organizer
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Organizer).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Organizer] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outlook Recurring Appointment Master Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the Microsoft Office Outlook recurring appointment series owner that correlates to the PR_OWNER_APPT_ID MAPI property.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OutlookOwnerApptId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OutlookOwnerApptId); }
			set { Entity.Attributes[Fields.OutlookOwnerApptId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Range End</para>
		/// <para><strong>Description</strong>: End date of the recurrence range.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternEndDate); }
			set { Entity.Attributes[Fields.PatternEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pattern End Type</para>
		/// <para><strong>Description</strong>: Select the type of end date for the recurring appointment, such as no end date or the number of occurrences.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PatternEndType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PatternEndType? PatternEndType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PatternEndType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PatternEndType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PatternEndType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PatternEndType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Range Start</para>
		/// <para><strong>Description</strong>: Start date of the recurrence range.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternStartDate); }
			set { Entity.Attributes[Fields.PatternStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Shows the ID of the process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Frequency</para>
		/// <para><strong>Description</strong>: Select the pattern type for the recurring appointment to indicate whether the appointment occurs daily, weekly, monthly, or yearly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType.Daily"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType? RecurrencePatternType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RecurrencePatternType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.RecurrencePatternType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RecurrencePatternType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RecurrencePatternType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Choose the record that the recurring appointment series relates to.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="bookableresourcebooking"/>, <see cref="bookableresourcebookingheader"/>, <see cref="bulkoperation"/>, <see cref="campaign"/>, <see cref="campaignactivity"/>, <see cref="contact"/>, <see cref="contract"/>, <see cref="entitlement"/>, <see cref="entitlementtemplate"/>, <see cref="incident"/>, <see cref="invoice"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="lead"/>, <see cref="msdyncrm_contentsettings"/>, <see cref="msdyncrm_customerjourney"/>, <see cref="msdyncrm_leadscoremodel"/>, <see cref="msdyncrm_linkedinaccount"/>, <see cref="msdyncrm_linkedinactivity"/>, <see cref="msdyncrm_linkedinfieldmapping"/>, <see cref="msdyncrm_linkedinform"/>, <see cref="msdyncrm_linkedinformanswer"/>, <see cref="msdyncrm_linkedinformquestion"/>, <see cref="msdyncrm_linkedinformsubmission"/>, <see cref="msdyncrm_linkedinleadmatchingstrategy"/>, <see cref="msdyncrm_linkedinuserprofile"/>, <see cref="msdyncrm_marketingdynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemaildynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemailtestsend"/>, <see cref="msdyncrm_migration"/>, <see cref="msdyncrm_uicconfig"/>, <see cref="msdyn_agreement"/>, <see cref="msdyn_agreementbookingdate"/>, <see cref="msdyn_agreementbookingincident"/>, <see cref="msdyn_agreementbookingproduct"/>, <see cref="msdyn_agreementbookingservice"/>, <see cref="msdyn_agreementbookingservicetask"/>, <see cref="msdyn_agreementbookingsetup"/>, <see cref="msdyn_agreementinvoicedate"/>, <see cref="msdyn_agreementinvoiceproduct"/>, <see cref="msdyn_agreementinvoicesetup"/>, <see cref="msdyn_bookingalertstatus"/>, <see cref="msdyn_bookingrule"/>, <see cref="msdyn_bookingtimestamp"/>, <see cref="msdyn_customerasset"/>, <see cref="msdyn_fieldservicesetting"/>, <see cref="msdyn_incidenttypecharacteristic"/>, <see cref="msdyn_incidenttypeproduct"/>, <see cref="msdyn_incidenttypeservice"/>, <see cref="msdyn_inventoryadjustment"/>, <see cref="msdyn_inventoryadjustmentproduct"/>, <see cref="msdyn_inventoryjournal"/>, <see cref="msdyn_inventorytransfer"/>, <see cref="msdyn_payment"/>, <see cref="msdyn_paymentdetail"/>, <see cref="msdyn_paymentmethod"/>, <see cref="msdyn_paymentterm"/>, <see cref="msdyn_playbookinstance"/>, <see cref="msdyn_postalbum"/>, <see cref="msdyn_postalcode"/>, <see cref="msdyn_productinventory"/>, <see cref="msdyn_purchaseorder"/>, <see cref="msdyn_purchaseorderbill"/>, <see cref="msdyn_purchaseorderproduct"/>, <see cref="msdyn_purchaseorderreceipt"/>, <see cref="msdyn_purchaseorderreceiptproduct"/>, <see cref="msdyn_purchaseordersubstatus"/>, <see cref="msdyn_quotebookingincident"/>, <see cref="msdyn_quotebookingproduct"/>, <see cref="msdyn_quotebookingservice"/>, <see cref="msdyn_quotebookingservicetask"/>, <see cref="msdyn_resourceterritory"/>, <see cref="msdyn_rma"/>, <see cref="msdyn_rmaproduct"/>, <see cref="msdyn_rmareceipt"/>, <see cref="msdyn_rmareceiptproduct"/>, <see cref="msdyn_rmasubstatus"/>, <see cref="msdyn_rtv"/>, <see cref="msdyn_rtvproduct"/>, <see cref="msdyn_rtvsubstatus"/>, <see cref="msdyn_salessuggestion"/>, <see cref="msdyn_shipvia"/>, <see cref="msdyn_swarm"/>, <see cref="msdyn_systemuserschedulersetting"/>, <see cref="msdyn_timegroup"/>, <see cref="msdyn_timegroupdetail"/>, <see cref="msdyn_timeoffrequest"/>, <see cref="msdyn_warehouse"/>, <see cref="msdyn_workorder"/>, <see cref="msdyn_workordercharacteristic"/>, <see cref="msdyn_workorderincident"/>, <see cref="msdyn_workorderproduct"/>, <see cref="msdyn_workorderresourcerestriction"/>, <see cref="msdyn_workorderservice"/>, <see cref="msdyn_workorderservicetask"/>, <see cref="msevtmgt_checkin"/>, <see cref="msevtmgt_event"/>, <see cref="msevtmgt_eventpurchase"/>, <see cref="msevtmgt_eventpurchaseattendee"/>, <see cref="msevtmgt_eventpurchasepass"/>, <see cref="msevtmgt_eventregistration"/>, <see cref="msevtmgt_hotel"/>, <see cref="msevtmgt_hotelroomallocation"/>, <see cref="msevtmgt_hotelroomreservation"/>, <see cref="msevtmgt_layout"/>, <see cref="msevtmgt_room"/>, <see cref="msevtmgt_session"/>, <see cref="msevtmgt_sessionregistration"/>, <see cref="msevtmgt_sessiontrack"/>, <see cref="msevtmgt_speaker"/>, <see cref="msevtmgt_speakerengagement"/>, <see cref="msevtmgt_sponsorablearticle"/>, <see cref="msevtmgt_sponsorship"/>, <see cref="msevtmgt_venue"/>, <see cref="msevtmgt_webinarconfiguration"/>, <see cref="msevtmgt_webinarprovider"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="opportunity"/>, <see cref="quote"/>, <see cref="salesorder"/>, <see cref="site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Attendees</para>
		/// <para><strong>Description</strong>: Enter the account, contact, lead, user, or other equipment resources that are required to attend the recurring appointment.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="equipment"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> RequiredAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.RequiredAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.RequiredAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Rule</para>
		/// <para><strong>Description</strong>: Unique identifier of the recurrence rule that is associated with the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="recurrencerule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RuleId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time</para>
		/// <para><strong>Description</strong>: Scheduled end time of the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time</para>
		/// <para><strong>Description</strong>: Scheduled start time of the recurring appointment series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Series Status</para>
		/// <para><strong>Description</strong>: Indicates whether the recurring appointment series is active or inactive.</para>
		/// <para><strong>Two Option</strong> - [<strong>Active</strong>]: true - [<strong>Inactive</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Active</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SeriesStatus
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SeriesStatus); }
			set { Entity.Attributes[Fields.SeriesStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Unique identifier for an associated service.</para>
		/// <para><strong>Lookup</strong>: <see cref="service"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceId); }
			set { Entity.Attributes[Fields.ServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sort Date</para>
		/// <para><strong>Description</strong>: Shows the date and time by which the activities are sorted.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Process Stage</para>
		/// <para><strong>Description</strong>: Shows the ID of the stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pattern Start Time</para>
		/// <para><strong>Description</strong>: Start time of the recurring appointment series.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the recurring appointment is open, scheduled, completed, or canceled. Completed and canceled appointments are read-only and can&apos;t be edited.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode.Open"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the recurring appointment&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurringAppointmentMasterOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sub-Category</para>
		/// <para><strong>Description</strong>: Type a subcategory to identify the recurring appointment type and relate the activity to a specific product, sales region, business group, or other function.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subcategory
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
			set { Entity.Attributes[Fields.Subcategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Type a short description about the objective or primary topic of the recurring appointment.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}