//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_recordingmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Automatic</para>
		/// <para><strong>Value</strong>: 192,351,002</para>
		/// </summary>
		Automatic = 192_351_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 192,351,001</para>
		/// </summary>
		Manual = 192_351_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 192,351,000</para>
		/// </summary>
		None = 192_351_000
	}
	public enum msdyn_transcriptionmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Automatic</para>
		/// <para><strong>Value</strong>: 192,351,002</para>
		/// </summary>
		Automatic = 192_351_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 192,351,001</para>
		/// </summary>
		Manual = 192_351_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 192,351,000</para>
		/// </summary>
		None = 192_351_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocvoicechannelsetting : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentexternalparticipantcontrolenabled = "msdyn_agentexternalparticipantcontrolenabled";
			public const string msdyn_agentexternalparticipanttransfercontrolenabled = "msdyn_agentexternalparticipanttransfercontrolenabled";
			public const string msdyn_agentexternalteamsparticipantcontrolenabled = "msdyn_agentexternalteamsparticipantcontrolenabled";
			public const string msdyn_agentexternalteamsparticipanttransfercontrolenabled = "msdyn_agentexternalteamsparticipanttransfercontrolenabled";
			public const string msdyn_agentrecordingcontrolsenabled = "msdyn_agentrecordingcontrolsenabled";
			public const string msdyn_agenttranscriptioncontrolsenabled = "msdyn_agenttranscriptioncontrolsenabled";
			public const string msdyn_announceaveragewaittime = "msdyn_announceaveragewaittime";
			public const string msdyn_announcepositioninqueue = "msdyn_announcepositioninqueue";
			public const string msdyn_calleridname = "msdyn_calleridname";
			public const string msdyn_calleridphonenumberid = "msdyn_calleridphonenumberid";
			public const string msdyn_enablepostcallsurvey = "msdyn_enablepostcallsurvey";
			public const string msdyn_enablepostcallsurveyduration = "msdyn_enablepostcallsurveyduration";
			public const string msdyn_enablestoprecordingtranscriptiononhold = "msdyn_enablestoprecordingtranscriptiononhold";
			public const string msdyn_inboundurl = "msdyn_inboundurl";
			public const string msdyn_isanonymouscallerid = "msdyn_isanonymouscallerid";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocvoicechannelsettingId = "msdyn_ocvoicechannelsettingid";
			public const string msdyn_operatinghoursid = "msdyn_operatinghoursid";
			public const string msdyn_outboundcallregionallowlist = "msdyn_outboundcallregionallowlist";
			public const string msdyn_phonenumberid = "msdyn_phonenumberid";
			public const string msdyn_postcallsurveyendtime = "msdyn_postcallsurveyendtime";
			public const string msdyn_postcallsurveyfrequency = "msdyn_postcallsurveyfrequency";
			public const string msdyn_postcallsurveystarttime = "msdyn_postcallsurveystarttime";
			public const string msdyn_recordingenabled = "msdyn_recordingenabled";
			public const string msdyn_recordingmode = "msdyn_recordingmode";
			public const string msdyn_showhidetranscriptionfeaturepreview = "msdyn_showhidetranscriptionfeaturepreview";
			public const string msdyn_skipwaitmusicforivr = "msdyn_skipwaitmusicforivr";
			public const string msdyn_stoptranscriptionandrecordingafterpstntransfer = "msdyn_stoptranscriptionandrecordingafterpstntransfer";
			public const string msdyn_stoptranscriptionandrecordingafterteamstransfer = "msdyn_stoptranscriptionandrecordingafterteamstransfer";
			public const string msdyn_transcriptionenabled = "msdyn_transcriptionenabled";
			public const string msdyn_transcriptionmode = "msdyn_transcriptionmode";
			public const string msdyn_transcriptionshowbydefault = "msdyn_transcriptionshowbydefault";
			public const string msdyn_usebridgetransferforpstntransfer = "msdyn_usebridgetransferforpstntransfer";
			public const string msdyn_usebridgetransferforteamstransfer = "msdyn_usebridgetransferforteamstransfer";
			public const string msdyn_voiceauthenticationsettingsid = "msdyn_voiceauthenticationsettingsid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_ocvoicechannelsetting";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11069;
		public const string EntityCollectionSchemaName = "msdyn_ocvoicechannelsettings";
		public const string EntityDisplayCollectionName = "Voice Channel Settings";
		public const string DisplayName = "Voice Channel Setting";
		public const string EntitySetName = "msdyn_ocvoicechannelsettings";
		public const string EntityLogicalCollectionName = "msdyn_ocvoicechannelsettings";
		public const string EntityPrimaryIdAttribute = "msdyn_ocvoicechannelsettingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_ocvoicechannelsetting";
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting(Guid msdyn_ocvoicechannelsettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocvoicechannelsettingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocvoicechannelsetting"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocvoicechannelsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocvoicechannelsetting(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocvoicechannelsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocvoicechannelsetting(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocvoicechannelsetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable agent control to add an external participant</para>
		/// <para><strong>Description</strong>: Enable agent control to add an external participant</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agentexternalparticipantcontrolenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agentexternalparticipantcontrolenabled); }
			set { Entity.Attributes[Fields.msdyn_agentexternalparticipantcontrolenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable agent external participant transfer control for external phone numbers</para>
		/// <para><strong>Description</strong>: Enable agent external participant transfer control for external phone numbers</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agentexternalparticipanttransfercontrolenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agentexternalparticipanttransfercontrolenabled); }
			set { Entity.Attributes[Fields.msdyn_agentexternalparticipanttransfercontrolenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable agent control to add an external participant on Teams</para>
		/// <para><strong>Description</strong>: Enable agent control to add an external participant on Teams</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agentexternalteamsparticipantcontrolenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agentexternalteamsparticipantcontrolenabled); }
			set { Entity.Attributes[Fields.msdyn_agentexternalteamsparticipantcontrolenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable agent external participant transfer control for external Microsoft Teams users</para>
		/// <para><strong>Description</strong>: Enable agent external participant transfer control for external Microsoft Teams users</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agentexternalteamsparticipanttransfercontrolenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agentexternalteamsparticipanttransfercontrolenabled); }
			set { Entity.Attributes[Fields.msdyn_agentexternalteamsparticipanttransfercontrolenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable agent control of the recording</para>
		/// <para><strong>Description</strong>: Enable agent control of the recording</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agentrecordingcontrolsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agentrecordingcontrolsenabled); }
			set { Entity.Attributes[Fields.msdyn_agentrecordingcontrolsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable agent control of the transcription</para>
		/// <para><strong>Description</strong>: Enable agent control of the transcription</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_agenttranscriptioncontrolsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_agenttranscriptioncontrolsenabled); }
			set { Entity.Attributes[Fields.msdyn_agenttranscriptioncontrolsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Announce average wait time</para>
		/// <para><strong>Description</strong>: Announce the average wait time of the customer in queue</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_announceaveragewaittime
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_announceaveragewaittime); }
			set { Entity.Attributes[Fields.msdyn_announceaveragewaittime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Announce position in queue</para>
		/// <para><strong>Description</strong>: Announce the position of the customer in queue</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_announcepositioninqueue
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_announcepositioninqueue); }
			set { Entity.Attributes[Fields.msdyn_announcepositioninqueue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Caller ID Name</para>
		/// <para><strong>Description</strong>: Caller ID Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_calleridname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_calleridname); }
			set { Entity.Attributes[Fields.msdyn_calleridname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Caller ID Phone Number</para>
		/// <para><strong>Description</strong>: Caller ID Phone Number</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocphonenumber"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_calleridphonenumberid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_calleridphonenumberid); }
			set { Entity.Attributes[Fields.msdyn_calleridphonenumberid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable end of call survey (deprecated)</para>
		/// <para><strong>Description</strong>: This field is deprecated</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablepostcallsurvey
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablepostcallsurvey); }
			set { Entity.Attributes[Fields.msdyn_enablepostcallsurvey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Set survey duration (deprecated)</para>
		/// <para><strong>Description</strong>: This field is deprecated.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablepostcallsurveyduration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablepostcallsurveyduration); }
			set { Entity.Attributes[Fields.msdyn_enablepostcallsurveyduration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Stop Recording and Transcription On Hold</para>
		/// <para><strong>Description</strong>: Enable Stop Recording and Transcription On Hold</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablestoprecordingtranscriptiononhold
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablestoprecordingtranscriptiononhold); }
			set { Entity.Attributes[Fields.msdyn_enablestoprecordingtranscriptiononhold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inbound URL</para>
		/// <para><strong>Description</strong>: Inbound URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inboundurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inboundurl); }
			set { Entity.Attributes[Fields.msdyn_inboundurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Anonymous Caller ID</para>
		/// <para><strong>Description</strong>: Anonymous Caller ID</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isanonymouscallerid
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isanonymouscallerid); }
			set { Entity.Attributes[Fields.msdyn_isanonymouscallerid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Stream</para>
		/// <para><strong>Description</strong>: Work Stream</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_liveworkstream"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice Channel Setting</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ocvoicechannelsettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ocvoicechannelsettingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operating Hours</para>
		/// <para><strong>Description</strong>: Operating Hours</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_operatinghour"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_operatinghoursid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_operatinghoursid); }
			set { Entity.Attributes[Fields.msdyn_operatinghoursid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound Call Region Allowlist</para>
		/// <para><strong>Description</strong>: Outbound Call Region Allowlist</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 850</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_outboundcallregionallowlist
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_outboundcallregionallowlist); }
			set { Entity.Attributes[Fields.msdyn_outboundcallregionallowlist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Number</para>
		/// <para><strong>Description</strong>: Phone Number</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocphonenumber"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_phonenumberid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_phonenumberid); }
			set { Entity.Attributes[Fields.msdyn_phonenumberid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End of call survey end date (deprecated)</para>
		/// <para><strong>Description</strong>: This field is deprecated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_postcallsurveyendtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_postcallsurveyendtime); }
			set { Entity.Attributes[Fields.msdyn_postcallsurveyendtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End of call survey frequency (deprecated)</para>
		/// <para><strong>Description</strong>: This field is deprecated</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_postcallsurveyfrequency
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_postcallsurveyfrequency); }
			set { Entity.Attributes[Fields.msdyn_postcallsurveyfrequency] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End of call survey start date (deprecated)</para>
		/// <para><strong>Description</strong>: This field is deprecated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_postcallsurveystarttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_postcallsurveystarttime); }
			set { Entity.Attributes[Fields.msdyn_postcallsurveystarttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording Enabled</para>
		/// <para><strong>Description</strong>: Recording Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_recordingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_recordingenabled); }
			set { Entity.Attributes[Fields.msdyn_recordingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording mode</para>
		/// <para><strong>Description</strong>: Recording mode</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_recordingmode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_recordingmode> msdyn_recordingmode
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_recordingmode>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_recordingmode);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_recordingmode)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_recordingmode] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_recordingmode] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show/Hide transcription feature (preview)</para>
		/// <para><strong>Description</strong>: Show/Hide transcription feature (preview)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_showhidetranscriptionfeaturepreview
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_showhidetranscriptionfeaturepreview); }
			set { Entity.Attributes[Fields.msdyn_showhidetranscriptionfeaturepreview] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skip wait music for workstream IVR</para>
		/// <para><strong>Description</strong>: Indicates whether we skip wait music for workstream IVR or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_skipwaitmusicforivr
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_skipwaitmusicforivr); }
			set { Entity.Attributes[Fields.msdyn_skipwaitmusicforivr] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stop transcription and recording after public switched telephone network transfer</para>
		/// <para><strong>Description</strong>: Stop transcription and recording after public switched telephone network transfer</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_stoptranscriptionandrecordingafterpstntransfer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_stoptranscriptionandrecordingafterpstntransfer); }
			set { Entity.Attributes[Fields.msdyn_stoptranscriptionandrecordingafterpstntransfer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stop transcription and recording after Microsoft Teams transfer</para>
		/// <para><strong>Description</strong>: Stop transcription and recording after Microsoft Teams transfer</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_stoptranscriptionandrecordingafterteamstransfer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_stoptranscriptionandrecordingafterteamstransfer); }
			set { Entity.Attributes[Fields.msdyn_stoptranscriptionandrecordingafterteamstransfer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transcription Enabled</para>
		/// <para><strong>Description</strong>: Transcription Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_transcriptionenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_transcriptionenabled); }
			set { Entity.Attributes[Fields.msdyn_transcriptionenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transcription mode</para>
		/// <para><strong>Description</strong>: Transcription mode</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_transcriptionmode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_transcriptionmode> msdyn_transcriptionmode
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_transcriptionmode>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_transcriptionmode);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.msdyn_transcriptionmode)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_transcriptionmode] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_transcriptionmode] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show transcription by default</para>
		/// <para><strong>Description</strong>: Show transcription by default</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_transcriptionshowbydefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_transcriptionshowbydefault); }
			set { Entity.Attributes[Fields.msdyn_transcriptionshowbydefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable bridged transfer for public switched telephony network</para>
		/// <para><strong>Description</strong>: Enable bridged transfer for public switched telephony network</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_usebridgetransferforpstntransfer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_usebridgetransferforpstntransfer); }
			set { Entity.Attributes[Fields.msdyn_usebridgetransferforpstntransfer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable bridged transfer for Microsoft Teams</para>
		/// <para><strong>Description</strong>: Enable bridged transfer for Microsoft Teams</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_usebridgetransferforteamstransfer
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_usebridgetransferforteamstransfer); }
			set { Entity.Attributes[Fields.msdyn_usebridgetransferforteamstransfer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice Authentication Settings Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Authentication settings associated with Voice Channel instance.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_authenticationsettings"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_voiceauthenticationsettingsid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_voiceauthenticationsettingsid); }
			set { Entity.Attributes[Fields.msdyn_voiceauthenticationsettingsid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Voice Channel Setting</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Voice Channel Setting</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocvoicechannelsettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}