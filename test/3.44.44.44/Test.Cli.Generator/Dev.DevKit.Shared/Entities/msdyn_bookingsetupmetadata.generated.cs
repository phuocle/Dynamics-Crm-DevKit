//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_bookingsetupmetadata : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AvailableDurationMinimumPercentage = "msdyn_availabledurationminimumpercentage";
			public const string msdyn_BookingRelationshipLogicalName = "msdyn_bookingrelationshiplogicalname";
			public const string msdyn_bookingsetupmetadataId = "msdyn_bookingsetupmetadataid";
			public const string msdyn_BookingStatusFieldLogicalName = "msdyn_bookingstatusfieldlogicalname";
			public const string msdyn_CancelBookingsWhenMoving = "msdyn_cancelbookingswhenmoving";
			public const string msdyn_CloneEntityQuery = "msdyn_cloneentityquery";
			public const string msdyn_DefaultBookingCanceledStatus = "msdyn_defaultbookingcanceledstatus";
			public const string msdyn_DefaultBookingCommittedStatus = "msdyn_defaultbookingcommittedstatus";
			public const string msdyn_DefaultBookingDuration = "msdyn_defaultbookingduration";
			public const string msdyn_DefaultRequirementActiveStatus = "msdyn_defaultrequirementactivestatus";
			public const string msdyn_DefaultRequirementCanceledStatus = "msdyn_defaultrequirementcanceledstatus";
			public const string msdyn_DefaultRequirementCompletedStatus = "msdyn_defaultrequirementcompletedstatus";
			public const string msdyn_DisableRequirementAutoCreation = "msdyn_disablerequirementautocreation";
			public const string msdyn_enablequickbook = "msdyn_enablequickbook";
			public const string msdyn_EntityLogicalName = "msdyn_entitylogicalname";
			public const string msdyn_RequirementRelationshipLogicalName = "msdyn_requirementrelationshiplogicalname";
			public const string msdyn_ResourceAvailabilityRetrievalLimit = "msdyn_resourceavailabilityretrievallimit";
			public const string msdyn_RetrieveConstraintsQuery = "msdyn_retrieveconstraintsquery";
			public const string msdyn_RetrieveResourcesQuery = "msdyn_retrieveresourcesquery";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_bookingsetupmetadata";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10995;
		public const string EntityCollectionSchemaName = "msdyn_bookingsetupmetadatas";
		public const string EntityDisplayCollectionName = "Booking Setup Metadata Records";
		public const string DisplayName = "Booking Setup Metadata";
		public const string EntitySetName = "msdyn_bookingsetupmetadatas";
		public const string EntityLogicalCollectionName = "msdyn_bookingsetupmetadatas";
		public const string EntityPrimaryIdAttribute = "msdyn_bookingsetupmetadataid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_entitylogicalname";
		public const string EntitySchemaName = "msdyn_bookingsetupmetadata";
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Guid msdyn_bookingsetupmetadataId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_bookingsetupmetadataId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_bookingsetupmetadata"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_bookingsetupmetadata"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_bookingsetupmetadata(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_bookingsetupmetadata"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_bookingsetupmetadata(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_bookingsetupmetadata(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Available Duration Minimum(%)</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AvailableDurationMinimumPercentage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AvailableDurationMinimumPercentage); }
			set { Entity.Attributes[Fields.msdyn_AvailableDurationMinimumPercentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Relationship Logical Name</para>
		/// <para><strong>Description</strong>: A unique identifier that links bookings to a scheduling entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingRelationshipLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingRelationshipLogicalName); }
			set { Entity.Attributes[Fields.msdyn_BookingRelationshipLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Setup Metadata</para>
		/// <para><strong>Description</strong>: A unique identifier for an entity instance.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_bookingsetupmetadataId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_bookingsetupmetadataId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Status Field Logical Name</para>
		/// <para><strong>Description</strong>: An option set that is used to group and filter statuses.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingStatusFieldLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingStatusFieldLogicalName); }
			set { Entity.Attributes[Fields.msdyn_BookingStatusFieldLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancel Bookings When Moving</para>
		/// <para><strong>Description</strong>: Select whether, when moving open slots to the next day, to leave the old slots and change their status to &quot;Canceled&quot;. This feature only applies when using the &apos;Move Bookings&apos; option.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CancelBookingsWhenMoving
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CancelBookingsWhenMoving); }
			set { Entity.Attributes[Fields.msdyn_CancelBookingsWhenMoving] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Clone Entity Query</para>
		/// <para><strong>Description</strong>: Query for retrieving resource requirements for cloning.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_configuration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CloneEntityQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CloneEntityQuery); }
			set { Entity.Attributes[Fields.msdyn_CloneEntityQuery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Booking Canceled Status</para>
		/// <para><strong>Description</strong>: The default booking canceled status to use when a user can&apos;t select a status.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookingstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultBookingCanceledStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultBookingCanceledStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingCanceledStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Booking Committed Status</para>
		/// <para><strong>Description</strong>: The default booking committed status to use when a user can&apos;t select a status.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookingstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultBookingCommittedStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultBookingCommittedStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingCommittedStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Booking Duration</para>
		/// <para><strong>Description</strong>: The default booking duration to use when a duration is not provided.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultBookingDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultBookingDuration); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Requirement Active Status</para>
		/// <para><strong>Description</strong>: The default requirement active status to use when a user can&apos;t select a status</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultRequirementActiveStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultRequirementActiveStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultRequirementActiveStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Requirement Canceled Status</para>
		/// <para><strong>Description</strong>: The default requirement canceled status to use when a user can&apos;t select a status.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultRequirementCanceledStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultRequirementCanceledStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultRequirementCanceledStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Requirement Completed Status</para>
		/// <para><strong>Description</strong>: The default requirement completed status to use when a user can&apos;t select a status.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultRequirementCompletedStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultRequirementCompletedStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultRequirementCompletedStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Requirement Auto Creation for Bookings</para>
		/// <para><strong>Description</strong>: Determines if a requirement should be created automatically when a booking is generated and there&apos;s no requirement for a scheduling entity.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableRequirementAutoCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableRequirementAutoCreation); }
			set { Entity.Attributes[Fields.msdyn_DisableRequirementAutoCreation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Quick Book</para>
		/// <para><strong>Description</strong>: If yes, the book button on schedulable entities will launch the quick book experience. Otherwise, the book button will launch the pop-out scheduler.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablequickbook
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablequickbook); }
			set { Entity.Attributes[Fields.msdyn_enablequickbook] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Logical Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EntityLogicalName); }
			set { Entity.Attributes[Fields.msdyn_EntityLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Relationship Logical Name</para>
		/// <para><strong>Description</strong>: A unique identifier that links requirements to an enabled scheduling entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RequirementRelationshipLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RequirementRelationshipLogicalName); }
			set { Entity.Attributes[Fields.msdyn_RequirementRelationshipLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Availability Retrieval Limit</para>
		/// <para><strong>Description</strong>: The maximum number of resources to retrieve and show in schedule assistant.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ResourceAvailabilityRetrievalLimit
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ResourceAvailabilityRetrievalLimit); }
			set { Entity.Attributes[Fields.msdyn_ResourceAvailabilityRetrievalLimit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Retrieve Constraints Query</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_configuration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RetrieveConstraintsQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RetrieveConstraintsQuery); }
			set { Entity.Attributes[Fields.msdyn_RetrieveConstraintsQuery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Retrieve Resources Query</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_configuration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RetrieveResourcesQuery
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RetrieveResourcesQuery); }
			set { Entity.Attributes[Fields.msdyn_RetrieveResourcesQuery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Booking Setup Metadata</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Booking Setup Metadata</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_bookingsetupmetadataOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}