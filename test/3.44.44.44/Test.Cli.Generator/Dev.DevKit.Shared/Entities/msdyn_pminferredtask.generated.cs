//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_automationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Complete</para>
		/// <para><strong>Value</strong>: 200,000,003</para>
		/// </summary>
		Complete = 200_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 200,000,002</para>
		/// </summary>
		InProgress = 200_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotRecommended</para>
		/// <para><strong>Value</strong>: 200,000,001</para>
		/// </summary>
		NotRecommended = 200_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotStarted</para>
		/// <para><strong>Value</strong>: 200,000,000</para>
		/// </summary>
		NotStarted = 200_000_000
	}
	public enum msdyn_reportprovisioningstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 193,350,003</para>
		/// </summary>
		Failed = 193_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotStarted</para>
		/// <para><strong>Value</strong>: 193,350,000</para>
		/// </summary>
		NotStarted = 193_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioned</para>
		/// <para><strong>Value</strong>: 193,350,002</para>
		/// </summary>
		Provisioned = 193_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioning</para>
		/// <para><strong>Value</strong>: 193,350,001</para>
		/// </summary>
		Provisioning = 193_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped</para>
		/// <para><strong>Value</strong>: 193,350,004</para>
		/// </summary>
		Skipped = 193_350_004
	}
	public enum msdyn_source
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DataLake</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DataLake = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Recording = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Done</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Done = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Failed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Imported</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Imported = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		InProgress = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Analyzed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Done</strong></para>
		/// </summary>
		Analyzed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: AnalyzeFailed</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		AnalyzeFailed = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Analyzing</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Analyzing = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeleteFailed</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		DeleteFailed = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleting</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Deleting = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Imported</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Imported</strong></para>
		/// </summary>
		Imported = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Queued</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.InProgress</strong></para>
		/// </summary>
		Queued = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_pminferredtask : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_analysisschedule = "msdyn_analysisschedule";
			public const string msdyn_automationdata = "msdyn_automationdata";
			public const string msdyn_automationstatus = "msdyn_automationstatus";
			public const string msdyn_datavalidation = "msdyn_datavalidation";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_inputdatabinding = "msdyn_inputdatabinding";
			public const string msdyn_isreportavailable = "msdyn_isreportavailable";
			public const string msdyn_iterationid = "msdyn_iterationid";
			public const string msdyn_lasterrors = "msdyn_lasterrors";
			public const string msdyn_lasterrorsreport = "msdyn_lasterrorsreport";
			public const string msdyn_lasterrorsreport_name = "msdyn_lasterrorsreport_name";
			public const string msdyn_lastreportrefreshdate = "msdyn_lastreportrefreshdate";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_outputdata = "msdyn_outputdata";
			public const string msdyn_pminferredtaskId = "msdyn_pminferredtaskid";
			public const string msdyn_reportdata = "msdyn_reportdata";
			public const string msdyn_reportprovisioningstatus = "msdyn_reportprovisioningstatus";
			public const string msdyn_sharedrecordingmetadata = "msdyn_sharedrecordingmetadata";
			public const string msdyn_source = "msdyn_source";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_pminferredtask";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10268;
		public const string EntityCollectionSchemaName = "msdyn_pminferredtasks";
		public const string EntityDisplayCollectionName = "PM Inferred Tasks";
		public const string DisplayName = "PM Inferred Task";
		public const string EntitySetName = "msdyn_pminferredtasks";
		public const string EntityLogicalCollectionName = "msdyn_pminferredtasks";
		public const string EntityPrimaryIdAttribute = "msdyn_pminferredtaskid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_pminferredtask";
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Guid msdyn_pminferredtaskId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_pminferredtaskId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_pminferredtask"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_pminferredtask"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_pminferredtask(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_pminferredtask"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_pminferredtask(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_pminferredtask(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analysis Schedule</para>
		/// <para><strong>Description</strong>: Information about the analysis schedule.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_analysisschedule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_analysisschedule); }
			set { Entity.Attributes[Fields.msdyn_analysisschedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AutomationData</para>
		/// <para><strong>Description</strong>: Computed data to drive automation for this task.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_automationdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_automationdata); }
			set { Entity.Attributes[Fields.msdyn_automationdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AutomationStatus</para>
		/// <para><strong>Description</strong>: The status of automation for this task.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus.NotStarted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus? msdyn_automationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_automationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_automationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_automationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_automationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Validation</para>
		/// <para><strong>Description</strong>: Information about the data validation for the data source.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_datavalidation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_datavalidation); }
			set { Entity.Attributes[Fields.msdyn_datavalidation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Input Data Location</para>
		/// <para><strong>Description</strong>: Location of the data used as input for Task Analysis.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inputdatabinding
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inputdatabinding); }
			set { Entity.Attributes[Fields.msdyn_inputdatabinding] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Report Available</para>
		/// <para><strong>Description</strong>: Surfaces whether the analysis report is currently available.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isreportavailable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isreportavailable); }
			set { Entity.Attributes[Fields.msdyn_isreportavailable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Iteration Id</para>
		/// <para><strong>Description</strong>: Identifies uniquely the last successful processing of the task.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_iterationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_iterationid); }
			set { Entity.Attributes[Fields.msdyn_iterationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Errors</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrors
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrors); }
			set { Entity.Attributes[Fields.msdyn_lasterrors] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Errors Report</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lasterrorsreport_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lasterrorsreport_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Report Refresh Date</para>
		/// <para><strong>Description</strong>: Date and time when the corresponding report was last refreshed.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastreportrefreshdate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastreportrefreshdate); }
			set { Entity.Attributes[Fields.msdyn_lastreportrefreshdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Output Data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_outputdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_outputdata); }
			set { Entity.Attributes[Fields.msdyn_outputdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PM Inferred Task</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_pminferredtaskId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_pminferredtaskId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Data</para>
		/// <para><strong>Description</strong>: Data related to the report for this task.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_reportdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_reportdata); }
			set { Entity.Attributes[Fields.msdyn_reportdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Provisioning Status</para>
		/// <para><strong>Description</strong>: The current status of the provisioning operation for the report associated to this task.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus.NotStarted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus? msdyn_reportprovisioningstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_reportprovisioningstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_reportprovisioningstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_reportprovisioningstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_reportprovisioningstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Shared Recording Metadata</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sharedrecordingmetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sharedrecordingmetadata); }
			set { Entity.Attributes[Fields.msdyn_sharedrecordingmetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pm Inferred Task Source</para>
		/// <para><strong>Description</strong>: The data source of this Pm Inferred Task.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source.Recording"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source? msdyn_source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.msdyn_source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_source] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the PM Inferred Task</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the PM Inferred Task</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_pminferredtaskOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}