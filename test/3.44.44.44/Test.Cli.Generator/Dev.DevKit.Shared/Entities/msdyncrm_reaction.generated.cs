//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets
{
	public enum msdyncrm_liketype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Anger</para>
		/// <para><strong>Value</strong>: 948,320,005</para>
		/// </summary>
		Anger = 948_320_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Care</para>
		/// <para><strong>Value</strong>: 948,320,006</para>
		/// </summary>
		Care = 948_320_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Haha</para>
		/// <para><strong>Value</strong>: 948,320,001</para>
		/// </summary>
		Haha = 948_320_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Like</para>
		/// <para><strong>Value</strong>: 948,320,000</para>
		/// </summary>
		Like = 948_320_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Love</para>
		/// <para><strong>Value</strong>: 948,320,002</para>
		/// </summary>
		Love = 948_320_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sad</para>
		/// <para><strong>Value</strong>: 948,320,004</para>
		/// </summary>
		Sad = 948_320_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wow</para>
		/// <para><strong>Value</strong>: 948,320,003</para>
		/// </summary>
		Wow = 948_320_003
	}
	public enum msdyncrm_type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Comment</para>
		/// <para><strong>Value</strong>: 948,320,001</para>
		/// </summary>
		Comment = 948_320_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Like</para>
		/// <para><strong>Value</strong>: 948,320,000</para>
		/// </summary>
		Like = 948_320_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_reaction : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_attachment01 = "msdyncrm_attachment01";
			public const string msdyncrm_attachment02 = "msdyncrm_attachment02";
			public const string msdyncrm_attachment03 = "msdyncrm_attachment03";
			public const string msdyncrm_attachment04 = "msdyncrm_attachment04";
			public const string msdyncrm_createdonnetwork = "msdyncrm_createdonnetwork";
			public const string msdyncrm_likecount = "msdyncrm_likecount";
			public const string msdyncrm_liketype = "msdyncrm_liketype";
			public const string msdyncrm_longmessage = "msdyncrm_longmessage";
			public const string msdyncrm_message = "msdyncrm_message";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_networkid = "msdyncrm_networkid";
			public const string msdyncrm_parentid = "msdyncrm_parentid";
			public const string msdyncrm_parenttype = "msdyncrm_parenttype";
			public const string msdyncrm_phrases = "msdyncrm_phrases";
			public const string msdyncrm_reactionId = "msdyncrm_reactionid";
			public const string msdyncrm_reactionurl = "msdyncrm_reactionurl";
			public const string msdyncrm_sentiment = "msdyncrm_sentiment";
			public const string msdyncrm_sentimentscore = "msdyncrm_sentimentscore";
			public const string msdyncrm_type = "msdyncrm_type";
			public const string msdyncrm_userid = "msdyncrm_userid";
			public const string msdyncrm_username = "msdyncrm_username";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_reaction";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11241;
		public const string EntityCollectionSchemaName = "msdyncrm_reactions";
		public const string EntityDisplayCollectionName = "Reactions";
		public const string DisplayName = "Reaction";
		public const string EntitySetName = "msdyncrm_reactions";
		public const string EntityLogicalCollectionName = "msdyncrm_reactions";
		public const string EntityPrimaryIdAttribute = "msdyncrm_reactionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_reaction";
		[DebuggerNonUserCode()]
		public msdyncrm_reaction()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_reaction(Guid msdyncrm_reactionId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_reactionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_reaction(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_reaction"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_reaction(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_reaction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_reaction(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_reaction(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_reaction"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_reaction(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_reaction(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_reaction(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment 01</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_attachment01
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_attachment01); }
			set { Entity.Attributes[Fields.msdyncrm_attachment01] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment 02</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_attachment02
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_attachment02); }
			set { Entity.Attributes[Fields.msdyncrm_attachment02] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment 03</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_attachment03
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_attachment03); }
			set { Entity.Attributes[Fields.msdyncrm_attachment03] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment 04</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_attachment04
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_attachment04); }
			set { Entity.Attributes[Fields.msdyncrm_attachment04] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on network</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_createdonnetworkUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_createdonnetwork); }
			set { Entity.Attributes[Fields.msdyncrm_createdonnetwork] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Like count</para>
		/// <para><strong>Description</strong>: Like count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_likecount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_likecount); }
			set { Entity.Attributes[Fields.msdyncrm_likecount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Like type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.msdyncrm_liketype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.msdyncrm_liketype? msdyncrm_liketype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_liketype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.msdyncrm_liketype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_liketype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_liketype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_longmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_longmessage); }
			set { Entity.Attributes[Fields.msdyncrm_longmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_message
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_message); }
			set { Entity.Attributes[Fields.msdyncrm_message] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Network id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_networkid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_networkid); }
			set { Entity.Attributes[Fields.msdyncrm_networkid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent id</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_parentid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_parentid); }
			set { Entity.Attributes[Fields.msdyncrm_parentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent type</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_parenttype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_parenttype); }
			set { Entity.Attributes[Fields.msdyncrm_parenttype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phrases</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_phrases
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_phrases); }
			set { Entity.Attributes[Fields.msdyncrm_phrases] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reaction</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_reactionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_reactionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Comment url</para>
		/// <para><strong>Description</strong>: Url of the comment in social network</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_reactionurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_reactionurl); }
			set { Entity.Attributes[Fields.msdyncrm_reactionurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_sentiment
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_sentiment); }
			set { Entity.Attributes[Fields.msdyncrm_sentiment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment score</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_sentimentscore
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_sentimentscore); }
			set { Entity.Attributes[Fields.msdyncrm_sentimentscore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.msdyncrm_type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.msdyncrm_type? msdyncrm_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.msdyncrm_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_userid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_userid); }
			set { Entity.Attributes[Fields.msdyncrm_userid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_username
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_username); }
			set { Entity.Attributes[Fields.msdyncrm_username] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Reaction</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Reaction</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_reactionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}