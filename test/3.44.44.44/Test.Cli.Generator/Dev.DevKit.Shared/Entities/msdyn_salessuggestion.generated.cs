//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets
{
	public enum msdyn_salesmotion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1
	}
	public enum msdyn_salesplay
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1
	}
	public enum msdyn_solutionarea
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1
	}
	public enum msdyn_suggestionsource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Others</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Others = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Recommendations</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Product_Recommendations = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Closed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Declined</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Declined = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualified</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Qualified = 3
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Accepted</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Accepted = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Created Opportunity</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Qualified</strong></para>
		/// </summary>
		Created_Opportunity = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Open = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Others</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Closed</strong></para>
		/// </summary>
		Others_2 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Others</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Declined</strong></para>
		/// </summary>
		Others_3 = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_salessuggestion : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EmailAddress = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_customdata = "msdyn_customdata";
			public const string msdyn_expirydate = "msdyn_expirydate";
			public const string msdyn_feedbackreason = "msdyn_feedbackreason";
			public const string msdyn_insight = "msdyn_insight";
			public const string msdyn_modelid = "msdyn_modelid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_potentialrevenue = "msdyn_potentialrevenue";
			public const string msdyn_potentialrevenue_Base = "msdyn_potentialrevenue_base";
			public const string msdyn_qualifiedrecord = "msdyn_qualifiedrecord";
			public const string msdyn_relatedrecord = "msdyn_relatedrecord";
			public const string msdyn_salesmotion = "msdyn_salesmotion";
			public const string msdyn_salesplay = "msdyn_salesplay";
			public const string msdyn_salessuggestionId = "msdyn_salessuggestionid";
			public const string msdyn_score = "msdyn_score";
			public const string msdyn_sequencecontact = "msdyn_sequencecontact";
			public const string msdyn_solutionarea = "msdyn_solutionarea";
			public const string msdyn_suggesteddate = "msdyn_suggesteddate";
			public const string msdyn_suggestionreason = "msdyn_suggestionreason";
			public const string msdyn_suggestionsource = "msdyn_suggestionsource";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_salessuggestion";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10840;
		public const string EntityCollectionSchemaName = "msdyn_salessuggestions";
		public const string EntityDisplayCollectionName = "Insights";
		public const string DisplayName = "Insight";
		public const string EntitySetName = "msdyn_salessuggestions";
		public const string EntityLogicalCollectionName = "msdyn_salessuggestions";
		public const string EntityPrimaryIdAttribute = "msdyn_salessuggestionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_salessuggestion";
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Guid msdyn_salessuggestionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_salessuggestionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salessuggestion"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salessuggestion"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_salessuggestion(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salessuggestion"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_salessuggestion(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salessuggestion(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address</para>
		/// <para><strong>Description</strong>: The primary email address for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customdata</para>
		/// <para><strong>Description</strong>: Customdata JSON</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_customdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_customdata); }
			set { Entity.Attributes[Fields.msdyn_customdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expiry date</para>
		/// <para><strong>Description</strong>: Expiry date</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_expirydateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_expirydate); }
			set { Entity.Attributes[Fields.msdyn_expirydate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Feedback reason</para>
		/// <para><strong>Description</strong>: Feedback reason</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_feedbackreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_feedbackreason); }
			set { Entity.Attributes[Fields.msdyn_feedbackreason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggestion insight</para>
		/// <para><strong>Description</strong>: Suggestion insight</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_insight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_insight); }
			set { Entity.Attributes[Fields.msdyn_insight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Model ID</para>
		/// <para><strong>Description</strong>: Model ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_modelid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_modelid); }
			set { Entity.Attributes[Fields.msdyn_modelid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Potential revenue</para>
		/// <para><strong>Description</strong>: Potential revenue</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_potentialrevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_potentialrevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_potentialrevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_potentialrevenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Potential revenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the potential revenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_potentialrevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_potentialrevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualified Record</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_qualifiedrecord
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_qualifiedrecord); }
			set { Entity.Attributes[Fields.msdyn_qualifiedrecord] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related record</para>
		/// <para><strong>Description</strong>: Related record</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_relatedrecord
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_relatedrecord); }
			set { Entity.Attributes[Fields.msdyn_relatedrecord] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales motion</para>
		/// <para><strong>Description</strong>: Sales motion</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesmotion"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesmotion.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesmotion? msdyn_salesmotion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesmotion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesmotion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesmotion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesmotion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales play</para>
		/// <para><strong>Description</strong>: Sales play</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesplay"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesplay.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesplay? msdyn_salesplay
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_salesplay);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_salesplay)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_salesplay] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_salesplay] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggestion</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_salessuggestionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_salessuggestionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Score</para>
		/// <para><strong>Description</strong>: Score</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_score
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_score); }
			set { Entity.Attributes[Fields.msdyn_score] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Contact</para>
		/// <para><strong>Description</strong>: Many to one relationship to Contact entity</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_sequencecontact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_sequencecontact); }
			set { Entity.Attributes[Fields.msdyn_sequencecontact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution area</para>
		/// <para><strong>Description</strong>: Solution area</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_solutionarea"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_solutionarea.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_solutionarea? msdyn_solutionarea
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_solutionarea);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_solutionarea)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_solutionarea] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_solutionarea] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggested date</para>
		/// <para><strong>Description</strong>: Suggested date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_suggesteddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_suggesteddate); }
			set { Entity.Attributes[Fields.msdyn_suggesteddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggestion reason</para>
		/// <para><strong>Description</strong>: Suggestion reason</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_suggestionreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_suggestionreason); }
			set { Entity.Attributes[Fields.msdyn_suggestionreason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_suggestionsource</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_suggestionsource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_suggestionsource? msdyn_suggestionsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_suggestionsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.msdyn_suggestionsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_suggestionsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_suggestionsource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Suggestion</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Suggestion</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salessuggestionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}