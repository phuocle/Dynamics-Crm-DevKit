//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.flowmachineOptionSets
{
	public enum HostedMachineState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Disabled = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Enabled = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Error = 2
	}
	public enum HostingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CloudPc</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		CloudPc = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Customer = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hosted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hosted = 1
	}
	public enum KeyDeliveryStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: KeyExpired</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		KeyExpired = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: PendingNewKey</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		PendingNewKey = 2
	}
	public enum LastKnownPictureInPictureSupport
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Disabled = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Enabled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unknown = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Maintenance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Maintenance = 2
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		Disabled = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: DrainMode</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		DrainMode = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		Error = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: HostedMachineOvercapacity</para>
		/// <para><strong>Value</strong>: 13</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		HostedMachineOvercapacity = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: HostedMachineOvercapacityDeleted</para>
		/// <para><strong>Value</strong>: 14</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		HostedMachineOvercapacityDeleted = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: HostedMachineOvercapacityDisabled</para>
		/// <para><strong>Value</strong>: 15</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		HostedMachineOvercapacityDisabled = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ManualMaintenance</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		ManualMaintenance = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: ProvisionedWithError</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		ProvisionedWithError = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioning</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		Provisioning = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: RequiresGroupKey</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		RequiresGroupKey = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: RequiresReconnection</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		RequiresReconnection = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Temporary</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		Temporary = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToDelete</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Maintenance</strong></para>
		/// </summary>
		ToDelete = 6
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class flowmachine : EntityBase
	{
		public struct Fields
		{
			public const string AgentVersion = "agentversion";
			public const string ConnectivityConfiguration = "connectivityconfiguration";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string FlowMachineGroupId = "flowmachinegroupid";
			public const string flowmachineId = "flowmachineid";
			public const string FlowMachineImageVersionId = "flowmachineimageversionid";
			public const string FlowMachineNetworkId = "flowmachinenetworkid";
			public const string HostedMachineError = "hostedmachineerror";
			public const string HostedMachineState = "hostedmachinestate";
			public const string HostingType = "hostingtype";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string KeyDeliveryStatus = "keydeliverystatus";
			public const string KeyReceivedDate = "keyreceiveddate";
			public const string LastHeartbeatDate = "lastheartbeatdate";
			public const string LastKnownPictureInPictureSupport = "lastknownpictureinpicturesupport";
			public const string MachineMetadata = "machinemetadata";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OvercapacitySince = "overcapacitysince";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SessionCapacity = "sessioncapacity";
			public const string SnapshotStartedAt = "snapshotstartedat";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "flowmachine";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10082;
		public const string EntityCollectionSchemaName = "flowmachines";
		public const string EntityDisplayCollectionName = "Flow Machines";
		public const string DisplayName = "Flow Machine";
		public const string EntitySetName = "flowmachines";
		public const string EntityLogicalCollectionName = "flowmachines";
		public const string EntityPrimaryIdAttribute = "flowmachineid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "flowmachine";
		[DebuggerNonUserCode()]
		public flowmachine()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowmachine(Guid flowmachineId)
		{
			Entity = new Entity(EntityLogicalName, flowmachineId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowmachine(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowmachine"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public flowmachine(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowmachine"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowmachine(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowmachine(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowmachine"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowmachine(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowmachine(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowmachine(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Version</para>
		/// <para><strong>Description</strong>: Version installed on the machine</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AgentVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.AgentVersion); }
			set { Entity.Attributes[Fields.AgentVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connectivity Configuration</para>
		/// <para><strong>Description</strong>: For Internal Use Only.</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectivityConfiguration
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectivityConfiguration); }
			set { Entity.Attributes[Fields.ConnectivityConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the Flow Machine.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Machine Group</para>
		/// <para><strong>Description</strong>: Group of this Flow Machine.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachinegroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FlowMachineGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FlowMachineGroupId); }
			set { Entity.Attributes[Fields.FlowMachineGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Machine</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid flowmachineId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Machine Image Version</para>
		/// <para><strong>Description</strong>: Unique identifier for Flow Machine Image Version associated with Flow Machine.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachineimageversion"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FlowMachineImageVersionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FlowMachineImageVersionId); }
			set { Entity.Attributes[Fields.FlowMachineImageVersionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Machine Network</para>
		/// <para><strong>Description</strong>: Unique identifier for Flow Machine Network associated with Flow Machine.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachinenetwork"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FlowMachineNetworkId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FlowMachineNetworkId); }
			set { Entity.Attributes[Fields.FlowMachineNetworkId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hosted flow machine error.</para>
		/// <para><strong>Description</strong>: Hosted flow machine error.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HostedMachineError
		{
			get { return Entity.GetAttributeValue<string>(Fields.HostedMachineError); }
			set { Entity.Attributes[Fields.HostedMachineError] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hosted Machine State</para>
		/// <para><strong>Description</strong>: The state of the machine if it is hosted.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostedMachineState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostedMachineState.Disabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostedMachineState? HostedMachineState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.HostedMachineState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostedMachineState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.HostedMachineState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.HostedMachineState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Machine Hosting Type</para>
		/// <para><strong>Description</strong>: Flow Machine Hosting Type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostingType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostingType.Customer"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostingType? HostingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.HostingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachineOptionSets.HostingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.HostingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.HostingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Machine Key Delivery Status</para>
		/// <para><strong>Description</strong>: Delivery status of the machine&apos;s group&apos;s key.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.KeyDeliveryStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.KeyDeliveryStatus.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachineOptionSets.KeyDeliveryStatus? KeyDeliveryStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.KeyDeliveryStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachineOptionSets.KeyDeliveryStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.KeyDeliveryStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.KeyDeliveryStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Machine Key Received Date</para>
		/// <para><strong>Description</strong>: Delivery date of the latest group key.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? KeyReceivedDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.KeyReceivedDate); }
			set { Entity.Attributes[Fields.KeyReceivedDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last heartbeat date</para>
		/// <para><strong>Description</strong>: Last date at which a heartbeat call was received from the machine.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastHeartbeatDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastHeartbeatDate); }
			set { Entity.Attributes[Fields.LastHeartbeatDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last known picture-in-picture support</para>
		/// <para><strong>Description</strong>: Indicates the last known picture-in-picture feature support for the target record. Default value is Unknown.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.LastKnownPictureInPictureSupport"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.LastKnownPictureInPictureSupport.Unknown"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachineOptionSets.LastKnownPictureInPictureSupport? LastKnownPictureInPictureSupport
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.LastKnownPictureInPictureSupport);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachineOptionSets.LastKnownPictureInPictureSupport)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.LastKnownPictureInPictureSupport] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.LastKnownPictureInPictureSupport] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Machine Metadata</para>
		/// <para><strong>Description</strong>: For Internal Use Only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 25,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineMetadata); }
			set { Entity.Attributes[Fields.MachineMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The Name of the Flow Machine.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Overcapacity since</para>
		/// <para><strong>Description</strong>: Date and time of when the machine has been flagged as overcapacity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OvercapacitySinceUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OvercapacitySince); }
			set { Entity.Attributes[Fields.OvercapacitySince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session Capacity</para>
		/// <para><strong>Description</strong>: Maximum Number of session in parallel.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SessionCapacity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SessionCapacity); }
			set { Entity.Attributes[Fields.SessionCapacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Snapshot started at</para>
		/// <para><strong>Description</strong>: Time at which the snapshot capture started for a Hosted Hachine</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SnapshotStartedAtUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SnapshotStartedAt); }
			set { Entity.Attributes[Fields.SnapshotStartedAt] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Flow Machine</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachineOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachineOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Flow Machine</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.flowmachineOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowmachineOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowmachineOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}