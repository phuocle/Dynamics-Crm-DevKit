//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SystemUserOptionSets
{
	public enum AccessMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Administrative</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Administrative = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Delegated Admin</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Delegated_Admin = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Non-interactive</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Non_interactive = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Read</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Read = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Read-Write</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Read_Write = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Support User</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Support_User = 3
	}
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum AzureState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Exists</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Exists = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not found or hard deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Not_found_or_hard_deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Soft deleted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Soft_deleted = 1
	}
	public enum CALType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Administrative</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Administrative = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Basic</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Basic = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Device Basic</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Device_Basic = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Device Enterprise</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Device_Enterprise = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Device Essential</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Device_Essential = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Device Professional</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Device_Professional = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enterprise</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Enterprise = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Essential</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Essential = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Service</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Field_Service = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Professional</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Professional = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Project Service</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Project_Service = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Sales = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Service = 10
	}
	public enum DeletedState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not deleted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_deleted = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Soft deleted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Soft_deleted = 1
	}
	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Approved = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Empty</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Empty = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending Approval</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Pending_Approval = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Rejected = 3
	}
	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Forward Mailbox</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Forward_Mailbox = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 for Outlook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Server-Side Synchronization or Email Router</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}
	public enum InviteStatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Accepted</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Invitation_Accepted = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Expired</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Invitation_Expired = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Near Expired</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Invitation_Near_Expired = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Not Sent</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Invitation_Not_Sent = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Rejected</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Invitation_Rejected = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Revoked</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Invitation_Revoked = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invited</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Invited = 1
	}
	public enum msdyn_AgentType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Application user</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Application_user = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot application user</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Bot_application_user = 192_350_001
	}
	public enum msdyn_BotProvider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		None = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Other = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Virtual Agent</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Virtual_Agent = 192_350_000
	}
	public enum msdyn_UserType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: BOT User</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		BOT_User = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: CRM User</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		CRM_User = 192_350_000
	}
	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Dynamics 365 for Outlook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Microsoft_Dynamics_365_for_Outlook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Server-Side Synchronization or Email Router</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}
	public enum PreferredAddressCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Mailing Address</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Mailing_Address = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Address</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Other_Address = 2
	}
	public enum PreferredEmailCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum PreferredPhoneCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Home Phone</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Home_Phone = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Main Phone</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Main_Phone = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Phone</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Mobile_Phone = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Omnichannel Phone</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Omnichannel_Phone = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Phone</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Other_Phone = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SystemUser : EntityBase
	{
		public struct Fields
		{
			public const string AccessMode = "accessmode";
			public const string ActiveDirectoryGuid = "activedirectoryguid";
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Composite = "address1_composite";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Composite = "address2_composite";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string ApplicationId = "applicationid";
			public const string ApplicationIdUri = "applicationiduri";
			public const string AzureActiveDirectoryObjectId = "azureactivedirectoryobjectid";
			public const string AzureDeletedOn = "azuredeletedon";
			public const string AzureState = "azurestate";
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CALType = "caltype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultFiltersPopulated = "defaultfilterspopulated";
			public const string DefaultMailbox = "defaultmailbox";
			public const string DefaultOdbFolderName = "defaultodbfoldername";
			public const string DeletedState = "deletedstate";
			public const string DisabledReason = "disabledreason";
			public const string DisplayInServiceViews = "displayinserviceviews";
			public const string DomainName = "domainname";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmployeeId = "employeeid";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FirstName = "firstname";
			public const string FullName = "fullname";
			public const string GovernmentId = "governmentid";
			public const string HomePhone = "homephone";
			public const string IdentityId = "identityid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string InternalEMailAddress = "internalemailaddress";
			public const string InviteStatusCode = "invitestatuscode";
			public const string IsActiveDirectoryUser = "isactivedirectoryuser";
			public const string IsDisabled = "isdisabled";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string IsIntegrationUser = "isintegrationuser";
			public const string IsLicensed = "islicensed";
			public const string IsSyncWithDirectory = "issyncwithdirectory";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LatestUpdateTime = "latestupdatetime";
			public const string MiddleName = "middlename";
			public const string MobileAlertEMail = "mobilealertemail";
			public const string MobileOfflineProfileId = "mobileofflineprofileid";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AgentType = "msdyn_agentType";
			public const string msdyn_BotApplicationId = "msdyn_botapplicationid";
			public const string msdyn_BotDescription = "msdyn_botdescription";
			public const string msdyn_BotEndpoint = "msdyn_botendpoint";
			public const string msdyn_bothandle = "msdyn_bothandle";
			public const string msdyn_BotProvider = "msdyn_botprovider";
			public const string msdyn_BotSecretKeys = "msdyn_botsecretkeys";
			public const string msdyn_callforwardingnumber = "msdyn_callforwardingnumber";
			public const string msdyn_Capacity = "msdyn_capacity";
			public const string msdyn_cognitiveservicesregion = "msdyn_cognitiveservicesregion";
			public const string msdyn_cognitiveservicessubscriptionkey = "msdyn_cognitiveservicessubscriptionkey";
			public const string msdyn_DefaultPresenceIdUser = "msdyn_defaultpresenceiduser";
			public const string msdyn_emergencyemailrecipients = "msdyn_emergencyemailrecipients";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_gridwrappercontrolfield = "msdyn_gridwrappercontrolfield";
			public const string msdyn_isexpertenabledforswarm = "msdyn_isexpertenabledforswarm";
			public const string msdyn_OwningEnvironmentId = "msdyn_owningenvironmentid";
			public const string msdyn_phonenumberid = "msdyn_phonenumberid";
			public const string msdyn_UserType = "msdyn_usertype";
			public const string NickName = "nickname";
			public const string OrganizationId = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentSystemUserId = "parentsystemuserid";
			public const string PassportHi = "passporthi";
			public const string PassportLo = "passportlo";
			public const string PersonalEMailAddress = "personalemailaddress";
			public const string PhotoUrl = "photourl";
			public const string PositionId = "positionid";
			public const string PreferredAddressCode = "preferredaddresscode";
			public const string PreferredEmailCode = "preferredemailcode";
			public const string PreferredPhoneCode = "preferredphonecode";
			public const string ProcessId = "processid";
			public const string QueueId = "queueid";
			public const string Salutation = "salutation";
			public const string SetupUser = "setupuser";
			public const string SharePointEmailAddress = "sharepointemailaddress";
			public const string SiteId = "siteid";
			public const string Skills = "skills";
			public const string StageId = "stageid";
			public const string SystemUserId = "systemuserid";
			public const string TerritoryId = "territoryid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UserLicenseType = "userlicensetype";
			public const string UserPuid = "userpuid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WindowsLiveID = "windowsliveid";
			public const string YammerEmailAddress = "yammeremailaddress";
			public const string YammerUserId = "yammeruserid";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}
		public const string EntityLogicalName = "systemuser";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8;
		public const string EntityCollectionSchemaName = "SystemUsers";
		public const string EntityDisplayCollectionName = "Users";
		public const string DisplayName = "User";
		public const string EntitySetName = "systemusers";
		public const string EntityLogicalCollectionName = "systemusers";
		public const string EntityPrimaryIdAttribute = "systemuserid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "fullname";
		public const string EntitySchemaName = "SystemUser";
		[DebuggerNonUserCode()]
		public SystemUser()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemUser(Guid SystemUserId)
		{
			Entity = new Entity(EntityLogicalName, SystemUserId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemUser(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemUser"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SystemUser(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemUser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemUser(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemUser(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SystemUser"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SystemUser(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SystemUser(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SystemUser(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access Mode</para>
		/// <para><strong>Description</strong>: Type of user.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode.Read_Write"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode? AccessMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AccessMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.AccessMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AccessMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AccessMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Directory Guid</para>
		/// <para><strong>Description</strong>: Active Directory object GUID for the system user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActiveDirectoryGuid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActiveDirectoryGuid); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Address Type</para>
		/// <para><strong>Description</strong>: Type of address for address 1, such as billing, shipping, or primary address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Description</strong>: City name for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address</para>
		/// <para><strong>Description</strong>: Shows the complete primary address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region</para>
		/// <para><strong>Description</strong>: Country/region name in address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: County</para>
		/// <para><strong>Description</strong>: County name for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Fax</para>
		/// <para><strong>Description</strong>: Fax number for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Latitude</para>
		/// <para><strong>Description</strong>: Latitude for address 1.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 1</para>
		/// <para><strong>Description</strong>: First line for entering address 1 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 2</para>
		/// <para><strong>Description</strong>: Second line for entering address 1 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 3</para>
		/// <para><strong>Description</strong>: Third line for entering address 1 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Longitude</para>
		/// <para><strong>Description</strong>: Longitude for address 1.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Name</para>
		/// <para><strong>Description</strong>: Name to enter for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: ZIP Code or postal code for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Post Office Box</para>
		/// <para><strong>Description</strong>: Post office box number for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Shipping Method</para>
		/// <para><strong>Description</strong>: Method of shipment for address 1.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State/Province</para>
		/// <para><strong>Description</strong>: State or province for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Main Phone</para>
		/// <para><strong>Description</strong>: First telephone number associated with address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Phone</para>
		/// <para><strong>Description</strong>: Second telephone number associated with address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pager</para>
		/// <para><strong>Description</strong>: Third telephone number associated with address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UPS Zone</para>
		/// <para><strong>Description</strong>: United Parcel Service (UPS) zone for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UTC Offset</para>
		/// <para><strong>Description</strong>: UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Address Type</para>
		/// <para><strong>Description</strong>: Type of address for address 2, such as billing, shipping, or primary address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other City</para>
		/// <para><strong>Description</strong>: City name for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Address</para>
		/// <para><strong>Description</strong>: Shows the complete secondary address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Country/Region</para>
		/// <para><strong>Description</strong>: Country/region name in address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: County</para>
		/// <para><strong>Description</strong>: County name for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Fax</para>
		/// <para><strong>Description</strong>: Fax number for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Latitude</para>
		/// <para><strong>Description</strong>: Latitude for address 2.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Street 1</para>
		/// <para><strong>Description</strong>: First line for entering address 2 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Street 2</para>
		/// <para><strong>Description</strong>: Second line for entering address 2 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Street 3</para>
		/// <para><strong>Description</strong>: Third line for entering address 2 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Longitude</para>
		/// <para><strong>Description</strong>: Longitude for address 2.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Name</para>
		/// <para><strong>Description</strong>: Name to enter for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: ZIP Code or postal code for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Post Office Box</para>
		/// <para><strong>Description</strong>: Post office box number for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Shipping Method</para>
		/// <para><strong>Description</strong>: Method of shipment for address 2.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other State/Province</para>
		/// <para><strong>Description</strong>: State or province for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 1</para>
		/// <para><strong>Description</strong>: First telephone number associated with address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 2</para>
		/// <para><strong>Description</strong>: Second telephone number associated with address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 3</para>
		/// <para><strong>Description</strong>: Third telephone number associated with address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UPS Zone</para>
		/// <para><strong>Description</strong>: United Parcel Service (UPS) zone for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UTC Offset</para>
		/// <para><strong>Description</strong>: UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application ID</para>
		/// <para><strong>Description</strong>: The identifier for the application. This is used to access data in another application.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ApplicationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ApplicationId); }
			set { Entity.Attributes[Fields.ApplicationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application ID URI</para>
		/// <para><strong>Description</strong>: The URI used as a unique logical identifier for the external app. This can be used to validate the application.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicationIdUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicationIdUri); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure AD Object ID</para>
		/// <para><strong>Description</strong>: This is the application directory object Id.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AzureActiveDirectoryObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AzureActiveDirectoryObjectId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure Deleted On</para>
		/// <para><strong>Description</strong>: Date and time when the user was set as soft deleted in Azure.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? AzureDeletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.AzureDeletedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure State</para>
		/// <para><strong>Description</strong>: Azure state of user</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState.Exists"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState? AzureState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AzureState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.AzureState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AzureState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AzureState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit with which the user is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar</para>
		/// <para><strong>Description</strong>: Fiscal calendar associated with the user.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: License Type</para>
		/// <para><strong>Description</strong>: License type of user. This is used only in the on-premises version of the product. Online licenses are managed through Microsoft 365 Office Portal</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType.Professional"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType? CALType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CALType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.CALType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CALType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CALType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the user was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the systemuser.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Filters Populated</para>
		/// <para><strong>Description</strong>: Indicates if default outlook filters have been populated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DefaultFiltersPopulated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DefaultFiltersPopulated); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mailbox</para>
		/// <para><strong>Description</strong>: Select the mailbox associated with this user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMailbox
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMailbox); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default OneDrive for Business Folder Name</para>
		/// <para><strong>Description</strong>: Type a default folder name for the user&apos;s OneDrive For Business location.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultOdbFolderName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultOdbFolderName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted State</para>
		/// <para><strong>Description</strong>: User delete state</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState.Not_deleted"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState? DeletedState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeletedState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.DeletedState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled Reason</para>
		/// <para><strong>Description</strong>: Reason for disabling the user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisabledReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisabledReason); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display in Service Views</para>
		/// <para><strong>Description</strong>: Whether to display the user in service views.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DisplayInServiceViews
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DisplayInServiceViews); }
			set { Entity.Attributes[Fields.DisplayInServiceViews] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User Name</para>
		/// <para><strong>Description</strong>: Active Directory domain of which the user is a member.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DomainName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DomainName); }
			set { Entity.Attributes[Fields.DomainName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Email Status</para>
		/// <para><strong>Description</strong>: Shows the status of the primary email address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval.Empty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Employee</para>
		/// <para><strong>Description</strong>: Employee identifier for the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmployeeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmployeeId); }
			set { Entity.Attributes[Fields.EmployeeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Image Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the systemuser with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Name</para>
		/// <para><strong>Description</strong>: First name of the user.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FirstName); }
			set { Entity.Attributes[Fields.FirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Full Name</para>
		/// <para><strong>Description</strong>: Full name of the user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Government</para>
		/// <para><strong>Description</strong>: Government identifier for the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GovernmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GovernmentId); }
			set { Entity.Attributes[Fields.GovernmentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Home Phone</para>
		/// <para><strong>Description</strong>: Home phone number for the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HomePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.HomePhone); }
			set { Entity.Attributes[Fields.HomePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique user identity id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IdentityId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IdentityId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incoming Email Delivery Method</para>
		/// <para><strong>Description</strong>: Incoming email delivery method for the user.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod.Microsoft_Dynamics_365_for_Outlook"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Email</para>
		/// <para><strong>Description</strong>: Internal email address for the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InternalEMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.InternalEMailAddress); }
			set { Entity.Attributes[Fields.InternalEMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation Status</para>
		/// <para><strong>Description</strong>: User invitation status.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode.Invitation_Not_Sent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode? InviteStatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InviteStatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.InviteStatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InviteStatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InviteStatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Active Directory User</para>
		/// <para><strong>Description</strong>: Information about whether the user is an AD user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActiveDirectoryUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActiveDirectoryUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Information about whether the user is enabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Disabled</strong>]: true - [<strong>Enabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Enabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
			set { Entity.Attributes[Fields.IsDisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address O365 Admin Approval Status</para>
		/// <para><strong>Description</strong>: Shows the status of approval of the email address by O365 Admin.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Integration user mode</para>
		/// <para><strong>Description</strong>: Check if user is an integration user.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsIntegrationUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsIntegrationUser); }
			set { Entity.Attributes[Fields.IsIntegrationUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User Licensed</para>
		/// <para><strong>Description</strong>: Information about whether the user is licensed.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsLicensed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsLicensed); }
			set { Entity.Attributes[Fields.IsLicensed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User Synced</para>
		/// <para><strong>Description</strong>: Information about whether the user is synced with the directory.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsSyncWithDirectory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsSyncWithDirectory); }
			set { Entity.Attributes[Fields.IsSyncWithDirectory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Job Title</para>
		/// <para><strong>Description</strong>: Job title of the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JobTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.JobTitle); }
			set { Entity.Attributes[Fields.JobTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Name</para>
		/// <para><strong>Description</strong>: Last name of the user.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastName); }
			set { Entity.Attributes[Fields.LastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latest User Update Time</para>
		/// <para><strong>Description</strong>: Time stamp of the latest update for the user</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LatestUpdateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LatestUpdateTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Middle Name</para>
		/// <para><strong>Description</strong>: Middle name of the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MiddleName); }
			set { Entity.Attributes[Fields.MiddleName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Alert Email</para>
		/// <para><strong>Description</strong>: Mobile alert email address for the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobileAlertEMail
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobileAlertEMail); }
			set { Entity.Attributes[Fields.MobileAlertEMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Offline Profile</para>
		/// <para><strong>Description</strong>: Items contained with a particular SystemUser.</para>
		/// <para><strong>Lookup</strong>: <see cref="mobileofflineprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MobileOfflineProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MobileOfflineProfileId); }
			set { Entity.Attributes[Fields.MobileOfflineProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile Phone</para>
		/// <para><strong>Description</strong>: Mobile phone number for the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MobilePhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.MobilePhone); }
			set { Entity.Attributes[Fields.MobilePhone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the user was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the systemuser.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User type</para>
		/// <para><strong>Description</strong>: Type of user - Application user or Bot application user</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_AgentType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_AgentType? msdyn_AgentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AgentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_AgentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AgentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AgentType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot application ID</para>
		/// <para><strong>Description</strong>: Application ID of the bot.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotApplicationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotApplicationId); }
			set { Entity.Attributes[Fields.msdyn_BotApplicationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: BOT User Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotDescription); }
			set { Entity.Attributes[Fields.msdyn_BotDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Endpoint</para>
		/// <para><strong>Description</strong>: Bot User Endpoint</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotEndpoint
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotEndpoint); }
			set { Entity.Attributes[Fields.msdyn_BotEndpoint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot handle</para>
		/// <para><strong>Description</strong>: Bot handle</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_bothandle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_bothandle); }
			set { Entity.Attributes[Fields.msdyn_bothandle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Provider</para>
		/// <para><strong>Description</strong>: Indicates the type of bot</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_BotProvider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_BotProvider.Other"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_BotProvider? msdyn_BotProvider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BotProvider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_BotProvider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BotProvider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BotProvider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Secret Keys</para>
		/// <para><strong>Description</strong>: Bot User Secret Keys</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BotSecretKeys
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BotSecretKeys); }
			set { Entity.Attributes[Fields.msdyn_BotSecretKeys] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Call forward number</para>
		/// <para><strong>Description</strong>: Call forward number</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_callforwardingnumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_callforwardingnumber); }
			set { Entity.Attributes[Fields.msdyn_callforwardingnumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capacity</para>
		/// <para><strong>Description</strong>: Capacity associated with the User.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Capacity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Capacity); }
			set { Entity.Attributes[Fields.msdyn_Capacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cognitive Services Region</para>
		/// <para><strong>Description</strong>: Cognitive Services Region</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cognitiveservicesregion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cognitiveservicesregion); }
			set { Entity.Attributes[Fields.msdyn_cognitiveservicesregion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cognitive Services Subscription Key</para>
		/// <para><strong>Description</strong>: Cognitive Services Subscription Key</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cognitiveservicessubscriptionkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cognitiveservicessubscriptionkey); }
			set { Entity.Attributes[Fields.msdyn_cognitiveservicessubscriptionkey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Presence</para>
		/// <para><strong>Description</strong>: Unique identifier for Presence associated with User.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_presence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultPresenceIdUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultPresenceIdUser); }
			set { Entity.Attributes[Fields.msdyn_DefaultPresenceIdUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recipient emails</para>
		/// <para><strong>Description</strong>: Recipient emails for emergency call, seperated by semi-colon</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_emergencyemailrecipients
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_emergencyemailrecipients); }
			set { Entity.Attributes[Fields.msdyn_emergencyemailrecipients] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR Optout</para>
		/// <para><strong>Description</strong>: Describes whether user is opted out or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Grid Wrapper Control field</para>
		/// <para><strong>Description</strong>: Field to bind grid wrapper control</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_gridwrappercontrolfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_gridwrappercontrolfield); }
			set { Entity.Attributes[Fields.msdyn_gridwrappercontrolfield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expert Enabled Swarm</para>
		/// <para><strong>Description</strong>: Check if swarm is enabled for the experts.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isexpertenabledforswarm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isexpertenabledforswarm); }
			set { Entity.Attributes[Fields.msdyn_isexpertenabledforswarm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Environment Id</para>
		/// <para><strong>Description</strong>: Environment Id of the CDS environment that owns the bot user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_OwningEnvironmentId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_OwningEnvironmentId); }
			set { Entity.Attributes[Fields.msdyn_OwningEnvironmentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Number</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocphonenumber"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_phonenumberid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_phonenumberid); }
			set { Entity.Attributes[Fields.msdyn_phonenumberid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Type of user - CRM or BOT user</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_UserType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_UserType.CRM_User"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_UserType? msdyn_UserType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_UserType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.msdyn_UserType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UserType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_UserType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nickname</para>
		/// <para><strong>Description</strong>: Nickname of the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NickName
		{
			get { return Entity.GetAttributeValue<string>(Fields.NickName); }
			set { Entity.Attributes[Fields.NickName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outgoing Email Delivery Method</para>
		/// <para><strong>Description</strong>: Outgoing email delivery method for the user.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod.Microsoft_Dynamics_365_for_Outlook"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manager</para>
		/// <para><strong>Description</strong>: Unique identifier of the manager of the user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSystemUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSystemUserId); }
			set { Entity.Attributes[Fields.ParentSystemUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Passport Hi</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PassportHi
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PassportHi); }
			set { Entity.Attributes[Fields.PassportHi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Passport Lo</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? PassportLo
		{
			get { return Entity.GetAttributeValue<int?>(Fields.PassportLo); }
			set { Entity.Attributes[Fields.PassportLo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email 2</para>
		/// <para><strong>Description</strong>: Personal email address of the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PersonalEMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.PersonalEMailAddress); }
			set { Entity.Attributes[Fields.PersonalEMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Photo URL</para>
		/// <para><strong>Description</strong>: URL for the Website on which a photo of the user is located.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PhotoUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PhotoUrl); }
			set { Entity.Attributes[Fields.PhotoUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Position</para>
		/// <para><strong>Description</strong>: User&apos;s position in hierarchical security model.</para>
		/// <para><strong>Lookup</strong>: <see cref="position"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PositionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PositionId); }
			set { Entity.Attributes[Fields.PositionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Address</para>
		/// <para><strong>Description</strong>: Preferred address for the user.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode.Mailing_Address"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode? PreferredAddressCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredAddressCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredAddressCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredAddressCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredAddressCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Email</para>
		/// <para><strong>Description</strong>: Preferred email address for the user.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode? PreferredEmailCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredEmailCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredEmailCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredEmailCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredEmailCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Phone</para>
		/// <para><strong>Description</strong>: Preferred phone number for the user.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode.Main_Phone"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode? PreferredPhoneCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PreferredPhoneCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SystemUserOptionSets.PreferredPhoneCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PreferredPhoneCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PreferredPhoneCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Shows the ID of the process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Queue</para>
		/// <para><strong>Description</strong>: Unique identifier of the default queue for the user.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Salutation</para>
		/// <para><strong>Description</strong>: Salutation for correspondence with the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Salutation
		{
			get { return Entity.GetAttributeValue<string>(Fields.Salutation); }
			set { Entity.Attributes[Fields.Salutation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Restricted Access Mode</para>
		/// <para><strong>Description</strong>: Check if user is a setup user.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SetupUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SetupUser); }
			set { Entity.Attributes[Fields.SetupUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SharePoint Email Address</para>
		/// <para><strong>Description</strong>: SharePoint Work Email Address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SharePointEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.SharePointEmailAddress); }
			set { Entity.Attributes[Fields.SharePointEmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Site</para>
		/// <para><strong>Description</strong>: Site at which the user is located.</para>
		/// <para><strong>Lookup</strong>: <see cref="site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SiteId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SiteId); }
			set { Entity.Attributes[Fields.SiteId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skills</para>
		/// <para><strong>Description</strong>: Skill set of the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Skills
		{
			get { return Entity.GetAttributeValue<string>(Fields.Skills); }
			set { Entity.Attributes[Fields.Skills] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Process Stage</para>
		/// <para><strong>Description</strong>: Shows the ID of the stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SystemUserId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SystemUserId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Territory</para>
		/// <para><strong>Description</strong>: Unique identifier of the territory to which the user is assigned.</para>
		/// <para><strong>Lookup</strong>: <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TerritoryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TerritoryId); }
			set { Entity.Attributes[Fields.TerritoryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: Title of the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the systemuser.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User License Type</para>
		/// <para><strong>Description</strong>: Shows the type of user license.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UserLicenseType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UserLicenseType); }
			set { Entity.Attributes[Fields.UserLicenseType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User PUID</para>
		/// <para><strong>Description</strong>: User PUID User Identifiable Information</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserPuid
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserPuid); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version number</para>
		/// <para><strong>Description</strong>: Version number of the user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Windows Live ID</para>
		/// <para><strong>Description</strong>: Windows Live ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WindowsLiveID
		{
			get { return Entity.GetAttributeValue<string>(Fields.WindowsLiveID); }
			set { Entity.Attributes[Fields.WindowsLiveID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yammer Email</para>
		/// <para><strong>Description</strong>: User&apos;s Yammer login email address</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerEmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerEmailAddress); }
			set { Entity.Attributes[Fields.YammerEmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yammer User ID</para>
		/// <para><strong>Description</strong>: User&apos;s Yammer ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YammerUserId
		{
			get { return Entity.GetAttributeValue<string>(Fields.YammerUserId); }
			set { Entity.Attributes[Fields.YammerUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi First Name</para>
		/// <para><strong>Description</strong>: Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFirstName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFirstName); }
			set { Entity.Attributes[Fields.YomiFirstName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Full Name</para>
		/// <para><strong>Description</strong>: Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiFullName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiFullName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Last Name</para>
		/// <para><strong>Description</strong>: Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiLastName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiLastName); }
			set { Entity.Attributes[Fields.YomiLastName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Yomi Middle Name</para>
		/// <para><strong>Description</strong>: Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string YomiMiddleName
		{
			get { return Entity.GetAttributeValue<string>(Fields.YomiMiddleName); }
			set { Entity.Attributes[Fields.YomiMiddleName] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}