//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets
{
	public enum Action
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Conflict</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Conflict = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pull</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Pull = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Push</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Push = 1
	}
	public enum SolutionComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Create</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Create = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Delete</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Delete = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Update</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Update = 1
	}
	public enum UserAction
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pull</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Pull = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Push</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Push = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SourceControlComponent : EntityBase
	{
		public struct Fields
		{
			public const string Action = "action";
			public const string ComponentDisplayName = "componentdisplayname";
			public const string ComponentId = "componentid";
			public const string ComponentPath = "componentpath";
			public const string ComponentType = "componenttype";
			public const string ComponentTypeName = "componenttypename";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsCommitted = "iscommitted";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartitionId = "partitionid";
			public const string SolutionComponentState = "solutioncomponentstate";
			public const string SourceControlComponentId = "sourcecontrolcomponentid";
			public const string SourceControlComponentPayloadId = "sourcecontrolcomponentpayloadid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string UserAction = "useraction";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "sourcecontrolcomponent";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11575;
		public const string EntityCollectionSchemaName = "SourceControlComponents";
		public const string EntityDisplayCollectionName = "Source Control Components";
		public const string DisplayName = "Source Control Component";
		public const string EntitySetName = "sourcecontrolcomponents";
		public const string EntityLogicalCollectionName = "sourcecontrolcomponents";
		public const string EntityPrimaryIdAttribute = "sourcecontrolcomponentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SourceControlComponent";
		[DebuggerNonUserCode()]
		public SourceControlComponent()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SourceControlComponent(Guid SourceControlComponentId)
		{
			Entity = new Entity(EntityLogicalName, SourceControlComponentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SourceControlComponent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SourceControlComponent"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SourceControlComponent(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SourceControlComponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SourceControlComponent(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SourceControlComponent(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SourceControlComponent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SourceControlComponent(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SourceControlComponent(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SourceControlComponent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Action</para>
		/// <para><strong>Description</strong>: Describes an action after syncing from git.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.Action"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.Action.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.Action? Action
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Action);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.Action)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Action] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Action] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Display Name</para>
		/// <para><strong>Description</strong>: Component Display Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComponentDisplayName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComponentDisplayName); }
			set { Entity.Attributes[Fields.ComponentDisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Id</para>
		/// <para><strong>Description</strong>: Component id of the component</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentId); }
			set { Entity.Attributes[Fields.ComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Path</para>
		/// <para><strong>Description</strong>: The path to the component</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComponentPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComponentPath); }
			set { Entity.Attributes[Fields.ComponentPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Type</para>
		/// <para><strong>Description</strong>: Component type of the solution aware components</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComponentType); }
			set { Entity.Attributes[Fields.ComponentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Type Name</para>
		/// <para><strong>Description</strong>: Component type Name of the solution aware components</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComponentTypeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComponentTypeName); }
			set { Entity.Attributes[Fields.ComponentTypeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Committed</para>
		/// <para><strong>Description</strong>: Is component committed to the Git</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCommitted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCommitted); }
			set { Entity.Attributes[Fields.IsCommitted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution Component State</para>
		/// <para><strong>Description</strong>: Solution Component State</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.SolutionComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.SolutionComponentState.Create"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.SolutionComponentState? SolutionComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SolutionComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.SolutionComponentState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SolutionComponentState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SolutionComponentState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Control Component Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SourceControlComponentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SourceControlComponentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Control Component Payload Id</para>
		/// <para><strong>Description</strong>: Unique identifier of Source Control Component Payload</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="sourcecontrolcomponentpayload"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SourceControlComponentPayloadId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SourceControlComponentPayloadId); }
			set { Entity.Attributes[Fields.SourceControlComponentPayloadId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserAction</para>
		/// <para><strong>Description</strong>: Describes a user action to resolve a conflict.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.UserAction"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.UserAction.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.UserAction? UserAction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UserAction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SourceControlComponentOptionSets.UserAction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UserAction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UserAction] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}