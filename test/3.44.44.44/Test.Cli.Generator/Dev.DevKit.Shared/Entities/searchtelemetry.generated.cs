//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:47
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.searchtelemetryOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class searchtelemetry : EntityBase
	{
		public struct Fields
		{
			public const string CorrelationId = "correlationid";
			public const string CreatedOn = "createdon";
			public const string EyesOnAnalyticsAllowed = "eyesonanalyticsallowed";
			public const string FeedbackData = "feedbackdata";
			public const string PartitionId = "partitionid";
			public const string RequestId = "requestid";
			public const string ScenarioName = "scenarioname";
			public const string searchtelemetryId = "searchtelemetryid";
			public const string SessionId = "sessionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string UserQuery = "userquery";
			public const string versionnumber = "versionnumber";
		}
		public const string EntityLogicalName = "searchtelemetry";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10297;
		public const string EntityCollectionSchemaName = "searchtelemetries";
		public const string EntityDisplayCollectionName = "Search Telemetry";
		public const string DisplayName = "Search Telemetry";
		public const string EntitySetName = "searchtelemetries";
		public const string EntityLogicalCollectionName = "searchtelemetries";
		public const string EntityPrimaryIdAttribute = "searchtelemetryid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "userquery";
		public const string EntitySchemaName = "searchtelemetry";
		[DebuggerNonUserCode()]
		public searchtelemetry()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public searchtelemetry(Guid searchtelemetryId)
		{
			Entity = new Entity(EntityLogicalName, searchtelemetryId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public searchtelemetry(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="searchtelemetry"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public searchtelemetry(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="searchtelemetry"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public searchtelemetry(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new searchtelemetry(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="searchtelemetry"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public searchtelemetry(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new searchtelemetry(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public searchtelemetry(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CorrelationId</para>
		/// <para><strong>Description</strong>: CorrelationId for the search</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CorrelationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EyesOnAnalyticsAllowed</para>
		/// <para><strong>Description</strong>: If customer is allow our engineer to eye on</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EyesOnAnalyticsAllowed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EyesOnAnalyticsAllowed); }
			set { Entity.Attributes[Fields.EyesOnAnalyticsAllowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FeedbackData</para>
		/// <para><strong>Description</strong>: Feedback data for the search</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,048,577</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FeedbackData
		{
			get { return Entity.GetAttributeValue<string>(Fields.FeedbackData); }
			set { Entity.Attributes[Fields.FeedbackData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RequestId</para>
		/// <para><strong>Description</strong>: RequestId for the search</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RequestId
		{
			get { return Entity.GetAttributeValue<string>(Fields.RequestId); }
			set { Entity.Attributes[Fields.RequestId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ScenarioName</para>
		/// <para><strong>Description</strong>: ScenarioName for the search, current will be one of RelevanceSearch/Marketing/Cxp</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScenarioName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScenarioName); }
			set { Entity.Attributes[Fields.ScenarioName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SearchTelemetry Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid searchtelemetryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.searchtelemetryId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionId</para>
		/// <para><strong>Description</strong>: SessionId for the search</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SessionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.SessionId); }
			set { Entity.Attributes[Fields.SessionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UserQuery</para>
		/// <para><strong>Description</strong>: User Query</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserQuery
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserQuery); }
			set { Entity.Attributes[Fields.UserQuery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of SearchTelemetry.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? versionnumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.versionnumber); }
		}
	}
}