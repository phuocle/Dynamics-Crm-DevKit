//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.AppointmentOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Appointment = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert</para>
		/// <para><strong>Value</strong>: 11,000</para>
		/// </summary>
		Booking_Alert = 11_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Activity</para>
		/// <para><strong>Value</strong>: 4,402</para>
		/// </summary>
		Campaign_Activity = 4_402,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Response</para>
		/// <para><strong>Value</strong>: 4,401</para>
		/// </summary>
		Campaign_Response = 4_401,
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Resolution</para>
		/// <para><strong>Value</strong>: 4,206</para>
		/// </summary>
		Case_Resolution = 4_206,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation</para>
		/// <para><strong>Value</strong>: 10,691</para>
		/// </summary>
		Conversation = 10_691,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Transcript</para>
		/// <para><strong>Value</strong>: 10,877</para>
		/// </summary>
		Copilot_Transcript = 10_877,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice alert</para>
		/// <para><strong>Value</strong>: 10,600</para>
		/// </summary>
		Customer_Voice_alert = 10_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey invite</para>
		/// <para><strong>Value</strong>: 10,610</para>
		/// </summary>
		Customer_Voice_survey_invite = 10_610,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey response</para>
		/// <para><strong>Value</strong>: 10,612</para>
		/// </summary>
		Customer_Voice_survey_response = 10_612,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invite Redemption</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Invite_Redemption = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Letter</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Letter = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Close</para>
		/// <para><strong>Value</strong>: 4,208</para>
		/// </summary>
		Opportunity_Close = 4_208,
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Close</para>
		/// <para><strong>Value</strong>: 4,209</para>
		/// </summary>
		Order_Close = 4_209,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message</para>
		/// <para><strong>Value</strong>: 11,063</para>
		/// </summary>
		Outbound_message = 11_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_Call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Portal_Comment = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Campaign</para>
		/// <para><strong>Value</strong>: 4,406</para>
		/// </summary>
		Quick_Campaign = 4_406,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Close</para>
		/// <para><strong>Value</strong>: 4,211</para>
		/// </summary>
		Quote_Close = 4_211,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Appointment</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Recurring_Appointment = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Value</strong>: 4,214</para>
		/// </summary>
		Service_Activity = 4_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Value</strong>: 10,708</para>
		/// </summary>
		Session = 10_708,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams chat</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Teams_chat = 10_185,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voicemail</para>
		/// <para><strong>Value</strong>: 11,070</para>
		/// </summary>
		Voicemail = 11_070
	}
	public enum AttachmentErrors
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: The appointment was saved as a Microsoft Dynamics 365 appointment record, but not all the attachments could be saved with it. An attachment cannot be saved if it is blocked or if its file type is invalid.</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		The_appointment_was_saved_as_a_Microsoft_Dynamics_365_appointment_record_but_not_all_the_attachments_could_be_saved_with_it_An_attachment_cannot_be_saved_if_it_is_blocked_or_if_its_file_type_is_invalid = 1
	}
	public enum InstanceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Recurring</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Recurring = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Exception</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Recurring_Exception = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Future Exception</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Recurring_Future_Exception = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Instance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Recurring_Instance = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Master</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Recurring_Master = 1
	}
	public enum OnlineMeetingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Meeting</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Teams_Meeting = 1
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Completed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Scheduled = 3
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Busy</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Scheduled</strong></para>
		/// </summary>
		Busy = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Canceled</strong></para>
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Completed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Free</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Free = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Out of Office</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Scheduled</strong></para>
		/// </summary>
		Out_of_Office = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tentative</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Tentative = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Appointment : EntityBase
	{
		public struct Fields
		{
			public const string ActivityAdditionalParams = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActualDurationMinutes = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string AttachmentCount = "attachmentcount";
			public const string AttachmentErrors = "attachmenterrors";
			public const string Category = "category";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string FormattedScheduledEnd = "formattedscheduledend";
			public const string FormattedScheduledStart = "formattedscheduledstart";
			public const string GlobalObjectId = "globalobjectid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InstanceTypeCode = "instancetypecode";
			public const string IsAllDayEvent = "isalldayevent";
			public const string IsBilled = "isbilled";
			public const string IsDraft = "isdraft";
			public const string IsMapiPrivate = "ismapiprivate";
			public const string IsOnlineMeeting = "isonlinemeeting";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsUnsafe = "isunsafe";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string Location = "location";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedFieldsMask = "modifiedfieldsmask";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_ActivityId = "msdyncrm_activityid";
			public const string msdyncrm_associatedcustomerjourneyiteration = "msdyncrm_associatedcustomerjourneyiteration";
			public const string OnHoldTime = "onholdtime";
			public const string OnlineMeetingChatId = "onlinemeetingchatid";
			public const string OnlineMeetingId = "onlinemeetingid";
			public const string OnlineMeetingJoinUrl = "onlinemeetingjoinurl";
			public const string OnlineMeetingType = "onlinemeetingtype";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string OriginalStartDate = "originalstartdate";
			public const string OutlookOwnerApptId = "outlookownerapptid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string requiredattendees = "requiredattendees";
			public const string ScheduledDurationMinutes = "scheduleddurationminutes";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SeriesId = "seriesid";
			public const string ServiceId = "serviceid";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subcategory = "subcategory";
			public const string Subject = "subject";
			public const string SubscriptionId = "subscriptionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "appointment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4201;
		public const string EntityCollectionSchemaName = "Appointments";
		public const string EntityDisplayCollectionName = "Appointments";
		public const string DisplayName = "Appointment";
		public const string EntitySetName = "appointments";
		public const string EntityLogicalCollectionName = "appointments";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "Appointment";
		[DebuggerNonUserCode()]
		public Appointment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Appointment(Guid AppointmentId)
		{
			Entity = new Entity(EntityLogicalName, AppointmentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Appointment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Appointment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Appointment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Appointment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Appointment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Appointment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Appointment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Appointment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Appointment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Appointment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Parameters</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
			set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Description</strong>: Unique identifier of the appointment.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Type</para>
		/// <para><strong>Description</strong>: Type of activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Duration</para>
		/// <para><strong>Description</strong>: Shows the value selected in the Duration field on the appointment at the time that the appointment is closed as completed. The duration is used to report the time spent on the activity.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
			set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual End</para>
		/// <para><strong>Description</strong>: Enter the actual end date and time of the appointment. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual duration of the appointment.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Start</para>
		/// <para><strong>Description</strong>: Enter the actual start date and time for the appointment. By default, it displays the date and time when the activity was created, but can be edited to capture the actual duration of the appointment.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attachment Count</para>
		/// <para><strong>Description</strong>: Shows the number of attachments on the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AttachmentCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AttachmentCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AttachmentErrors</para>
		/// <para><strong>Description</strong>: Select the error code to identify issues with the outlook item recipients or attachments, such as blocked attachments.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.AttachmentErrors"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.AttachmentErrors.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppointmentOptionSets.AttachmentErrors? AttachmentErrors
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AttachmentErrors);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppointmentOptionSets.AttachmentErrors)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AttachmentErrors] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AttachmentErrors] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Description</strong>: Type a category to identify the appointment type, such as sales demo, prospect call, or service call, to tie the appointment to a business group or function.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.Category); }
			set { Entity.Attributes[Fields.Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the purpose of the appointment.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Formatted End Date</para>
		/// <para><strong>Description</strong>: Formatted scheduled end time of the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FormattedScheduledEnd
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FormattedScheduledEnd); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Formatted Start Date</para>
		/// <para><strong>Description</strong>: Formatted scheduled start time of the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? FormattedScheduledStart
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.FormattedScheduledStart); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outlook Appointment</para>
		/// <para><strong>Description</strong>: Shows the ID of the appointment in Microsoft Office Outlook. The ID is used to synchronize the appointment between Microsoft Dynamics 365 and the correct Exchange account.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GlobalObjectId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GlobalObjectId); }
			set { Entity.Attributes[Fields.GlobalObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment Type</para>
		/// <para><strong>Description</strong>: Type of instance of a recurring series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.InstanceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.InstanceTypeCode.Not_Recurring"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppointmentOptionSets.InstanceTypeCode? InstanceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppointmentOptionSets.InstanceTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: All Day Event</para>
		/// <para><strong>Description</strong>: Select whether the appointment is an all-day event to make sure that the required resources are scheduled for the full day.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAllDayEvent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAllDayEvent); }
			set { Entity.Attributes[Fields.IsAllDayEvent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Billed</para>
		/// <para><strong>Description</strong>: Information regarding whether the appointment was billed as part of resolving a case.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsDraft</para>
		/// <para><strong>Description</strong>: Information regarding whether the appointment is a draft.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDraft
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDraft); }
			set { Entity.Attributes[Fields.IsDraft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Private</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMapiPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMapiPrivate); }
			set { Entity.Attributes[Fields.IsMapiPrivate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Online Meeting</para>
		/// <para><strong>Description</strong>: Displays whether or not this is an online meeting.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOnlineMeeting
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOnlineMeeting); }
			set { Entity.Attributes[Fields.IsOnlineMeeting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Regular Activity</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity is a regular activity type or event type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsUnsafe</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsUnsafe
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsUnsafe); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Workflow Created</para>
		/// <para><strong>Description</strong>: Information regarding whether the appointment was created from a workflow rule.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date and time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Location</para>
		/// <para><strong>Description</strong>: Type the location where the appointment will take place, such as a conference room or customer office.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Location
		{
			get { return Entity.GetAttributeValue<string>(Fields.Location); }
			set { Entity.Attributes[Fields.Location] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified Fields Mask</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModifiedFieldsMask
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModifiedFieldsMask); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_ActivityId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_ActivityId); }
			set { Entity.Attributes[Fields.msdyncrm_ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer journey iteration</para>
		/// <para><strong>Description</strong>: Customer journey iteration</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_customerjourneyiteration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_associatedcustomerjourneyiteration
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_associatedcustomerjourneyiteration); }
			set { Entity.Attributes[Fields.msdyncrm_associatedcustomerjourneyiteration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows how long, in minutes, that the record was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Chat Id</para>
		/// <para><strong>Description</strong>: Shows the online meeting chat id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingChatId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingChatId); }
			set { Entity.Attributes[Fields.OnlineMeetingChatId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Id</para>
		/// <para><strong>Description</strong>: Shows the online meeting id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingId); }
			set { Entity.Attributes[Fields.OnlineMeetingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Join Url</para>
		/// <para><strong>Description</strong>: Shows the online meeting join url.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 600</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OnlineMeetingJoinUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.OnlineMeetingJoinUrl); }
			set { Entity.Attributes[Fields.OnlineMeetingJoinUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Meeting Type</para>
		/// <para><strong>Description</strong>: Displays the online meeting type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.OnlineMeetingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppointmentOptionSets.OnlineMeetingType? OnlineMeetingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OnlineMeetingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppointmentOptionSets.OnlineMeetingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OnlineMeetingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OnlineMeetingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Optional Attendees</para>
		/// <para><strong>Description</strong>: Enter the account, contact, lead, user, or other equipment resources that are not needed at the appointment, but can optionally attend.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> OptionalAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.OptionalAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.OptionalAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organizer</para>
		/// <para><strong>Description</strong>: Enter the user who is in charge of coordinating or leading the appointment to make sure the appointment is displayed in the user&apos;s My Activities view.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Organizer
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Organizer).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Organizer] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Original Start Date</para>
		/// <para><strong>Description</strong>: The original start date of the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OriginalStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OriginalStartDate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outlook Appointment Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the Microsoft Office Outlook appointment owner that correlates to the PR_OWNER_APPT_ID MAPI property.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OutlookOwnerApptId
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OutlookOwnerApptId); }
			set { Entity.Attributes[Fields.OutlookOwnerApptId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Shows the business unit that the record owner belongs to.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team that owns the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user that owns the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.PriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppointmentOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppointmentOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Shows the ID of the process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Choose the record that the appointment relates to.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="bookableresourcebooking"/>, <see cref="bookableresourcebookingheader"/>, <see cref="bulkoperation"/>, <see cref="campaign"/>, <see cref="campaignactivity"/>, <see cref="contact"/>, <see cref="contract"/>, <see cref="entitlement"/>, <see cref="entitlementtemplate"/>, <see cref="incident"/>, <see cref="invoice"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="lead"/>, <see cref="msdyncrm_contentsettings"/>, <see cref="msdyncrm_customerjourney"/>, <see cref="msdyncrm_leadscoremodel"/>, <see cref="msdyncrm_linkedinaccount"/>, <see cref="msdyncrm_linkedinactivity"/>, <see cref="msdyncrm_linkedinfieldmapping"/>, <see cref="msdyncrm_linkedinform"/>, <see cref="msdyncrm_linkedinformanswer"/>, <see cref="msdyncrm_linkedinformquestion"/>, <see cref="msdyncrm_linkedinformsubmission"/>, <see cref="msdyncrm_linkedinleadmatchingstrategy"/>, <see cref="msdyncrm_linkedinuserprofile"/>, <see cref="msdyncrm_marketingdynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemaildynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemailtestsend"/>, <see cref="msdyncrm_migration"/>, <see cref="msdyncrm_uicconfig"/>, <see cref="msdyn_agreement"/>, <see cref="msdyn_agreementbookingdate"/>, <see cref="msdyn_agreementbookingincident"/>, <see cref="msdyn_agreementbookingproduct"/>, <see cref="msdyn_agreementbookingservice"/>, <see cref="msdyn_agreementbookingservicetask"/>, <see cref="msdyn_agreementbookingsetup"/>, <see cref="msdyn_agreementinvoicedate"/>, <see cref="msdyn_agreementinvoiceproduct"/>, <see cref="msdyn_agreementinvoicesetup"/>, <see cref="msdyn_bookingalertstatus"/>, <see cref="msdyn_bookingrule"/>, <see cref="msdyn_bookingtimestamp"/>, <see cref="msdyn_customerasset"/>, <see cref="msdyn_fieldservicesetting"/>, <see cref="msdyn_incidenttypecharacteristic"/>, <see cref="msdyn_incidenttypeproduct"/>, <see cref="msdyn_incidenttypeservice"/>, <see cref="msdyn_inventoryadjustment"/>, <see cref="msdyn_inventoryadjustmentproduct"/>, <see cref="msdyn_inventoryjournal"/>, <see cref="msdyn_inventorytransfer"/>, <see cref="msdyn_payment"/>, <see cref="msdyn_paymentdetail"/>, <see cref="msdyn_paymentmethod"/>, <see cref="msdyn_paymentterm"/>, <see cref="msdyn_playbookinstance"/>, <see cref="msdyn_postalbum"/>, <see cref="msdyn_postalcode"/>, <see cref="msdyn_productinventory"/>, <see cref="msdyn_purchaseorder"/>, <see cref="msdyn_purchaseorderbill"/>, <see cref="msdyn_purchaseorderproduct"/>, <see cref="msdyn_purchaseorderreceipt"/>, <see cref="msdyn_purchaseorderreceiptproduct"/>, <see cref="msdyn_purchaseordersubstatus"/>, <see cref="msdyn_quotebookingincident"/>, <see cref="msdyn_quotebookingproduct"/>, <see cref="msdyn_quotebookingservice"/>, <see cref="msdyn_quotebookingservicetask"/>, <see cref="msdyn_resourceterritory"/>, <see cref="msdyn_rma"/>, <see cref="msdyn_rmaproduct"/>, <see cref="msdyn_rmareceipt"/>, <see cref="msdyn_rmareceiptproduct"/>, <see cref="msdyn_rmasubstatus"/>, <see cref="msdyn_rtv"/>, <see cref="msdyn_rtvproduct"/>, <see cref="msdyn_rtvsubstatus"/>, <see cref="msdyn_salessuggestion"/>, <see cref="msdyn_shipvia"/>, <see cref="msdyn_swarm"/>, <see cref="msdyn_systemuserschedulersetting"/>, <see cref="msdyn_timegroup"/>, <see cref="msdyn_timegroupdetail"/>, <see cref="msdyn_timeoffrequest"/>, <see cref="msdyn_warehouse"/>, <see cref="msdyn_workorder"/>, <see cref="msdyn_workordercharacteristic"/>, <see cref="msdyn_workorderincident"/>, <see cref="msdyn_workorderproduct"/>, <see cref="msdyn_workorderresourcerestriction"/>, <see cref="msdyn_workorderservice"/>, <see cref="msdyn_workorderservicetask"/>, <see cref="msevtmgt_checkin"/>, <see cref="msevtmgt_event"/>, <see cref="msevtmgt_eventpurchase"/>, <see cref="msevtmgt_eventpurchaseattendee"/>, <see cref="msevtmgt_eventpurchasepass"/>, <see cref="msevtmgt_eventregistration"/>, <see cref="msevtmgt_hotel"/>, <see cref="msevtmgt_hotelroomallocation"/>, <see cref="msevtmgt_hotelroomreservation"/>, <see cref="msevtmgt_layout"/>, <see cref="msevtmgt_room"/>, <see cref="msevtmgt_session"/>, <see cref="msevtmgt_sessionregistration"/>, <see cref="msevtmgt_sessiontrack"/>, <see cref="msevtmgt_speaker"/>, <see cref="msevtmgt_speakerengagement"/>, <see cref="msevtmgt_sponsorablearticle"/>, <see cref="msevtmgt_sponsorship"/>, <see cref="msevtmgt_venue"/>, <see cref="msevtmgt_webinarconfiguration"/>, <see cref="msevtmgt_webinarprovider"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="opportunity"/>, <see cref="quote"/>, <see cref="salesorder"/>, <see cref="site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Attendees</para>
		/// <para><strong>Description</strong>: Enter the account, contact, lead, user, or other equipment resources that are required to attend the appointment.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> requiredattendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.requiredattendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.requiredattendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Shows the expected duration of the appointment, in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
			set { Entity.Attributes[Fields.ScheduledDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time</para>
		/// <para><strong>Description</strong>: Enter the expected due date and time for the activity to be completed to provide details about the timing of the appointment.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time</para>
		/// <para><strong>Description</strong>: Enter the expected start date and time for the activity to provide details about the timing of the appointment.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Series Id</para>
		/// <para><strong>Description</strong>: Shows the ID of the recurring series of an instance.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SeriesId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SeriesId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Unique identifier for an associated service.</para>
		/// <para><strong>Lookup</strong>: <see cref="service"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceId); }
			set { Entity.Attributes[Fields.ServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the appointment record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this appointment. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sort Date</para>
		/// <para><strong>Description</strong>: Shows the date and time by which the activities are sorted.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Process Stage</para>
		/// <para><strong>Description</strong>: Shows the ID of the stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the appointment is open, completed, or canceled. Completed and canceled appointments are read-only and can&apos;t be edited.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.StateCode.Open"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppointmentOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppointmentOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the appointment&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.AppointmentOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AppointmentOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AppointmentOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sub-Category</para>
		/// <para><strong>Description</strong>: Type a subcategory to identify the appointment type and relate the activity to a specific product, sales region, business group, or other function.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subcategory
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subcategory); }
			set { Entity.Attributes[Fields.Subcategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Type a short description about the objective or primary topic of the appointment.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SubscriptionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SubscriptionId); }
			set { Entity.Attributes[Fields.SubscriptionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the appointment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}