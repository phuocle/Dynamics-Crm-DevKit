//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:47
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets
{
	public enum Lookback
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 2H</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		_2H = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: 30D</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		_30D = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: 48H</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_48H = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: 7D</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		_7D = 3
	}
	public enum MetricType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Category = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Series</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Time_Series = 1
	}
	public enum PlotOption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Area</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Area = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bar</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Bar = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bubble</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Bubble = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Column</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Column = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Donut</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Donut = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DoubleDonut</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		DoubleDonut = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Infocard</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Infocard = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Line</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Line = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinearGauge</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		LinearGauge = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: List</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		List = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pie</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Pie = 4
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SavedOrgInsightsConfiguration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string IsDefault = "isdefault";
			public const string IsDrilldown = "isdrilldown";
			public const string JsonData = "jsondata";
			public const string JsonDataEndTime = "jsondataendtime";
			public const string JsonDataStartTime = "jsondatastarttime";
			public const string Lookback = "lookback";
			public const string MetricType = "metrictype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string Parameters = "parameters";
			public const string PlotOption = "plotoption";
			public const string SavedOrgInsightsConfigurationId = "savedorginsightsconfigurationid";
		}
		public const string EntityLogicalName = "savedorginsightsconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1309;
		public const string EntityCollectionSchemaName = "SavedOrgInsightsConfigurations";
		public const string EntityDisplayCollectionName = "Saved Organization Insights Configurations";
		public const string DisplayName = "Saved Organization Insights Configuration";
		public const string EntitySetName = "savedorginsightsconfigurations";
		public const string EntityLogicalCollectionName = "savedorginsightsconfigurations";
		public const string EntityPrimaryIdAttribute = "savedorginsightsconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "SavedOrgInsightsConfiguration";
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Guid SavedOrgInsightsConfigurationId)
		{
			Entity = new Entity(EntityLogicalName, SavedOrgInsightsConfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SavedOrgInsightsConfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SavedOrgInsightsConfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SavedOrgInsightsConfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SavedOrgInsightsConfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SavedOrgInsightsConfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SavedOrgInsightsConfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description of the saved organization insights configuration</para>
		/// <para><strong>Description</strong>: Description of the saved organization insights configuration</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Configuration</para>
		/// <para><strong>Description</strong>: Indicates whether this saved organization insights configuration is the default config</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDefault); }
			set { Entity.Attributes[Fields.IsDefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Drilldown</para>
		/// <para><strong>Description</strong>: Indicates whether this configuration indicates a drilldown chart</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDrilldown
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDrilldown); }
			set { Entity.Attributes[Fields.IsDrilldown] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metrics Data in Json format for the metrics defined in parameters</para>
		/// <para><strong>Description</strong>: Metrics Data in Json format for those metrics defined in parameters</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string JsonData
		{
			get { return Entity.GetAttributeValue<string>(Fields.JsonData); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time</para>
		/// <para><strong>Description</strong>: End Time</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? JsonDataEndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.JsonDataEndTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time</para>
		/// <para><strong>Description</strong>: Start Time</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? JsonDataStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.JsonDataStartTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lookback</para>
		/// <para><strong>Description</strong>: Lookback period</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.Lookback"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.Lookback._2H"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.Lookback? Lookback
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Lookback);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.Lookback)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Lookback] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Lookback] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metric Type</para>
		/// <para><strong>Description</strong>: Type of the metric</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.MetricType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.MetricType? MetricType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MetricType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.MetricType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MetricType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MetricType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display name for the saved organization insights configuration</para>
		/// <para><strong>Description</strong>: Display name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the solution</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parameters needed for data retrieval</para>
		/// <para><strong>Description</strong>: Parameters needed for data retrieval</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Parameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.Parameters); }
			set { Entity.Attributes[Fields.Parameters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plot Option</para>
		/// <para><strong>Description</strong>: Plot Option</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.PlotOption"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.PlotOption.Line"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.PlotOption? PlotOption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PlotOption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SavedOrgInsightsConfigurationOptionSets.PlotOption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PlotOption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PlotOption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SavedOrgInsightsConfigurationId</para>
		/// <para><strong>Description</strong>: Shows the ID of the Saved Organization Insights Configuration</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SavedOrgInsightsConfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SavedOrgInsightsConfigurationId] = value;
				Entity.Id = value;
			}
		}
	}
}