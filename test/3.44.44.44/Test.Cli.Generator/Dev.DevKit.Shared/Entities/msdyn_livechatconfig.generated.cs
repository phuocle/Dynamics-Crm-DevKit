//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_agentDisplayName
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: First name</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		First_name = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Full name</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Full_name = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Last name</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Last_name = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Nick name</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Nick_name = 192_350_003
	}
	public enum msdyn_callingoptions
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No calling</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		No_calling = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Video and voice calling</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Video_and_voice_calling = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice only</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Voice_only = 192_350_002
	}
	public enum msdyn_conversationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Live Chat</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Live_Chat = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Persistent Chat</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Persistent_Chat = 192_350_001
	}
	public enum msdyn_Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-Detect</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Auto_Detect = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 192,360,014</para>
		/// </summary>
		English = 192_360_014
	}
	public enum msdyn_offlinewidgetthemecolor
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Black</para>
		/// <para><strong>Value</strong>: 19,236,004</para>
		/// </summary>
		Black = 19_236_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Blue</para>
		/// <para><strong>Value</strong>: 19,236,002</para>
		/// </summary>
		Blue = 19_236_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Brown</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Brown = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Clay</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Clay = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Green</para>
		/// <para><strong>Value</strong>: 19,236,003</para>
		/// </summary>
		Green = 19_236_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grey</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Grey = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Orange</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Orange = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pink</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Pink = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Purple</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		Purple = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Red</para>
		/// <para><strong>Value</strong>: 19,236,001</para>
		/// </summary>
		Red = 19_236_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teal</para>
		/// <para><strong>Value</strong>: 192,360,017</para>
		/// </summary>
		Teal = 192_360_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: Violet</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Violet = 192_350_004
	}
	public enum msdyn_PostConversationSurveyBotSurveyMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Insert survey in conversation</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Insert_survey_in_conversation = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Send survey link to conversation</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Send_survey_link_to_conversation = 192_350_001
	}
	public enum msdyn_PostConversationSurveyMode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Insert survey in conversation</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Insert_survey_in_conversation = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Send survey link to conversation</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Send_survey_link_to_conversation = 192_350_001
	}
	public enum msdyn_surveyprovider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice</para>
		/// <para><strong>Value</strong>: 600,990,000</para>
		/// </summary>
		Customer_Voice = 600_990_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Copilot Studio</para>
		/// <para><strong>Value</strong>: 600,990,001</para>
		/// </summary>
		Microsoft_Copilot_Studio = 600_990_001
	}
	public enum msdyn_widgetPosition
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bottom left</para>
		/// <para><strong>Value</strong>: 192,236,011</para>
		/// </summary>
		Bottom_left = 192_236_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bottom right</para>
		/// <para><strong>Value</strong>: 192,236,010</para>
		/// </summary>
		Bottom_right = 192_236_010
	}
	public enum msdyn_widgetThemeColor
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Black</para>
		/// <para><strong>Value</strong>: 19,236,004</para>
		/// </summary>
		Black = 19_236_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Blue</para>
		/// <para><strong>Value</strong>: 19,236,002</para>
		/// </summary>
		Blue = 19_236_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Brown</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Brown = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Clay</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Clay = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Green</para>
		/// <para><strong>Value</strong>: 19,236,003</para>
		/// </summary>
		Green = 19_236_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grey</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Grey = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Orange</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Orange = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pink</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Pink = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Purple</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		Purple = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Red</para>
		/// <para><strong>Value</strong>: 19,236,001</para>
		/// </summary>
		Red = 19_236_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teal</para>
		/// <para><strong>Value</strong>: 192,360,017</para>
		/// </summary>
		Teal = 192_360_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: Violet</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Violet = 192_350_004
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_livechatconfig : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentDisplayName = "msdyn_agentdisplayname";
			public const string msdyn_authenticatedsigninoptional = "msdyn_authenticatedsigninoptional";
			public const string msdyn_AuthsettingsId = "msdyn_authsettingsid";
			public const string msdyn_AutoDetectLanguage = "msdyn_autodetectlanguage";
			public const string msdyn_avatarUrl = "msdyn_avatarurl";
			public const string msdyn_averagewaittime_enabled = "msdyn_averagewaittime_enabled";
			public const string msdyn_botmcssurveyurl = "msdyn_botmcssurveyurl";
			public const string msdyn_callingoptions = "msdyn_callingoptions";
			public const string msdyn_cobrowseprovider = "msdyn_cobrowseprovider";
			public const string msdyn_conversationmode = "msdyn_conversationmode";
			public const string msdyn_customanonymoustokenexpirationtime = "msdyn_customanonymoustokenexpirationtime";
			public const string msdyn_Duringnonoperatinghours = "msdyn_duringnonoperatinghours";
			public const string msdyn_EmailTemplate = "msdyn_emailtemplate";
			public const string msdyn_enablechatreconnect = "msdyn_enablechatreconnect";
			public const string msdyn_Enablechattranscriptdownload = "msdyn_enablechattranscriptdownload";
			public const string msdyn_Enablechattranscriptemail = "msdyn_enablechattranscriptemail";
			public const string msdyn_enablecobrowse = "msdyn_enablecobrowse";
			public const string msdyn_Enablefileattachmentsforagents = "msdyn_enablefileattachmentsforagents";
			public const string msdyn_Enablefileattachmentsforcustomers = "msdyn_enablefileattachmentsforcustomers";
			public const string msdyn_enablescreensharing = "msdyn_enablescreensharing";
			public const string msdyn_genericagentdisplayname = "msdyn_genericagentdisplayname";
			public const string msdyn_infolabel = "msdyn_infolabel";
			public const string msdyn_Language = "msdyn_language";
			public const string msdyn_livechatconfigId = "msdyn_livechatconfigid";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_Mailbox = "msdyn_mailbox";
			public const string msdyn_mcssurveyurl = "msdyn_mcssurveyurl";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_oc_geolocationprovider = "msdyn_oc_geolocationprovider";
			public const string msdyn_ocWidgetLanguage = "msdyn_ocwidgetlanguage";
			public const string msdyn_offlinewidgetsubtitle = "msdyn_offlinewidgetsubtitle";
			public const string msdyn_offlinewidgetthemecolor = "msdyn_offlinewidgetthemecolor";
			public const string msdyn_offlinewidgettitle = "msdyn_offlinewidgettitle";
			public const string msdyn_operatinghourid = "msdyn_operatinghourid";
			public const string msdyn_portalurl = "msdyn_portalurl";
			public const string msdyn_positioninqueue_enabled = "msdyn_positioninqueue_enabled";
			public const string msdyn_postchatenabled = "msdyn_postchatenabled";
			public const string msdyn_PostConversationSurvey = "msdyn_postconversationsurvey";
			public const string msdyn_PostConversationSurveyBotSurvey = "msdyn_postconversationsurveybotsurvey";
			public const string msdyn_PostConversationSurveyBotSurveyMessageText = "msdyn_postconversationsurveybotsurveymessagetext";
			public const string msdyn_PostConversationSurveyBotSurveyMode = "msdyn_postconversationsurveybotsurveymode";
			public const string msdyn_PostConversationSurveyEnable = "msdyn_postconversationsurveyenable";
			public const string msdyn_PostConversationSurveyMessageText = "msdyn_postconversationsurveymessagetext";
			public const string msdyn_PostConversationSurveyMode = "msdyn_postconversationsurveymode";
			public const string msdyn_PostConversationSurveySeparateBotSurvey = "msdyn_postconversationsurveyseparatebotsurvey";
			public const string msdyn_PrechatEnabled = "msdyn_prechatenabled";
			public const string msdyn_PreChatQuestionnaireAuthenticated = "msdyn_prechatquestionnaireauthenticated";
			public const string msdyn_PreChatQuestionnaireUnauthenticated = "msdyn_prechatquestionnaireunauthenticated";
			public const string msdyn_proactivechatenabled = "msdyn_proactivechatenabled";
			public const string msdyn_redirectionurl = "msdyn_redirectionurl";
			public const string msdyn_requestvisitorlocation = "msdyn_requestvisitorlocation";
			public const string msdyn_screensharingprovider = "msdyn_screensharingprovider";
			public const string msdyn_showagentname = "msdyn_showagentname";
			public const string msdyn_Showwidgetduringofflinehours = "msdyn_showwidgetduringofflinehours";
			public const string msdyn_surveyprovider = "msdyn_surveyprovider";
			public const string msdyn_timetoreconnectwithpreviousagent = "msdyn_timetoreconnectwithpreviousagent";
			public const string msdyn_widgetAppId = "msdyn_widgetappid";
			public const string msdyn_widgetcustomizationconfig = "msdyn_widgetcustomizationconfig";
			public const string msdyn_WidgetLocale = "msdyn_widgetlocale";
			public const string msdyn_widgetPosition = "msdyn_widgetposition";
			public const string msdyn_WidgetSnippet = "msdyn_widgetsnippet";
			public const string msdyn_widgetsoundnotification = "msdyn_widgetsoundnotification";
			public const string msdyn_widgetSubtitle = "msdyn_widgetsubtitle";
			public const string msdyn_widgetThemeColor = "msdyn_widgetthemecolor";
			public const string msdyn_widgetTitle = "msdyn_widgettitle";
			public const string msdyn_widgetvisualnotification = "msdyn_widgetvisualnotification";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_livechatconfig";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11031;
		public const string EntityCollectionSchemaName = "msdyn_livechatconfigs";
		public const string EntityDisplayCollectionName = "Chat Widgets";
		public const string DisplayName = "Chat Widget";
		public const string EntitySetName = "msdyn_livechatconfigs";
		public const string EntityLogicalCollectionName = "msdyn_livechatconfigs";
		public const string EntityPrimaryIdAttribute = "msdyn_livechatconfigid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_livechatconfig";
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Guid msdyn_livechatconfigId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_livechatconfigId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_livechatconfig"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_livechatconfig"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_livechatconfig(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_livechatconfig"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_livechatconfig(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_livechatconfig(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent display name</para>
		/// <para><strong>Description</strong>: Configure agent name to be displayed in the chat widget</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_agentDisplayName"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_agentDisplayName.Full_name"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_agentDisplayName? msdyn_agentDisplayName
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_agentDisplayName);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_agentDisplayName)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_agentDisplayName] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_agentDisplayName] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sign in is optional to start a chat</para>
		/// <para><strong>Description</strong>: Sign in is optional to start a chat</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_authenticatedsigninoptional
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_authenticatedsigninoptional); }
			set { Entity.Attributes[Fields.msdyn_authenticatedsigninoptional] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication settings</para>
		/// <para><strong>Description</strong>: Unique identifier for Authentication settings associated with Chat widget.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_authenticationsettings"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AuthsettingsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AuthsettingsId); }
			set { Entity.Attributes[Fields.msdyn_AuthsettingsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Detect Language</para>
		/// <para><strong>Description</strong>: Indicates if the chat widget should automatically detect user locale.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoDetectLanguage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoDetectLanguage); }
			set { Entity.Attributes[Fields.msdyn_AutoDetectLanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Logo</para>
		/// <para><strong>Description</strong>: Chat logo</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_avatarUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_avatarUrl); }
			set { Entity.Attributes[Fields.msdyn_avatarUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Indicates whether display of wait time is enabled</para>
		/// <para><strong>Description</strong>: Indicates whether display of wait time is enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_averagewaittime_enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_averagewaittime_enabled); }
			set { Entity.Attributes[Fields.msdyn_averagewaittime_enabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot MCS Survey URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_botmcssurveyurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_botmcssurveyurl); }
			set { Entity.Attributes[Fields.msdyn_botmcssurveyurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calling options</para>
		/// <para><strong>Description</strong>: List of calling options available for the chat widget</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_callingoptions"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_callingoptions.No_calling"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_callingoptions? msdyn_callingoptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_callingoptions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_callingoptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_callingoptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_callingoptions] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Co-browse provider</para>
		/// <para><strong>Description</strong>: Select a co-browse provider</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cobrowseprovider
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cobrowseprovider); }
			set { Entity.Attributes[Fields.msdyn_cobrowseprovider] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Indicates the conversation mode of the chat widget</para>
		/// <para><strong>Description</strong>: Indicates the conversation mode of the chat widget</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_conversationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_conversationmode.Live_Chat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_conversationmode? msdyn_conversationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_conversationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_conversationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_conversationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_conversationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Anonymous Token Expiration Time in hours</para>
		/// <para><strong>Description</strong>: Custom Anonymous Token Expiration Time Feature in hours</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 24</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_customanonymoustokenexpirationtime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_customanonymoustokenexpirationtime); }
			set { Entity.Attributes[Fields.msdyn_customanonymoustokenexpirationtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) During non-operating hours</para>
		/// <para><strong>Description</strong>: (Deprecated) During non-operating hours</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Duringnonoperatinghours
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Duringnonoperatinghours); }
			set { Entity.Attributes[Fields.msdyn_Duringnonoperatinghours] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Template</para>
		/// <para><strong>Description</strong>: Email Template</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EmailTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EmailTemplate); }
			set { Entity.Attributes[Fields.msdyn_EmailTemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Turn on reconnect to previous chat</para>
		/// <para><strong>Description</strong>: This will let customers reconnect to their previous session.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablechatreconnect
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablechatreconnect); }
			set { Entity.Attributes[Fields.msdyn_enablechatreconnect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow download of transcript</para>
		/// <para><strong>Description</strong>: Allow download of transcript</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablechattranscriptdownload
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablechattranscriptdownload); }
			set { Entity.Attributes[Fields.msdyn_Enablechattranscriptdownload] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow email of transcript</para>
		/// <para><strong>Description</strong>: Allow email of transcript</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablechattranscriptemail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablechattranscriptemail); }
			set { Entity.Attributes[Fields.msdyn_Enablechattranscriptemail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Co-browse</para>
		/// <para><strong>Description</strong>: Co-browse allows agent and customer to interact on the same web page in real time</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Enabled</strong>]: true - [<strong>Disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablecobrowse
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablecobrowse); }
			set { Entity.Attributes[Fields.msdyn_enablecobrowse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable file attachments for agents</para>
		/// <para><strong>Description</strong>: Enable file attachments for agents</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablefileattachmentsforagents
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablefileattachmentsforagents); }
			set { Entity.Attributes[Fields.msdyn_Enablefileattachmentsforagents] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable file attachments for customers</para>
		/// <para><strong>Description</strong>: Enable file attachments for customers</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Enablefileattachmentsforcustomers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Enablefileattachmentsforcustomers); }
			set { Entity.Attributes[Fields.msdyn_Enablefileattachmentsforcustomers] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Screen sharing</para>
		/// <para><strong>Description</strong>: Enable Screen sharing</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Enabled</strong>]: true - [<strong>Disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablescreensharing
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablescreensharing); }
			set { Entity.Attributes[Fields.msdyn_enablescreensharing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Generic Name</para>
		/// <para><strong>Description</strong>: Display Agent Generic Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_genericagentdisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_genericagentdisplayname); }
			set { Entity.Attributes[Fields.msdyn_genericagentdisplayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: infolabel</para>
		/// <para><strong>Description</strong>: Label string indicating user to save the record to add location information</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_infolabel
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_infolabel); }
			set { Entity.Attributes[Fields.msdyn_infolabel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: Language  in which chat widget is rendered</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_Language"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_Language.English"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_Language? msdyn_Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chat Widget</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_livechatconfigId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_livechatconfigId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work stream</para>
		/// <para><strong>Description</strong>: Work Stream Identifier</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_liveworkstream"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender Mailbox</para>
		/// <para><strong>Description</strong>: The mailbox where your email transcripts will be sent from.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Mailbox
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Mailbox); }
			set { Entity.Attributes[Fields.msdyn_Mailbox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MCS Survey URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mcssurveyurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mcssurveyurl); }
			set { Entity.Attributes[Fields.msdyn_mcssurveyurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Provider API key</para>
		/// <para><strong>Description</strong>: Geo Location Provider API Key</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_oc_geolocationprovider"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_oc_geolocationprovider
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_oc_geolocationprovider); }
			set { Entity.Attributes[Fields.msdyn_oc_geolocationprovider] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: The language of the chat widget.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_oclanguage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ocWidgetLanguage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ocWidgetLanguage); }
			set { Entity.Attributes[Fields.msdyn_ocWidgetLanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Offline Widget Subtitle</para>
		/// <para><strong>Description</strong>: Description for offline widget subtitle attribute</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_offlinewidgetsubtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_offlinewidgetsubtitle); }
			set { Entity.Attributes[Fields.msdyn_offlinewidgetsubtitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Offline Widget Theme Color</para>
		/// <para><strong>Description</strong>: Description for offline widget theme color attribute</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_offlinewidgetthemecolor"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_offlinewidgetthemecolor.Black"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_offlinewidgetthemecolor? msdyn_offlinewidgetthemecolor
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_offlinewidgetthemecolor);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_offlinewidgetthemecolor)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_offlinewidgetthemecolor] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_offlinewidgetthemecolor] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Offline Widegt Title</para>
		/// <para><strong>Description</strong>: Description for offline widget title attribute</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_offlinewidgettitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_offlinewidgettitle); }
			set { Entity.Attributes[Fields.msdyn_offlinewidgettitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operating hours</para>
		/// <para><strong>Description</strong>: Unique identifier for Operating hour associated with Chat widget.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_operatinghour"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_operatinghourid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_operatinghourid); }
			set { Entity.Attributes[Fields.msdyn_operatinghourid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal URL</para>
		/// <para><strong>Description</strong>: Provide a link to the web portal where your chat is hosted.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_portalurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_portalurl); }
			set { Entity.Attributes[Fields.msdyn_portalurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show position in queue</para>
		/// <para><strong>Description</strong>: Enable Position In Queue feature</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_positioninqueue_enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_positioninqueue_enabled); }
			set { Entity.Attributes[Fields.msdyn_positioninqueue_enabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post-chat Survey</para>
		/// <para><strong>Description</strong>: Enable Post-Chat (Deprecated)</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_postchatenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_postchatenabled); }
			set { Entity.Attributes[Fields.msdyn_postchatenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey</para>
		/// <para><strong>Description</strong>: Lookup to Dynamics 365 Customer Voice survey field</para>
		/// <para><strong>Lookup</strong>: <see cref="msfp_survey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PostConversationSurvey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PostConversationSurvey); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurvey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Survey</para>
		/// <para><strong>Description</strong>: Enable or disable bot survey</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PostConversationSurveyBotSurvey
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PostConversationSurveyBotSurvey); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurvey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Description</strong>: Prefix text for survey link message that will be sent to the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostConversationSurveyBotSurveyMessageText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostConversationSurveyBotSurveyMessageText); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurveyMessageText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey Mode</para>
		/// <para><strong>Description</strong>: Mode of the survey to be sent</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyBotSurveyMode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyBotSurveyMode? msdyn_PostConversationSurveyBotSurveyMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_PostConversationSurveyBotSurveyMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyBotSurveyMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurveyMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_PostConversationSurveyBotSurveyMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable</para>
		/// <para><strong>Description</strong>: To enable or disable post conversation survey</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PostConversationSurveyEnable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PostConversationSurveyEnable); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyEnable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Description</strong>: Prefix text for survey link message that will be sent to the user.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostConversationSurveyMessageText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostConversationSurveyMessageText); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveyMessageText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey Mode</para>
		/// <para><strong>Description</strong>: Mode of the survey to be sent</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyMode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyMode? msdyn_PostConversationSurveyMode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_PostConversationSurveyMode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_PostConversationSurveyMode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_PostConversationSurveyMode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_PostConversationSurveyMode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey</para>
		/// <para><strong>Description</strong>: Lookup to Dynamics 365 Customer Voice survey field</para>
		/// <para><strong>Lookup</strong>: <see cref="msfp_survey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PostConversationSurveySeparateBotSurvey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PostConversationSurveySeparateBotSurvey); }
			set { Entity.Attributes[Fields.msdyn_PostConversationSurveySeparateBotSurvey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre-Chat Survey</para>
		/// <para><strong>Description</strong>: Enable Pre-chat survey feature</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PrechatEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PrechatEnabled); }
			set { Entity.Attributes[Fields.msdyn_PrechatEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Question Set for Authenticated Users</para>
		/// <para><strong>Description</strong>: Prechat Question set for authenticated users</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_questionsequence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreChatQuestionnaireAuthenticated
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreChatQuestionnaireAuthenticated); }
			set { Entity.Attributes[Fields.msdyn_PreChatQuestionnaireAuthenticated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Question Set for Unauthenticated Users</para>
		/// <para><strong>Description</strong>: Prechat Question set for unauthenticated users</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_questionsequence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreChatQuestionnaireUnauthenticated
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreChatQuestionnaireUnauthenticated); }
			set { Entity.Attributes[Fields.msdyn_PreChatQuestionnaireUnauthenticated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Proactive-chat</para>
		/// <para><strong>Description</strong>: Enable Proactive chat for this chat widget</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_proactivechatenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_proactivechatenabled); }
			set { Entity.Attributes[Fields.msdyn_proactivechatenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirection URL</para>
		/// <para><strong>Description</strong>: We&apos;ll redirect customers to this webpage.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_redirectionurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_redirectionurl); }
			set { Entity.Attributes[Fields.msdyn_redirectionurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Request visitor location</para>
		/// <para><strong>Description</strong>: Enable Visitor Location Feature</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_requestvisitorlocation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_requestvisitorlocation); }
			set { Entity.Attributes[Fields.msdyn_requestvisitorlocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen sharing provider</para>
		/// <para><strong>Description</strong>: Select a screen sharing provider</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_screensharingprovider
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_screensharingprovider); }
			set { Entity.Attributes[Fields.msdyn_screensharingprovider] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Anonymize Agent</para>
		/// <para><strong>Description</strong>: Agent Display Name configuration for the chat widget</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_showagentname
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_showagentname); }
			set { Entity.Attributes[Fields.msdyn_showagentname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show widget during offline hours</para>
		/// <para><strong>Description</strong>: Description for show/hide offline widget attribute</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Showwidgetduringofflinehours
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Showwidgetduringofflinehours); }
			set { Entity.Attributes[Fields.msdyn_Showwidgetduringofflinehours] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey Provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_surveyprovider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_surveyprovider.Customer_Voice"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_surveyprovider? msdyn_surveyprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_surveyprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_surveyprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_surveyprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_surveyprovider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reconnect to previous agent for</para>
		/// <para><strong>Description</strong>: The previous agent&apos;s capacity will be held for this time period.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_timetoreconnectwithpreviousagent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_timetoreconnectwithpreviousagent); }
			set { Entity.Attributes[Fields.msdyn_timetoreconnectwithpreviousagent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Widget App Id</para>
		/// <para><strong>Description</strong>: Widget App Identifier used to identify the chat widget</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetAppId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetAppId); }
			set { Entity.Attributes[Fields.msdyn_widgetAppId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chat widget customization config</para>
		/// <para><strong>Description</strong>: Chat widget customization config</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetcustomizationconfig
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetcustomizationconfig); }
			set { Entity.Attributes[Fields.msdyn_widgetcustomizationconfig] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: The language of the chat widget.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_chatwidgetlanguage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WidgetLocale
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WidgetLocale); }
			set { Entity.Attributes[Fields.msdyn_WidgetLocale] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Position</para>
		/// <para><strong>Description</strong>: Chat position relative to the page</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetPosition"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetPosition.Bottom_right"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetPosition? msdyn_widgetPosition
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_widgetPosition);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetPosition)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_widgetPosition] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_widgetPosition] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Widget Snippet</para>
		/// <para><strong>Description</strong>: Javascript snippet which can be embedded in a webpage</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WidgetSnippet
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WidgetSnippet); }
			set { Entity.Attributes[Fields.msdyn_WidgetSnippet] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Turn on sound notifications</para>
		/// <para><strong>Description</strong>: Enable sound notifications for new incoming messages</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_widgetsoundnotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_widgetsoundnotification); }
			set { Entity.Attributes[Fields.msdyn_widgetsoundnotification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtitle</para>
		/// <para><strong>Description</strong>: Subtitle for the chat widget</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetSubtitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetSubtitle); }
			set { Entity.Attributes[Fields.msdyn_widgetSubtitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Theme Color</para>
		/// <para><strong>Description</strong>: Theme color for the chat widget</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetThemeColor"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetThemeColor.Blue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetThemeColor? msdyn_widgetThemeColor
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_widgetThemeColor);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.msdyn_widgetThemeColor)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_widgetThemeColor] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_widgetThemeColor] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: Title for the chat widget</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_widgetTitle
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_widgetTitle); }
			set { Entity.Attributes[Fields.msdyn_widgetTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Turn on unread messages indicator</para>
		/// <para><strong>Description</strong>: Enable visual indicators for unread messages</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_widgetvisualnotification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_widgetvisualnotification); }
			set { Entity.Attributes[Fields.msdyn_widgetvisualnotification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Chat widget</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Chat widget</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_livechatconfigOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}