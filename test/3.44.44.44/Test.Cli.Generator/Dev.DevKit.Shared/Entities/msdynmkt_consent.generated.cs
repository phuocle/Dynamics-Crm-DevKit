//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets
{
	public enum msdynmkt_AllowEmail
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Opted in</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Opted_in = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opted out</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Opted_out = 534_120_001
	}
	public enum msdynmkt_AllowSMS
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Opted in</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Opted_in = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opted out</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Opted_out = 534_120_001
	}
	public enum msdynmkt_AllowTracking
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Opted in</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Opted_in = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opted out</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Opted_out = 534_120_001
	}
	public enum msdynmkt_changesource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Internal = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preference page</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Preference_page = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Text message</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		Text_message = 534_120_002
	}
	public enum msdynmkt_reason
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No reasons</para>
		/// <para><strong>Value</strong>: 534,119,999</para>
		/// </summary>
		No_reasons = 534_119_999,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-in - Advertisement</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Opt_in_Advertisement = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-in - Events</para>
		/// <para><strong>Value</strong>: 534,120,002</para>
		/// </summary>
		Opt_in_Events = 534_120_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-in - Landing page</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Opt_in_Landing_page = 534_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-out - Content was irrelevant</para>
		/// <para><strong>Value</strong>: 534,120,003</para>
		/// </summary>
		Opt_out_Content_was_irrelevant = 534_120_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-out - Didn’t recall signing up</para>
		/// <para><strong>Value</strong>: 534,120,005</para>
		/// </summary>
		Opt_out_Didnt_recall_signing_up = 534_120_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-out - One-click unsubscribe</para>
		/// <para><strong>Value</strong>: 534,120,007</para>
		/// </summary>
		Opt_out_One_click_unsubscribe = 534_120_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-out - Privacy concerns</para>
		/// <para><strong>Value</strong>: 534,120,006</para>
		/// </summary>
		Opt_out_Privacy_concerns = 534_120_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opt-out - Received too frequently</para>
		/// <para><strong>Value</strong>: 534,120,004</para>
		/// </summary>
		Opt_out_Received_too_frequently = 534_120_004
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_consent : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_AllowEmail = "msdynmkt_allowemail";
			public const string msdynmkt_AllowSMS = "msdynmkt_allowsms";
			public const string msdynmkt_AllowTracking = "msdynmkt_allowtracking";
			public const string msdynmkt_changesource = "msdynmkt_changesource";
			public const string msdynmkt_consentId = "msdynmkt_consentid";
			public const string msdynmkt_profileId = "msdynmkt_profileid";
			public const string msdynmkt_reason = "msdynmkt_reason";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_consent";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11268;
		public const string EntityCollectionSchemaName = "msdynmkt_consents";
		public const string EntityDisplayCollectionName = "Consents";
		public const string DisplayName = "Consent";
		public const string EntitySetName = "msdynmkt_consents";
		public const string EntityLogicalCollectionName = "msdynmkt_consents";
		public const string EntityPrimaryIdAttribute = "msdynmkt_consentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_profileid";
		public const string EntitySchemaName = "msdynmkt_consent";
		[DebuggerNonUserCode()]
		public msdynmkt_consent()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_consent(Guid msdynmkt_consentId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_consentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_consent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_consent"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_consent(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_consent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_consent(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_consent(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_consent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_consent(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_consent(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_consent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow email</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowEmail"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowEmail? msdynmkt_AllowEmail
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_AllowEmail);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowEmail)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_AllowEmail] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_AllowEmail] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow text message</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowSMS"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowSMS? msdynmkt_AllowSMS
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_AllowSMS);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowSMS)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_AllowSMS] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_AllowSMS] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow tracking</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowTracking"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowTracking? msdynmkt_AllowTracking
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_AllowTracking);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_AllowTracking)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_AllowTracking] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_AllowTracking] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_changesource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_changesource? msdynmkt_changesource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_changesource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_changesource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_changesource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_changesource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamics Consent Entry</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_consentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_consentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile ID</para>
		/// <para><strong>Description</strong>: The profile ID of the entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_profileId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_profileId); }
			set { Entity.Attributes[Fields.msdynmkt_profileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reason</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_reason"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_reason? msdynmkt_reason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_reason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.msdynmkt_reason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_reason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_reason] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Dynamics Consent Entry</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Dynamics Consent Entry</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_consentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}