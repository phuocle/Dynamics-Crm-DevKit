//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets
{
	public enum msdyn_computationaccuracy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Complete</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Complete = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Partial</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Partial = 100_000_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_mostcontactedby : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_account_regardingObjectId = "msdyn_account_regardingobjectid";
			public const string msdyn_computationaccuracy = "msdyn_computationaccuracy";
			public const string msdyn_contact_regardingObjectId = "msdyn_contact_regardingobjectid";
			public const string msdyn_entityid = "msdyn_entityid";
			public const string msdyn_entityImage_url = "msdyn_entityimage_url";
			public const string msdyn_entityname = "msdyn_entityname";
			public const string msdyn_kpidatajson = "msdyn_kpidatajson";
			public const string msdyn_lastcontactedon = "msdyn_lastcontactedon";
			public const string msdyn_lead_regardingObjectId = "msdyn_lead_regardingobjectid";
			public const string msdyn_mostcontactedbyId = "msdyn_mostcontactedbyid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_numberofemails = "msdyn_numberofemails";
			public const string msdyn_numberofinmails = "msdyn_numberofinmails";
			public const string msdyn_numberofmeetings = "msdyn_numberofmeetings";
			public const string msdyn_numberofphonecalls = "msdyn_numberofphonecalls";
			public const string msdyn_opportunity_regardingObjectId = "msdyn_opportunity_regardingobjectid";
			public const string msdyn_primaryname = "msdyn_primaryname";
			public const string msdyn_regardingentityid = "msdyn_regardingentityid";
			public const string msdyn_regardingentityname = "msdyn_regardingentityname";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_mostcontactedby";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10573;
		public const string EntityCollectionSchemaName = "msdyn_mostcontactedbies";
		public const string EntityDisplayCollectionName = "Most Contacted By";
		public const string DisplayName = "Most Contacted By";
		public const string EntitySetName = "msdyn_mostcontactedbies";
		public const string EntityLogicalCollectionName = "msdyn_mostcontactedbies";
		public const string EntityPrimaryIdAttribute = "msdyn_mostcontactedbyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_primaryname";
		public const string EntitySchemaName = "msdyn_mostcontactedby";
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby(Guid msdyn_mostcontactedbyId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_mostcontactedbyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_mostcontactedby"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_mostcontactedby"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_mostcontactedby(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_mostcontactedby"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_mostcontactedby(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_mostcontactedby(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Shows related account.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_account_regardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_account_regardingObjectId); }
			set { Entity.Attributes[Fields.msdyn_account_regardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Computation Accuracy</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.msdyn_computationaccuracy"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.msdyn_computationaccuracy.Complete"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.msdyn_computationaccuracy? msdyn_computationaccuracy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_computationaccuracy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.msdyn_computationaccuracy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_computationaccuracy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_computationaccuracy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Shows the related contact.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_contact_regardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_contact_regardingObjectId); }
			set { Entity.Attributes[Fields.msdyn_contact_regardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityid); }
			set { Entity.Attributes[Fields.msdyn_entityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Image URL</para>
		/// <para><strong>Description</strong>: Entity Image URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityImage_url
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityImage_url); }
			set { Entity.Attributes[Fields.msdyn_entityImage_url] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most Contacted By Entity Name</para>
		/// <para><strong>Description</strong>: The entity name of the most contacted by record.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityname); }
			set { Entity.Attributes[Fields.msdyn_entityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most contacted by KPIs</para>
		/// <para><strong>Description</strong>: Most contacted by KPI data as JSON</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_kpidatajson
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_kpidatajson); }
			set { Entity.Attributes[Fields.msdyn_kpidatajson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time</para>
		/// <para><strong>Description</strong>: Shows who made the last contact.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_lastcontactedon
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_lastcontactedon); }
			set { Entity.Attributes[Fields.msdyn_lastcontactedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Shows what the lead was regarding.</para>
		/// <para><strong>Lookup</strong>: <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_lead_regardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_lead_regardingObjectId); }
			set { Entity.Attributes[Fields.msdyn_lead_regardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most Contacted By</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_mostcontactedbyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_mostcontactedbyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Emails</para>
		/// <para><strong>Description</strong>: Shows the number of emails from the contact.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofemails
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofemails); }
			set { Entity.Attributes[Fields.msdyn_numberofemails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: InMails</para>
		/// <para><strong>Description</strong>: Shows the number of InMails with the contact.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofinmails
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofinmails); }
			set { Entity.Attributes[Fields.msdyn_numberofinmails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Meetings</para>
		/// <para><strong>Description</strong>: Shows the number of meetings with the contact.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofmeetings
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofmeetings); }
			set { Entity.Attributes[Fields.msdyn_numberofmeetings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Calls</para>
		/// <para><strong>Description</strong>: Shows the number of phone calls with the contact.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_numberofphonecalls
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_numberofphonecalls); }
			set { Entity.Attributes[Fields.msdyn_numberofphonecalls] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Shows what the opportunity was regarding.</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_opportunity_regardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_opportunity_regardingObjectId); }
			set { Entity.Attributes[Fields.msdyn_opportunity_regardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Name</para>
		/// <para><strong>Description</strong>: The primary name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_primaryname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_primaryname); }
			set { Entity.Attributes[Fields.msdyn_primaryname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding EntityId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingentityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingentityid); }
			set { Entity.Attributes[Fields.msdyn_regardingentityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding Entity Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_regardingentityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_regardingentityname); }
			set { Entity.Attributes[Fields.msdyn_regardingentityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization ID</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Most Contacted By</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Most Contacted By</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_mostcontactedbyOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}