//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:35
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets
{
	public enum msdyncrm_thankyoupagesource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Yes = 100_000_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_defaultmarketingsetting : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_bypassemaildeduplication = "msdyncrm_bypassemaildeduplication";
			public const string msdyncrm_consentconfirmationmessage = "msdyncrm_consentconfirmationmessage";
			public const string msdyncrm_Default = "msdyncrm_default";
			public const string msdyncrm_DefaultCntntSettings = "msdyncrm_defaultcntntsettings";
			public const string msdyncrm_defaultemailfromemail = "msdyncrm_defaultemailfromemail";
			public const string msdyncrm_defaultemailfromname = "msdyncrm_defaultemailfromname";
			public const string msdyncrm_defaultmarketingsettingId = "msdyncrm_defaultmarketingsettingid";
			public const string msdyncrm_defaultmarketingthankyoupage = "msdyncrm_defaultmarketingthankyoupage";
			public const string msdyncrm_defaultmarketingthankyoupagedoi = "msdyncrm_defaultmarketingthankyoupagedoi";
			public const string msdyncrm_defaultmarketingthankyouurl = "msdyncrm_defaultmarketingthankyouurl";
			public const string msdyncrm_defaultmarketingthankyouurldoi = "msdyncrm_defaultmarketingthankyouurldoi";
			public const string msdyncrm_DefaultSetupDomain = "msdyncrm_defaultsetupdomain";
			public const string msdyncrm_DefaultTestContact = "msdyncrm_defaulttestcontact";
			public const string msdyncrm_defaulttimezone = "msdyncrm_defaulttimezone";
			public const string msdyncrm_doubleoptincontentsettings = "msdyncrm_doubleoptincontentsettings";
			public const string msdyncrm_enabledoubleoptin = "msdyncrm_enabledoubleoptin";
			public const string msdyncrm_EnableLitmusIntegration = "msdyncrm_enablelitmusintegration";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_subscriptionoptinmessage = "msdyncrm_subscriptionoptinmessage";
			public const string msdyncrm_thankyoupagesource = "msdyncrm_thankyoupagesource";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_defaultmarketingsetting";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11149;
		public const string EntityCollectionSchemaName = "msdyncrm_defaultmarketingsettings";
		public const string EntityDisplayCollectionName = "Default settings";
		public const string DisplayName = "Default settings";
		public const string EntitySetName = "msdyncrm_defaultmarketingsettings";
		public const string EntityLogicalCollectionName = "msdyncrm_defaultmarketingsettings";
		public const string EntityPrimaryIdAttribute = "msdyncrm_defaultmarketingsettingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_defaultmarketingsetting";
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting(Guid msdyncrm_defaultmarketingsettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_defaultmarketingsettingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_defaultmarketingsetting"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_defaultmarketingsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_defaultmarketingsetting(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_defaultmarketingsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_defaultmarketingsetting(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_defaultmarketingsetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bypass email deduplication</para>
		/// <para><strong>Description</strong>: Bypass email deduplication (if this is turned on multiple emails can be send to one email address)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_bypassemaildeduplication
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_bypassemaildeduplication); }
			set { Entity.Attributes[Fields.msdyncrm_bypassemaildeduplication] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consent Confirmation Message</para>
		/// <para><strong>Description</strong>: Select the confirmation message to send contacts requesting to increase their consent level.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_consentconfirmationmessage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_consentconfirmationmessage); }
			set { Entity.Attributes[Fields.msdyncrm_consentconfirmationmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_Default
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_Default); }
			set { Entity.Attributes[Fields.msdyncrm_Default] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default content settings</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_contentsettings"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_DefaultCntntSettings
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_DefaultCntntSettings); }
			set { Entity.Attributes[Fields.msdyncrm_DefaultCntntSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default from email for emails</para>
		/// <para><strong>Description</strong>: Provide marketing emails with default from email address. Especially in cases, when all marketers are sending marketing emails from a common default email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_defaultemailfromemail
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_defaultemailfromemail); }
			set { Entity.Attributes[Fields.msdyncrm_defaultemailfromemail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default from name for emails</para>
		/// <para><strong>Description</strong>: Provide marketing emails with default from email address. Especially in cases, when all marketers are sending marketing emails from a common default email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_defaultemailfromname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_defaultemailfromname); }
			set { Entity.Attributes[Fields.msdyncrm_defaultemailfromname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default settings ID</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_defaultmarketingsettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_defaultmarketingsettingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default redirect: Marketing page</para>
		/// <para><strong>Description</strong>: Select a marketing page to show contacts after they confirm an increase of their consent level</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_defaultmarketingthankyoupage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_defaultmarketingthankyoupage); }
			set { Entity.Attributes[Fields.msdyncrm_defaultmarketingthankyoupage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default redirect: Marketing page</para>
		/// <para><strong>Description</strong>: Select a marketing page to show contacts after they confirm a new subscription</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_defaultmarketingthankyoupagedoi
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_defaultmarketingthankyoupagedoi); }
			set { Entity.Attributes[Fields.msdyncrm_defaultmarketingthankyoupagedoi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank-you url for consent</para>
		/// <para><strong>Description</strong>: Provide the Marketing Page with your default thank-you message. Contacts are redirected to that page after they click the confirm button in a confirmation-request message.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_defaultmarketingthankyouurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_defaultmarketingthankyouurl); }
			set { Entity.Attributes[Fields.msdyncrm_defaultmarketingthankyouurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank-you url for subscriptions</para>
		/// <para><strong>Description</strong>: Provide the url with your default thank-you message. Contacts are redirected to that page after they click the confirm button in a confirmation-request message for newsletter.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_defaultmarketingthankyouurldoi
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_defaultmarketingthankyouurldoi); }
			set { Entity.Attributes[Fields.msdyncrm_defaultmarketingthankyouurldoi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default sending domain</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_setupdomain"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_DefaultSetupDomain
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_DefaultSetupDomain); }
			set { Entity.Attributes[Fields.msdyncrm_DefaultSetupDomain] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default contact</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_DefaultTestContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_DefaultTestContact); }
			set { Entity.Attributes[Fields.msdyncrm_DefaultTestContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default time zone</para>
		/// <para><strong>Description</strong>: Default content settings value</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_defaulttimezone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_defaulttimezone); }
			set { Entity.Attributes[Fields.msdyncrm_defaulttimezone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Content settings</para>
		/// <para><strong>Description</strong>: Select the content settings to use for confirmation-request messages.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_contentsettings"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_doubleoptincontentsettings
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_doubleoptincontentsettings); }
			set { Entity.Attributes[Fields.msdyncrm_doubleoptincontentsettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable double opt-In</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_enabledoubleoptin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_enabledoubleoptin); }
			set { Entity.Attributes[Fields.msdyncrm_enabledoubleoptin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Litmus integration</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_EnableLitmusIntegration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_EnableLitmusIntegration); }
			set { Entity.Attributes[Fields.msdyncrm_EnableLitmusIntegration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subscription opt-In message</para>
		/// <para><strong>Description</strong>: Select the confirmation message to send contacts requesting to join a new mailing list.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_subscriptionoptinmessage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_subscriptionoptinmessage); }
			set { Entity.Attributes[Fields.msdyncrm_subscriptionoptinmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use marketing pages for thank you</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.msdyncrm_thankyoupagesource"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.msdyncrm_thankyoupagesource.Yes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.msdyncrm_thankyoupagesource? msdyncrm_thankyoupagesource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_thankyoupagesource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.msdyncrm_thankyoupagesource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_thankyoupagesource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_thankyoupagesource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the person who owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the default settings</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the default settings</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_defaultmarketingsettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: The time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}