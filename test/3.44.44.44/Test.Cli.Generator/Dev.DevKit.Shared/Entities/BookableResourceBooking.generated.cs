//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets
{
	public enum BookingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Liquid</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Liquid = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Solid</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Solid = 1
	}
	public enum msdyn_BookingMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Manual = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mobile</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Mobile = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Optimization</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Optimization = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule Assistant</para>
		/// <para><strong>Value</strong>: 690,970,004</para>
		/// </summary>
		Schedule_Assistant = 690_970_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule Board</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Schedule_Board = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: System - Agreement Schedule</para>
		/// <para><strong>Value</strong>: 690,970,005</para>
		/// </summary>
		System_Agreement_Schedule = 690_970_005
	}
	public enum msdyn_CrewMemberType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Leader</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Leader = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Member</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Member = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		None = 192_350_002
	}
	public enum msdyn_quickNoteAction
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: audio</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		audio = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: file</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		file = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: none</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		none = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: photo</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		photo = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: text</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		text = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: video</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		video = 100_000_003
	}
	public enum msdyn_TravelTimeCalculationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approximate</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Approximate = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bing Maps with historical traffic</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Bing_Maps_with_historical_traffic = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bing Maps without historical traffic</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Bing_Maps_without_historical_traffic = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Map Provider</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Custom_Map_Provider = 192_350_002
	}
	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Facility = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Onsite</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Onsite = 690_970_000
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BookableResourceBooking : EntityBase
	{
		public struct Fields
		{
			public const string BookableResourceBookingId = "bookableresourcebookingid";
			public const string BookingStatus = "bookingstatus";
			public const string BookingType = "bookingtype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Duration = "duration";
			public const string EndTime = "endtime";
			public const string ExchangeRate = "exchangerate";
			public const string Header = "header";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AcceptCascadeCrewChanges = "msdyn_acceptcascadecrewchanges";
			public const string msdyn_ActualArrivalTime = "msdyn_actualarrivaltime";
			public const string msdyn_ActualTravelDuration = "msdyn_actualtravelduration";
			public const string msdyn_AgreementBookingDate = "msdyn_agreementbookingdate";
			public const string msdyn_AllowOverlapping = "msdyn_allowoverlapping";
			public const string msdyn_AppointmentBookingId = "msdyn_appointmentbookingid";
			public const string msdyn_BaseTravelDuration = "msdyn_basetravelduration";
			public const string msdyn_BookingMethod = "msdyn_bookingmethod";
			public const string msdyn_BookingSetupMetadataId = "msdyn_bookingsetupmetadataid";
			public const string msdyn_CascadeCrewChanges = "msdyn_cascadecrewchanges";
			public const string msdyn_Crew = "msdyn_crew";
			public const string msdyn_CrewMemberType = "msdyn_crewmembertype";
			public const string msdyn_effort = "msdyn_effort";
			public const string msdyn_EstimatedArrivalTime = "msdyn_estimatedarrivaltime";
			public const string msdyn_EstimatedTravelDuration = "msdyn_estimatedtravelduration";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_MilesTraveled = "msdyn_milestraveled";
			public const string msdyn_OfflineTimestamp = "msdyn_offlinetimestamp";
			public const string msdyn_PreventTimestampCreation = "msdyn_preventtimestampcreation";
			public const string msdyn_quickNoteAction = "msdyn_quickNoteAction";
			public const string msdyn_requirementgroupid = "msdyn_requirementgroupid";
			public const string msdyn_requirementgroupset = "msdyn_requirementgroupset";
			public const string msdyn_ResourceGroup = "msdyn_resourcegroup";
			public const string msdyn_ResourceRequirement = "msdyn_resourcerequirement";
			public const string msdyn_serviceappointment = "msdyn_serviceappointment";
			public const string msdyn_Signature = "msdyn_signature";
			public const string msdyn_SlotText = "msdyn_slottext";
			public const string msdyn_TimeGroupDetailSelected = "msdyn_timegroupdetailselected";
			public const string msdyn_TotalBillableDuration = "msdyn_totalbillableduration";
			public const string msdyn_TotalBreakDuration = "msdyn_totalbreakduration";
			public const string msdyn_TotalCost = "msdyn_totalcost";
			public const string msdyn_totalcost_Base = "msdyn_totalcost_base";
			public const string msdyn_TotalDurationInProgress = "msdyn_totaldurationinprogress";
			public const string msdyn_TravelTimeCalculationType = "msdyn_traveltimecalculationtype";
			public const string msdyn_TravelTimeRescheduling = "msdyn_traveltimerescheduling";
			public const string msdyn_URSInternalFlags = "msdyn_ursinternalflags";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ProcessId = "processid";
			public const string Resource = "resource";
			public const string StageId = "stageid";
			public const string StartTime = "starttime";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "bookableresourcebooking";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1145;
		public const string EntityCollectionSchemaName = "BookableResourceBooking";
		public const string EntityDisplayCollectionName = "Bookable Resource Bookings";
		public const string DisplayName = "Bookable Resource Booking";
		public const string EntitySetName = "bookableresourcebookings";
		public const string EntityLogicalCollectionName = "bookableresourcebookings";
		public const string EntityPrimaryIdAttribute = "bookableresourcebookingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "BookableResourceBooking";
		[DebuggerNonUserCode()]
		public BookableResourceBooking()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BookableResourceBooking(Guid BookableResourceBookingId)
		{
			Entity = new Entity(EntityLogicalName, BookableResourceBookingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BookableResourceBooking(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BookableResourceBooking"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public BookableResourceBooking(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BookableResourceBooking"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BookableResourceBooking(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BookableResourceBooking(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BookableResourceBooking"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BookableResourceBooking(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BookableResourceBooking(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BookableResourceBooking(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bookable Resource Booking</para>
		/// <para><strong>Description</strong>: Unique identifier of the resource booking.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BookableResourceBookingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BookableResourceBookingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Status</para>
		/// <para><strong>Description</strong>: Select the status of the booking.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookingstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BookingStatus); }
			set { Entity.Attributes[Fields.BookingStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Type</para>
		/// <para><strong>Description</strong>: Select whether the booking is solid or liquid. Solid bookings are firm and cannot be changed whereas liquid bookings can be changed.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.BookingType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.BookingType.Solid"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.BookingType? BookingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BookingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.BookingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BookingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BookingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Enter the duration of the booking.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time</para>
		/// <para><strong>Description</strong>: Enter the end date and time of the booking.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ExchangeRate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the bookableresourcebooking with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Header</para>
		/// <para><strong>Description</strong>: Shows the reference to the booking header record that represents the summary of bookings.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresourcebookingheader"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Header
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Header); }
			set { Entity.Attributes[Fields.Header] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accept Cascade Crew Changes</para>
		/// <para><strong>Description</strong>: Defines whether this booking accepts changes propagated as cascading changes</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AcceptCascadeCrewChanges
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AcceptCascadeCrewChanges); }
			set { Entity.Attributes[Fields.msdyn_AcceptCascadeCrewChanges] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Arrival Time</para>
		/// <para><strong>Description</strong>: Shows the time that work started.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ActualArrivalTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ActualArrivalTime); }
			set { Entity.Attributes[Fields.msdyn_ActualArrivalTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Travel Duration</para>
		/// <para><strong>Description</strong>: Shows the total travel duration. Calculated based on the difference between the Bookable Resource Booking&apos;s start time and actual arrival time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ActualTravelDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ActualTravelDuration); }
			set { Entity.Attributes[Fields.msdyn_ActualTravelDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement Booking Date</para>
		/// <para><strong>Description</strong>: Agreement Booking Date from where this Booking was generated</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_agreementbookingdate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AgreementBookingDate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AgreementBookingDate); }
			set { Entity.Attributes[Fields.msdyn_AgreementBookingDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Overlapping</para>
		/// <para><strong>Description</strong>: Allow the time of this booking to be displayed on the schedule assistant as available.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AllowOverlapping
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AllowOverlapping); }
			set { Entity.Attributes[Fields.msdyn_AllowOverlapping] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment Booking</para>
		/// <para><strong>Description</strong>: Unique identifier for Appointment associated with Bookable Resource Booking.</para>
		/// <para><strong>Lookup</strong>: <see cref="appointment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AppointmentBookingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AppointmentBookingId); }
			set { Entity.Attributes[Fields.msdyn_AppointmentBookingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Travel Duration</para>
		/// <para><strong>Description</strong>: The Base travel duration indicates the travel time without traffic</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_BaseTravelDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_BaseTravelDuration); }
			set { Entity.Attributes[Fields.msdyn_BaseTravelDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Method</para>
		/// <para><strong>Description</strong>: Shows the method used to create this booking.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_BookingMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_BookingMethod.Manual"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_BookingMethod? msdyn_BookingMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_BookingMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_BookingMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_BookingMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_BookingMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Setup Metadata</para>
		/// <para><strong>Description</strong>: A unique identifier for the booking setup metadata that is associated with a bookable resource booking.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_bookingsetupmetadata"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BookingSetupMetadataId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BookingSetupMetadataId); }
			set { Entity.Attributes[Fields.msdyn_BookingSetupMetadataId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cascade Crew Changes</para>
		/// <para><strong>Description</strong>: Defines whether changing any of the following fields (Start Time, End Time, Status) should cascade the changes to other bookings on this requirement that have the same start and end time.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CascadeCrewChanges
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CascadeCrewChanges); }
			set { Entity.Attributes[Fields.msdyn_CascadeCrewChanges] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew</para>
		/// <para><strong>Description</strong>: This field is populated by the Field Service solution to define to which crew a booking is connected.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Crew
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Crew); }
			set { Entity.Attributes[Fields.msdyn_Crew] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew Member Type</para>
		/// <para><strong>Description</strong>: Crew Member Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_CrewMemberType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_CrewMemberType? msdyn_CrewMemberType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_CrewMemberType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_CrewMemberType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_CrewMemberType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_CrewMemberType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capacity</para>
		/// <para><strong>Description</strong>: Capacity that needs to take from resource capacity</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_effort
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_effort); }
			set { Entity.Attributes[Fields.msdyn_effort] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Arrival Time</para>
		/// <para><strong>Description</strong>: Estimated Arrival Time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_EstimatedArrivalTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_EstimatedArrivalTime); }
			set { Entity.Attributes[Fields.msdyn_EstimatedArrivalTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimated Travel Duration</para>
		/// <para><strong>Description</strong>: Estimated Travel Duration</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EstimatedTravelDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EstimatedTravelDuration); }
			set { Entity.Attributes[Fields.msdyn_EstimatedTravelDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Miles Traveled</para>
		/// <para><strong>Description</strong>: In this field you can enter the total miles the resource drove to the job site</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_MilesTraveled
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_MilesTraveled); }
			set { Entity.Attributes[Fields.msdyn_MilesTraveled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Offline Timestamp</para>
		/// <para><strong>Description</strong>: Internal Use. This field is used to capture the time when the Booking was updated on mobile offline.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_OfflineTimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_OfflineTimestamp); }
			set { Entity.Attributes[Fields.msdyn_OfflineTimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prevent Timestamp Creation</para>
		/// <para><strong>Description</strong>: Prevents time stamp creation if the time stamp was already created on a mobile device.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PreventTimestampCreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PreventTimestampCreation); }
			set { Entity.Attributes[Fields.msdyn_PreventTimestampCreation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick note actions</para>
		/// <para><strong>Description</strong>: Internal For Quick note pcf control actions</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_quickNoteAction"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_quickNoteAction.none"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_quickNoteAction? msdyn_quickNoteAction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_quickNoteAction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_quickNoteAction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_quickNoteAction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_quickNoteAction] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Group</para>
		/// <para><strong>Description</strong>: Requirement Group</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementgroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_requirementgroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_requirementgroupid); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Group Set</para>
		/// <para><strong>Description</strong>: Requirement Group Set</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_requirementgroupset
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_requirementgroupset); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Group</para>
		/// <para><strong>Description</strong>: Unique identifier for Resource associated with Resource Booking</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceGroup); }
			set { Entity.Attributes[Fields.msdyn_ResourceGroup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Requirement</para>
		/// <para><strong>Description</strong>: Resource Requirement</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resourcerequirement"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ResourceRequirement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ResourceRequirement); }
			set { Entity.Attributes[Fields.msdyn_ResourceRequirement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Description</strong>: Unique identifier for Service Appointment associated with Resource Booking.</para>
		/// <para><strong>Lookup</strong>: <see cref="serviceappointment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_serviceappointment
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_serviceappointment); }
			set { Entity.Attributes[Fields.msdyn_serviceappointment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Signature</para>
		/// <para><strong>Description</strong>: This field is used for capturing signature on Mobile (using the Pen Control)</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 15,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Signature
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Signature); }
			set { Entity.Attributes[Fields.msdyn_Signature] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Slot Text</para>
		/// <para><strong>Description</strong>: Shows the automatically generated text of the time slot on the schedule board.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SlotText
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SlotText); }
			set { Entity.Attributes[Fields.msdyn_SlotText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Group Detail Selected</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_timegroupdetail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroupDetailSelected
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroupDetailSelected); }
			set { Entity.Attributes[Fields.msdyn_TimeGroupDetailSelected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Billable Duration</para>
		/// <para><strong>Description</strong>: Shows the total billable duration. If you leave this field blank the system automatically determines the billable duration by calculating the resource journal details.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalBillableDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalBillableDuration); }
			set { Entity.Attributes[Fields.msdyn_TotalBillableDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Break Duration</para>
		/// <para><strong>Description</strong>: Shows the total break duration. If you leave this field blank the system automatically determines the break duration by calculating the resource journal details.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalBreakDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalBreakDuration); }
			set { Entity.Attributes[Fields.msdyn_TotalBreakDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cost</para>
		/// <para><strong>Description</strong>: Shows the total cost for this booking.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cost (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Cost in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalcost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Duration In Progress</para>
		/// <para><strong>Description</strong>: Shows the total duration that this booking was in progress.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalDurationInProgress
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalDurationInProgress); }
			set { Entity.Attributes[Fields.msdyn_TotalDurationInProgress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Travel Time Calculation</para>
		/// <para><strong>Description</strong>: Travel Time Calculation</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_TravelTimeCalculationType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_TravelTimeCalculationType.Bing_Maps_without_historical_traffic"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_TravelTimeCalculationType? msdyn_TravelTimeCalculationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_TravelTimeCalculationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_TravelTimeCalculationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TravelTimeCalculationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_TravelTimeCalculationType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Travel Time Rescheduling (Deprecated)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_TravelTimeRescheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_TravelTimeRescheduling); }
			set { Entity.Attributes[Fields.msdyn_TravelTimeRescheduling] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_URSInternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_URSInternalFlags); }
			set { Entity.Attributes[Fields.msdyn_URSInternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_WorkLocation"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order</para>
		/// <para><strong>Description</strong>: Unique identifier for Work Order associated with Resource Booking.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Type a name for the booking.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource</para>
		/// <para><strong>Description</strong>: Shows the resource that is booked.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Resource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Resource); }
			set { Entity.Attributes[Fields.Resource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time</para>
		/// <para><strong>Description</strong>: Enter the start date and time of the booking.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Bookable Resource Booking</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Bookable Resource Booking</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BookableResourceBookingOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the BookableResourceBooking with respect to the base currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}