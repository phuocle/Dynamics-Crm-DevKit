//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SocialActivityOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Appointment = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert</para>
		/// <para><strong>Value</strong>: 11,000</para>
		/// </summary>
		Booking_Alert = 11_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Activity</para>
		/// <para><strong>Value</strong>: 4,402</para>
		/// </summary>
		Campaign_Activity = 4_402,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Response</para>
		/// <para><strong>Value</strong>: 4,401</para>
		/// </summary>
		Campaign_Response = 4_401,
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Resolution</para>
		/// <para><strong>Value</strong>: 4,206</para>
		/// </summary>
		Case_Resolution = 4_206,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation</para>
		/// <para><strong>Value</strong>: 10,691</para>
		/// </summary>
		Conversation = 10_691,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Transcript</para>
		/// <para><strong>Value</strong>: 10,877</para>
		/// </summary>
		Copilot_Transcript = 10_877,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice alert</para>
		/// <para><strong>Value</strong>: 10,600</para>
		/// </summary>
		Customer_Voice_alert = 10_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey invite</para>
		/// <para><strong>Value</strong>: 10,610</para>
		/// </summary>
		Customer_Voice_survey_invite = 10_610,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey response</para>
		/// <para><strong>Value</strong>: 10,612</para>
		/// </summary>
		Customer_Voice_survey_response = 10_612,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invite Redemption</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Invite_Redemption = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Letter</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Letter = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Close</para>
		/// <para><strong>Value</strong>: 4,208</para>
		/// </summary>
		Opportunity_Close = 4_208,
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Close</para>
		/// <para><strong>Value</strong>: 4,209</para>
		/// </summary>
		Order_Close = 4_209,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message</para>
		/// <para><strong>Value</strong>: 11,063</para>
		/// </summary>
		Outbound_message = 11_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_Call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Portal_Comment = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Campaign</para>
		/// <para><strong>Value</strong>: 4,406</para>
		/// </summary>
		Quick_Campaign = 4_406,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Close</para>
		/// <para><strong>Value</strong>: 4,211</para>
		/// </summary>
		Quote_Close = 4_211,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Appointment</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Recurring_Appointment = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Value</strong>: 4,214</para>
		/// </summary>
		Service_Activity = 4_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Value</strong>: 10,708</para>
		/// </summary>
		Session = 10_708,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams chat</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Teams_chat = 10_185,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voicemail</para>
		/// <para><strong>Value</strong>: 11,070</para>
		/// </summary>
		Voicemail = 11_070
	}
	public enum Community
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages For Business</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Apple_Messages_For_Business = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cortana</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Cortana = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Direct Line</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Direct_Line = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Direct Line Speech</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Direct_Line_Speech = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Email = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Facebook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google's Business Messages</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Googles_Business_Messages = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: GroupMe</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		GroupMe = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kik</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Kik = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Line</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Line = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Microsoft_Teams = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Other = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skype</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Skype = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slack</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Slack = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Telegram</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Telegram = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Twitter = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wechat</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Wechat = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: WhatsApp</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		WhatsApp = 15
	}
	public enum PostMessageType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Private Message</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Private_Message = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public Message</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Public_Message = 0
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Completed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Canceled</strong></para>
		/// </summary>
		Canceled = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Completed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Open = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Completed</strong></para>
		/// </summary>
		Processing = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SocialActivity : EntityBase
	{
		public struct Fields
		{
			public const string ActivityAdditionalParams = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActualDurationMinutes = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string Community = "community";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string DirectionCode = "directioncode";
			public const string ExchangeRate = "exchangerate";
			public const string From = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InResponseTo = "inresponseto";
			public const string IsBilled = "isbilled";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OnHoldTime = "onholdtime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PostAuthor = "postauthor";
			public const string PostAuthorAccount = "postauthoraccount";
			public const string PostedOn = "postedon";
			public const string PostFromProfileId = "postfromprofileid";
			public const string PostId = "postid";
			public const string PostMessageType = "postmessagetype";
			public const string PostToProfileId = "posttoprofileid";
			public const string PostURL = "posturl";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string Resources = "resources";
			public const string ScheduledDurationMinutes = "scheduleddurationminutes";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SentimentValue = "sentimentvalue";
			public const string ServiceId = "serviceid";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SocialAdditionalParams = "socialadditionalparams";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subject = "subject";
			public const string ThreadId = "threadid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string To = "to";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "socialactivity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4216;
		public const string EntityCollectionSchemaName = "SocialActivities";
		public const string EntityDisplayCollectionName = "Social Activities";
		public const string DisplayName = "Social Activity";
		public const string EntitySetName = "socialactivities";
		public const string EntityLogicalCollectionName = "socialactivities";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "SocialActivity";
		[DebuggerNonUserCode()]
		public SocialActivity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SocialActivity(Guid SocialActivityId)
		{
			Entity = new Entity(EntityLogicalName, SocialActivityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SocialActivity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SocialActivity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SocialActivity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SocialActivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SocialActivity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SocialActivity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SocialActivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SocialActivity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SocialActivity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SocialActivity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Additional Parameters</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
			set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity</para>
		/// <para><strong>Description</strong>: Unique identifier of the activity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Type</para>
		/// <para><strong>Description</strong>: Type of activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Duration</para>
		/// <para><strong>Description</strong>: Actual duration of the activity in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
			set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual End</para>
		/// <para><strong>Description</strong>: Actual end time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Start</para>
		/// <para><strong>Description</strong>: Actual start time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Channel</para>
		/// <para><strong>Description</strong>: Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.Community"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.Community.Other"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialActivityOptionSets.Community? Community
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Community);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialActivityOptionSets.Community)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Community] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Community] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created Date</para>
		/// <para><strong>Description</strong>: Date and time when the activity was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the activitypointer.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post Description</para>
		/// <para><strong>Description</strong>: Shows information about the social post content. This field is read-only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Direction</para>
		/// <para><strong>Description</strong>: Select the direction of the post as incoming or outbound.</para>
		/// <para><strong>Two Option</strong> - [<strong>Outgoing</strong>]: true - [<strong>Incoming</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Incoming</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DirectionCode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DirectionCode); }
			set { Entity.Attributes[Fields.DirectionCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From</para>
		/// <para><strong>Description</strong>: Person who the activity is from.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> From
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.From).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.From] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In Response To</para>
		/// <para><strong>Description</strong>: Unique identifier for the responses to a post. For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InResponseTo
		{
			get { return Entity.GetAttributeValue<string>(Fields.InResponseTo); }
			set { Entity.Attributes[Fields.InResponseTo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Billed</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity was billed as part of resolving a case.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Regular Activity</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity is a regular activity type or event type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Workflow Created</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity was created from a workflow rule.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date and time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Updated</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows how long, in minutes, that the record was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team that owns the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the Activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post Author</para>
		/// <para><strong>Description</strong>: Shows the contact or account that authored the post.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PostAuthor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PostAuthor); }
			set { Entity.Attributes[Fields.PostAuthor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post Author Account</para>
		/// <para><strong>Description</strong>: Shows the parent account of the author of the post.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PostAuthorAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PostAuthorAccount); }
			set { Entity.Attributes[Fields.PostAuthorAccount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostedOn); }
			set { Entity.Attributes[Fields.PostedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posted By</para>
		/// <para><strong>Description</strong>: Shows the author of the post on the corresponding social channel.</para>
		/// <para><strong>Lookup</strong>: <see cref="socialprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PostFromProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PostFromProfileId); }
			set { Entity.Attributes[Fields.PostFromProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the post. For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostId); }
			set { Entity.Attributes[Fields.PostId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Received As</para>
		/// <para><strong>Description</strong>: Shows if the social post originated as a private or public message.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PostMessageType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PostMessageType? PostMessageType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PostMessageType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PostMessageType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PostMessageType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PostMessageType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Posted To</para>
		/// <para><strong>Description</strong>: Shows the recipients of the social post.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostToProfileId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostToProfileId); }
			set { Entity.Attributes[Fields.PostToProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post URL</para>
		/// <para><strong>Description</strong>: Shows the URL of the post.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PostURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.PostURL); }
			set { Entity.Attributes[Fields.PostURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Shows the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialActivityOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Unique identifier of the Process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Shows the record that the social activity relates to.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="asyncoperation"/>, <see cref="bookableresourcebooking"/>, <see cref="bookableresourcebookingheader"/>, <see cref="bulkoperation"/>, <see cref="campaign"/>, <see cref="campaignactivity"/>, <see cref="contact"/>, <see cref="contract"/>, <see cref="entitlement"/>, <see cref="entitlementtemplate"/>, <see cref="incident"/>, <see cref="invoice"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="lead"/>, <see cref="msdyncrm_contentsettings"/>, <see cref="msdyncrm_customerjourney"/>, <see cref="msdyncrm_leadscoremodel"/>, <see cref="msdyncrm_linkedinaccount"/>, <see cref="msdyncrm_linkedinactivity"/>, <see cref="msdyncrm_linkedinfieldmapping"/>, <see cref="msdyncrm_linkedinform"/>, <see cref="msdyncrm_linkedinformanswer"/>, <see cref="msdyncrm_linkedinformquestion"/>, <see cref="msdyncrm_linkedinformsubmission"/>, <see cref="msdyncrm_linkedinleadmatchingstrategy"/>, <see cref="msdyncrm_linkedinuserprofile"/>, <see cref="msdyncrm_marketingdynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemaildynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemailtestsend"/>, <see cref="msdyncrm_migration"/>, <see cref="msdyncrm_uicconfig"/>, <see cref="msdyn_agreement"/>, <see cref="msdyn_agreementbookingdate"/>, <see cref="msdyn_agreementbookingincident"/>, <see cref="msdyn_agreementbookingproduct"/>, <see cref="msdyn_agreementbookingservice"/>, <see cref="msdyn_agreementbookingservicetask"/>, <see cref="msdyn_agreementbookingsetup"/>, <see cref="msdyn_agreementinvoicedate"/>, <see cref="msdyn_agreementinvoiceproduct"/>, <see cref="msdyn_agreementinvoicesetup"/>, <see cref="msdyn_bookingalertstatus"/>, <see cref="msdyn_bookingrule"/>, <see cref="msdyn_bookingtimestamp"/>, <see cref="msdyn_customerasset"/>, <see cref="msdyn_fieldservicesetting"/>, <see cref="msdyn_incidenttypecharacteristic"/>, <see cref="msdyn_incidenttypeproduct"/>, <see cref="msdyn_incidenttypeservice"/>, <see cref="msdyn_inventoryadjustment"/>, <see cref="msdyn_inventoryadjustmentproduct"/>, <see cref="msdyn_inventoryjournal"/>, <see cref="msdyn_inventorytransfer"/>, <see cref="msdyn_payment"/>, <see cref="msdyn_paymentdetail"/>, <see cref="msdyn_paymentmethod"/>, <see cref="msdyn_paymentterm"/>, <see cref="msdyn_playbookinstance"/>, <see cref="msdyn_postalbum"/>, <see cref="msdyn_postalcode"/>, <see cref="msdyn_productinventory"/>, <see cref="msdyn_purchaseorder"/>, <see cref="msdyn_purchaseorderbill"/>, <see cref="msdyn_purchaseorderproduct"/>, <see cref="msdyn_purchaseorderreceipt"/>, <see cref="msdyn_purchaseorderreceiptproduct"/>, <see cref="msdyn_purchaseordersubstatus"/>, <see cref="msdyn_quotebookingincident"/>, <see cref="msdyn_quotebookingproduct"/>, <see cref="msdyn_quotebookingservice"/>, <see cref="msdyn_quotebookingservicetask"/>, <see cref="msdyn_resourceterritory"/>, <see cref="msdyn_rma"/>, <see cref="msdyn_rmaproduct"/>, <see cref="msdyn_rmareceipt"/>, <see cref="msdyn_rmareceiptproduct"/>, <see cref="msdyn_rmasubstatus"/>, <see cref="msdyn_rtv"/>, <see cref="msdyn_rtvproduct"/>, <see cref="msdyn_rtvsubstatus"/>, <see cref="msdyn_salessuggestion"/>, <see cref="msdyn_shipvia"/>, <see cref="msdyn_swarm"/>, <see cref="msdyn_systemuserschedulersetting"/>, <see cref="msdyn_timegroup"/>, <see cref="msdyn_timegroupdetail"/>, <see cref="msdyn_timeoffrequest"/>, <see cref="msdyn_warehouse"/>, <see cref="msdyn_workorder"/>, <see cref="msdyn_workordercharacteristic"/>, <see cref="msdyn_workorderincident"/>, <see cref="msdyn_workorderproduct"/>, <see cref="msdyn_workorderresourcerestriction"/>, <see cref="msdyn_workorderservice"/>, <see cref="msdyn_workorderservicetask"/>, <see cref="msevtmgt_checkin"/>, <see cref="msevtmgt_event"/>, <see cref="msevtmgt_eventpurchase"/>, <see cref="msevtmgt_eventpurchaseattendee"/>, <see cref="msevtmgt_eventpurchasepass"/>, <see cref="msevtmgt_eventregistration"/>, <see cref="msevtmgt_hotel"/>, <see cref="msevtmgt_hotelroomallocation"/>, <see cref="msevtmgt_hotelroomreservation"/>, <see cref="msevtmgt_layout"/>, <see cref="msevtmgt_room"/>, <see cref="msevtmgt_session"/>, <see cref="msevtmgt_sessionregistration"/>, <see cref="msevtmgt_sessiontrack"/>, <see cref="msevtmgt_speaker"/>, <see cref="msevtmgt_speakerengagement"/>, <see cref="msevtmgt_sponsorablearticle"/>, <see cref="msevtmgt_sponsorship"/>, <see cref="msevtmgt_venue"/>, <see cref="msevtmgt_webinarconfiguration"/>, <see cref="msevtmgt_webinarprovider"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="opportunity"/>, <see cref="quote"/>, <see cref="salesorder"/>, <see cref="site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resources</para>
		/// <para><strong>Description</strong>: Users or facility/equipment that are required for the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="equipment"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Resources
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Resources).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Resources] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Duration</para>
		/// <para><strong>Description</strong>: Scheduled duration of the activity, specified in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
			set { Entity.Attributes[Fields.ScheduledDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Due Date</para>
		/// <para><strong>Description</strong>: Scheduled end time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date</para>
		/// <para><strong>Description</strong>: Scheduled start time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment Value</para>
		/// <para><strong>Description</strong>: Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? SentimentValue
		{
			get { return Entity.GetAttributeValue<double?>(Fields.SentimentValue); }
			set { Entity.Attributes[Fields.SentimentValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Unique identifier for the associated service.</para>
		/// <para><strong>Lookup</strong>: <see cref="service"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceId); }
			set { Entity.Attributes[Fields.ServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the Social Activity record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this Social Activity. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Additional Parameters</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SocialAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.SocialAdditionalParams); }
			set { Entity.Attributes[Fields.SocialAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sort Date</para>
		/// <para><strong>Description</strong>: Shows the date and time by which the activities are sorted.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Process Stage</para>
		/// <para><strong>Description</strong>: Unique identifier of the Stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the social activity completed. This field is read-only.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StateCode.Completed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Shows whether the social activity is completed, failed, or processing. This field is read-only.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StatusCode.Processing"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SocialActivityOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Subject associated with the activity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thread ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the social conversation. For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ThreadId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ThreadId); }
			set { Entity.Attributes[Fields.ThreadId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To</para>
		/// <para><strong>Description</strong>: Person who is the receiver of the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> To
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.To).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.To] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the social activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}