//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets
{
	public enum msdynmkt_journeyinstancestate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CancelledByActionFailure</para>
		/// <para><strong>Value</strong>: 534,121,005</para>
		/// </summary>
		CancelledByActionFailure = 534_121_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: CancelledByExitEvent</para>
		/// <para><strong>Value</strong>: 534,121,002</para>
		/// </summary>
		CancelledByExitEvent = 534_121_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: CancelledByJourneyStopped</para>
		/// <para><strong>Value</strong>: 534,121,004</para>
		/// </summary>
		CancelledByJourneyStopped = 534_121_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: CancelledBySupressionSegment</para>
		/// <para><strong>Value</strong>: 534,121,003</para>
		/// </summary>
		CancelledBySupressionSegment = 534_121_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 534,121,001</para>
		/// </summary>
		Completed = 534_121_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inprogress</para>
		/// <para><strong>Value</strong>: 534,121,000</para>
		/// </summary>
		Inprogress = 534_121_000
	}
	public enum msdynmkt_journeyinstancetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Event = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Scheduled = 534_120_001
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_journeyinstance : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_baseversionjourneyid = "msdynmkt_baseversionjourneyid";
			public const string msdynmkt_eventuniqueidentifier = "msdynmkt_eventuniqueidentifier";
			public const string msdynmkt_journeydefinitionid = "msdynmkt_journeydefinitionid";
			public const string msdynmkt_journeyinstanceId = "msdynmkt_journeyinstanceid";
			public const string msdynmkt_journeyinstancestate = "msdynmkt_journeyinstancestate";
			public const string msdynmkt_journeyinstancetype = "msdynmkt_journeyinstancetype";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_targetentity = "msdynmkt_targetentity";
			public const string msdynmkt_targetid = "msdynmkt_targetid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartitionId = "partitionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_journeyinstance";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11260;
		public const string EntityCollectionSchemaName = "msdynmkt_journeyinstances";
		public const string EntityDisplayCollectionName = "Journey Instances";
		public const string DisplayName = "Journey Instance";
		public const string EntitySetName = "msdynmkt_journeyinstances";
		public const string EntityLogicalCollectionName = "msdynmkt_journeyinstances";
		public const string EntityPrimaryIdAttribute = "msdynmkt_journeyinstanceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_journeyinstance";
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance(Guid msdynmkt_journeyinstanceId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_journeyinstanceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_journeyinstance"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_journeyinstance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_journeyinstance(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_journeyinstance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_journeyinstance(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_journeyinstance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Version Journey Id</para>
		/// <para><strong>Description</strong>: Base version journey id.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdynmkt_baseversionjourneyid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdynmkt_baseversionjourneyid); }
			set { Entity.Attributes[Fields.msdynmkt_baseversionjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event Unique Identifier</para>
		/// <para><strong>Description</strong>: Unique identifier of the event instance.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_eventuniqueidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_eventuniqueidentifier); }
			set { Entity.Attributes[Fields.msdynmkt_eventuniqueidentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Definition Id</para>
		/// <para><strong>Description</strong>: Unique identifier for journey definitions.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_journeydefinitionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_journeydefinitionid); }
			set { Entity.Attributes[Fields.msdynmkt_journeydefinitionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Instance</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_journeyinstanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_journeyinstanceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Instance State</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets.msdynmkt_journeyinstancestate"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets.msdynmkt_journeyinstancestate? msdynmkt_journeyinstancestate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_journeyinstancestate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets.msdynmkt_journeyinstancestate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_journeyinstancestate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_journeyinstancestate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Instance Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets.msdynmkt_journeyinstancetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets.msdynmkt_journeyinstancetype? msdynmkt_journeyinstancetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_journeyinstancetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_journeyinstanceOptionSets.msdynmkt_journeyinstancetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_journeyinstancetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_journeyinstancetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Entity</para>
		/// <para><strong>Description</strong>: Name of the entity associated with the Target Id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_targetentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_targetentity); }
			set { Entity.Attributes[Fields.msdynmkt_targetentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the targets of journeys.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_targetid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_targetid); }
			set { Entity.Attributes[Fields.msdynmkt_targetid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}