//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets
{
	public enum msdyn_ApprovalStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Approved = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Rejected = 690_970_001
	}
	public enum msdyn_ShipTo
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Business_Unit = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Other = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Service_Account = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Site</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Site = 690_970_000
	}
	public enum msdyn_SystemStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Billed</para>
		/// <para><strong>Value</strong>: 690,970,004</para>
		/// </summary>
		Billed = 690_970_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Canceled = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Draft = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Products Received</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Products_Received = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Submitted = 690_970_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_purchaseorder : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Address1 = "msdyn_address1";
			public const string msdyn_Address2 = "msdyn_address2";
			public const string msdyn_Address3 = "msdyn_address3";
			public const string msdyn_AddressName = "msdyn_addressname";
			public const string msdyn_AmountBilled = "msdyn_amountbilled";
			public const string msdyn_amountbilled_Base = "msdyn_amountbilled_base";
			public const string msdyn_ApprovalStatus = "msdyn_approvalstatus";
			public const string msdyn_ApprovedRejectedBy = "msdyn_approvedrejectedby";
			public const string msdyn_AutoNumbering = "msdyn_autonumbering";
			public const string msdyn_Booking = "msdyn_booking";
			public const string msdyn_City = "msdyn_city";
			public const string msdyn_Country = "msdyn_country";
			public const string msdyn_DateExpected = "msdyn_dateexpected";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OrderedBy = "msdyn_orderedby";
			public const string msdyn_PaymentTerm = "msdyn_paymentterm";
			public const string msdyn_PODate = "msdyn_purchaseorderdate";
			public const string msdyn_PostalCode = "msdyn_postalcode";
			public const string msdyn_purchaseorderId = "msdyn_purchaseorderid";
			public const string msdyn_ReceivetoWarehouse = "msdyn_receivetowarehouse";
			public const string msdyn_RequestedByResource = "msdyn_requestedbyresource";
			public const string msdyn_ShipTo = "msdyn_shipto";
			public const string msdyn_ShipVia = "msdyn_shipvia";
			public const string msdyn_StateOrProvince = "msdyn_stateorprovince";
			public const string msdyn_SubStatus = "msdyn_substatus";
			public const string msdyn_SystemStatus = "msdyn_systemstatus";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_Vendor = "msdyn_vendor";
			public const string msdyn_VendorNote = "msdyn_vendornote";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_purchaseorder";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11634;
		public const string EntityCollectionSchemaName = "msdyn_purchaseorders";
		public const string EntityDisplayCollectionName = "Purchase Orders";
		public const string DisplayName = "Purchase Order";
		public const string EntitySetName = "msdyn_purchaseorders";
		public const string EntityLogicalCollectionName = "msdyn_purchaseorders";
		public const string EntityPrimaryIdAttribute = "msdyn_purchaseorderid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_purchaseorder";
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Guid msdyn_purchaseorderId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_purchaseorderId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_purchaseorder"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_purchaseorder"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_purchaseorder(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_purchaseorder"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_purchaseorder(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_purchaseorder(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Shows the sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 1</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address1); }
			set { Entity.Attributes[Fields.msdyn_Address1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 2</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address2); }
			set { Entity.Attributes[Fields.msdyn_Address2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 3</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address3); }
			set { Entity.Attributes[Fields.msdyn_Address3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Name</para>
		/// <para><strong>Description</strong>: Enter the location to ship the products of this PO to.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AddressName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AddressName); }
			set { Entity.Attributes[Fields.msdyn_AddressName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount Billed</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_AmountBilled
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_AmountBilled);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AmountBilled] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_AmountBilled] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount Billed (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the amount billed in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_amountbilled_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_amountbilled_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Approval Status</para>
		/// <para><strong>Description</strong>: Enter the current status of the approval.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ApprovalStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ApprovalStatus? msdyn_ApprovalStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ApprovalStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ApprovalStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ApprovalStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ApprovalStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved/Rejected By</para>
		/// <para><strong>Description</strong>: The user who approved or rejected this PO</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ApprovedRejectedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ApprovedRejectedBy); }
			set { Entity.Attributes[Fields.msdyn_ApprovedRejectedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-Numbering</para>
		/// <para><strong>Description</strong>: Internal field used to generate the next name upon entity creation. It is optionally copied to the msdyn_name field.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AutoNumbering
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AutoNumbering); }
			set { Entity.Attributes[Fields.msdyn_AutoNumbering] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking</para>
		/// <para><strong>Description</strong>: If purchase order is being ordered directly to a booking specify here. Note, when specified, by default all products will receive directly to booking.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresourcebooking"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Booking
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Booking); }
			set { Entity.Attributes[Fields.msdyn_Booking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_City); }
			set { Entity.Attributes[Fields.msdyn_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Country); }
			set { Entity.Attributes[Fields.msdyn_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Expected</para>
		/// <para><strong>Description</strong>: Enter the date you expect to receive your order. Note that products added once the date is specified here will automatically be set to this date.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateExpectedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateExpected); }
			set { Entity.Attributes[Fields.msdyn_DateExpected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Enter the name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ordered By</para>
		/// <para><strong>Description</strong>: Unique identifier for User associated with Purchase Order.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OrderedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OrderedBy); }
			set { Entity.Attributes[Fields.msdyn_OrderedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Payment Term</para>
		/// <para><strong>Description</strong>: The payment terms for this PO</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_paymentterm"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PaymentTerm
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PaymentTerm); }
			set { Entity.Attributes[Fields.msdyn_PaymentTerm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order Date</para>
		/// <para><strong>Description</strong>: Shows the date you submitted your order to the vendor. Note this field is for information only.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_PODateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_PODate); }
			set { Entity.Attributes[Fields.msdyn_PODate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Postal Code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostalCode); }
			set { Entity.Attributes[Fields.msdyn_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Order</para>
		/// <para><strong>Description</strong>: Shows the entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_purchaseorderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_purchaseorderId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Receive to Warehouse</para>
		/// <para><strong>Description</strong>: Warehouse where products of this PO will be received to</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_warehouse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ReceivetoWarehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ReceivetoWarehouse); }
			set { Entity.Attributes[Fields.msdyn_ReceivetoWarehouse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requested By Resource</para>
		/// <para><strong>Description</strong>: Resource that requested the purchase</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RequestedByResource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RequestedByResource); }
			set { Entity.Attributes[Fields.msdyn_RequestedByResource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To</para>
		/// <para><strong>Description</strong>: Enter the location to ship to. If the PO has been associated to a work order or a schedule, you can ship directly to the service account address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ShipTo"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ShipTo? msdyn_ShipTo
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ShipTo);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_ShipTo)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ShipTo] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ShipTo] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship Via</para>
		/// <para><strong>Description</strong>: Method of shipment by vendor</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_shipvia"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ShipVia
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ShipVia); }
			set { Entity.Attributes[Fields.msdyn_ShipVia] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State Or Province</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_StateOrProvince); }
			set { Entity.Attributes[Fields.msdyn_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Substatus</para>
		/// <para><strong>Description</strong>: Purchase Order Substatus</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_purchaseordersubstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SubStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SubStatus); }
			set { Entity.Attributes[Fields.msdyn_SubStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: System Status</para>
		/// <para><strong>Description</strong>: Enter the current status of the purchase order.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_SystemStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_SystemStatus.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_SystemStatus? msdyn_SystemStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SystemStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.msdyn_SystemStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SystemStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SystemStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount</para>
		/// <para><strong>Description</strong>: Total Amount (used by Field Service only)</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the total amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor</para>
		/// <para><strong>Description</strong>: Vendor you wish to purchase from</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Vendor
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Vendor); }
			set { Entity.Attributes[Fields.msdyn_Vendor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vendor Note</para>
		/// <para><strong>Description</strong>: If you wish to display a note for the vendor on this PO specify it here</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_VendorNote
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_VendorNote); }
			set { Entity.Attributes[Fields.msdyn_VendorNote] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order</para>
		/// <para><strong>Description</strong>: If purchase order is being ordered directly to a work order specify here. Note, when specified, by default all products will receive directly to work order.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the ID of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Id</para>
		/// <para><strong>Description</strong>: Contains the ID of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Purchase Order</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Purchase Order</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_purchaseorderOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Traversed Path</para>
		/// <para><strong>Description</strong>: Shows a comma-separated list of string values that represent the unique identifiers of stages in a business process flow instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Shows the time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}