//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:45
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ProcessStageOptionSets
{
	public enum OperationKind
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AddToTime</para>
		/// <para><strong>Value</strong>: 473,330,011</para>
		/// </summary>
		AddToTime = 473_330_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: Alert</para>
		/// <para><strong>Value</strong>: 473,330,005</para>
		/// </summary>
		Alert = 473_330_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiConnection</para>
		/// <para><strong>Value</strong>: 473,330,004</para>
		/// </summary>
		ApiConnection = 473_330_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: AzureMonitorAlert</para>
		/// <para><strong>Value</strong>: 473,330,013</para>
		/// </summary>
		AzureMonitorAlert = 473_330_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Button</para>
		/// <para><strong>Value</strong>: 473,330,003</para>
		/// </summary>
		Button = 473_330_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: ConvertTimeZone</para>
		/// <para><strong>Value</strong>: 473,330,008</para>
		/// </summary>
		ConvertTimeZone = 473_330_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: CurrentTime</para>
		/// <para><strong>Value</strong>: 473,330,007</para>
		/// </summary>
		CurrentTime = 473_330_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: EventGrid</para>
		/// <para><strong>Value</strong>: 473,330,006</para>
		/// </summary>
		EventGrid = 473_330_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: FormatNumber</para>
		/// <para><strong>Value</strong>: 473,330,024</para>
		/// </summary>
		FormatNumber = 473_330_024,
		/// <summary>
		/// <para><strong>Display Name</strong>: Geofence</para>
		/// <para><strong>Value</strong>: 473,330,019</para>
		/// </summary>
		Geofence = 473_330_019,
		/// <summary>
		/// <para><strong>Display Name</strong>: GetFutureTime</para>
		/// <para><strong>Value</strong>: 473,330,009</para>
		/// </summary>
		GetFutureTime = 473_330_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: GetPastTime</para>
		/// <para><strong>Value</strong>: 473,330,010</para>
		/// </summary>
		GetPastTime = 473_330_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: Http</para>
		/// <para><strong>Value</strong>: 473,330,000</para>
		/// </summary>
		Http = 473_330_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: IndexOf</para>
		/// <para><strong>Value</strong>: 473,330,021</para>
		/// </summary>
		IndexOf = 473_330_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: JsonToJson</para>
		/// <para><strong>Value</strong>: 473,330,015</para>
		/// </summary>
		JsonToJson = 473_330_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: JsonToText</para>
		/// <para><strong>Value</strong>: 473,330,016</para>
		/// </summary>
		JsonToText = 473_330_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: ODataOpenApiConnection</para>
		/// <para><strong>Value</strong>: 473,330,020</para>
		/// </summary>
		ODataOpenApiConnection = 473_330_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: PowerApp</para>
		/// <para><strong>Value</strong>: 473,330,001</para>
		/// </summary>
		PowerApp = 473_330_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: PowerAppV2</para>
		/// <para><strong>Value</strong>: 473,330,002</para>
		/// </summary>
		PowerAppV2 = 473_330_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: PowerPages</para>
		/// <para><strong>Value</strong>: 473,330,026</para>
		/// </summary>
		PowerPages = 473_330_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: SecurityCenterAlert</para>
		/// <para><strong>Value</strong>: 473,330,014</para>
		/// </summary>
		SecurityCenterAlert = 473_330_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skills</para>
		/// <para><strong>Value</strong>: 473,330,025</para>
		/// </summary>
		Skills = 473_330_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Substring</para>
		/// <para><strong>Value</strong>: 473,330,022</para>
		/// </summary>
		Substring = 473_330_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: SubtractFromTime</para>
		/// <para><strong>Value</strong>: 473,330,012</para>
		/// </summary>
		SubtractFromTime = 473_330_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: TeamsWebhook</para>
		/// <para><strong>Value</strong>: 473,330,027</para>
		/// </summary>
		TeamsWebhook = 473_330_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: VirtualAgent</para>
		/// <para><strong>Value</strong>: 473,330,023</para>
		/// </summary>
		VirtualAgent = 473_330_023,
		/// <summary>
		/// <para><strong>Display Name</strong>: XmlToJson</para>
		/// <para><strong>Value</strong>: 473,330,017</para>
		/// </summary>
		XmlToJson = 473_330_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: XmlToText</para>
		/// <para><strong>Value</strong>: 473,330,018</para>
		/// </summary>
		XmlToText = 473_330_018
	}
	public enum OperationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiApp</para>
		/// <para><strong>Value</strong>: 473,330,001</para>
		/// </summary>
		ApiApp = 473_330_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiConnection</para>
		/// <para><strong>Value</strong>: 473,330,006</para>
		/// </summary>
		ApiConnection = 473_330_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiConnectionNotification</para>
		/// <para><strong>Value</strong>: 473,330,050</para>
		/// </summary>
		ApiConnectionNotification = 473_330_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiConnectionWebhook</para>
		/// <para><strong>Value</strong>: 473,330,009</para>
		/// </summary>
		ApiConnectionWebhook = 473_330_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: ApiManagement</para>
		/// <para><strong>Value</strong>: 473,330,016</para>
		/// </summary>
		ApiManagement = 473_330_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: AppendToArrayVariable</para>
		/// <para><strong>Value</strong>: 473,330,037</para>
		/// </summary>
		AppendToArrayVariable = 473_330_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: AppendToStringVariable</para>
		/// <para><strong>Value</strong>: 473,330,038</para>
		/// </summary>
		AppendToStringVariable = 473_330_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: As2Decode</para>
		/// <para><strong>Value</strong>: 473,330,045</para>
		/// </summary>
		As2Decode = 473_330_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: As2Encode</para>
		/// <para><strong>Value</strong>: 473,330,046</para>
		/// </summary>
		As2Encode = 473_330_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Batch</para>
		/// <para><strong>Value</strong>: 473,330,039</para>
		/// </summary>
		Batch = 473_330_039,
		/// <summary>
		/// <para><strong>Display Name</strong>: Changeset</para>
		/// <para><strong>Value</strong>: 473,330,051</para>
		/// </summary>
		Changeset = 473_330_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: Compose</para>
		/// <para><strong>Value</strong>: 473,330,013</para>
		/// </summary>
		Compose = 473_330_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: DecrementVariable</para>
		/// <para><strong>Value</strong>: 473,330,035</para>
		/// </summary>
		DecrementVariable = 473_330_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expression</para>
		/// <para><strong>Value</strong>: 473,330,042</para>
		/// </summary>
		Expression = 473_330_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: FlatFileDecoding</para>
		/// <para><strong>Value</strong>: 473,330,025</para>
		/// </summary>
		FlatFileDecoding = 473_330_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: FlatFileEncoding</para>
		/// <para><strong>Value</strong>: 473,330,018</para>
		/// </summary>
		FlatFileEncoding = 473_330_018,
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow</para>
		/// <para><strong>Value</strong>: 473,330,004</para>
		/// </summary>
		Flow = 473_330_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Foreach</para>
		/// <para><strong>Value</strong>: 473,330,022</para>
		/// </summary>
		Foreach = 473_330_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: Function</para>
		/// <para><strong>Value</strong>: 473,330,015</para>
		/// </summary>
		Function = 473_330_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: Http</para>
		/// <para><strong>Value</strong>: 473,330,000</para>
		/// </summary>
		Http = 473_330_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: HttpWebhook</para>
		/// <para><strong>Value</strong>: 473,330,012</para>
		/// </summary>
		HttpWebhook = 473_330_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: If</para>
		/// <para><strong>Value</strong>: 473,330,021</para>
		/// </summary>
		If = 473_330_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: IncrementVariable</para>
		/// <para><strong>Value</strong>: 473,330,034</para>
		/// </summary>
		IncrementVariable = 473_330_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: InitializeVariable</para>
		/// <para><strong>Value</strong>: 473,330,033</para>
		/// </summary>
		InitializeVariable = 473_330_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: IntegrationAccountArtifactLookup</para>
		/// <para><strong>Value</strong>: 473,330,027</para>
		/// </summary>
		IntegrationAccountArtifactLookup = 473_330_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: JavascriptCode</para>
		/// <para><strong>Value</strong>: 473,330,044</para>
		/// </summary>
		JavascriptCode = 473_330_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Join</para>
		/// <para><strong>Value</strong>: 473,330,031</para>
		/// </summary>
		Join = 473_330_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Liquid</para>
		/// <para><strong>Value</strong>: 473,330,043</para>
		/// </summary>
		Liquid = 473_330_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual</para>
		/// <para><strong>Value</strong>: 473,330,008</para>
		/// </summary>
		Manual = 473_330_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: OpenApiConnection</para>
		/// <para><strong>Value</strong>: 473,330,007</para>
		/// </summary>
		OpenApiConnection = 473_330_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: OpenApiConnectionWebhook</para>
		/// <para><strong>Value</strong>: 473,330,010</para>
		/// </summary>
		OpenApiConnectionWebhook = 473_330_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParseJson</para>
		/// <para><strong>Value</strong>: 473,330,029</para>
		/// </summary>
		ParseJson = 473_330_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Query</para>
		/// <para><strong>Value</strong>: 473,330,014</para>
		/// </summary>
		Query = 473_330_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence</para>
		/// <para><strong>Value</strong>: 473,330,002</para>
		/// </summary>
		Recurrence = 473_330_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Request</para>
		/// <para><strong>Value</strong>: 473,330,020</para>
		/// </summary>
		Request = 473_330_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: Response</para>
		/// <para><strong>Value</strong>: 473,330,011</para>
		/// </summary>
		Response = 473_330_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: RosettaNetDecode</para>
		/// <para><strong>Value</strong>: 473,330,048</para>
		/// </summary>
		RosettaNetDecode = 473_330_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: RosettaNetEncode</para>
		/// <para><strong>Value</strong>: 473,330,047</para>
		/// </summary>
		RosettaNetEncode = 473_330_047,
		/// <summary>
		/// <para><strong>Display Name</strong>: RosettaNetWaitForResponse</para>
		/// <para><strong>Value</strong>: 473,330,049</para>
		/// </summary>
		RosettaNetWaitForResponse = 473_330_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scope</para>
		/// <para><strong>Value</strong>: 473,330,019</para>
		/// </summary>
		Scope = 473_330_019,
		/// <summary>
		/// <para><strong>Display Name</strong>: Select</para>
		/// <para><strong>Value</strong>: 473,330,032</para>
		/// </summary>
		Select = 473_330_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: SendToBatch</para>
		/// <para><strong>Value</strong>: 473,330,040</para>
		/// </summary>
		SendToBatch = 473_330_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: SetVariable</para>
		/// <para><strong>Value</strong>: 473,330,036</para>
		/// </summary>
		SetVariable = 473_330_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: SlidingWindow</para>
		/// <para><strong>Value</strong>: 473,330,041</para>
		/// </summary>
		SlidingWindow = 473_330_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: SwiftEncode</para>
		/// <para><strong>Value</strong>: 473,330,052</para>
		/// </summary>
		SwiftEncode = 473_330_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Switch</para>
		/// <para><strong>Value</strong>: 473,330,028</para>
		/// </summary>
		Switch = 473_330_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Table</para>
		/// <para><strong>Value</strong>: 473,330,030</para>
		/// </summary>
		Table = 473_330_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Terminate</para>
		/// <para><strong>Value</strong>: 473,330,026</para>
		/// </summary>
		Terminate = 473_330_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Until</para>
		/// <para><strong>Value</strong>: 473,330,023</para>
		/// </summary>
		Until = 473_330_023,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait</para>
		/// <para><strong>Value</strong>: 473,330,005</para>
		/// </summary>
		Wait = 473_330_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Workflow</para>
		/// <para><strong>Value</strong>: 473,330,003</para>
		/// </summary>
		Workflow = 473_330_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: XmlValidation</para>
		/// <para><strong>Value</strong>: 473,330,017</para>
		/// </summary>
		XmlValidation = 473_330_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: Xslt</para>
		/// <para><strong>Value</strong>: 473,330,024</para>
		/// </summary>
		Xslt = 473_330_024
	}
	public enum StageCategory
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approval</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Approval = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Close</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Close = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Develop</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Develop = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Identify = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Propose</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Propose = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualify</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Qualify = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Research</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Research = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolve</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Resolve = 6
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ProcessStage : EntityBase
	{
		public struct Fields
		{
			public const string ClientData = "clientdata";
			public const string Connector = "connector";
			public const string IsTrigger = "istrigger";
			public const string OperationId = "operationid";
			public const string OperationKind = "operationkind";
			public const string OperationType = "operationtype";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string ParameterName = "parametername";
			public const string ParameterValue = "parametervalue";
			public const string ParentProcessStageId = "parentprocessstageid";
			public const string PrimaryEntityTypeCode = "primaryentitytypecode";
			public const string ProcessId = "processid";
			public const string ProcessStageId = "processstageid";
			public const string StageCategory = "stagecategory";
			public const string StageName = "stagename";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "processstage";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4724;
		public const string EntityCollectionSchemaName = "ProcessStages";
		public const string EntityDisplayCollectionName = "Process Stages";
		public const string DisplayName = "Process Stage";
		public const string EntitySetName = "processstages";
		public const string EntityLogicalCollectionName = "processstages";
		public const string EntityPrimaryIdAttribute = "processstageid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "stagename";
		public const string EntitySchemaName = "ProcessStage";
		[DebuggerNonUserCode()]
		public ProcessStage()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProcessStage(Guid ProcessStageId)
		{
			Entity = new Entity(EntityLogicalName, ProcessStageId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProcessStage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProcessStage"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ProcessStage(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProcessStage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ProcessStage(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ProcessStage(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ProcessStage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ProcessStage(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ProcessStage(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ProcessStage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client Data</para>
		/// <para><strong>Description</strong>: Step metadata for process stage</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientData
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientData); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connector</para>
		/// <para><strong>Description</strong>: The connector associated with the stage.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Connector
		{
			get { return Entity.GetAttributeValue<string>(Fields.Connector); }
			set { Entity.Attributes[Fields.Connector] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Trigger</para>
		/// <para><strong>Description</strong>: Whether the stage is a trigger</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTrigger
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTrigger); }
			set { Entity.Attributes[Fields.IsTrigger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operation Id</para>
		/// <para><strong>Description</strong>: The operation id of the stage</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OperationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OperationId); }
			set { Entity.Attributes[Fields.OperationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operation Kind</para>
		/// <para><strong>Description</strong>: The operation kind</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProcessStageOptionSets.OperationKind"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProcessStageOptionSets.OperationKind? OperationKind
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationKind);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProcessStageOptionSets.OperationKind)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationKind] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationKind] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operation Type</para>
		/// <para><strong>Description</strong>: The type of the operation</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProcessStageOptionSets.OperationType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProcessStageOptionSets.OperationType? OperationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProcessStageOptionSets.OperationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Select the business unit that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The parameter name.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParameterName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParameterName); }
			set { Entity.Attributes[Fields.ParameterName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Value</para>
		/// <para><strong>Description</strong>: The parameter value.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParameterValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParameterValue); }
			set { Entity.Attributes[Fields.ParameterValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage</para>
		/// <para><strong>Description</strong>: The parent stage for the parameter.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="processstage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentProcessStageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentProcessStageId); }
			set { Entity.Attributes[Fields.ParentProcessStageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Entity</para>
		/// <para><strong>Description</strong>: Primary entity associated with the stage.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntityTypeCode); }
			set { Entity.Attributes[Fields.PrimaryEntityTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Shows the ID of the process.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProcessId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Stage</para>
		/// <para><strong>Description</strong>: Shows the ID of the process stage record.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProcessStageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProcessStageId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Category</para>
		/// <para><strong>Description</strong>: Select the category of the sales process.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ProcessStageOptionSets.StageCategory"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ProcessStageOptionSets.StageCategory.Qualify"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProcessStageOptionSets.StageCategory? StageCategory
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StageCategory);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProcessStageOptionSets.StageCategory)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StageCategory] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StageCategory] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Stage Name</para>
		/// <para><strong>Description</strong>: Type a name for the process stage.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StageName); }
			set { Entity.Attributes[Fields.StageName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the process stage.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}