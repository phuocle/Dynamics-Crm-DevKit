//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_geopin : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_CenterLatitude = "msdyncrm_centerlatitude";
			public const string msdyncrm_CenterLongitude = "msdyncrm_centerlongitude";
			public const string msdyncrm_City = "msdyncrm_city";
			public const string msdyncrm_ContactGeoPinsId = "msdyncrm_contactgeopinsid";
			public const string msdyncrm_Country = "msdyncrm_country";
			public const string msdyncrm_customerjourney = "msdyncrm_customerjourney";
			public const string msdyncrm_geopinId = "msdyncrm_geopinid";
			public const string msdyncrm_kpi_email_clicked_count = "msdyncrm_kpi_email_clicked_count";
			public const string msdyncrm_kpi_email_opened_count = "msdyncrm_kpi_email_opened_count";
			public const string msdyncrm_kpi_form_submitted_count = "msdyncrm_kpi_form_submitted_count";
			public const string msdyncrm_kpi_redirect_link_clicked_count = "msdyncrm_kpi_redirect_link_clicked_count";
			public const string msdyncrm_kpi_website_clicked_count = "msdyncrm_kpi_website_clicked_count";
			public const string msdyncrm_kpi_website_visited_count = "msdyncrm_kpi_website_visited_count";
			public const string msdyncrm_LeadGeoPinsId = "msdyncrm_leadgeopinsid";
			public const string msdyncrm_MarketingEmailGeoPinsId = "msdyncrm_marketingemailgeopinsid";
			public const string msdyncrm_marketingformGeoPinsId = "msdyncrm_marketingformgeopinsid";
			public const string msdyncrm_MarketingPageGeoPinsId = "msdyncrm_marketingpagegeopinsid";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_NorthwestLatitude = "msdyncrm_northwestlatitude";
			public const string msdyncrm_NorthwestLongitude = "msdyncrm_northwestlongitude";
			public const string msdyncrm_PostalCode = "msdyncrm_postalcode";
			public const string msdyncrm_RedirectURLGeoPinsId = "msdyncrm_redirecturlgeopinsid";
			public const string msdyncrm_requestbuilderservice_mktgeopins = "msdyncrm_requestbuilderservice_mktgeopins";
			public const string msdyncrm_resultparserservice_mktgeopins = "msdyncrm_resultparserservice_mktgeopins";
			public const string msdyncrm_serverId_marketing = "msdyncrm_serverid_marketing";
			public const string msdyncrm_SoutheastLatitude = "msdyncrm_southeastlatitude";
			public const string msdyncrm_SoutheastLongitude = "msdyncrm_southeastlongitude";
			public const string msdyncrm_State = "msdyncrm_state";
			public const string msdyncrm_WebsiteGeoPinsId = "msdyncrm_websitegeopinsid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_geopin";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11152;
		public const string EntityCollectionSchemaName = "msdyncrm_geopins";
		public const string EntityDisplayCollectionName = "Geo pins";
		public const string DisplayName = "Geo pin";
		public const string EntitySetName = "msdyncrm_geopins";
		public const string EntityLogicalCollectionName = "msdyncrm_geopins";
		public const string EntityPrimaryIdAttribute = "msdyncrm_geopinid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_geopin";
		[DebuggerNonUserCode()]
		public msdyncrm_geopin()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_geopin(Guid msdyncrm_geopinId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_geopinId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_geopin(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_geopin"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_geopin(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_geopin"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_geopin(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_geopin(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_geopin"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_geopin(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_geopin(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_geopin(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Center latitude</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyncrm_CenterLatitude
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyncrm_CenterLatitude); }
			set { Entity.Attributes[Fields.msdyncrm_CenterLatitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Center longitude</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyncrm_CenterLongitude
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyncrm_CenterLongitude); }
			set { Entity.Attributes[Fields.msdyncrm_CenterLongitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Description</strong>: City</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_City); }
			set { Entity.Attributes[Fields.msdyncrm_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the contact associated with the Geo Pin</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_ContactGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_ContactGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_ContactGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region</para>
		/// <para><strong>Description</strong>: Country/Region</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Country); }
			set { Entity.Attributes[Fields.msdyncrm_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Journey</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_customerjourney"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_customerjourney
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_customerjourney); }
			set { Entity.Attributes[Fields.msdyncrm_customerjourney] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Geo pin</para>
		/// <para><strong>Description</strong>: Unique ID for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_geopinId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_geopinId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI email clicked count</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyncrm_kpi_email_clicked_count
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyncrm_kpi_email_clicked_count); }
			set { Entity.Attributes[Fields.msdyncrm_kpi_email_clicked_count] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI email opened count</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyncrm_kpi_email_opened_count
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyncrm_kpi_email_opened_count); }
			set { Entity.Attributes[Fields.msdyncrm_kpi_email_opened_count] = value; }
		}
		/// <summary>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyncrm_kpi_form_submitted_count
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyncrm_kpi_form_submitted_count); }
			set { Entity.Attributes[Fields.msdyncrm_kpi_form_submitted_count] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI redirect link clicked count</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyncrm_kpi_redirect_link_clicked_count
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyncrm_kpi_redirect_link_clicked_count); }
			set { Entity.Attributes[Fields.msdyncrm_kpi_redirect_link_clicked_count] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI website clicked count</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyncrm_kpi_website_clicked_count
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyncrm_kpi_website_clicked_count); }
			set { Entity.Attributes[Fields.msdyncrm_kpi_website_clicked_count] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI website visited count</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyncrm_kpi_website_visited_count
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyncrm_kpi_website_visited_count); }
			set { Entity.Attributes[Fields.msdyncrm_kpi_website_visited_count] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the lead associated with the geo pin</para>
		/// <para><strong>Lookup</strong>: <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_LeadGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_LeadGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_LeadGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing email geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the marketing email associated with the geo pin</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingemail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_MarketingEmailGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_MarketingEmailGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_MarketingEmailGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing form geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the marketing form associated with the geo pin</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingformGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingformGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing page geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the marketing page associated with the geo pin</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_MarketingPageGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_MarketingPageGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_MarketingPageGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Northwest latitude</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyncrm_NorthwestLatitude
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyncrm_NorthwestLatitude); }
			set { Entity.Attributes[Fields.msdyncrm_NorthwestLatitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Northwest longitude</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyncrm_NorthwestLongitude
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyncrm_NorthwestLongitude); }
			set { Entity.Attributes[Fields.msdyncrm_NorthwestLongitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Postal code</para>
		/// <para><strong>Description</strong>: Postal code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_PostalCode); }
			set { Entity.Attributes[Fields.msdyncrm_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect URL geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the redirect URL associated with the geo pin</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_redirecturl"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_RedirectURLGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_RedirectURLGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_RedirectURLGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing interactions</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_requestbuilderservice_mktgeopins
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_requestbuilderservice_mktgeopins); }
			set { Entity.Attributes[Fields.msdyncrm_requestbuilderservice_mktgeopins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing interactions</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_resultparserservice_mktgeopins
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_resultparserservice_mktgeopins); }
			set { Entity.Attributes[Fields.msdyncrm_resultparserservice_mktgeopins] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: serverId_marketing</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_serverId_marketing
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_serverId_marketing); }
			set { Entity.Attributes[Fields.msdyncrm_serverId_marketing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Southeast latitude</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyncrm_SoutheastLatitude
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyncrm_SoutheastLatitude); }
			set { Entity.Attributes[Fields.msdyncrm_SoutheastLatitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Southeast longitude</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyncrm_SoutheastLongitude
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyncrm_SoutheastLongitude); }
			set { Entity.Attributes[Fields.msdyncrm_SoutheastLongitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>Description</strong>: State</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_State
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_State); }
			set { Entity.Attributes[Fields.msdyncrm_State] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website geo pins</para>
		/// <para><strong>Description</strong>: Unique ID for the website associated with the geo pin</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_WebsiteGeoPinsId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_WebsiteGeoPinsId); }
			set { Entity.Attributes[Fields.msdyncrm_WebsiteGeoPinsId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Indicates the team that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the geo pin</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Geo pin status reason</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_geopinOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time-zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time-zone code</para>
		/// <para><strong>Description</strong>: Time-zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}