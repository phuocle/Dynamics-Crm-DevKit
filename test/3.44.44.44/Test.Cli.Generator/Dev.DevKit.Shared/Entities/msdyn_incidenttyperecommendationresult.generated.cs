//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets
{
	public enum msdyn_RecommendationType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Incident_Type = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Product</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Work_Order_Product = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Service</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Work_Order_Service = 192_350_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Applied</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Applied = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disliked</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Disliked = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_incidenttyperecommendationresult : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_IncidentType = "msdyn_incidenttype";
			public const string msdyn_IncidentTypeForMerge = "msdyn_incidenttypeformerge";
			public const string msdyn_IncidentTypeId = "msdyn_incidenttypeid";
			public const string msdyn_IncidentTypeIdForMerge = "msdyn_incidenttypeidformerge";
			public const string msdyn_incidenttyperecommendationresultId = "msdyn_incidenttyperecommendationresultid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_OccurrenceTimes = "msdyn_occurrencetimes";
			public const string msdyn_ProductService = "msdyn_productservice";
			public const string msdyn_ProductServiceId = "msdyn_productserviceid";
			public const string msdyn_RecommendationDescription = "msdyn_recommendationdescription";
			public const string msdyn_RecommendationType = "msdyn_recommendationtype";
			public const string msdyn_RunHistoryId = "msdyn_runhistoryid";
			public const string msdyn_RunId = "msdyn_runid";
			public const string msdyn_ScoreRanking = "msdyn_scoreranking";
			public const string msdyn_SuggestedValue = "msdyn_suggestedvalue";
			public const string msdyn_TotalOccurrenceTimes = "msdyn_totaloccurrencetimes";
			public const string msdyn_Unit = "msdyn_unit";
			public const string msdyn_UnitId = "msdyn_unitid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_incidenttyperecommendationresult";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11720;
		public const string EntityCollectionSchemaName = "msdyn_incidenttyperecommendationresults";
		public const string EntityDisplayCollectionName = "Incident Type Suggestion Results";
		public const string DisplayName = "Incident Type Suggestion Result";
		public const string EntitySetName = "msdyn_incidenttyperecommendationresults";
		public const string EntityLogicalCollectionName = "msdyn_incidenttyperecommendationresults";
		public const string EntityPrimaryIdAttribute = "msdyn_incidenttyperecommendationresultid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_incidenttyperecommendationresult";
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult(Guid msdyn_incidenttyperecommendationresultId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_incidenttyperecommendationresultId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_incidenttyperecommendationresult"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_incidenttyperecommendationresult"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_incidenttyperecommendationresult(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_incidenttyperecommendationresult"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_incidenttyperecommendationresult(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_incidenttyperecommendationresult(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type</para>
		/// <para><strong>Description</strong>: Shows the incident related to this suggestion result.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IncidentType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IncidentType); }
			set { Entity.Attributes[Fields.msdyn_IncidentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type (For Merge)</para>
		/// <para><strong>Description</strong>: Shows the incident (for merge) related to this suggestion result.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IncidentTypeForMerge
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IncidentTypeForMerge); }
			set { Entity.Attributes[Fields.msdyn_IncidentTypeForMerge] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type Id</para>
		/// <para><strong>Description</strong>: Shows unique identifier of an incident type.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_IncidentTypeId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_IncidentTypeId); }
			set { Entity.Attributes[Fields.msdyn_IncidentTypeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type Id (For Merge)</para>
		/// <para><strong>Description</strong>: Shows unique identifier of an incident (for merge).</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_IncidentTypeIdForMerge
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_IncidentTypeIdForMerge); }
			set { Entity.Attributes[Fields.msdyn_IncidentTypeIdForMerge] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incident Type Suggestion Result</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_incidenttyperecommendationresultId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_incidenttyperecommendationresultId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Occurrence Times</para>
		/// <para><strong>Description</strong>: Shows the occurrence times of the related incident type.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_OccurrenceTimes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_OccurrenceTimes); }
			set { Entity.Attributes[Fields.msdyn_OccurrenceTimes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product/Service</para>
		/// <para><strong>Description</strong>: Shows the product related to this suggestion result.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ProductService
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ProductService); }
			set { Entity.Attributes[Fields.msdyn_ProductService] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Product/Service Id</para>
		/// <para><strong>Description</strong>: Shows unique identifier of a product.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ProductServiceId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ProductServiceId); }
			set { Entity.Attributes[Fields.msdyn_ProductServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggestion Description</para>
		/// <para><strong>Description</strong>: Shows the suggestion description.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RecommendationDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RecommendationDescription); }
			set { Entity.Attributes[Fields.msdyn_RecommendationDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggestion Type</para>
		/// <para><strong>Description</strong>: Shows the type of incident type suggestion.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.msdyn_RecommendationType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.msdyn_RecommendationType.Work_Order_Product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.msdyn_RecommendationType? msdyn_RecommendationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_RecommendationType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.msdyn_RecommendationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_RecommendationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_RecommendationType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Run History Id</para>
		/// <para><strong>Description</strong>: Id of Incident Type Suggestion Run History</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttyperecommendationrunhistory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_RunHistoryId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_RunHistoryId); }
			set { Entity.Attributes[Fields.msdyn_RunHistoryId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Run Id</para>
		/// <para><strong>Description</strong>: Shows unique identifier of the related run job.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RunId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RunId); }
			set { Entity.Attributes[Fields.msdyn_RunId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Score Ranking</para>
		/// <para><strong>Description</strong>: Shows the score ranking of the result.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ScoreRanking
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ScoreRanking); }
			set { Entity.Attributes[Fields.msdyn_ScoreRanking] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggested Value</para>
		/// <para><strong>Description</strong>: Shows the suggested value of product quantity or service duration.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_SuggestedValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_SuggestedValue); }
			set { Entity.Attributes[Fields.msdyn_SuggestedValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Occurrence Times</para>
		/// <para><strong>Description</strong>: Shows the total occurrence times of the related incident type.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_TotalOccurrenceTimes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_TotalOccurrenceTimes); }
			set { Entity.Attributes[Fields.msdyn_TotalOccurrenceTimes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit</para>
		/// <para><strong>Description</strong>: The unit that determines the pricing and final quantity for this product or service.</para>
		/// <para><strong>Lookup</strong>: <see cref="uom"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Unit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Unit); }
			set { Entity.Attributes[Fields.msdyn_Unit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit Id</para>
		/// <para><strong>Description</strong>: Shows unique identifier of the unit.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UnitId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UnitId); }
			set { Entity.Attributes[Fields.msdyn_UnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Incident Type Suggestion Result</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Incident Type Suggestion Result</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_incidenttyperecommendationresultOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}