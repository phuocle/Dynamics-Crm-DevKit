//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:43
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets
{
	public enum mspp_websitelcid
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Basque - Basque</para>
		/// <para><strong>Value</strong>: 1,069</para>
		/// </summary>
		Basque_Basque = 1_069,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bulgarian - Bulgaria</para>
		/// <para><strong>Value</strong>: 1,026</para>
		/// </summary>
		Bulgarian_Bulgaria = 1_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Catalan - Catalan</para>
		/// <para><strong>Value</strong>: 1,027</para>
		/// </summary>
		Catalan_Catalan = 1_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - China</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_China = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - Hong Kong SAR</para>
		/// <para><strong>Value</strong>: 3,076</para>
		/// </summary>
		Chinese_Hong_Kong_SAR = 3_076,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - Traditional</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Chinese_Traditional = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Croatian - Croatia</para>
		/// <para><strong>Value</strong>: 1,050</para>
		/// </summary>
		Croatian_Croatia = 1_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech - Czech Republic</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech_Czech_Republic = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish - Denmark</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish_Denmark = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch - Netherlands</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch_Netherlands = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Estonian - Estonia</para>
		/// <para><strong>Value</strong>: 1,061</para>
		/// </summary>
		Estonian_Estonia = 1_061,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish - Finland</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish_Finland = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French - France</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French_France = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Galician - Spain</para>
		/// <para><strong>Value</strong>: 1,110</para>
		/// </summary>
		Galician_Spain = 1_110,
		/// <summary>
		/// <para><strong>Display Name</strong>: German - Germany</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German_Germany = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek - Greece</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek_Greece = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi - India</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi_India = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hungarian - Hungary</para>
		/// <para><strong>Value</strong>: 1,038</para>
		/// </summary>
		Hungarian_Hungary = 1_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian - Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian - Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese - Japan</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese_Japan = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kazakh - Kazakhstan</para>
		/// <para><strong>Value</strong>: 1,087</para>
		/// </summary>
		Kazakh_Kazakhstan = 1_087,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean - Korea</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean_Korea = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Latvian - Latvia</para>
		/// <para><strong>Value</strong>: 1,062</para>
		/// </summary>
		Latvian_Latvia = 1_062,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lithuanian - Lithuania</para>
		/// <para><strong>Value</strong>: 1,063</para>
		/// </summary>
		Lithuanian_Lithuania = 1_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Malay - Malaysia</para>
		/// <para><strong>Value</strong>: 1,086</para>
		/// </summary>
		Malay_Malaysia = 1_086,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian (Bokmål) - Norway</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian_Bokmal_Norway = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish - Poland</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish_Poland = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Brazil</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Portugal</para>
		/// <para><strong>Value</strong>: 2,070</para>
		/// </summary>
		Portuguese_Portugal = 2_070,
		/// <summary>
		/// <para><strong>Display Name</strong>: Romanian - Romania</para>
		/// <para><strong>Value</strong>: 1,048</para>
		/// </summary>
		Romanian_Romania = 1_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian - Russia</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian_Russia = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Cyrillic) - Serbia</para>
		/// <para><strong>Value</strong>: 3,098</para>
		/// </summary>
		Serbian_Cyrillic_Serbia = 3_098,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Latin) - Serbia</para>
		/// <para><strong>Value</strong>: 2,074</para>
		/// </summary>
		Serbian_Latin_Serbia = 2_074,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovak - Slovakia</para>
		/// <para><strong>Value</strong>: 1,051</para>
		/// </summary>
		Slovak_Slovakia = 1_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovenian - Slovenia</para>
		/// <para><strong>Value</strong>: 1,060</para>
		/// </summary>
		Slovenian_Slovenia = 1_060,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish (Traditional Sort) - Spain</para>
		/// <para><strong>Value</strong>: 3,082</para>
		/// </summary>
		Spanish_Traditional_Sort_Spain = 3_082,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish - Sweden</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish_Sweden = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai - Thailand</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai_Thailand = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish - Türkiye</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish_Turkiye = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ukrainian - Ukraine</para>
		/// <para><strong>Value</strong>: 1,058</para>
		/// </summary>
		Ukrainian_Ukraine = 1_058,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vietnamese - Vietnam</para>
		/// <para><strong>Value</strong>: 1,066</para>
		/// </summary>
		Vietnamese_Vietnam = 1_066
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class mspp_websitelanguage : EntityBase
	{
		public struct Fields
		{
			public const string mspp_createdby = "mspp_createdby";
			public const string mspp_createdon = "mspp_createdon";
			public const string mspp_description = "mspp_description";
			public const string mspp_displayname = "mspp_displayname";
			public const string mspp_languagecode = "mspp_languagecode";
			public const string mspp_lcid = "mspp_lcid";
			public const string mspp_modifiedby = "mspp_modifiedby";
			public const string mspp_modifiedon = "mspp_modifiedon";
			public const string mspp_name = "mspp_name";
			public const string mspp_publishingstate = "mspp_publishingstate";
			public const string mspp_systemlanguage = "mspp_systemlanguage";
			public const string mspp_websiteid = "mspp_websiteid";
			public const string mspp_websitelanguageId = "mspp_websitelanguageid";
			public const string mspp_websitelcid = "mspp_websitelcid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
		}
		public const string EntityLogicalName = "mspp_websitelanguage";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10345;
		public const string EntityCollectionSchemaName = "mspp_websitelanguages";
		public const string EntityDisplayCollectionName = "Website Languages";
		public const string DisplayName = "Website Language";
		public const string EntitySetName = "mspp_websitelanguages";
		public const string EntityLogicalCollectionName = "mspp_websitelanguages";
		public const string EntityPrimaryIdAttribute = "mspp_websitelanguageid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "mspp_name";
		public const string EntitySchemaName = "mspp_websitelanguage";
		[DebuggerNonUserCode()]
		public mspp_websitelanguage()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_websitelanguage(Guid mspp_websitelanguageId)
		{
			Entity = new Entity(EntityLogicalName, mspp_websitelanguageId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_websitelanguage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_websitelanguage"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public mspp_websitelanguage(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_websitelanguage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_websitelanguage(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_websitelanguage(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_websitelanguage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_websitelanguage(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_websitelanguage(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_websitelanguage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_createdby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_createdby); }
			set { Entity.Attributes[Fields.mspp_createdby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_createdon); }
			set { Entity.Attributes[Fields.mspp_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_description); }
			set { Entity.Attributes[Fields.mspp_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Display Name</para>
		/// <para><strong>Description</strong>: Localized display name of the portal language</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_displayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_displayname); }
			set { Entity.Attributes[Fields.mspp_displayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language Code</para>
		/// <para><strong>Description</strong>: Locale or language identifier that appears in the URL to indicate the portal language</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_languagecode
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_languagecode); }
			set { Entity.Attributes[Fields.mspp_languagecode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language Code Identifier</para>
		/// <para><strong>Description</strong>: Locale ID that is assigned to the portal language</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_lcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_lcid); }
			set { Entity.Attributes[Fields.mspp_lcid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_modifiedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_modifiedby); }
			set { Entity.Attributes[Fields.mspp_modifiedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was modified.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_modifiedon); }
			set { Entity.Attributes[Fields.mspp_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the portal language</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_name); }
			set { Entity.Attributes[Fields.mspp_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publishing State</para>
		/// <para><strong>Description</strong>: Lookup to Publishing State - publishing state of this website/language instance (draft/published)</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="mspp_publishingstate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_publishingstate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_publishingstate); }
			set { Entity.Attributes[Fields.mspp_publishingstate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: System Language</para>
		/// <para><strong>Description</strong>: The system language determines which portal languages are available</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_systemlanguage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_systemlanguage); }
			set { Entity.Attributes[Fields.mspp_systemlanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Lookup to Website</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="mspp_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_websiteid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_websiteid); }
			set { Entity.Attributes[Fields.mspp_websiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website Language</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid mspp_websitelanguageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.mspp_websitelanguageId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Pages Language</para>
		/// <para><strong>Description</strong>: This attribute is used only in Power Pages Management App, and only for UI purpose. It&apos;s value is mapped to mspp_systemlanguage.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.mspp_websitelcid"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.mspp_websitelcid? mspp_websitelcid
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_websitelcid);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.mspp_websitelcid)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_websitelcid] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_websitelcid] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Website Language</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Website Language</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_websitelanguageOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
	}
}