//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:41
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets
{
	public enum msevtmgt_AudienceType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Advanced = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: General</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		General = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Intermediate</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Intermediate = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Introductory</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Introductory = 100_000_001
	}
	public enum msevtmgt_IndustryType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Architecture and engineering</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Architecture_and_engineering = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Financial services</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Financial_services = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manufacturing</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Manufacturing = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Media, entertainment</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Media_entertainment = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		Other = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Professional services</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Professional_services = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public sector</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Public_sector = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retail</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Retail = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wholesale and distribution</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		Wholesale_and_distribution = 100_000_007
	}
	public enum msevtmgt_PublishStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelled</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Cancelled = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Draft = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Going_live = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Live = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready to go live</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Ready_to_go_live = 100_000_001
	}
	public enum msevtmgt_TrackType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: External</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		External = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Internal = 100_000_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_SessionTrack : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msevtmgt_AudienceType = "msevtmgt_audiencetype";
			public const string msevtmgt_Description = "msevtmgt_description";
			public const string msevtmgt_EventId = "msevtmgt_eventid";
			public const string msevtmgt_IndustryType = "msevtmgt_industrytype";
			public const string msevtmgt_Keywords = "msevtmgt_keywords";
			public const string msevtmgt_Name = "msevtmgt_name";
			public const string msevtmgt_numberofregistrations = "msevtmgt_numberofregistrations";
			public const string msevtmgt_PublishStatus = "msevtmgt_publishstatus";
			public const string msevtmgt_SessionsInTrack = "msevtmgt_sessionsintrack";
			public const string msevtmgt_SessionTrackId = "msevtmgt_sessiontrackid";
			public const string msevtmgt_TargetNumberOfSessions = "msevtmgt_targetnumberofsessions";
			public const string msevtmgt_TrackCode = "msevtmgt_trackcode";
			public const string msevtmgt_TrackGoal = "msevtmgt_trackgoal";
			public const string msevtmgt_TrackType = "msevtmgt_tracktype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_sessiontrack";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11116;
		public const string EntityCollectionSchemaName = "msevtmgt_SessionTracks";
		public const string EntityDisplayCollectionName = "Session Tracks";
		public const string DisplayName = "Session Track";
		public const string EntitySetName = "msevtmgt_sessiontracks";
		public const string EntityLogicalCollectionName = "msevtmgt_sessiontracks";
		public const string EntityPrimaryIdAttribute = "msevtmgt_sessiontrackid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_SessionTrack";
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack(Guid msevtmgt_SessionTrackId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_SessionTrackId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_SessionTrack"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_SessionTrack"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_SessionTrack(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_SessionTrack"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_SessionTrack(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_SessionTrack(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Audience type</para>
		/// <para><strong>Description</strong>: The intended audience for the session track</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_AudienceType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_AudienceType? msevtmgt_AudienceType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_AudienceType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_AudienceType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_AudienceType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_AudienceType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Description); }
			set { Entity.Attributes[Fields.msevtmgt_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Description</strong>: Unique identifier for the event associated with the session track</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msevtmgt_event"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_EventId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_EventId); }
			set { Entity.Attributes[Fields.msevtmgt_EventId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Industry</para>
		/// <para><strong>Description</strong>: Industry of the session track</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_IndustryType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_IndustryType? msevtmgt_IndustryType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_IndustryType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_IndustryType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_IndustryType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_IndustryType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keywords</para>
		/// <para><strong>Description</strong>: Keywords for the session track</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Keywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Keywords); }
			set { Entity.Attributes[Fields.msevtmgt_Keywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Name); }
			set { Entity.Attributes[Fields.msevtmgt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of registrations</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_numberofregistrations
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_numberofregistrations); }
			set { Entity.Attributes[Fields.msevtmgt_numberofregistrations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publish status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_PublishStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_PublishStatus.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_PublishStatus? msevtmgt_PublishStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PublishStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_PublishStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PublishStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PublishStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sessions in this track</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_SessionsInTrack
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_SessionsInTrack); }
			set { Entity.Attributes[Fields.msevtmgt_SessionsInTrack] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session track</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_SessionTrackId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_SessionTrackId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target number of sessions</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_TargetNumberOfSessions
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_TargetNumberOfSessions); }
			set { Entity.Attributes[Fields.msevtmgt_TargetNumberOfSessions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Track code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_TrackCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_TrackCode); }
			set { Entity.Attributes[Fields.msevtmgt_TrackCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Track goal</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_TrackGoal
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_TrackGoal); }
			set { Entity.Attributes[Fields.msevtmgt_TrackGoal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Track type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_TrackType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_TrackType? msevtmgt_TrackType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_TrackType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.msevtmgt_TrackType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TrackType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TrackType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the session track</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the session track</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_SessionTrackOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}