//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets
{
	public enum msdyn_DistributeTo
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Queue = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sellers</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Sellers = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Team</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Team = 1
	}
	public enum msdyn_DistributionType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Add to any one queue at random</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Add_to_any_one_queue_at_random = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign to any one team at random</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Assign_to_any_one_team_at_random = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Don't add to any queue</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Dont_add_to_any_queue = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Don't assign to any team</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Dont_assign_to_any_team = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Load Balancing</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Load_Balancing = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: RoundRobin</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		RoundRobin = 0
	}
	public enum msdyn_matchtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Any Sellers</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Any_Sellers = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Filter using Attributes</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Filter_using_Attributes = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Specific List</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Specific_List = 1
	}
	public enum msdyn_objecttypecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Lead = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Opportunity = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Other = 5
	}
	public enum msdyn_triggertype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Create</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Entity_Create = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: FieldUpdate</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FieldUpdate = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_assignmentrule : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_assignmentruleId = "msdyn_assignmentruleid";
			public const string msdyn_assignmentwindow = "msdyn_assignmentwindow";
			public const string msdyn_attributefilter = "msdyn_attributefilter";
			public const string msdyn_Description = "msdyn_description";
			public const string msdyn_DistributeTo = "msdyn_distributeto";
			public const string msdyn_distributewithavailability = "msdyn_distributewithavailability";
			public const string msdyn_distributewithcapacity = "msdyn_distributewithcapacity";
			public const string msdyn_distributewithrecordcreation = "msdyn_distributewithrecordcreation";
			public const string msdyn_DistributionType = "msdyn_distributiontype";
			public const string msdyn_entityfilter = "msdyn_entityfilter";
			public const string msdyn_evaluateentitymatchindataverse = "msdyn_evaluateentitymatchindataverse";
			public const string msdyn_evaluateownermatchindataverse = "msdyn_evaluateownermatchindataverse";
			public const string msdyn_evaluationorder = "msdyn_evaluationorder";
			public const string msdyn_matchedrecords = "msdyn_matchedrecords";
			public const string msdyn_matchtype = "msdyn_matchtype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_objecttype = "msdyn_objecttype";
			public const string msdyn_objecttypecode = "msdyn_objecttypecode";
			public const string msdyn_recordcreationwindow = "msdyn_recordcreationwindow";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyn_sellerfilter = "msdyn_sellerfilter";
			public const string msdyn_SpecificSellersOrTeams = "msdyn_SpecificSellersOrTeams";
			public const string msdyn_triggertype = "msdyn_triggertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_assignmentrule";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10830;
		public const string EntityCollectionSchemaName = "msdyn_assignmentrules";
		public const string EntityDisplayCollectionName = "assignmentrules";
		public const string DisplayName = "Assignment Rule";
		public const string EntitySetName = "msdyn_assignmentrules";
		public const string EntityLogicalCollectionName = "msdyn_assignmentrules";
		public const string EntityPrimaryIdAttribute = "msdyn_assignmentruleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_assignmentrule";
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Guid msdyn_assignmentruleId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_assignmentruleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_assignmentrule"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_assignmentrule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_assignmentrule(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_assignmentrule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_assignmentrule(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_assignmentrule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Rule</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_assignmentruleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_assignmentruleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment due in</para>
		/// <para><strong>Description</strong>: Assignment due in</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 120</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_assignmentwindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_assignmentwindow); }
			set { Entity.Attributes[Fields.msdyn_assignmentwindow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attribute Filter</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_attributefilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_attributefilter); }
			set { Entity.Attributes[Fields.msdyn_attributefilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Description); }
			set { Entity.Attributes[Fields.msdyn_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign to Sellers, Teams or Queues.</para>
		/// <para><strong>Description</strong>: Setting depecting if the assignment is done for a team, queue or a seller.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributeTo"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributeTo.Sellers"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributeTo? msdyn_DistributeTo
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DistributeTo);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributeTo)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DistributeTo] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DistributeTo] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DistributeWithAvailability</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_distributewithavailability
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_distributewithavailability); }
			set { Entity.Attributes[Fields.msdyn_distributewithavailability] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DistributeWithCapacity</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_distributewithcapacity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_distributewithcapacity); }
			set { Entity.Attributes[Fields.msdyn_distributewithcapacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CheckEligibilityByRecordAge</para>
		/// <para><strong>Description</strong>: CheckEligibilityByRecordAge</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_distributewithrecordcreation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_distributewithrecordcreation); }
			set { Entity.Attributes[Fields.msdyn_distributewithrecordcreation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DistributionType</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributionType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributionType.RoundRobin"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributionType? msdyn_DistributionType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DistributionType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_DistributionType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DistributionType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DistributionType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Filter</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_entityfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_entityfilter); }
			set { Entity.Attributes[Fields.msdyn_entityfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluate entity match in Dataverse</para>
		/// <para><strong>Description</strong>: Value indicating if the entity match for the rule needs to be evaluated within Dataverse</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_evaluateentitymatchindataverse
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_evaluateentitymatchindataverse); }
			set { Entity.Attributes[Fields.msdyn_evaluateentitymatchindataverse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluate owner match in Dataverse</para>
		/// <para><strong>Description</strong>: Value indicating if the owner match for the rule needs to be evaluated within Dataverse</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_evaluateownermatchindataverse
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_evaluateownermatchindataverse); }
			set { Entity.Attributes[Fields.msdyn_evaluateownermatchindataverse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EvaluationOrder</para>
		/// <para><strong>Description</strong>: Evaluation order of the rule</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_evaluationorder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_evaluationorder); }
			set { Entity.Attributes[Fields.msdyn_evaluationorder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Records Routed</para>
		/// <para><strong>Description</strong>: Records routed by this rule</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_matchedrecords
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_matchedrecords); }
			set { Entity.Attributes[Fields.msdyn_matchedrecords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MatchType</para>
		/// <para><strong>Description</strong>: Setting depecting if the seller or team assignment needs to be done either by filtering attributes or by specifying sellers or teams</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_matchtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_matchtype.Filter_using_Attributes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_matchtype? msdyn_matchtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_matchtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_matchtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_matchtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_matchtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Rule</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference to the related entity logical name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_objecttype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_objecttype); }
			set { Entity.Attributes[Fields.msdyn_objecttype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_objecttypecode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_objecttypecode.Lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_objecttypecode? msdyn_objecttypecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_objecttypecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_objecttypecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_objecttypecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_objecttypecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment due in</para>
		/// <para><strong>Description</strong>: Assignment due in</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 120</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_recordcreationwindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_recordcreationwindow); }
			set { Entity.Attributes[Fields.msdyn_recordcreationwindow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Seller Filter</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sellerfilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sellerfilter); }
			set { Entity.Attributes[Fields.msdyn_sellerfilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sellers or Team.</para>
		/// <para><strong>Description</strong>: List of specific sellers or teams that needs to be assigned.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SpecificSellersOrTeams
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SpecificSellersOrTeams); }
			set { Entity.Attributes[Fields.msdyn_SpecificSellersOrTeams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TriggerType</para>
		/// <para><strong>Description</strong>: Trigger when the rule needs to be evaluated</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_triggertype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_triggertype.Entity_Create"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_triggertype? msdyn_triggertype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_triggertype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.msdyn_triggertype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_triggertype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_triggertype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Assignment Rule</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Assignment Rule</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_assignmentruleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}