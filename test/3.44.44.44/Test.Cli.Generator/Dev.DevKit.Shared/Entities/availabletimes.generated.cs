//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.availabletimesOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class availabletimes : EntityBase
	{
		public struct Fields
		{
			public const string availabletimesId = "availabletimesid";
			public const string Name = "name";
			public const string Resources = "resources";
			public const string ResourcesJson = "resourcesJson";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledEndLocalTime = "scheduledendlocaltime";
			public const string ScheduledStart = "scheduledstart";
			public const string ScheduledStartLocalTime = "scheduledstartlocaltime";
			public const string Site = "site";
			public const string SiteId = "siteid";
		}
		public const string EntityLogicalName = "availabletimes";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10370;
		public const string EntityCollectionSchemaName = "availabletimeses";
		public const string EntityDisplayCollectionName = "Available Times Collection";
		public const string DisplayName = "Available Times";
		public const string EntitySetName = "availabletimescollection";
		public const string EntityLogicalCollectionName = "availabletimeses";
		public const string EntityPrimaryIdAttribute = "availabletimesid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "availabletimes";
		[DebuggerNonUserCode()]
		public availabletimes()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public availabletimes(Guid availabletimesId)
		{
			Entity = new Entity(EntityLogicalName, availabletimesId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public availabletimes(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="availabletimes"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public availabletimes(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="availabletimes"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public availabletimes(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new availabletimes(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="availabletimes"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public availabletimes(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new availabletimes(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public availabletimes(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AvailableTimes</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid availabletimesId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.availabletimesId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the available times virtual entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resources</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Resources
		{
			get { return Entity.GetAttributeValue<string>(Fields.Resources); }
			set { Entity.Attributes[Fields.Resources] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resources IDs</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ResourcesJson
		{
			get { return Entity.GetAttributeValue<string>(Fields.ResourcesJson); }
			set { Entity.Attributes[Fields.ResourcesJson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled End UTC time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled End</para>
		/// <para><strong>Description</strong>: Scheduled End Local Time</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScheduledEndLocalTime
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScheduledEndLocalTime); }
			set { Entity.Attributes[Fields.ScheduledEndLocalTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Start UTC time</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Start</para>
		/// <para><strong>Description</strong>: Scheduled Start Local Time</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScheduledStartLocalTime
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScheduledStartLocalTime); }
			set { Entity.Attributes[Fields.ScheduledStartLocalTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Site</para>
		/// <para><strong>Description</strong>: Site</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Site
		{
			get { return Entity.GetAttributeValue<string>(Fields.Site); }
			set { Entity.Attributes[Fields.Site] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Site Identifier</para>
		/// <para><strong>Description</strong>: Site Identifier</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SiteId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SiteId); }
			set { Entity.Attributes[Fields.SiteId] = value; }
		}
	}
}