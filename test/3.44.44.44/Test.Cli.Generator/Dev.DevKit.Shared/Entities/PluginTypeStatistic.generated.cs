//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:44
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PluginTypeStatisticOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PluginTypeStatistic : EntityBase
	{
		public struct Fields
		{
			public const string AverageExecuteTimeInMilliseconds = "averageexecutetimeinmilliseconds";
			public const string CrashContributionPercent = "crashcontributionpercent";
			public const string CrashCount = "crashcount";
			public const string CrashPercent = "crashpercent";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExecuteCount = "executecount";
			public const string FailureCount = "failurecount";
			public const string FailurePercent = "failurepercent";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string PluginTypeId = "plugintypeid";
			public const string PluginTypeStatisticId = "plugintypestatisticid";
			public const string TerminateCpuContributionPercent = "terminatecpucontributionpercent";
			public const string TerminateHandlesContributionPercent = "terminatehandlescontributionpercent";
			public const string TerminateMemoryContributionPercent = "terminatememorycontributionpercent";
			public const string TerminateOtherContributionPercent = "terminateothercontributionpercent";
		}
		public const string EntityLogicalName = "plugintypestatistic";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4603;
		public const string EntityCollectionSchemaName = "PluginTypeStatistics";
		public const string EntityDisplayCollectionName = "Plug-in Type Statistics";
		public const string DisplayName = "Plug-in Type Statistic";
		public const string EntitySetName = "plugintypestatistics";
		public const string EntityLogicalCollectionName = "plugintypestatistics";
		public const string EntityPrimaryIdAttribute = "plugintypestatisticid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "PluginTypeStatistic";
		[DebuggerNonUserCode()]
		public PluginTypeStatistic()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginTypeStatistic(Guid PluginTypeStatisticId)
		{
			Entity = new Entity(EntityLogicalName, PluginTypeStatisticId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginTypeStatistic(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginTypeStatistic"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PluginTypeStatistic(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginTypeStatistic"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PluginTypeStatistic(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PluginTypeStatistic(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PluginTypeStatistic"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PluginTypeStatistic(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PluginTypeStatistic(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PluginTypeStatistic(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The average execution time</para>
		/// <para><strong>Description</strong>: The average execution time (in milliseconds) for the plug-in type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AverageExecuteTimeInMilliseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AverageExecuteTimeInMilliseconds); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percentage contribution to crashes</para>
		/// <para><strong>Description</strong>: The plug-in type percentage contribution to crashes.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CrashContributionPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CrashContributionPercent); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of times crashed</para>
		/// <para><strong>Description</strong>: Number of times the plug-in type has crashed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CrashCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CrashCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percentage of crashes</para>
		/// <para><strong>Description</strong>: Percentage of crashes for the plug-in type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CrashPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CrashPercent); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the plug-in type statistic.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the plug-in type statistic was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the plug-in type statistic.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Execution Count</para>
		/// <para><strong>Description</strong>: Number of times the plug-in type has been executed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ExecuteCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ExecuteCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure Count</para>
		/// <para><strong>Description</strong>: Number of times the plug-in type has failed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure Percent</para>
		/// <para><strong>Description</strong>: Percentage of failures for the plug-in type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailurePercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailurePercent); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the plug-in type statistic.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the plug-in type statistic was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the plug-in type statistic.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the organization with which the plug-in type statistic is associated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plugin Type</para>
		/// <para><strong>Description</strong>: Unique identifier of the plug-in type associated with this plug-in type statistic.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="plugintype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PluginTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PluginTypeId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the plug-in type statistic.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PluginTypeStatisticId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Terminate CPU Contribution Percent</para>
		/// <para><strong>Description</strong>: The plug-in type percentage contribution to Worker process termination due to excessive CPU usage.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TerminateCpuContributionPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TerminateCpuContributionPercent); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Terminate Handles Contribution Percent</para>
		/// <para><strong>Description</strong>: The plug-in type percentage contribution to Worker process termination due to excessive handle usage.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TerminateHandlesContributionPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TerminateHandlesContributionPercent); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Terminate Memory Contribution Percent</para>
		/// <para><strong>Description</strong>: The plug-in type percentage contribution to Worker process termination due to excessive memory usage.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TerminateMemoryContributionPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TerminateMemoryContributionPercent); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Terminate Other Contribution Percent</para>
		/// <para><strong>Description</strong>: The plug-in type percentage contribution to Worker process termination due to unknown reasons.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TerminateOtherContributionPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TerminateOtherContributionPercent); }
		}
	}
}