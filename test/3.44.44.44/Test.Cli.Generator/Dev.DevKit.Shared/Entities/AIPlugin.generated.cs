//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.AIPluginOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum PluginSubType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Certified Connector</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Certified_Connector = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversational</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Conversational = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Api</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Custom_Api = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Connector</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Custom_Connector = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dataverse</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dataverse = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Flow = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Prompt</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Prompt = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: QA</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		QA = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rest Api</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Rest_Api = 7
	}
	public enum PluginType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Connector</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Connector = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomConnector</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		CustomConnector = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dataverse</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dataverse = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Flow = 3
	}
	public enum SchemaVersion
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 1.0</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		_10 = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class AIPlugin : EntityBase
	{
		public struct Fields
		{
			public const string AIPluginId = "aipluginid";
			public const string AIPluginTitle = "aiplugintitle";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string Connector = "connector";
			public const string ContactEmail = "contactemail";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string HumanDescription = "humandescription";
			public const string HumanName = "humanname";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string LegalInfoUrl = "legalinfourl";
			public const string ModelDescription = "modeldescription";
			public const string ModelName = "modelname";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PluginAuthId = "pluginauthid";
			public const string PluginSubType = "pluginsubtype";
			public const string PluginType = "plugintype";
			public const string PrivacyPolicyUrl = "privacypolicyurl";
			public const string SchemaVersion = "schemaversion";
			public const string SharedConnector = "sharedconnector";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UpsertSwagger = "upsertswagger";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "aiplugin";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10126;
		public const string EntityCollectionSchemaName = "AIPlugins";
		public const string EntityDisplayCollectionName = "AIPlugins";
		public const string DisplayName = "AIPlugin";
		public const string EntitySetName = "aiplugins";
		public const string EntityLogicalCollectionName = "aiplugins";
		public const string EntityPrimaryIdAttribute = "aipluginid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "AIPlugin";
		[DebuggerNonUserCode()]
		public AIPlugin()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AIPlugin(Guid AIPluginId)
		{
			Entity = new Entity(EntityLogicalName, AIPluginId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AIPlugin(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AIPlugin"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public AIPlugin(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AIPlugin"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public AIPlugin(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new AIPlugin(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AIPlugin"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public AIPlugin(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new AIPlugin(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AIPlugin(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AIPlugin</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AIPluginId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AIPluginId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Lookup</strong>: <see cref="aiplugintitle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AIPluginTitle
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AIPluginTitle); }
			set { Entity.Attributes[Fields.AIPluginTitle] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AIPluginOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AIPluginOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connector</para>
		/// <para><strong>Description</strong>: Connector reference for AIPlugin</para>
		/// <para><strong>Lookup</strong>: <see cref="connector"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference Connector
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.Connector); }
			set { Entity.Attributes[Fields.Connector] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ContactEmail</para>
		/// <para><strong>Description</strong>: Contact Email</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContactEmail
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContactEmail); }
			set { Entity.Attributes[Fields.ContactEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HumanDescription</para>
		/// <para><strong>Description</strong>: Human-readable description of the Plugin</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HumanDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.HumanDescription); }
			set { Entity.Attributes[Fields.HumanDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HumanName</para>
		/// <para><strong>Description</strong>: Human-readable name for the model</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HumanName
		{
			get { return Entity.GetAttributeValue<string>(Fields.HumanName); }
			set { Entity.Attributes[Fields.HumanName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LegalInfoUrl</para>
		/// <para><strong>Description</strong>: Legal Info Url</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LegalInfoUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.LegalInfoUrl); }
			set { Entity.Attributes[Fields.LegalInfoUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelDescription</para>
		/// <para><strong>Description</strong>: Description better tailored to the model, such as token context length considerations or keyword usage for improved plugin prompting.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModelDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModelDescription); }
			set { Entity.Attributes[Fields.ModelDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModelName</para>
		/// <para><strong>Description</strong>: Model name for the plugin</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModelName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModelName); }
			set { Entity.Attributes[Fields.ModelName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PluginAuthId</para>
		/// <para><strong>Description</strong>: Auth reference for AIPlugin</para>
		/// <para><strong>Lookup</strong>: <see cref="aipluginauth"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PluginAuthId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PluginAuthId); }
			set { Entity.Attributes[Fields.PluginAuthId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PluginSubType</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.PluginSubType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AIPluginOptionSets.PluginSubType? PluginSubType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PluginSubType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AIPluginOptionSets.PluginSubType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PluginSubType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PluginSubType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PluginType</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.PluginType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AIPluginOptionSets.PluginType? PluginType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PluginType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AIPluginOptionSets.PluginType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PluginType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PluginType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PrivacyPolicyUrl</para>
		/// <para><strong>Description</strong>: Privacy Policy Url</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrivacyPolicyUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrivacyPolicyUrl); }
			set { Entity.Attributes[Fields.PrivacyPolicyUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SchemaVersion</para>
		/// <para><strong>Description</strong>: SchemaVersion of OpenAI Manifest</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.SchemaVersion"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.SchemaVersion._10"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AIPluginOptionSets.SchemaVersion? SchemaVersion
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SchemaVersion);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AIPluginOptionSets.SchemaVersion)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SchemaVersion] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SchemaVersion] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SharedConnector</para>
		/// <para><strong>Description</strong>: SharedConnector Description</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SharedConnector
		{
			get { return Entity.GetAttributeValue<string>(Fields.SharedConnector); }
			set { Entity.Attributes[Fields.SharedConnector] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the AIPlugin</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AIPluginOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AIPluginOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the AIPlugin</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.AIPluginOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.AIPluginOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.AIPluginOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UpsertSwagger</para>
		/// <para><strong>Description</strong>: Swagger value that is upserted to generated plugin definition, used to provide override for properties not exposed as table/columns.Example:{  &quot;info&quot;: {      &quot;x-ms-keywords&quot;: [ &quot;sales&quot;, &quot;support&quot; ]   }}Adds x-ms-keywords in info property.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UpsertSwagger
		{
			get { return Entity.GetAttributeValue<string>(Fields.UpsertSwagger); }
			set { Entity.Attributes[Fields.UpsertSwagger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}