//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets
{
	public enum msdyn_SystemStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 690,970,005</para>
		/// </summary>
		Canceled = 690_970_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 690,970,003</para>
		/// </summary>
		Completed = 690_970_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		In_Progress = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Posted</para>
		/// <para><strong>Value</strong>: 690,970,004</para>
		/// </summary>
		Posted = 690_970_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Scheduled = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unscheduled</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Unscheduled = 690_970_000
	}
	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Facility = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Onsite</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Onsite = 690_970_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_workorder : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Address1 = "msdyn_address1";
			public const string msdyn_Address2 = "msdyn_address2";
			public const string msdyn_Address3 = "msdyn_address3";
			public const string msdyn_AddressName = "msdyn_addressname";
			public const string msdyn_Agreement = "msdyn_agreement";
			public const string msdyn_AutoNumbering = "msdyn_autonumbering";
			public const string msdyn_BillingAccount = "msdyn_billingaccount";
			public const string msdyn_BookingSummary = "msdyn_bookingsummary";
			public const string msdyn_ChildIndex = "msdyn_childindex";
			public const string msdyn_City = "msdyn_city";
			public const string msdyn_ClosedBy = "msdyn_closedby";
			public const string msdyn_completedon = "msdyn_completedon";
			public const string msdyn_CostNTEPercent = "msdyn_costntepercent";
			public const string msdyn_Country = "msdyn_country";
			public const string msdyn_CustomerAsset = "msdyn_customerasset";
			public const string msdyn_DateWindowEnd = "msdyn_datewindowend";
			public const string msdyn_DateWindowStart = "msdyn_datewindowstart";
			public const string msdyn_DisplayAddress = "msdyn_displayaddress";
			public const string msdyn_EstimateSubtotalAmount = "msdyn_estimatesubtotalamount";
			public const string msdyn_estimatesubtotalamount_Base = "msdyn_estimatesubtotalamount_base";
			public const string msdyn_firstarrivedon = "msdyn_firstarrivedon";
			public const string msdyn_FollowUpNote = "msdyn_followupnote";
			public const string msdyn_FollowUpRequired = "msdyn_followuprequired";
			public const string msdyn_FunctionalLocation = "msdyn_functionallocation";
			public const string msdyn_Instructions = "msdyn_instructions";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_IoTAlert = "msdyn_iotalert";
			public const string msdyn_IsFollowUp = "msdyn_isfollowup";
			public const string msdyn_IsMobile = "msdyn_ismobile";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_mapcontrol = "msdyn_mapcontrol";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_nottoexceedcostamount = "msdyn_nottoexceedcostamount";
			public const string msdyn_nottoexceedcostamount_Base = "msdyn_nottoexceedcostamount_base";
			public const string msdyn_nottoexceedpriceamount = "msdyn_nottoexceedpriceamount";
			public const string msdyn_nottoexceedpriceamount_Base = "msdyn_nottoexceedpriceamount_base";
			public const string msdyn_OpportunityId = "msdyn_opportunityid";
			public const string msdyn_ParentWorkOrder = "msdyn_parentworkorder";
			public const string msdyn_phoneNumber = "msdyn_phoneNumber";
			public const string msdyn_PostalCode = "msdyn_postalcode";
			public const string msdyn_PreferredResource = "msdyn_preferredresource";
			public const string msdyn_PriceList = "msdyn_pricelist";
			public const string msdyn_PriceNTEPercent = "msdyn_pricentepercent";
			public const string msdyn_PrimaryIncidentDescription = "msdyn_primaryincidentdescription";
			public const string msdyn_PrimaryIncidentEstimatedDuration = "msdyn_primaryincidentestimatedduration";
			public const string msdyn_PrimaryIncidentType = "msdyn_primaryincidenttype";
			public const string msdyn_PrimaryResolution = "msdyn_primaryresolution";
			public const string msdyn_Priority = "msdyn_priority";
			public const string msdyn_productsservicescost = "msdyn_productsservicescost";
			public const string msdyn_productsservicescost_Base = "msdyn_productsservicescost_base";
			public const string msdyn_productsservicesestimatedcost = "msdyn_productsservicesestimatedcost";
			public const string msdyn_productsservicesestimatedcost_Base = "msdyn_productsservicesestimatedcost_base";
			public const string msdyn_ReportedByContact = "msdyn_reportedbycontact";
			public const string msdyn_ServiceAccount = "msdyn_serviceaccount";
			public const string msdyn_ServiceRequest = "msdyn_servicerequest";
			public const string msdyn_ServiceTerritory = "msdyn_serviceterritory";
			public const string msdyn_StateOrProvince = "msdyn_stateorprovince";
			public const string msdyn_SubStatus = "msdyn_substatus";
			public const string msdyn_SubtotalAmount = "msdyn_subtotalamount";
			public const string msdyn_subtotalamount_Base = "msdyn_subtotalamount_base";
			public const string msdyn_SupportContact = "msdyn_supportcontact";
			public const string msdyn_SystemStatus = "msdyn_systemstatus";
			public const string msdyn_Taxable = "msdyn_taxable";
			public const string msdyn_TaxCode = "msdyn_taxcode";
			public const string msdyn_TimeClosed = "msdyn_timeclosed";
			public const string msdyn_TimeFromPromised = "msdyn_timefrompromised";
			public const string msdyn_TimeGroup = "msdyn_timegroup";
			public const string msdyn_TimeGroupDetailSelected = "msdyn_timegroupdetailselected";
			public const string msdyn_TimeToPromised = "msdyn_timetopromised";
			public const string msdyn_TimeWindowEnd = "msdyn_timewindowend";
			public const string msdyn_TimeWindowStart = "msdyn_timewindowstart";
			public const string msdyn_TotalAmount = "msdyn_totalamount";
			public const string msdyn_totalamount_Base = "msdyn_totalamount_base";
			public const string msdyn_totalestimatedaftertaxprice = "msdyn_totalestimatedaftertaxprice";
			public const string msdyn_totalestimatedaftertaxprice_Base = "msdyn_totalestimatedaftertaxprice_base";
			public const string msdyn_totalestimatedduration = "msdyn_totalestimatedduration";
			public const string msdyn_TotalSalesTax = "msdyn_totalsalestax";
			public const string msdyn_totalsalestax_Base = "msdyn_totalsalestax_base";
			public const string msdyn_Trade = "msdyn_trade";
			public const string msdyn_workhourtemplate = "msdyn_workhourtemplate";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_workorderarrivaltimekpiid = "msdyn_workorderarrivaltimekpiid";
			public const string msdyn_workorderId = "msdyn_workorderid";
			public const string msdyn_workorderresolutionkpiid = "msdyn_workorderresolutionkpiid";
			public const string msdyn_WorkOrderSummary = "msdyn_workordersummary";
			public const string msdyn_WorkOrderType = "msdyn_workordertype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_workorder";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11705;
		public const string EntityCollectionSchemaName = "msdyn_workorders";
		public const string EntityDisplayCollectionName = "Work Orders";
		public const string DisplayName = "Work Order";
		public const string EntitySetName = "msdyn_workorders";
		public const string EntityLogicalCollectionName = "msdyn_workorders";
		public const string EntityPrimaryIdAttribute = "msdyn_workorderid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_workorder";
		[DebuggerNonUserCode()]
		public msdyn_workorder()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_workorder(Guid msdyn_workorderId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_workorderId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_workorder(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_workorder"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_workorder(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_workorder"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_workorder(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_workorder(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_workorder"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_workorder(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_workorder(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_workorder(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Shows the sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 1</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address1); }
			set { Entity.Attributes[Fields.msdyn_Address1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 2</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address2); }
			set { Entity.Attributes[Fields.msdyn_Address2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Street 3</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Address3
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Address3); }
			set { Entity.Attributes[Fields.msdyn_Address3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AddressName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AddressName); }
			set { Entity.Attributes[Fields.msdyn_AddressName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agreement</para>
		/// <para><strong>Description</strong>: Shows the agreement linked to this work order.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_agreement"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Agreement
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Agreement); }
			set { Entity.Attributes[Fields.msdyn_Agreement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-Numbering</para>
		/// <para><strong>Description</strong>: Internal field used to generate the next name upon entity creation. It is optionally copied to the msdyn_name field.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AutoNumbering
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AutoNumbering); }
			set { Entity.Attributes[Fields.msdyn_AutoNumbering] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing Account</para>
		/// <para><strong>Description</strong>: Account to be billed. If a billing account has been set on service account it will be populated by default. Otherwise, the billing account will be the same as the service account.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BillingAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BillingAccount); }
			set { Entity.Attributes[Fields.msdyn_BillingAccount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booked Resources</para>
		/// <para><strong>Description</strong>: This column is used internally, and also used to display the bookable resource bookings associated with a work order in the FieldService.WorkOrderList PCF component.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingSummary); }
			set { Entity.Attributes[Fields.msdyn_BookingSummary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Child Index</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ChildIndex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ChildIndex); }
			set { Entity.Attributes[Fields.msdyn_ChildIndex] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_City); }
			set { Entity.Attributes[Fields.msdyn_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed By</para>
		/// <para><strong>Description</strong>: The user that last closed this work order</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ClosedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ClosedBy); }
			set { Entity.Attributes[Fields.msdyn_ClosedBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed On</para>
		/// <para><strong>Description</strong>: When Bookings are used on a Work Order, this field is auto-populated based on the latest End Time from the related Bookings. Otherwise, this field is populated based on the change of System Status.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_completedon); }
			set { Entity.Attributes[Fields.msdyn_completedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost not-to-exceed</para>
		/// <para><strong>Description</strong>: Indicates the percentage proximity or overage of the work order cost based on applied Cost not-to-exceed (rounded up to the nearest whole number).</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_CostNTEPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_CostNTEPercent); }
			set { Entity.Attributes[Fields.msdyn_CostNTEPercent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Country); }
			set { Entity.Attributes[Fields.msdyn_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Incident Customer Asset</para>
		/// <para><strong>Description</strong>: Customer Asset related to this incident reported</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_customerasset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomerAsset
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomerAsset); }
			set { Entity.Attributes[Fields.msdyn_CustomerAsset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Window End</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_DateWindowEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Window Start</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_DateWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_DateWindowStart); }
			set { Entity.Attributes[Fields.msdyn_DateWindowStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Address</para>
		/// <para><strong>Description</strong>: Combined address field suitable for display</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Power-Fx Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_DisplayAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_DisplayAddress); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Subtotal Amount</para>
		/// <para><strong>Description</strong>: Enter the summary of total estimated billing amount for this work order</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_EstimateSubtotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_EstimateSubtotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_EstimateSubtotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_EstimateSubtotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Estimate Subtotal Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the estimate subtotal amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_estimatesubtotalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_estimatesubtotalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Arrived On</para>
		/// <para><strong>Description</strong>: When Bookings are used on a Work Order, this field is auto-populated based on the earliest Actual Arrival Time from the related Bookings.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_firstarrivedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_firstarrivedon); }
			set { Entity.Attributes[Fields.msdyn_firstarrivedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow Up Note (Deprecated)</para>
		/// <para><strong>Description</strong>: Indicate the details of the follow up work</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FollowUpNote
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FollowUpNote); }
			set { Entity.Attributes[Fields.msdyn_FollowUpNote] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow Up Required (Deprecated)</para>
		/// <para><strong>Description</strong>: Allows indication if follow up work is required for a work order.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_FollowUpRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_FollowUpRequired); }
			set { Entity.Attributes[Fields.msdyn_FollowUpRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Functional Location</para>
		/// <para><strong>Description</strong>: Workorder&apos;s functional location</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_functionallocation"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_FunctionalLocation
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_FunctionalLocation); }
			set { Entity.Attributes[Fields.msdyn_FunctionalLocation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Instructions</para>
		/// <para><strong>Description</strong>: Shows instructions for booked resources. By default, this information is taken from the work order instructions field on the service account.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Instructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Instructions); }
			set { Entity.Attributes[Fields.msdyn_Instructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IoT Alert</para>
		/// <para><strong>Description</strong>: The iot alert which initiated this work order.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_iotalert"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IoTAlert
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IoTAlert); }
			set { Entity.Attributes[Fields.msdyn_IoTAlert] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is FollowUp (Deprecated)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsFollowUp
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsFollowUp); }
			set { Entity.Attributes[Fields.msdyn_IsFollowUp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Mobile</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsMobile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsMobile); }
			set { Entity.Attributes[Fields.msdyn_IsMobile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: This field should only be used to load the custom map control</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_mapcontrol
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_mapcontrol); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Number</para>
		/// <para><strong>Description</strong>: Enter the name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost not-to-exceed</para>
		/// <para><strong>Description</strong>: The value of not-to-exceed cost for the work order in base currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_nottoexceedcostamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_nottoexceedcostamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_nottoexceedcostamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_nottoexceedcostamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost not-to-exceed (Base)</para>
		/// <para><strong>Description</strong>: Value of the Cost not-to-exceed in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_nottoexceedcostamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_nottoexceedcostamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price not-to-exceed</para>
		/// <para><strong>Description</strong>: The value of not-to-exceed price for the work order in base currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_nottoexceedpriceamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_nottoexceedpriceamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_nottoexceedpriceamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_nottoexceedpriceamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price not-to-exceed (Base)</para>
		/// <para><strong>Description</strong>: Value of the Price not-to-exceed in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_nottoexceedpriceamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_nottoexceedpriceamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity</para>
		/// <para><strong>Description</strong>: Unique identifier for Opportunity associated with Work Order.</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OpportunityId); }
			set { Entity.Attributes[Fields.msdyn_OpportunityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Work Order</para>
		/// <para><strong>Description</strong>: Unique identifier for Work Order associated with Work Order.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ParentWorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ParentWorkOrder); }
			set { Entity.Attributes[Fields.msdyn_ParentWorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Phone Number</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_phoneNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_phoneNumber); }
			set { Entity.Attributes[Fields.msdyn_phoneNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Postal Code</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PostalCode); }
			set { Entity.Attributes[Fields.msdyn_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preferred Resource (Deprecated)</para>
		/// <para><strong>Description</strong>: The customer Preferred Resource to work on this job. Should be taken into consideration while scheduling resources</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PreferredResource
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PreferredResource); }
			set { Entity.Attributes[Fields.msdyn_PreferredResource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Price List that controls pricing for products / services added to this work order. By default the system will use the Price List specified on the account</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PriceList
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PriceList); }
			set { Entity.Attributes[Fields.msdyn_PriceList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price not-to-exceed</para>
		/// <para><strong>Description</strong>: Indicates the percentage proximity or overage of the work order price based on applied Price not-to-exceed (rounded up to the nearest whole number).</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PriceNTEPercent
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PriceNTEPercent); }
			set { Entity.Attributes[Fields.msdyn_PriceNTEPercent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Incident Description</para>
		/// <para><strong>Description</strong>: Incident description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PrimaryIncidentDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PrimaryIncidentDescription); }
			set { Entity.Attributes[Fields.msdyn_PrimaryIncidentDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Incident Estimated Duration</para>
		/// <para><strong>Description</strong>: Shows the time estimated to resolve this incident.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PrimaryIncidentEstimatedDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PrimaryIncidentEstimatedDuration); }
			set { Entity.Attributes[Fields.msdyn_PrimaryIncidentEstimatedDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Incident Type</para>
		/// <para><strong>Description</strong>: Primary incident type reported</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_incidenttype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PrimaryIncidentType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PrimaryIncidentType); }
			set { Entity.Attributes[Fields.msdyn_PrimaryIncidentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Resolution</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_resolution"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PrimaryResolution
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PrimaryResolution); }
			set { Entity.Attributes[Fields.msdyn_PrimaryResolution] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Priority of the Work Order. To be taken into consideration while scheduling resources</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_priority"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Priority
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Priority); }
			set { Entity.Attributes[Fields.msdyn_Priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cost</para>
		/// <para><strong>Description</strong>: The total actual cost of the products and services</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_productsservicescost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_productsservicescost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_productsservicescost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_productsservicescost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Cost (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Cost in base currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_productsservicescost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_productsservicescost_Base);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_productsservicescost_Base] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_productsservicescost_Base] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Estimated Cost</para>
		/// <para><strong>Description</strong>: The total estimated cost of the products and services</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_productsservicesestimatedcost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_productsservicesestimatedcost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_productsservicesestimatedcost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_productsservicesestimatedcost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Estimated Cost (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Estimated Cost in base currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_productsservicesestimatedcost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_productsservicesestimatedcost_Base);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_productsservicesestimatedcost_Base] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_productsservicesestimatedcost_Base] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reported By Contact</para>
		/// <para><strong>Description</strong>: The contact that reported this Work Order</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ReportedByContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ReportedByContact); }
			set { Entity.Attributes[Fields.msdyn_ReportedByContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Account</para>
		/// <para><strong>Description</strong>: Account to be serviced</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceAccount); }
			set { Entity.Attributes[Fields.msdyn_ServiceAccount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case</para>
		/// <para><strong>Description</strong>: Case of which this work order originates from</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceRequest
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceRequest); }
			set { Entity.Attributes[Fields.msdyn_ServiceRequest] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Territory</para>
		/// <para><strong>Description</strong>: The service territory this work order relates to. By default this will be set to the Service Territory defined on the service account</para>
		/// <para><strong>Lookup</strong>: <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ServiceTerritory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_ServiceTerritory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State Or Province</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_StateOrProvince); }
			set { Entity.Attributes[Fields.msdyn_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Substatus</para>
		/// <para><strong>Description</strong>: Work Order subsstatus</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workordersubstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SubStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SubStatus); }
			set { Entity.Attributes[Fields.msdyn_SubStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtotal Amount</para>
		/// <para><strong>Description</strong>: Enter the summary of subtotal billing amount excluding tax for this work order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_SubtotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_SubtotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SubtotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_SubtotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subtotal Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the subtotal amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_subtotalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_subtotalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Support Contact</para>
		/// <para><strong>Description</strong>: A support contact can be specified so that the individual working on the work order has someone to contact for assistance.</para>
		/// <para><strong>Lookup</strong>: <see cref="bookableresource"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_SupportContact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_SupportContact); }
			set { Entity.Attributes[Fields.msdyn_SupportContact] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: System Status</para>
		/// <para><strong>Description</strong>: Tracks the current system status.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_SystemStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_SystemStatus? msdyn_SystemStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_SystemStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_SystemStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_SystemStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_SystemStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Taxable</para>
		/// <para><strong>Description</strong>: Shows whether sales tax is to be charged for this work order.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_Taxable
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_Taxable); }
			set { Entity.Attributes[Fields.msdyn_Taxable] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Tax Code</para>
		/// <para><strong>Description</strong>: Tax Code to be used to calculate tax when Work Order is taxable. By default the system will use the tax code specified on the service account</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_taxcode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TaxCode
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TaxCode); }
			set { Entity.Attributes[Fields.msdyn_TaxCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed On</para>
		/// <para><strong>Description</strong>: Enter the time this work order was last closed.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeClosedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeClosed); }
			set { Entity.Attributes[Fields.msdyn_TimeClosed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time From Promised</para>
		/// <para><strong>Description</strong>: Enter the starting range of the time promised to the account that incidents will be resolved.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeFromPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeFromPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeFromPromised] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fulfillment Preference</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_timegroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroup); }
			set { Entity.Attributes[Fields.msdyn_TimeGroup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Group Detail Selected (Deprecated)</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_timegroupdetail"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroupDetailSelected
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroupDetailSelected); }
			set { Entity.Attributes[Fields.msdyn_TimeGroupDetailSelected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time To Promised</para>
		/// <para><strong>Description</strong>: Enter the ending range of the time promised to the account that incidents will be resolved.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeToPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeToPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeToPromised] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Window End</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Window Start</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowStart); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount</para>
		/// <para><strong>Description</strong>: Enter the summary of total billing amount for this work order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the total amount in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Estimated After Tax Price</para>
		/// <para><strong>Description</strong>: The estimated price after adding tax to the subtotal</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 900,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalestimatedaftertaxprice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalestimatedaftertaxprice);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_totalestimatedaftertaxprice] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_totalestimatedaftertaxprice] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Estimated After Tax Price (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Estimated After Tax Price in base currency.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalestimatedaftertaxprice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalestimatedaftertaxprice_Base);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_totalestimatedaftertaxprice_Base] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_totalestimatedaftertaxprice_Base] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Estimated Duration</para>
		/// <para><strong>Description</strong>: Calculated from the estimated duration of Work Order Incidents and Work Order Service Tasks not related to a Work Order Incident on the Work Order. Intended to be read-only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_totalestimatedduration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_totalestimatedduration); }
			set { Entity.Attributes[Fields.msdyn_totalestimatedduration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Sales Tax</para>
		/// <para><strong>Description</strong>: Enter the summary of total sales tax charged for this work order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_TotalSalesTax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_TotalSalesTax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_TotalSalesTax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_TotalSalesTax] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Sales Tax (Base)</para>
		/// <para><strong>Description</strong>: Shows the value of the total sales tax in the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_totalsalestax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_totalsalestax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trade</para>
		/// <para><strong>Description</strong>: Select the Trade that associated with the Work Order.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_trade"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Trade
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Trade); }
			set { Entity.Attributes[Fields.msdyn_Trade] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Hour Template</para>
		/// <para><strong>Description</strong>: The working hours for a requirement.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workhourtemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workhourtemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workhourtemplate); }
			set { Entity.Attributes[Fields.msdyn_workhourtemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_WorkLocation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_WorkLocation.Onsite"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Arrival Time KPI</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Lookup</strong>: <see cref="slakpiinstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workorderarrivaltimekpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workorderarrivaltimekpiid); }
			set { Entity.Attributes[Fields.msdyn_workorderarrivaltimekpiid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: WO Number</para>
		/// <para><strong>Description</strong>: Shows the entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_workorderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_workorderId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Resolution KPI</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Lookup</strong>: <see cref="slakpiinstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workorderresolutionkpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workorderresolutionkpiid); }
			set { Entity.Attributes[Fields.msdyn_workorderresolutionkpiid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Summary</para>
		/// <para><strong>Description</strong>: Type a summary description of the job.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkOrderSummary
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkOrderSummary); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderSummary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Type</para>
		/// <para><strong>Description</strong>: Work Order Type</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_workordertype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderType); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Shows the ID of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage Id</para>
		/// <para><strong>Description</strong>: Shows the ID of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Work Order</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Work Order</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_workorderOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Traversed Path</para>
		/// <para><strong>Description</strong>: Shows a comma-separated list of string values representing the unique identifiers of stages in a business process flow instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Shows the time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}