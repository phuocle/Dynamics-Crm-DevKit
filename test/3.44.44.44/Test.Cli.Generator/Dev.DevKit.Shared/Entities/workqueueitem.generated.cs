//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.workqueueitemOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum processortype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cloud Flow</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Cloud_Flow = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Machine</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Flow_Machine = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Error = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: OnHold</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		OnHold = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Processed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Processing = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Queued</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Queued = 0
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: BusinessException</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Error</strong></para>
		/// </summary>
		BusinessException = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: DeadLetter</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Error</strong></para>
		/// </summary>
		DeadLetter = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: GenericException</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Error</strong></para>
		/// </summary>
		GenericException = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: ITException</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Error</strong></para>
		/// </summary>
		ITException = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Paused</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.OnHold</strong></para>
		/// </summary>
		Paused = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Processed</strong></para>
		/// </summary>
		Processed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Processing</strong></para>
		/// </summary>
		Processing = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ProcessingTimeout</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Error</strong></para>
		/// </summary>
		ProcessingTimeout = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Queued</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Queued</strong></para>
		/// </summary>
		Queued = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class workqueueitem : EntityBase
	{
		public struct Fields
		{
			public const string completedon = "completedon";
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string delayuntil = "delayuntil";
			public const string executioncontext = "executioncontext";
			public const string expirydate = "expirydate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string input = "input";
			public const string IsManaged = "ismanaged";
			public const string machineuser = "machineuser";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string priority = "priority";
			public const string processingduration = "processingduration";
			public const string processingresult = "processingresult";
			public const string processingstarttime = "processingstarttime";
			public const string processinguser = "processinguser";
			public const string processorid = "processorid";
			public const string processortype = "processortype";
			public const string requeuecount = "requeuecount";
			public const string retrycount = "retrycount";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string uniqueidbyqueue = "uniqueidbyqueue";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string workqueueid = "workqueueid";
			public const string workqueueitemId = "workqueueitemid";
		}
		public const string EntityLogicalName = "workqueueitem";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10089;
		public const string EntityCollectionSchemaName = "workqueueitems";
		public const string EntityDisplayCollectionName = "Work Queue Items";
		public const string DisplayName = "Work Queue Item";
		public const string EntitySetName = "workqueueitems";
		public const string EntityLogicalCollectionName = "workqueueitems";
		public const string EntityPrimaryIdAttribute = "workqueueitemid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "workqueueitem";
		[DebuggerNonUserCode()]
		public workqueueitem()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public workqueueitem(Guid workqueueitemId)
		{
			Entity = new Entity(EntityLogicalName, workqueueitemId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public workqueueitem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="workqueueitem"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public workqueueitem(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="workqueueitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public workqueueitem(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new workqueueitem(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="workqueueitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public workqueueitem(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new workqueueitem(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public workqueueitem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed on</para>
		/// <para><strong>Description</strong>: The date and time when the work queue item was completed.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.completedon); }
			set { Entity.Attributes[Fields.completedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delay until</para>
		/// <para><strong>Description</strong>: The date and time after which the work queue item can be dequeued again.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? delayuntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.delayuntil); }
			set { Entity.Attributes[Fields.delayuntil] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Execution Context</para>
		/// <para><strong>Description</strong>: The execution context contains a system-managed list of processing attempts, along with important debugging information.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string executioncontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.executioncontext); }
			set { Entity.Attributes[Fields.executioncontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expiry Date</para>
		/// <para><strong>Description</strong>: The expiry date indicates the deadline when the work queue items has to be processed by.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? expirydateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.expirydate); }
			set { Entity.Attributes[Fields.expirydate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Input</para>
		/// <para><strong>Description</strong>: The input field contains the actual work item data used for processing by bots, humans, or integrations.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string input
		{
			get { return Entity.GetAttributeValue<string>(Fields.input); }
			set { Entity.Attributes[Fields.input] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Machine User</para>
		/// <para><strong>Description</strong>: Machine User that processed the item.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string machineuser
		{
			get { return Entity.GetAttributeValue<string>(Fields.machineuser); }
			set { Entity.Attributes[Fields.machineuser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the work queue item which is by default set to an auto number (e.g., 2023-02-13-000000001).</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: The priority value determines the pick and processing order for work queue items in a work queue. A lower value corresponds to a higher priority with 1 being the highest.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.priority); }
			set { Entity.Attributes[Fields.priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Duration</para>
		/// <para><strong>Description</strong>: The duration of the processing in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? processingduration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.processingduration); }
			set { Entity.Attributes[Fields.processingduration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Result</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string processingresult
		{
			get { return Entity.GetAttributeValue<string>(Fields.processingresult); }
			set { Entity.Attributes[Fields.processingresult] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing Start Time</para>
		/// <para><strong>Description</strong>: The date and time when the processing has started.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? processingstarttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.processingstarttime); }
			set { Entity.Attributes[Fields.processingstarttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processing User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that processed the item.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference processinguser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.processinguser); }
			set { Entity.Attributes[Fields.processinguser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processor id</para>
		/// <para><strong>Description</strong>: Unique identifier for the processor (workflow, flowmachine, etc.) that processed the item.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string processorid
		{
			get { return Entity.GetAttributeValue<string>(Fields.processorid); }
			set { Entity.Attributes[Fields.processorid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Processor Type</para>
		/// <para><strong>Description</strong>: The processor type allows to display if the item was processed through a cloud flow, a flow machine or another processor type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype? processortype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.processortype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.processortype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.processortype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.processortype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requeue Count</para>
		/// <para><strong>Description</strong>: The number of times the item has been requeued.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? requeuecount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.requeuecount); }
			set { Entity.Attributes[Fields.requeuecount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Retry Count</para>
		/// <para><strong>Description</strong>: The number of times the item has been retried.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? retrycount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.retrycount); }
			set { Entity.Attributes[Fields.retrycount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: The status of the work queue item (Queued, Processed, Exception etc.)</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: The status reason provides more context for a set status (Queued, Processing, On hold etc.).</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.workqueueitemOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Id By Queue</para>
		/// <para><strong>Description</strong>: An identifier of the work queue item used to uniquely identify a work queue item inside a work queue.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string uniqueidbyqueue
		{
			get { return Entity.GetAttributeValue<string>(Fields.uniqueidbyqueue); }
			set { Entity.Attributes[Fields.uniqueidbyqueue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Queue Id</para>
		/// <para><strong>Description</strong>: The work queue id of the parent work queue record.</para>
		/// <para><strong>Lookup</strong>: <see cref="workqueue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference workqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.workqueueid); }
			set { Entity.Attributes[Fields.workqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Queue Item</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid workqueueitemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.workqueueitemId] = value;
				Entity.Id = value;
			}
		}
	}
}