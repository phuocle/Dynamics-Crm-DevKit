//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets
{
	public enum msdyn_authenticationtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: OAuth</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		OAuth = 1
	}
	public enum msdyn_datasourcetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Website = 0
	}
	public enum msdyn_lookbackperiod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 1 hour</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		_1_hour = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: 2 hours</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		_2_hours = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: 30 mins</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		_30_mins = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: 4 hours</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_4_hours = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: 6 hours</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		_6_hours = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: 8 hours</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		_8_hours = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Lookback</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		No_Lookback = 0
	}
	public enum msdyn_refreshschedule
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 1 day</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		_1_day = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: 1 hour</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		_1_hour = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: 15 mins</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		_15_mins = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: 2 days</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		_2_days = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: 2 hours</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		_2_hours = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: 30 mins</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_30_mins = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: 4 days</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		_4_days = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: 4 hours</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		_4_hours = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: 45 mins</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		_45_mins = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: 7 days</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		_7_days = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: 8 hours</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		_8_hours = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: No refresh</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		No_refresh = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Draft = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ingestion Ready</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Ingestion_Ready = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Validated</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Validated = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_integratedsearchprovider : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_allowedlanguages = "msdyn_allowedlanguages";
			public const string msdyn_articlepropertiesmapping = "msdyn_articlepropertiesmapping";
			public const string msdyn_authenticationtype = "msdyn_authenticationtype";
			public const string msdyn_clientid = "msdyn_clientid";
			public const string msdyn_clientsecret = "msdyn_clientsecret";
			public const string msdyn_datasourcetype = "msdyn_datasourcetype";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_htmlmetatags = "msdyn_htmlmetatags";
			public const string msdyn_htmlsample = "msdyn_htmlsample";
			public const string msdyn_htmlsample_name = "msdyn_htmlsample_name";
			public const string msdyn_includedsitemapurls = "msdyn_includedsitemapurls";
			public const string msdyn_integratedsearchproviderId = "msdyn_integratedsearchproviderid";
			public const string msdyn_isfieldmappingoptionselected = "msdyn_isfieldmappingoptionselected";
			public const string msdyn_lastfetchtime = "msdyn_lastfetchtime";
			public const string msdyn_lookbackperiod = "msdyn_lookbackperiod";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_refreshschedule = "msdyn_refreshschedule";
			public const string msdyn_resourceid = "msdyn_resourceid";
			public const string msdyn_rooturl = "msdyn_rooturl";
			public const string msdyn_tenantid = "msdyn_tenantid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_integratedsearchprovider";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10188;
		public const string EntityCollectionSchemaName = "msdyn_integratedsearchproviders";
		public const string EntityDisplayCollectionName = "Integrated search providers";
		public const string DisplayName = "Integrated search provider";
		public const string EntitySetName = "msdyn_integratedsearchproviders";
		public const string EntityLogicalCollectionName = "msdyn_integratedsearchproviders";
		public const string EntityPrimaryIdAttribute = "msdyn_integratedsearchproviderid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_integratedsearchprovider";
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider(Guid msdyn_integratedsearchproviderId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_integratedsearchproviderId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_integratedsearchprovider"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_integratedsearchprovider"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_integratedsearchprovider(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_integratedsearchprovider"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_integratedsearchprovider(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_integratedsearchprovider(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time of the external search provider creation</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed Languages</para>
		/// <para><strong>Description</strong>: Languages allowed for ingestion</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_allowedlanguages
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_allowedlanguages); }
			set { Entity.Attributes[Fields.msdyn_allowedlanguages] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Article properties</para>
		/// <para><strong>Description</strong>: Map external search provider fields and knowledge article table columns in Dataverse</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_articlepropertiesmapping
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_articlepropertiesmapping); }
			set { Entity.Attributes[Fields.msdyn_articlepropertiesmapping] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication</para>
		/// <para><strong>Description</strong>: Authentication type for the search provider</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_authenticationtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_authenticationtype.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_authenticationtype? msdyn_authenticationtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_authenticationtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_authenticationtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_authenticationtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_authenticationtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client ID</para>
		/// <para><strong>Description</strong>: Client ID for the OAuth</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_clientid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_clientid); }
			set { Entity.Attributes[Fields.msdyn_clientid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External search provider secret</para>
		/// <para><strong>Description</strong>: Secret of the external search provider</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_clientsecret
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_clientsecret); }
			set { Entity.Attributes[Fields.msdyn_clientsecret] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External search provider type</para>
		/// <para><strong>Description</strong>: Type of the external search provider</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_datasourcetype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_datasourcetype.Website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_datasourcetype? msdyn_datasourcetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_datasourcetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_datasourcetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_datasourcetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_datasourcetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the external search provider</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Html meta tags information</para>
		/// <para><strong>Description</strong>: Information about the meta tags extracted from sample dataprovider html</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_htmlmetatags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_htmlmetatags); }
			set { Entity.Attributes[Fields.msdyn_htmlmetatags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sample HTML File of Data Provider uploaded for metatags extraction</para>
		/// <para><strong>Description</strong>: The reference to the sample html file uploaded for the integrated search provider</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_htmlsample_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_htmlsample_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowlist URL</para>
		/// <para><strong>Description</strong>: List of URLs that are allowed</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 20,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_includedsitemapurls
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_includedsitemapurls); }
			set { Entity.Attributes[Fields.msdyn_includedsitemapurls] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Integrated search provider</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_integratedsearchproviderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_integratedsearchproviderId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Field Mapping Option Selected</para>
		/// <para><strong>Description</strong>: Value is true when field mapping option is selected</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isfieldmappingoptionselected
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isfieldmappingoptionselected); }
			set { Entity.Attributes[Fields.msdyn_isfieldmappingoptionselected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last fetch time</para>
		/// <para><strong>Description</strong>: Date and time at which the recent ingestion was started</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastfetchtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastfetchtime); }
			set { Entity.Attributes[Fields.msdyn_lastfetchtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Lookback period</para>
		/// <para><strong>Description</strong>: Time interval for ingesting any articles that might have been missed during the sync and ingestion overlap</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_lookbackperiod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_lookbackperiod.No_Lookback"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_lookbackperiod? msdyn_lookbackperiod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_lookbackperiod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_lookbackperiod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_lookbackperiod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_lookbackperiod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the external search provider</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Refresh schedule</para>
		/// <para><strong>Description</strong>: Time interval for ingesting newly created and updated articles from the external search provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_refreshschedule"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_refreshschedule.No_refresh"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_refreshschedule? msdyn_refreshschedule
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_refreshschedule);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.msdyn_refreshschedule)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_refreshschedule] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_refreshschedule] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource ID</para>
		/// <para><strong>Description</strong>: Resource ID for OAuth</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_resourceid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_resourceid); }
			set { Entity.Attributes[Fields.msdyn_resourceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Root URL</para>
		/// <para><strong>Description</strong>: Root URL of the website</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_rooturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_rooturl); }
			set { Entity.Attributes[Fields.msdyn_rooturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tenant ID</para>
		/// <para><strong>Description</strong>: Tenant ID for OAuth</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_tenantid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_tenantid); }
			set { Entity.Attributes[Fields.msdyn_tenantid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner of the external search provider record</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: State of the external search provider</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Integrated search provider</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_integratedsearchproviderOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}