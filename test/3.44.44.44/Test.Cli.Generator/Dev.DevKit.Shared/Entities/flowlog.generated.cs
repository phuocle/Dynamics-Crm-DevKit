//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.flowlogOptionSets
{
	public enum level
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Debug</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Debug = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Error = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Info</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Info = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Verbose</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Verbose = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warning</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Warning = 100_000_003
	}
	public enum type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomLog</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		CustomLog = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowOrchestrationRepairSessionMismatchRequest</para>
		/// <para><strong>Value</strong>: 100,000,300</para>
		/// </summary>
		DesktopFlowOrchestrationRepairSessionMismatchRequest = 100_000_300,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowOrchestrationRepairSessionMismatchResponse</para>
		/// <para><strong>Value</strong>: 100,000,301</para>
		/// </summary>
		DesktopFlowOrchestrationRepairSessionMismatchResponse = 100_000_301,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunAction</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		DesktopFlowRunAction = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunQueueAssigned</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		DesktopFlowRunQueueAssigned = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunQueueAssignFailed</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		DesktopFlowRunQueueAssignFailed = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunQueued</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		DesktopFlowRunQueued = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunQueuePriorityChanged</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		DesktopFlowRunQueuePriorityChanged = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunQueueRunCompleted</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		DesktopFlowRunQueueRunCompleted = 100_000_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunQueueRunConfirmed</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		DesktopFlowRunQueueRunConfirmed = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunUnattendedRepairUISelectorRequest</para>
		/// <para><strong>Value</strong>: 100,000,100</para>
		/// </summary>
		DesktopFlowRunUnattendedRepairUISelectorRequest = 100_000_100,
		/// <summary>
		/// <para><strong>Display Name</strong>: DesktopFlowRunUnattendedRepairUISelectorResponse</para>
		/// <para><strong>Value</strong>: 100,000,101</para>
		/// </summary>
		DesktopFlowRunUnattendedRepairUISelectorResponse = 100_000_101,
		/// <summary>
		/// <para><strong>Display Name</strong>: WorkqueueFlowSession</para>
		/// <para><strong>Value</strong>: 100,000,200</para>
		/// </summary>
		WorkqueueFlowSession = 100_000_200,
		/// <summary>
		/// <para><strong>Display Name</strong>: WorkqueueProcessorLog</para>
		/// <para><strong>Value</strong>: 100,000,201</para>
		/// </summary>
		WorkqueueProcessorLog = 100_000_201
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class flowlog : EntityBase
	{
		public struct Fields
		{
			public const string cloudflowid = "cloudflowid";
			public const string cloudflowrunid = "cloudflowrunid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string data = "data";
			public const string desktopflowid = "desktopflowid";
			public const string flowlogId = "flowlogid";
			public const string flowmachinegroupid = "flowmachinegroupid";
			public const string flowmachineid = "flowmachineid";
			public const string flowsessionid = "flowsessionid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string level = "level";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string parentobjectid = "parentobjectid";
			public const string PartitionId = "partitionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string type = "type";
			public const string VersionNumber = "versionnumber";
			public const string workqueueid = "workqueueid";
			public const string workqueueitemid = "workqueueitemid";
		}
		public const string EntityLogicalName = "flowlog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10091;
		public const string EntityCollectionSchemaName = "flowlogs";
		public const string EntityDisplayCollectionName = "Flow Logs";
		public const string DisplayName = "Flow Log";
		public const string EntitySetName = "flowlogs";
		public const string EntityLogicalCollectionName = "flowlogs";
		public const string EntityPrimaryIdAttribute = "flowlogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "flowlog";
		[DebuggerNonUserCode()]
		public flowlog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowlog(Guid flowlogId)
		{
			Entity = new Entity(EntityLogicalName, flowlogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowlog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowlog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public flowlog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowlog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowlog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowlog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="flowlog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public flowlog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new flowlog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public flowlog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cloud Flow Id</para>
		/// <para><strong>Description</strong>: The Power Automate Cloud Flow Id this log is linked to.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference cloudflowid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.cloudflowid); }
			set { Entity.Attributes[Fields.cloudflowid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cloud Flow Run Id</para>
		/// <para><strong>Description</strong>: The Power Automate Cloud Flow run this log is linked to.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowrun"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference cloudflowrunid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.cloudflowrunid); }
			set { Entity.Attributes[Fields.cloudflowrunid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data</para>
		/// <para><strong>Description</strong>: The logged data.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string data
		{
			get { return Entity.GetAttributeValue<string>(Fields.data); }
			set { Entity.Attributes[Fields.data] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Desktop Flow Id</para>
		/// <para><strong>Description</strong>: The Desktop Flow Id this log is linked to.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference desktopflowid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.desktopflowid); }
			set { Entity.Attributes[Fields.desktopflowid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Log</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid flowlogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.flowlogId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Lookup</strong>: <see cref="flowmachinegroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference flowmachinegroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.flowmachinegroupid); }
			set { Entity.Attributes[Fields.flowmachinegroupid] = value; }
		}
		/// <summary>
		/// <para><strong>Lookup</strong>: <see cref="flowmachine"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference flowmachineid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.flowmachineid); }
			set { Entity.Attributes[Fields.flowmachineid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flow Session Id</para>
		/// <para><strong>Description</strong>: The Power Automate Desktop Flow Session this log belongs to.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference flowsessionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.flowsessionid); }
			set { Entity.Attributes[Fields.flowsessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Level</para>
		/// <para><strong>Description</strong>: The level of the log.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowlogOptionSets.level"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowlogOptionSets.level? level
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.level);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowlogOptionSets.level)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.level] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.level] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Log Name</para>
		/// <para><strong>Description</strong>: The name of the log.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Object Id</para>
		/// <para><strong>Description</strong>: The id of the parent object.</para>
		/// <para><strong>Lookup</strong>: <see cref="flowmachinegroup"/>, <see cref="flowsession"/>, <see cref="workqueue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference parentobjectid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.parentobjectid); }
			set { Entity.Attributes[Fields.parentobjectid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: The type of the log.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.flowlogOptionSets.type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.flowlogOptionSets.type? type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.flowlogOptionSets.type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Queue Id</para>
		/// <para><strong>Description</strong>: The Work Queue this log is linked to.</para>
		/// <para><strong>Lookup</strong>: <see cref="workqueue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference workqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.workqueueid); }
			set { Entity.Attributes[Fields.workqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Queue Item Id</para>
		/// <para><strong>Description</strong>: The Work Queue Item this log is linked to.</para>
		/// <para><strong>Lookup</strong>: <see cref="workqueueitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference workqueueitemid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.workqueueitemid); }
			set { Entity.Attributes[Fields.workqueueitemid] = value; }
		}
	}
}