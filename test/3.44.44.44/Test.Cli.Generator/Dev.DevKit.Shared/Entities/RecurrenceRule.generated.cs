//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets
{
	public enum Instance
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: First</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		First = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fourth</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Fourth = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Last</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Last = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Second</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Second = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Third</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Third = 3
	}
	public enum MonthOfYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: April</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		April = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: August</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		August = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: December</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		December = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: February</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		February = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Month Of Year</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Invalid_Month_Of_Year = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: January</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		January = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: July</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		July = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: June</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		June = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: March</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		March = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: May</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		May = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: November</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		November = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: October</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		October = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: September</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		September = 9
	}
	public enum PatternEndType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No End Date</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		No_End_Date = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Occurrences</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Occurrences = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pattern End Date</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Pattern_End_Date = 3
	}
	public enum RecurrencePatternType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Daily</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Daily = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monthly</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Monthly = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Weekly</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Weekly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yearly</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Yearly = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RecurrenceRule : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DayOfMonth = "dayofmonth";
			public const string DaysOfWeekMask = "daysofweekmask";
			public const string Duration = "duration";
			public const string EffectiveEndDate = "effectiveenddate";
			public const string EffectiveStartDate = "effectivestartdate";
			public const string EndTime = "endtime";
			public const string FirstDayOfWeek = "firstdayofweek";
			public const string Instance = "instance";
			public const string Interval = "interval";
			public const string IsNthMonthly = "isnthmonthly";
			public const string IsNthYearly = "isnthyearly";
			public const string IsRegenerate = "isregenerate";
			public const string IsWeekDayPattern = "isweekdaypattern";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string MonthOfYear = "monthofyear";
			public const string ObjectId = "objectid";
			public const string Occurrences = "occurrences";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PatternEndDate = "patternenddate";
			public const string PatternEndType = "patternendtype";
			public const string PatternStartDate = "patternstartdate";
			public const string RecurrencePatternType = "recurrencepatterntype";
			public const string RuleId = "ruleid";
			public const string StartTime = "starttime";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "recurrencerule";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4250;
		public const string EntityCollectionSchemaName = "RecurrenceRules";
		public const string EntityDisplayCollectionName = "Recurrence Rules";
		public const string DisplayName = "Recurrence Rule";
		public const string EntitySetName = "recurrencerules";
		public const string EntityLogicalCollectionName = "recurrencerules";
		public const string EntityPrimaryIdAttribute = "ruleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RecurrenceRule";
		[DebuggerNonUserCode()]
		public RecurrenceRule()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurrenceRule(Guid RecurrenceRuleId)
		{
			Entity = new Entity(EntityLogicalName, RecurrenceRuleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurrenceRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurrenceRule"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RecurrenceRule(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurrenceRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurrenceRule(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurrenceRule(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RecurrenceRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RecurrenceRule(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RecurrenceRule(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RecurrenceRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the recurrence rule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the recurrence rule was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the recurrence rule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Day Of Month</para>
		/// <para><strong>Description</strong>: The day of the month on which the recurring appointment or task occurs.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 31</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DayOfMonth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DayOfMonth); }
			set { Entity.Attributes[Fields.DayOfMonth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Days Of Week Mask</para>
		/// <para><strong>Description</strong>: Bitmask representing the days of the week on which the recurring appointment or task occurs.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 127</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DaysOfWeekMask
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DaysOfWeekMask); }
			set { Entity.Attributes[Fields.DaysOfWeekMask] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Duration of the recurrence pattern in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
			set { Entity.Attributes[Fields.Duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Effective End Date</para>
		/// <para><strong>Description</strong>: The actual end date for expansion of the recurrence pattern.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveEndDate); }
			set { Entity.Attributes[Fields.EffectiveEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Effective Start Date</para>
		/// <para><strong>Description</strong>: The actual start date for expansion of the recurrence pattern.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveStartDate); }
			set { Entity.Attributes[Fields.EffectiveStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time</para>
		/// <para><strong>Description</strong>: End time of the associated activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EndTime); }
			set { Entity.Attributes[Fields.EndTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Day Of Week</para>
		/// <para><strong>Description</strong>: First day Of week for the recurrence pattern.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FirstDayOfWeek
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FirstDayOfWeek); }
			set { Entity.Attributes[Fields.FirstDayOfWeek] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Instance</para>
		/// <para><strong>Description</strong>: Specifies the count for which the recurrence pattern is valid for a given interval.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.Instance"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.Instance? Instance
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Instance);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.Instance)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Instance] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Instance] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Interval</para>
		/// <para><strong>Description</strong>: Number of units of a given recurrence type between occurrences.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Interval
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Interval); }
			set { Entity.Attributes[Fields.Interval] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nth Monthly</para>
		/// <para><strong>Description</strong>: Specifies whether the monthly recurrence pattern is Nth monthly, valid only for monthly recurrence.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthMonthly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthMonthly); }
			set { Entity.Attributes[Fields.IsNthMonthly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Nth Yearly</para>
		/// <para><strong>Description</strong>: Specifies whether the yearly recurrence pattern is Nth yearly, valid only for yearly recurrence.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsNthYearly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsNthYearly); }
			set { Entity.Attributes[Fields.IsNthYearly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regenerate</para>
		/// <para><strong>Description</strong>: Valid only for task type recurrence,indicates whether task should be regenerated.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegenerate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegenerate); }
			set { Entity.Attributes[Fields.IsRegenerate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Every Weekday</para>
		/// <para><strong>Description</strong>: Specifies whether the weekly recurrence pattern is actually a daily every weekday pattern, valid only for weekly recurrence.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWeekDayPattern
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWeekDayPattern); }
			set { Entity.Attributes[Fields.IsWeekDayPattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the recurrence rule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the recurrence rule was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the recurrence rule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Month Of Year</para>
		/// <para><strong>Description</strong>: Specifies the month of the year valid for the recurrence pattern.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear.Invalid_Month_Of_Year"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear? MonthOfYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MonthOfYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.MonthOfYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MonthOfYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MonthOfYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Unique identifier of the object with which the recurrence rule is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="activitypointer"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Occurrences</para>
		/// <para><strong>Description</strong>: Number of occurrences of the recurrence pattern.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Occurrences
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Occurrences); }
			set { Entity.Attributes[Fields.Occurrences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the recurrence rule.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the recurrence rule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Range End</para>
		/// <para><strong>Description</strong>: End date of the Recurrence Range.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternEndDate); }
			set { Entity.Attributes[Fields.PatternEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pattern End Type</para>
		/// <para><strong>Description</strong>: Pattern End Type of a recurring series.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.PatternEndType"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.PatternEndType? PatternEndType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PatternEndType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.PatternEndType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PatternEndType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PatternEndType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Range Start</para>
		/// <para><strong>Description</strong>: Start date of the Recurrence Range.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PatternStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PatternStartDate); }
			set { Entity.Attributes[Fields.PatternStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Pattern</para>
		/// <para><strong>Description</strong>: Type of Recurrence.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType.Daily"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType? RecurrencePatternType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RecurrencePatternType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RecurrenceRuleOptionSets.RecurrencePatternType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RecurrencePatternType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RecurrencePatternType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Rule</para>
		/// <para><strong>Description</strong>: Unique identifier of the entity associated with recurrence rule.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RuleId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RuleId); }
			set { Entity.Attributes[Fields.RuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time</para>
		/// <para><strong>Description</strong>: Start time of the recurring activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartTime); }
			set { Entity.Attributes[Fields.StartTime] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}