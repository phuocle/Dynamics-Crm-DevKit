//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ReportOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum ManagedType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Customer = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dataverse</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Dataverse = 0
	}
	public enum ReportTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Excel Embedded Report</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Excel_Embedded_Report = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Excel Embedded Report Template</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Excel_Embedded_Report_Template = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Report</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Linked_Report = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Report</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Other_Report = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Power BI Analytic Report</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Power_BI_Analytic_Report = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Power BI Paginated Report</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Power_BI_Paginated_Report = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reporting Services Report</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Reporting_Services_Report = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Report : EntityBase
	{
		public struct Fields
		{
			public const string ApplicationId = "applicationid";
			public const string BodyBinary = "bodybinary";
			public const string BodyText = "bodytext";
			public const string BodyUrl = "bodyurl";
			public const string CdsDatasetId = "cdsdatasetid";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedInMajorVersion = "createdinmajorversion";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomReportXml = "customreportxml";
			public const string DefaultFilter = "defaultfilter";
			public const string DependentModelReportId = "dependentmodelreportid";
			public const string Description = "description";
			public const string FileContent = "filecontent";
			public const string FileContent_name = "filecontent_name";
			public const string FileName = "filename";
			public const string FileSize = "filesize";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCustomReport = "iscustomreport";
			public const string IsManaged = "ismanaged";
			public const string IsPersonal = "ispersonal";
			public const string IsScheduledReport = "isscheduledreport";
			public const string LanguageCode = "languagecode";
			public const string ManagedType = "managedtype";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OriginalBodyText = "originalbodytext";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentReportId = "parentreportid";
			public const string PowerBiDatasetId = "powerbidatasetid";
			public const string PowerBiFeatureTag = "powerbifeaturetag";
			public const string PowerBiReportId = "powerbireportid";
			public const string PowerBiReportInternalState = "powerbireportinternalstate";
			public const string PowerBiReportName = "powerbireportname";
			public const string PowerBiWorkspaceInfo = "powerbiworkspaceinfo";
			public const string QueryInfo = "queryinfo";
			public const string RdlHash = "rdlhash";
			public const string ReportId = "reportid";
			public const string ReportIdUnique = "reportidunique";
			public const string ReportNameOnSRS = "reportnameonsrs";
			public const string ReportStatus = "reportstatus";
			public const string ReportTypeCode = "reporttypecode";
			public const string ReportVersion = "reportversion";
			public const string ScheduleXml = "schedulexml";
			public const string SignatureDate = "signaturedate";
			public const string SignatureId = "signatureid";
			public const string SignatureLcid = "signaturelcid";
			public const string SignatureMajorVersion = "signaturemajorversion";
			public const string SignatureMinorVersion = "signatureminorversion";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "report";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9100;
		public const string EntityCollectionSchemaName = "Reports";
		public const string EntityDisplayCollectionName = "Reports";
		public const string DisplayName = "Report";
		public const string EntitySetName = "reports";
		public const string EntityLogicalCollectionName = "reports";
		public const string EntityPrimaryIdAttribute = "reportid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Report";
		[DebuggerNonUserCode()]
		public Report()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Report(Guid ReportId)
		{
			Entity = new Entity(EntityLogicalName, ReportId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Report(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Report"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Report(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Report"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Report(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Report(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Report"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Report(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Report(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Report(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ApplicationId</para>
		/// <para><strong>Description</strong>: Represents the application id to which a CDS powerbi report belongs to.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Body Binary</para>
		/// <para><strong>Description</strong>: Binary report contents (base-64 encoded).</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BodyBinary
		{
			get { return Entity.GetAttributeValue<string>(Fields.BodyBinary); }
			set { Entity.Attributes[Fields.BodyBinary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Body Text</para>
		/// <para><strong>Description</strong>: Text contents of the RDL file for a Reporting Services report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BodyText
		{
			get { return Entity.GetAttributeValue<string>(Fields.BodyText); }
			set { Entity.Attributes[Fields.BodyText] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Report URL</para>
		/// <para><strong>Description</strong>: URL for a linked report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BodyUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.BodyUrl); }
			set { Entity.Attributes[Fields.BodyUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: cdsdatasetid</para>
		/// <para><strong>Description</strong>: Represents the dataset id of a report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CdsDatasetId
		{
			get { return Entity.GetAttributeValue<string>(Fields.CdsDatasetId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ReportOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ReportOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ReportOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Crm Version in which the Report is created</para>
		/// <para><strong>Description</strong>: Major version number of Crm, used to identify the version of Crm in which report is created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CreatedInMajorVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CreatedInMajorVersion); }
			set { Entity.Attributes[Fields.CreatedInMajorVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the report was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Report XML</para>
		/// <para><strong>Description</strong>: XML used to define a custom report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomReportXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomReportXml); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default filter</para>
		/// <para><strong>Description</strong>: Default filter for the report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultFilter
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultFilter); }
			set { Entity.Attributes[Fields.DefaultFilter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dependent Model Report Id</para>
		/// <para><strong>Description</strong>: Field to represent the dependent report dataset model.</para>
		/// <para><strong>Lookup</strong>: <see cref="report"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DependentModelReportId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DependentModelReportId); }
			set { Entity.Attributes[Fields.DependentModelReportId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Content</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileContent_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileContent_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Name</para>
		/// <para><strong>Description</strong>: File name of the report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Size (Bytes)</para>
		/// <para><strong>Description</strong>: File size of the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Introduced Version</para>
		/// <para><strong>Description</strong>: Version in which the report is introduced.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Custom Report</para>
		/// <para><strong>Description</strong>: Information about whether the report is a custom report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCustomReport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCustomReport); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Viewable By</para>
		/// <para><strong>Description</strong>: Information about whether the report is personal or is available to all users.</para>
		/// <para><strong>Two Option</strong> - [<strong>Individual</strong>]: true - [<strong>Organization</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Individual</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPersonal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPersonal); }
			set { Entity.Attributes[Fields.IsPersonal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Scheduled Report</para>
		/// <para><strong>Description</strong>: Information about whether the report is a scheduled report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsScheduledReport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsScheduledReport); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: Language in which the report will be displayed.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ManagedType</para>
		/// <para><strong>Description</strong>: Determine how the report workspace is managed.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ReportOptionSets.ManagedType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ReportOptionSets.ManagedType? ManagedType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ManagedType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ReportOptionSets.ManagedType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ManagedType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ManagedType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mime Type</para>
		/// <para><strong>Description</strong>: MIME type of the report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the report was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the report.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 425</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Body Text</para>
		/// <para><strong>Description</strong>: Original Text contents of the RDL file for a Reporting Services report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OriginalBodyText
		{
			get { return Entity.GetAttributeValue<string>(Fields.OriginalBodyText); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the report.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Report</para>
		/// <para><strong>Description</strong>: Unique identifier of the parent report.</para>
		/// <para><strong>Lookup</strong>: <see cref="report"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentReportId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentReportId); }
			set { Entity.Attributes[Fields.ParentReportId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PowerBI Dataset Id</para>
		/// <para><strong>Description</strong>: Represents the Power BI dataset id of a report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PowerBiDatasetId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PowerBiDatasetId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: powerbifeaturetag</para>
		/// <para><strong>Description</strong>: Field to maintain the sub application id and feature tag for powerbi reports.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PowerBiFeatureTag
		{
			get { return Entity.GetAttributeValue<string>(Fields.PowerBiFeatureTag); }
			set { Entity.Attributes[Fields.PowerBiFeatureTag] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PowerBiReportId</para>
		/// <para><strong>Description</strong>: Represents the powerbi report id for a CDS report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PowerBiReportId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PowerBiReportId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: powerbireportinternalstate</para>
		/// <para><strong>Description</strong>: Field to maintain the internal state of the report</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PowerBiReportInternalState
		{
			get { return Entity.GetAttributeValue<string>(Fields.PowerBiReportInternalState); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Bi Report Name</para>
		/// <para><strong>Description</strong>: Contains the name of the Power Bi embedded report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PowerBiReportName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PowerBiReportName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Bi Workspace Information</para>
		/// <para><strong>Description</strong>: Contains the workspace information of the Power Bi embedded report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PowerBiWorkspaceInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.PowerBiWorkspaceInfo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Query Info Structure</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QueryInfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.QueryInfo); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Body Text Hash</para>
		/// <para><strong>Description</strong>: Hash value of the body text of the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RdlHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RdlHash); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report</para>
		/// <para><strong>Description</strong>: Unique identifier of the report.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ReportId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ReportId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ReportIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ReportIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name on SRS</para>
		/// <para><strong>Description</strong>: Name of the report on SRS.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 425</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportNameOnSRS
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportNameOnSRS); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Status</para>
		/// <para><strong>Description</strong>: Represents the status of the Report.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportStatus); }
			set { Entity.Attributes[Fields.ReportStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Type</para>
		/// <para><strong>Description</strong>: Type of the report.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ReportOptionSets.ReportTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ReportOptionSets.ReportTypeCode? ReportTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ReportTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ReportOptionSets.ReportTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ReportTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ReportTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Version</para>
		/// <para><strong>Description</strong>: Represents the version of a report.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ReportVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ReportVersion); }
			set { Entity.Attributes[Fields.ReportVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule Definition XML</para>
		/// <para><strong>Description</strong>: XML used for defining the report schedule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ScheduleXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ScheduleXml); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Signature Date</para>
		/// <para><strong>Description</strong>: Report signature date, used to identify a report for upgrades and hotfixes.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SignatureDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SignatureDate); }
			set { Entity.Attributes[Fields.SignatureDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Signature</para>
		/// <para><strong>Description</strong>: Unique identifier of the report signature used to identify a report for upgrades and hotfixes.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SignatureId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SignatureId); }
			set { Entity.Attributes[Fields.SignatureId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Signature Language Code</para>
		/// <para><strong>Description</strong>: Report signature language code used to identify a report for upgrades and hotfixes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SignatureLcid
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SignatureLcid); }
			set { Entity.Attributes[Fields.SignatureLcid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Signature Major Version</para>
		/// <para><strong>Description</strong>: Report signature major version, used to identify a report for upgrades and hotfixes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SignatureMajorVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SignatureMajorVersion); }
			set { Entity.Attributes[Fields.SignatureMajorVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report Signature Minor Version</para>
		/// <para><strong>Description</strong>: Report signature minor version, used to identify a report for upgrades and hotfixes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SignatureMinorVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SignatureMinorVersion); }
			set { Entity.Attributes[Fields.SignatureMinorVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the report.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}