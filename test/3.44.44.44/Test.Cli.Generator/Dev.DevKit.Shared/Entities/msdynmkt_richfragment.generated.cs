//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_richfragmentOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_richfragment : EntityBase
	{
		public struct Fields
		{
			public const string msdynmkt_checkedoutto = "msdynmkt_checkedoutto";
			public const string msdynmkt_createdon = "msdynmkt_createdon";
			public const string msdynmkt_fragmentcontent = "msdynmkt_fragmentcontent";
			public const string msdynmkt_ischeckedouttome = "msdynmkt_ischeckedouttome";
			public const string msdynmkt_modifiedon = "msdynmkt_modifiedon";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_placeholders = "msdynmkt_placeholders";
			public const string msdynmkt_richfragmentId = "msdynmkt_richfragmentid";
		}
		public const string EntityLogicalName = "msdynmkt_richfragment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11314;
		public const string EntityCollectionSchemaName = "msdynmkt_richfragments";
		public const string EntityDisplayCollectionName = "Rich fragments";
		public const string DisplayName = "Rich fragment";
		public const string EntitySetName = "msdynmkt_richfragments";
		public const string EntityLogicalCollectionName = "msdynmkt_richfragments";
		public const string EntityPrimaryIdAttribute = "msdynmkt_richfragmentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_richfragment";
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment(Guid msdynmkt_richfragmentId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_richfragmentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_richfragment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_richfragment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_richfragment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_richfragment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_richfragment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_richfragment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Checked Out To</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_checkedoutto
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_checkedoutto); }
			set { Entity.Attributes[Fields.msdynmkt_checkedoutto] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_createdon); }
			set { Entity.Attributes[Fields.msdynmkt_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fragment Content</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_fragmentcontent
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_fragmentcontent); }
			set { Entity.Attributes[Fields.msdynmkt_fragmentcontent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Checked Out To Me</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_ischeckedouttome
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_ischeckedouttome); }
			set { Entity.Attributes[Fields.msdynmkt_ischeckedouttome] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_modifiedon); }
			set { Entity.Attributes[Fields.msdynmkt_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Placeholders</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_placeholders
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_placeholders); }
			set { Entity.Attributes[Fields.msdynmkt_placeholders] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rich fragment</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_richfragmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_richfragmentId] = value;
				Entity.Id = value;
			}
		}
	}
}