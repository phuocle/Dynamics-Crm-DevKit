//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets
{
	public enum msdyn_AnalysisComponentType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Health</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Component_Health = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Health</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Organization_Health = 192_350_000
	}
	public enum msdyn_Category
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Accessibility</para>
		/// <para><strong>Value</strong>: 192,350,008</para>
		/// </summary>
		Accessibility = 192_350_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Design</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Design = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Licensing</para>
		/// <para><strong>Value</strong>: 192,350,009</para>
		/// </summary>
		Licensing = 192_350_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: Maintainability</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Maintainability = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Online Migration</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Online_Migration = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Performance</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Performance = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Security</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Security = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Supportability</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		Supportability = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Upgrade Readiness</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Upgrade_Readiness = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Usage</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Usage = 192_350_002
	}
	public enum msdyn_ComponentType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Configuration</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Configuration = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Plug-In</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Plug_In = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web Resources</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Web_Resources = 192_350_000
	}
	public enum msdyn_Level
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Error = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warning</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Warning = 192_350_001
	}
	public enum msdyn_ReturnStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Config Error</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Config_Error = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Error = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fail</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Fail = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pass</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Pass = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolved</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Resolved = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Suggestion</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Suggestion = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warning</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Warning = 192_350_004
	}
	public enum msdyn_Severity
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Critical</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Critical = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		High = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Low = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Medium</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Medium = 192_350_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_analysisresult : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AnalysisComponentId = "msdyn_analysiscomponentid";
			public const string msdyn_AnalysisComponentType = "msdyn_analysiscomponenttype";
			public const string msdyn_AnalysisJobId = "msdyn_analysisjobid";
			public const string msdyn_analysisresultId = "msdyn_analysisresultid";
			public const string msdyn_Category = "msdyn_category";
			public const string msdyn_ComponentType = "msdyn_componenttype";
			public const string msdyn_EntityName = "msdyn_entityname";
			public const string msdyn_FileUri = "msdyn_fileuri";
			public const string msdyn_HasResolution = "msdyn_hasresolution";
			public const string msdyn_helplink = "msdyn_helplink";
			public const string msdyn_Level = "msdyn_level";
			public const string msdyn_Line = "msdyn_line";
			public const string msdyn_Member = "msdyn_member";
			public const string msdyn_Message = "msdyn_message";
			public const string msdyn_MessageArguments = "msdyn_messagearguments";
			public const string msdyn_MessageId = "msdyn_messageid";
			public const string msdyn_Module = "msdyn_module";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_RepairIssueType = "msdyn_repairissuetype";
			public const string msdyn_ReturnStatus = "msdyn_returnstatus";
			public const string msdyn_RuleId = "msdyn_ruleid";
			public const string msdyn_RuleReferenceUri = "msdyn_rulereferenceuri";
			public const string msdyn_Severity = "msdyn_severity";
			public const string msdyn_Snippet = "msdyn_snippet";
			public const string msdyn_SolutionHealthMessage = "msdyn_solutionhealthmessage";
			public const string msdyn_Type = "msdyn_type";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_analysisresult";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10280;
		public const string EntityCollectionSchemaName = "msdyn_analysisresults";
		public const string EntityDisplayCollectionName = "Analysis Results";
		public const string DisplayName = "Analysis Result";
		public const string EntitySetName = "msdyn_analysisresults";
		public const string EntityLogicalCollectionName = "msdyn_analysisresults";
		public const string EntityPrimaryIdAttribute = "msdyn_analysisresultid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_analysisresult";
		[DebuggerNonUserCode()]
		public msdyn_analysisresult()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_analysisresult(Guid msdyn_analysisresultId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_analysisresultId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_analysisresult(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_analysisresult"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_analysisresult(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_analysisresult"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_analysisresult(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_analysisresult(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_analysisresult"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_analysisresult(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_analysisresult(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_analysisresult(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analysis Component</para>
		/// <para><strong>Description</strong>: The associated Analysis Component that contains the issue described by the Analysis Result.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_analysiscomponent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AnalysisComponentId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AnalysisComponentId); }
			set { Entity.Attributes[Fields.msdyn_AnalysisComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AnalysisComponentType</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_AnalysisComponentType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_AnalysisComponentType.Component_Health"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_AnalysisComponentType? msdyn_AnalysisComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_AnalysisComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_AnalysisComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_AnalysisComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_AnalysisComponentType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analysis Job</para>
		/// <para><strong>Description</strong>: The parent Analysis Job that produced the Analysis Result</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_analysisjob"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AnalysisJobId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AnalysisJobId); }
			set { Entity.Attributes[Fields.msdyn_AnalysisJobId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Analysis Result</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_analysisresultId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_analysisresultId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Category"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Category? msdyn_Category
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Category);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Category)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Category] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Category] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_ComponentType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_ComponentType? msdyn_ComponentType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ComponentType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_ComponentType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ComponentType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ComponentType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_EntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_EntityName); }
			set { Entity.Attributes[Fields.msdyn_EntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Uri</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FileUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FileUri); }
			set { Entity.Attributes[Fields.msdyn_FileUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HasResolution</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_HasResolution
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_HasResolution); }
			set { Entity.Attributes[Fields.msdyn_HasResolution] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Help Link</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_helplink
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_helplink); }
			set { Entity.Attributes[Fields.msdyn_helplink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Level</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Level"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Level? msdyn_Level
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Level);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Level)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Level] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Level] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Line</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Line
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Line); }
			set { Entity.Attributes[Fields.msdyn_Line] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Member</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Member
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Member); }
			set { Entity.Attributes[Fields.msdyn_Member] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Message
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Message); }
			set { Entity.Attributes[Fields.msdyn_Message] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message Arguments</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MessageArguments
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MessageArguments); }
			set { Entity.Attributes[Fields.msdyn_MessageArguments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_MessageId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_MessageId); }
			set { Entity.Attributes[Fields.msdyn_MessageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Module</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Module
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Module); }
			set { Entity.Attributes[Fields.msdyn_Module] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Repair Issue Type</para>
		/// <para><strong>Description</strong>: Type of issue that needs to be repaired. Same as IssueType Input Parameter for Solution Health Rule.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RepairIssueType
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RepairIssueType); }
			set { Entity.Attributes[Fields.msdyn_RepairIssueType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Return Status</para>
		/// <para><strong>Description</strong>: The return status of a rule run: pass, fail, or configuration error</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_ReturnStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_ReturnStatus? msdyn_ReturnStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ReturnStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_ReturnStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ReturnStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ReturnStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rule Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RuleId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RuleId); }
			set { Entity.Attributes[Fields.msdyn_RuleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rule Reference Uri</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RuleReferenceUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RuleReferenceUri); }
			set { Entity.Attributes[Fields.msdyn_RuleReferenceUri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Severity</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Severity"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Severity? msdyn_Severity
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Severity);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.msdyn_Severity)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Severity] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Severity] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Snippet</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Snippet
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Snippet); }
			set { Entity.Attributes[Fields.msdyn_Snippet] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SolutionHealthMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SolutionHealthMessage); }
			set { Entity.Attributes[Fields.msdyn_SolutionHealthMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Type); }
			set { Entity.Attributes[Fields.msdyn_Type] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Analysis Result</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Analysis Result</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_analysisresultOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}