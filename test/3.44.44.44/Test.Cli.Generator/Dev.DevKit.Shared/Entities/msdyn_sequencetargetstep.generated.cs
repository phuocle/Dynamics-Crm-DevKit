//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets
{
	public enum msdyn_advancedfromwaitstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: NA</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NA = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		None = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Waiting = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting Completed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Waiting_Completed = 3
	}
	public enum msdyn_convertedtomanualfrom
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto action</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Auto_action = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated Email</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Automated_Email = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated Experimentation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Automated_Experimentation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated text message</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Automated_text_message = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn action</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		LinkedIn_action = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Simple Condition</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Simple_Condition = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Text message</para>
		/// <para><strong>Value</strong>: 4,213</para>
		/// </summary>
		Text_message = 4_213,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Wait = 0
	}
	public enum msdyn_errorstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated text message failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Automated_text_message_failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Field update failed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Field_update_failed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: NA</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NA = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Use email template failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Use_email_template_failed = 3
	}
	public enum msdyn_subtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AdvanceToOtherSequence</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		AdvanceToOtherSequence = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInConnect</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		LinkedInConnect = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInGetIntroduced</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		LinkedInGetIntroduced = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInMail</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		LinkedInMail = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedInResearch</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		LinkedInResearch = 1
	}
	public enum msdyn_type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto action</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Auto_action = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated Email</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Automated_Email = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated Experimentation</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Automated_Experimentation = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Automated text message</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Automated_text_message = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn action</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		LinkedIn_action = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Simple Condition</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Simple_Condition = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Text message</para>
		/// <para><strong>Value</strong>: 4,213</para>
		/// </summary>
		Text_message = 4_213,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Wait = 0
	}
	public enum msdyn_waitstate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: NA</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NA = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Skipped = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Waiting = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting completed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Waiting_completed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting for update</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Waiting_for_update = 3
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelled</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Cancelled = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Completed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Open = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Skipped = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequencetargetstep : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_advancedfromstep = "msdyn_advancedfromstep";
			public const string msdyn_advancedfromwaitstate = "msdyn_advancedfromwaitstate";
			public const string msdyn_completedon = "msdyn_completedon";
			[System.Obsolete("Deprecated from version: 9.2.0.0")]
			public const string msdyn_convertedtomanualfrom = "msdyn_convertedtomanualfrom";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_duetime = "msdyn_duetime";
			public const string msdyn_errorstate = "msdyn_errorstate";
			public const string msdyn_linkedactivityid = "msdyn_linkedactivityid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_operationparameter = "msdyn_operationparameter";
			public const string msdyn_sequenceduetime = "msdyn_sequenceduetime";
			public const string msdyn_sequencestepId = "msdyn_sequencestepid";
			public const string msdyn_sequencetarget = "msdyn_sequencetarget";
			public const string msdyn_sequencetargetstepId = "msdyn_sequencetargetstepid";
			public const string msdyn_snoozecount = "msdyn_snoozecount";
			public const string msdyn_subtype = "msdyn_subtype";
			public const string msdyn_triggeroutcome = "msdyn_triggeroutcome";
			public const string msdyn_type = "msdyn_type";
			public const string msdyn_waitskippedon = "msdyn_waitskippedon";
			public const string msdyn_waitstate = "msdyn_waitstate";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_sequencetargetstep";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10819;
		public const string EntityCollectionSchemaName = "msdyn_sequencetargetsteps";
		public const string EntityDisplayCollectionName = "Sequence Target Steps";
		public const string DisplayName = "Sequence Target Step";
		public const string EntitySetName = "msdyn_sequencetargetsteps";
		public const string EntityLogicalCollectionName = "msdyn_sequencetargetsteps";
		public const string EntityPrimaryIdAttribute = "msdyn_sequencetargetstepid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_sequencetargetstep";
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Guid msdyn_sequencetargetstepId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequencetargetstepId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetargetstep"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetargetstep"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequencetargetstep(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetargetstep"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequencetargetstep(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetargetstep(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced From Step</para>
		/// <para><strong>Description</strong>: Related Sequence Target Step</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_sequencetargetstep"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_advancedfromstep
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_advancedfromstep); }
			set { Entity.Attributes[Fields.msdyn_advancedfromstep] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced from step wait state</para>
		/// <para><strong>Description</strong>: Select state of waiting on advanced from sequence step</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_advancedfromwaitstate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_advancedfromwaitstate.NA"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_advancedfromwaitstate? msdyn_advancedfromwaitstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_advancedfromwaitstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_advancedfromwaitstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_advancedfromwaitstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_advancedfromwaitstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed On</para>
		/// <para><strong>Description</strong>: Date and time when the record was marked completed.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_completedon); }
			set { Entity.Attributes[Fields.msdyn_completedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Converted To Manual From</para>
		/// <para><strong>Description</strong>: Shows which msdyn_sequencestep_type this was before it was converted to current step type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_convertedtomanualfrom"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_convertedtomanualfrom.Wait"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 9.2.0.0")]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_convertedtomanualfrom? msdyn_convertedtomanualfrom
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_convertedtomanualfrom);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_convertedtomanualfrom)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_convertedtomanualfrom] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_convertedtomanualfrom] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description for Sequence target step</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Due time</para>
		/// <para><strong>Description</strong>: Actual due time for Sequence target step</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_duetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_duetime); }
			set { Entity.Attributes[Fields.msdyn_duetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error state</para>
		/// <para><strong>Description</strong>: Select the error state for sequence step</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_errorstate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_errorstate.NA"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_errorstate? msdyn_errorstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_errorstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_errorstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_errorstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_errorstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked activity id</para>
		/// <para><strong>Description</strong>: Unique identifier of the activity linked to the sequence step</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_linkedactivityid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_linkedactivityid); }
			set { Entity.Attributes[Fields.msdyn_linkedactivityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the Sequence Target step entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operation Parameter</para>
		/// <para><strong>Description</strong>: Parameter for operation in Sequence target step</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_operationparameter
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_operationparameter); }
			set { Entity.Attributes[Fields.msdyn_operationparameter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence due time</para>
		/// <para><strong>Description</strong>: Sequence proposed due time for Sequence target step</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_sequenceduetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_sequenceduetime); }
			set { Entity.Attributes[Fields.msdyn_sequenceduetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Step Id</para>
		/// <para><strong>Description</strong>: Unique Identifier for step in Sequence entity</para>
		/// <para>Required - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? msdyn_sequencestepId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.msdyn_sequencestepId); }
			set { Entity.Attributes[Fields.msdyn_sequencestepId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Target</para>
		/// <para><strong>Description</strong>: Related Sequence Target</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_sequencetarget"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_sequencetarget
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_sequencetarget); }
			set { Entity.Attributes[Fields.msdyn_sequencetarget] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Target Step</para>
		/// <para><strong>Description</strong>: Unique identifier for entity Sequence Target Step</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequencetargetstepId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequencetargetstepId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Snooze count</para>
		/// <para><strong>Description</strong>: Number of times sequence step is snoozed.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_snoozecount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_snoozecount); }
			set { Entity.Attributes[Fields.msdyn_snoozecount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Target Sub Type</para>
		/// <para><strong>Description</strong>: Shows the sub type of sequence target step</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_subtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_subtype.Default"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_subtype? msdyn_subtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_subtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_subtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_subtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_subtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trigger outcome</para>
		/// <para><strong>Description</strong>: Outcome of the trigger associated with step</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_triggeroutcome
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_triggeroutcome); }
			set { Entity.Attributes[Fields.msdyn_triggeroutcome] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_type.Wait"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_type? msdyn_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait skipped on</para>
		/// <para><strong>Description</strong>: Date time when wait associated with step is skipped</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_waitskippedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_waitskippedon); }
			set { Entity.Attributes[Fields.msdyn_waitskippedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Wait state</para>
		/// <para><strong>Description</strong>: Select whether wait step is pending or skipped</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_waitstate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_waitstate.NA"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_waitstate? msdyn_waitstate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_waitstate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.msdyn_waitstate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_waitstate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_waitstate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Sequence Target Step</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Sequence Target Step</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetargetstepOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}