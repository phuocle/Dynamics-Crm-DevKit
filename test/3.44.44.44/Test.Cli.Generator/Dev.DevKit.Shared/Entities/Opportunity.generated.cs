//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:43
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.OpportunityOptionSets
{
	public enum BudgetStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Can Buy</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Can_Buy = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: May Buy</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		May_Buy = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Committed Budget</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		No_Committed_Budget = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Will Buy</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Will_Buy = 3
	}
	public enum InitialCommunication
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contacted</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Contacted = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Contacted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Not_Contacted = 1
	}
	public enum msdyn_forecastcategory
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Best case</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Best_case = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Committed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Committed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lost</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Lost = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Omitted</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Omitted = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pipeline</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Pipeline = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Won</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Won = 100_000_005
	}
	public enum msdyn_OpportunityGrade
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade A</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Grade_A = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade B</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Grade_B = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade C</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Grade_C = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Grade D</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Grade_D = 3
	}
	public enum msdyn_OpportunityScoreTrend
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Declining</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Declining = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Improving</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Improving = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not enough info</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_enough_info = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Steady</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Steady = 1
	}
	public enum msdyn_OrderType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Item based</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Item_based = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service-Maintenance Based</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Service_Maintenance_Based = 690_970_002
	}
	public enum Need
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Good to have</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Good_to_have = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Must have</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Must_have = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: No need</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		No_need = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Should have</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Should_have = 1
	}
	public enum OpportunityRatingCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cold</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Cold = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hot</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Hot = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warm</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Warm = 2
	}
	public enum PricingErrorCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Currency Attribute Overflow</para>
		/// <para><strong>Value</strong>: 36</para>
		/// </summary>
		Base_Currency_Attribute_Overflow = 36,
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Currency Attribute Underflow</para>
		/// <para><strong>Value</strong>: 37</para>
		/// </summary>
		Base_Currency_Attribute_Underflow = 37,
		/// <summary>
		/// <para><strong>Display Name</strong>: Detail Error</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Detail_Error = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount Type Invalid State</para>
		/// <para><strong>Value</strong>: 27</para>
		/// </summary>
		Discount_Type_Invalid_State = 27,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Discount Type</para>
		/// <para><strong>Value</strong>: 33</para>
		/// </summary>
		Inactive_Discount_Type = 33,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Price Level</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Inactive_Price_Level = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Current Cost</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Invalid_Current_Cost = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Discount</para>
		/// <para><strong>Value</strong>: 28</para>
		/// </summary>
		Invalid_Discount = 28,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Discount Type</para>
		/// <para><strong>Value</strong>: 26</para>
		/// </summary>
		Invalid_Discount_Type = 26,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price</para>
		/// <para><strong>Value</strong>: 19</para>
		/// </summary>
		Invalid_Price = 19,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Amount</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Invalid_Price_Level_Amount = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Currency</para>
		/// <para><strong>Value</strong>: 34</para>
		/// </summary>
		Invalid_Price_Level_Currency = 34,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Percentage</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Invalid_Price_Level_Percentage = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Pricing Code</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Invalid_Pricing_Code = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Pricing Precision</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Invalid_Pricing_Precision = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Product</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Invalid_Product = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Quantity</para>
		/// <para><strong>Value</strong>: 29</para>
		/// </summary>
		Invalid_Quantity = 29,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Amount</para>
		/// <para><strong>Value</strong>: 24</para>
		/// </summary>
		Invalid_Rounding_Amount = 24,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Option</para>
		/// <para><strong>Value</strong>: 23</para>
		/// </summary>
		Invalid_Rounding_Option = 23,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Policy</para>
		/// <para><strong>Value</strong>: 22</para>
		/// </summary>
		Invalid_Rounding_Policy = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Standard Cost</para>
		/// <para><strong>Value</strong>: 21</para>
		/// </summary>
		Invalid_Standard_Cost = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Current Cost</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Missing_Current_Cost = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Missing_Price = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Missing_Price_Level = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level Amount</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Missing_Price_Level_Amount = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level Percentage</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Missing_Price_Level_Percentage = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Pricing Code</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Missing_Pricing_Code = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Missing_Product = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product Default UOM</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Missing_Product_Default_UOM = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product UOM Schedule </para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Missing_Product_UOM_Schedule = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Quantity</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Missing_Quantity = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Standard Cost</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Missing_Standard_Cost = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Unit Price</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Missing_Unit_Price = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing UOM</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Missing_UOM = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Attribute Out Of Range</para>
		/// <para><strong>Value</strong>: 35</para>
		/// </summary>
		Price_Attribute_Out_Of_Range = 35,
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Calculation Error</para>
		/// <para><strong>Value</strong>: 25</para>
		/// </summary>
		Price_Calculation_Error = 25,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Not In Price Level</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Product_Not_In_Price_Level = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transaction currency is not set for the product price list item</para>
		/// <para><strong>Value</strong>: 38</para>
		/// </summary>
		Transaction_currency_is_not_set_for_the_product_price_list_item = 38
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum PurchaseProcess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Committee</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Committee = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Individual</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Individual = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Unknown = 2
	}
	public enum PurchaseTimeframe
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Immediate</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Immediate = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Quarter</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Next_Quarter = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: This Quarter</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		This_Quarter = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: This Year</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		This_Year = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Unknown = 4
	}
	public enum SalesStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Close</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Close = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Develop</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Develop = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Propose</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Propose = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualify</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Qualify = 0
	}
	public enum SalesStageCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum SkipPriceCalculation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DoPriceCalcAlways</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		DoPriceCalcAlways = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: SkipPriceCalcOnRetrieve</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		SkipPriceCalcOnRetrieve = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Lost</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Lost = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Won</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Won = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Lost</strong></para>
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		On_Hold = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Out-Sold</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Lost</strong></para>
		/// </summary>
		Out_Sold = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Won</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Won</strong></para>
		/// </summary>
		Won = 3
	}
	public enum TimeLine
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Immediate</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Immediate = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Quarter</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Next_Quarter = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not known</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Not_known = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: This Quarter</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		This_Quarter = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: This Year</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		This_Year = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Opportunity : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActualCloseDate = "actualclosedate";
			public const string ActualValue = "actualvalue";
			public const string ActualValue_Base = "actualvalue_base";
			public const string BudgetAmount = "budgetamount";
			public const string BudgetAmount_Base = "budgetamount_base";
			public const string BudgetStatus = "budgetstatus";
			public const string CampaignId = "campaignid";
			public const string CaptureProposalFeedback = "captureproposalfeedback";
			public const string CloseProbability = "closeprobability";
			public const string CompleteFinalProposal = "completefinalproposal";
			public const string CompleteInternalReview = "completeinternalreview";
			public const string ConfirmInterest = "confirminterest";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CurrentSituation = "currentsituation";
			public const string CustomerId = "customerid";
			public const string CustomerNeed = "customerneed";
			public const string CustomerPainPoints = "customerpainpoints";
			public const string DecisionMaker = "decisionmaker";
			public const string Description = "description";
			public const string DevelopProposal = "developproposal";
			public const string DiscountAmount = "discountamount";
			public const string DiscountAmount_Base = "discountamount_base";
			public const string DiscountPercentage = "discountpercentage";
			public const string EmailAddress = "emailaddress";
			public const string EstimatedCloseDate = "estimatedclosedate";
			public const string EstimatedValue = "estimatedvalue";
			public const string EstimatedValue_Base = "estimatedvalue_base";
			public const string EvaluateFit = "evaluatefit";
			public const string ExchangeRate = "exchangerate";
			public const string FileDebrief = "filedebrief";
			public const string FinalDecisionDate = "finaldecisiondate";
			public const string FreightAmount = "freightamount";
			public const string FreightAmount_Base = "freightamount_base";
			public const string IdentifyCompetitors = "identifycompetitors";
			public const string IdentifyCustomerContacts = "identifycustomercontacts";
			public const string IdentifyPursuitTeam = "identifypursuitteam";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InitialCommunication = "initialcommunication";
			public const string IsPrivate = "isprivate";
			public const string IsRevenueSystemCalculated = "isrevenuesystemcalculated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_forecastcategory = "msdyn_forecastcategory";
			public const string msdyn_gdproptout = "msdyn_gdproptout";
			public const string msdyn_OpportunityGrade = "msdyn_opportunitygrade";
			public const string msdyn_opportunitykpiid = "msdyn_opportunitykpiid";
			public const string msdyn_OpportunityScore = "msdyn_opportunityscore";
			public const string msdyn_OpportunityScoreTrend = "msdyn_opportunityscoretrend";
			public const string msdyn_OrderType = "msdyn_ordertype";
			public const string msdyn_PredictiveScoreId = "msdyn_predictivescoreid";
			public const string msdyn_ScoreHistory = "msdyn_scorehistory";
			public const string msdyn_ScoreReasons = "msdyn_scorereasons";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyn_similaropportunities = "msdyn_similaropportunities";
			public const string msdyn_WorkOrderType = "msdyn_workordertype";
			public const string msdynmkt_JourneyActionId = "msdynmkt_journeyactionid";
			public const string msdynmkt_JourneyId = "msdynmkt_journeyid";
			public const string Name = "name";
			public const string Need = "need";
			public const string OnHoldTime = "onholdtime";
			public const string OpportunityId = "opportunityid";
			public const string OpportunityRatingCode = "opportunityratingcode";
			public const string OriginatingLeadId = "originatingleadid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentAccountId = "parentaccountid";
			public const string ParentContactId = "parentcontactid";
			public const string ParticipatesInWorkflow = "participatesinworkflow";
			public const string PresentFinalProposal = "presentfinalproposal";
			public const string PresentProposal = "presentproposal";
			public const string PriceLevelId = "pricelevelid";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string ProposedSolution = "proposedsolution";
			public const string PurchaseProcess = "purchaseprocess";
			public const string PurchaseTimeframe = "purchasetimeframe";
			public const string PursuitDecision = "pursuitdecision";
			public const string QualificationComments = "qualificationcomments";
			public const string QuoteComments = "quotecomments";
			public const string ResolveFeedback = "resolvefeedback";
			public const string SalesStage = "salesstage";
			public const string SalesStageCode = "salesstagecode";
			public const string ScheduleFollowup_Prospect = "schedulefollowup_prospect";
			public const string ScheduleFollowup_Qualify = "schedulefollowup_qualify";
			public const string ScheduleProposalMeeting = "scheduleproposalmeeting";
			public const string SendThankYouNote = "sendthankyounote";
			public const string SkipPriceCalculation = "skippricecalculation";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StepId = "stepid";
			public const string StepName = "stepname";
			public const string TeamsFollowed = "teamsfollowed";
			public const string TimeLine = "timeline";
			public const string TimeSpentByMeOnEmailAndMeetings = "timespentbymeonemailandmeetings";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalAmount = "totalamount";
			public const string TotalAmount_Base = "totalamount_base";
			public const string TotalAmountLessFreight = "totalamountlessfreight";
			public const string TotalAmountLessFreight_Base = "totalamountlessfreight_base";
			public const string TotalDiscountAmount = "totaldiscountamount";
			public const string TotalDiscountAmount_Base = "totaldiscountamount_base";
			public const string TotalLineItemAmount = "totallineitemamount";
			public const string TotalLineItemAmount_Base = "totallineitemamount_base";
			public const string TotalLineItemDiscountAmount = "totallineitemdiscountamount";
			public const string TotalLineItemDiscountAmount_Base = "totallineitemdiscountamount_base";
			public const string TotalTax = "totaltax";
			public const string TotalTax_Base = "totaltax_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "opportunity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 3;
		public const string EntityCollectionSchemaName = "Opportunities";
		public const string EntityDisplayCollectionName = "Opportunities";
		public const string DisplayName = "Opportunity";
		public const string EntitySetName = "opportunities";
		public const string EntityLogicalCollectionName = "opportunities";
		public const string EntityPrimaryIdAttribute = "opportunityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Opportunity";
		[DebuggerNonUserCode()]
		public Opportunity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Opportunity(Guid OpportunityId)
		{
			Entity = new Entity(EntityLogicalName, OpportunityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Opportunity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Opportunity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Opportunity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Opportunity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Opportunity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Opportunity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Opportunity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Opportunity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Opportunity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Opportunity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Internal attribute for storing customerid. Do not use this attribute directly; use parentaccountid instead.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Close Date</para>
		/// <para><strong>Description</strong>: Shows the date and time when the opportunity was closed or canceled.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? ActualCloseDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.ActualCloseDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.ActualCloseDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.ActualCloseDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Revenue</para>
		/// <para><strong>Description</strong>: Type the actual revenue amount for the opportunity for reporting and analysis of estimated versus actual sales. Field defaults to the Est. Revenue value when an opportunity is won.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -1,000,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualValue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualValue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ActualValue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ActualValue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Revenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the Actual Revenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualValue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualValue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget amount</para>
		/// <para><strong>Description</strong>: Type a value between 0 and 1,000,000,000,000 to indicate the lead&apos;s potential available budget.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.BudgetAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Budget Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? BudgetAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.BudgetAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget</para>
		/// <para><strong>Description</strong>: Select the likely budget status for the lead&apos;s company. This may help determine the lead rating or your sales approach.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.BudgetStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.BudgetStatus? BudgetStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BudgetStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.BudgetStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BudgetStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BudgetStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Campaign</para>
		/// <para><strong>Description</strong>: Shows the campaign that the opportunity was created from. The ID is used for tracking the success of the campaign.</para>
		/// <para><strong>Lookup</strong>: <see cref="campaign"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignId); }
			set { Entity.Attributes[Fields.CampaignId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Proposal Feedback Captured</para>
		/// <para><strong>Description</strong>: Choose whether the proposal feedback has been captured for the opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CaptureProposalFeedback
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CaptureProposalFeedback); }
			set { Entity.Attributes[Fields.CaptureProposalFeedback] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Probability</para>
		/// <para><strong>Description</strong>: Type a number from 0 to 100 that represents the likelihood of closing the opportunity. This can aid the sales team in their efforts to convert the opportunity in a sale.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CloseProbability
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CloseProbability); }
			set { Entity.Attributes[Fields.CloseProbability] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Final Proposal Ready</para>
		/// <para><strong>Description</strong>: Select whether a final proposal has been completed for the opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CompleteFinalProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CompleteFinalProposal); }
			set { Entity.Attributes[Fields.CompleteFinalProposal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Complete Internal Review</para>
		/// <para><strong>Description</strong>: Select whether an internal review has been completed for this opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CompleteInternalReview
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CompleteInternalReview); }
			set { Entity.Attributes[Fields.CompleteInternalReview] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirm Interest</para>
		/// <para><strong>Description</strong>: Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality and the probability of it turning into an opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConfirmInterest
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConfirmInterest); }
			set { Entity.Attributes[Fields.ConfirmInterest] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Internal attribute for storing customerid. Do not use this attribute directly; use parentcontactid instead.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Situation</para>
		/// <para><strong>Description</strong>: Type notes about the company or organization associated with the opportunity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CurrentSituation
		{
			get { return Entity.GetAttributeValue<string>(Fields.CurrentSituation); }
			set { Entity.Attributes[Fields.CurrentSituation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Potential Customer</para>
		/// <para><strong>Description</strong>: Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Need</para>
		/// <para><strong>Description</strong>: Type some notes about the customer&apos;s requirements, to help the sales team identify products and services that could meet their requirements.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomerNeed
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomerNeed); }
			set { Entity.Attributes[Fields.CustomerNeed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Pain Points</para>
		/// <para><strong>Description</strong>: Type notes about the customer&apos;s pain points to help the sales team identify products and services that could address these pain points.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomerPainPoints
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomerPainPoints); }
			set { Entity.Attributes[Fields.CustomerPainPoints] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decision Maker?</para>
		/// <para><strong>Description</strong>: Select whether your notes include information about who makes the purchase decisions at the lead&apos;s company.</para>
		/// <para><strong>Two Option</strong> - [<strong>completed</strong>]: true - [<strong>mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DecisionMaker
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DecisionMaker); }
			set { Entity.Attributes[Fields.DecisionMaker] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the opportunity, such as possible products to sell or past purchases from the customer.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Develop Proposal</para>
		/// <para><strong>Description</strong>: Select whether a proposal has been developed for the opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? DevelopProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.DevelopProposal); }
			set { Entity.Attributes[Fields.DevelopProposal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Discount Amount</para>
		/// <para><strong>Description</strong>: Type the discount amount for the opportunity if the customer is eligible for special savings.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.DiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Opportunity Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Discount (%)</para>
		/// <para><strong>Description</strong>: Type the discount rate that should be applied to the Product Totals field to include additional savings for the customer in the opportunity.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DiscountPercentage); }
			set { Entity.Attributes[Fields.DiscountPercentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address</para>
		/// <para><strong>Description</strong>: The primary email address for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. close date</para>
		/// <para><strong>Description</strong>: Enter the expected closing date of the opportunity to help make accurate revenue forecasts.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? EstimatedCloseDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.EstimatedCloseDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.EstimatedCloseDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.EstimatedCloseDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. revenue</para>
		/// <para><strong>Description</strong>: Type the estimated revenue amount to indicate the potential sale or value of the opportunity for revenue forecasting. This field can be either system-populated or editable based on the selection in the Revenue field.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -1,000,000,000,000 - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedValue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedValue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EstimatedValue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.EstimatedValue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Est. Revenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the Est. Revenue in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? EstimatedValue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.EstimatedValue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluate Fit</para>
		/// <para><strong>Description</strong>: Select whether the fit between the lead&apos;s requirements and your offerings was evaluated.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? EvaluateFit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.EvaluateFit); }
			set { Entity.Attributes[Fields.EvaluateFit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File Debrief</para>
		/// <para><strong>Description</strong>: Choose whether the sales team has recorded detailed notes on the proposals and the account&apos;s responses.</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FileDebrief
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FileDebrief); }
			set { Entity.Attributes[Fields.FileDebrief] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Final Decision Date</para>
		/// <para><strong>Description</strong>: Enter the date and time when the final decision of the opportunity was made.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: DateOnly - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? FinalDecisionDate
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.FinalDecisionDate);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.FinalDecisionDate] = dateTime;
				}
				else
					Entity.Attributes[Fields.FinalDecisionDate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Freight Amount</para>
		/// <para><strong>Description</strong>: Type the cost of freight or shipping for the products included in the opportunity for use in calculating the Total Amount field.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.FreightAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Freight Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Freight Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify Competitors</para>
		/// <para><strong>Description</strong>: Select whether information about competitors is included.</para>
		/// <para><strong>Two Option</strong> - [<strong>completed</strong>]: true - [<strong>mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IdentifyCompetitors
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IdentifyCompetitors); }
			set { Entity.Attributes[Fields.IdentifyCompetitors] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify Customer Contacts</para>
		/// <para><strong>Description</strong>: Select whether the customer contacts for this opportunity have been identified.</para>
		/// <para><strong>Two Option</strong> - [<strong>completed</strong>]: true - [<strong>mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IdentifyCustomerContacts
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IdentifyCustomerContacts); }
			set { Entity.Attributes[Fields.IdentifyCustomerContacts] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify Sales Team</para>
		/// <para><strong>Description</strong>: Choose whether you have recorded who will pursue the opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>completed</strong>]: true - [<strong>mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IdentifyPursuitTeam
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IdentifyPursuitTeam); }
			set { Entity.Attributes[Fields.IdentifyPursuitTeam] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Communication</para>
		/// <para><strong>Description</strong>: Choose whether someone from the sales team contacted this lead earlier.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.InitialCommunication"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.InitialCommunication? InitialCommunication
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialCommunication);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.InitialCommunication)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InitialCommunication] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.InitialCommunication] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Private</para>
		/// <para><strong>Description</strong>: Indicates whether the opportunity is private or visible to the entire organization.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Revenue</para>
		/// <para><strong>Description</strong>: Select whether the estimated revenue for the opportunity is calculated automatically based on the products entered or entered manually by a user.</para>
		/// <para><strong>Two Option</strong> - [<strong>System Calculated</strong>]: true - [<strong>User Provided</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>User Provided</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRevenueSystemCalculated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRevenueSystemCalculated); }
			set { Entity.Attributes[Fields.IsRevenueSystemCalculated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast category</para>
		/// <para><strong>Description</strong>: Categories used for forecasting.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_forecastcategory"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_forecastcategory.Pipeline"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_forecastcategory? msdyn_forecastcategory
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_forecastcategory);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_forecastcategory)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_forecastcategory] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_forecastcategory] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: GDPR Optout</para>
		/// <para><strong>Description</strong>: Describes whether opportunity is opted out or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_gdproptout
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_gdproptout); }
			set { Entity.Attributes[Fields.msdyn_gdproptout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Opportunity Grade</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityGrade"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityGrade? msdyn_OpportunityGrade
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_OpportunityGrade);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityGrade)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_OpportunityGrade] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_OpportunityGrade] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: KPI</para>
		/// <para><strong>Description</strong>: Maps to opportunity KPI records</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_opportunitykpiitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_opportunitykpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_opportunitykpiid); }
			set { Entity.Attributes[Fields.msdyn_opportunitykpiid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Opportunity Score</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_OpportunityScore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_OpportunityScore); }
			set { Entity.Attributes[Fields.msdyn_OpportunityScore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Opportunity Score Trend</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityScoreTrend"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityScoreTrend? msdyn_OpportunityScoreTrend
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_OpportunityScoreTrend);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OpportunityScoreTrend)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_OpportunityScoreTrend] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_OpportunityScoreTrend] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Type</para>
		/// <para><strong>Description</strong>: Internal use only.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OrderType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OrderType.Item_based"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OrderType? msdyn_OrderType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_OrderType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.msdyn_OrderType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_OrderType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_OrderType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Predictive Score</para>
		/// <para><strong>Description</strong>: Predictive score</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_predictivescore"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_PredictiveScoreId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_PredictiveScoreId); }
			set { Entity.Attributes[Fields.msdyn_PredictiveScoreId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Score History</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreHistory
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreHistory); }
			set { Entity.Attributes[Fields.msdyn_ScoreHistory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Score Reasons</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ScoreReasons
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ScoreReasons); }
			set { Entity.Attributes[Fields.msdyn_ScoreReasons] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Segment associated with Opportunity.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_similaropportunities</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 65,536</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_similaropportunities
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_similaropportunities); }
			set { Entity.Attributes[Fields.msdyn_similaropportunities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order Type</para>
		/// <para><strong>Description</strong>: Unique identifier for Work Order Type associated with Opportunity.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workordertype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrderType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrderType); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Action Id</para>
		/// <para><strong>Description</strong>: The Journey action id in which the opportunity is created.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_JourneyActionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_JourneyActionId); }
			set { Entity.Attributes[Fields.msdynmkt_JourneyActionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Journey Id</para>
		/// <para><strong>Description</strong>: The journey id in which the opportunity is created</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_journey"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_JourneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_JourneyId); }
			set { Entity.Attributes[Fields.msdynmkt_JourneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Topic</para>
		/// <para><strong>Description</strong>: Type a subject or descriptive name, such as the expected order or company name, for the opportunity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Need</para>
		/// <para><strong>Description</strong>: Choose how high the level of need is for the lead&apos;s company.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.Need"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.Need? Need
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Need);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.Need)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Need] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Need] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows the duration in minutes for which the opportunity was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity</para>
		/// <para><strong>Description</strong>: Unique identifier of the opportunity.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid OpportunityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.OpportunityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rating</para>
		/// <para><strong>Description</strong>: Select the expected value or priority of the opportunity based on revenue, customer status, or closing probability.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.OpportunityRatingCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.OpportunityRatingCode.Warm"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.OpportunityRatingCode? OpportunityRatingCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OpportunityRatingCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.OpportunityRatingCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OpportunityRatingCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OpportunityRatingCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating Lead</para>
		/// <para><strong>Description</strong>: Choose the lead that the opportunity was created from for reporting and analytics. The field is read-only after the opportunity is created and defaults to the correct lead when an opportunity is created from a converted lead.</para>
		/// <para><strong>Lookup</strong>: <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingLeadId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingLeadId); }
			set { Entity.Attributes[Fields.OriginatingLeadId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Choose an account to connect this opportunity to, so that the relationship is visible in reports and analytics, and to provide a quick link to additional details, such as financial information and activities.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentAccountId); }
			set { Entity.Attributes[Fields.ParentAccountId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Choose a contact to connect this opportunity to, so that the relationship is visible in reports and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentContactId); }
			set { Entity.Attributes[Fields.ParentContactId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Participates in Workflow</para>
		/// <para><strong>Description</strong>: Information about whether the opportunity participates in workflow rules.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ParticipatesInWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ParticipatesInWorkflow); }
			set { Entity.Attributes[Fields.ParticipatesInWorkflow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Present Final Proposal</para>
		/// <para><strong>Description</strong>: Select whether the final proposal has been presented to the account.</para>
		/// <para><strong>Two Option</strong> - [<strong>completed</strong>]: true - [<strong>mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PresentFinalProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PresentFinalProposal); }
			set { Entity.Attributes[Fields.PresentFinalProposal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Presented Proposal</para>
		/// <para><strong>Description</strong>: Select whether a proposal for the opportunity has been presented to the account.</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PresentProposal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PresentProposal); }
			set { Entity.Attributes[Fields.PresentProposal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
		/// <para><strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pricing Error</para>
		/// <para><strong>Description</strong>: Pricing error for the opportunity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.PricingErrorCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.PricingErrorCode.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PricingErrorCode? PricingErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PricingErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingErrorCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.PriorityCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Proposed Solution</para>
		/// <para><strong>Description</strong>: Type notes about the proposed solution for the opportunity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProposedSolution
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProposedSolution); }
			set { Entity.Attributes[Fields.ProposedSolution] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Process</para>
		/// <para><strong>Description</strong>: Choose whether an individual or a committee will be involved in the  purchase process for the lead.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseProcess"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseProcess? PurchaseProcess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseProcess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseProcess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseProcess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseProcess] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Purchase Timeframe</para>
		/// <para><strong>Description</strong>: Choose how long the lead will likely take to make the purchase.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseTimeframe"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseTimeframe? PurchaseTimeframe
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PurchaseTimeframe);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.PurchaseTimeframe)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PurchaseTimeframe] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PurchaseTimeframe] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decide Go/No-Go</para>
		/// <para><strong>Description</strong>: Select whether the decision about pursuing the opportunity has been made.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PursuitDecision
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PursuitDecision); }
			set { Entity.Attributes[Fields.PursuitDecision] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Qualification Comments</para>
		/// <para><strong>Description</strong>: Type comments about the qualification or scoring of the lead.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QualificationComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.QualificationComments); }
			set { Entity.Attributes[Fields.QualificationComments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Comments</para>
		/// <para><strong>Description</strong>: Type comments about the quotes associated with the opportunity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string QuoteComments
		{
			get { return Entity.GetAttributeValue<string>(Fields.QuoteComments); }
			set { Entity.Attributes[Fields.QuoteComments] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Feedback Resolved</para>
		/// <para><strong>Description</strong>: Choose whether the proposal feedback has been captured and resolved for the opportunity.</para>
		/// <para><strong>Two Option</strong> - [<strong>No</strong>]: true - [<strong>Yes</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ResolveFeedback
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ResolveFeedback); }
			set { Entity.Attributes[Fields.ResolveFeedback] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales Stage</para>
		/// <para><strong>Description</strong>: Select the sales stage of this opportunity to aid the sales team in their efforts to win this opportunity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStage? SalesStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Code</para>
		/// <para><strong>Description</strong>: Select the sales process stage for the opportunity to indicate the probability of closing the opportunity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStageCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStageCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStageCode? SalesStageCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SalesStageCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.SalesStageCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SalesStageCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SalesStageCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Follow up (Prospect)</para>
		/// <para><strong>Description</strong>: Enter the date and time of the prospecting follow-up meeting with the lead.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowup_ProspectUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowup_Prospect); }
			set { Entity.Attributes[Fields.ScheduleFollowup_Prospect] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Follow up (Qualify)</para>
		/// <para><strong>Description</strong>: Enter the date and time of the qualifying follow-up meeting with the lead.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleFollowup_QualifyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleFollowup_Qualify); }
			set { Entity.Attributes[Fields.ScheduleFollowup_Qualify] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule Proposal Meeting</para>
		/// <para><strong>Description</strong>: Enter the date and time of the proposal meeting for the opportunity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduleProposalMeetingUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduleProposalMeeting); }
			set { Entity.Attributes[Fields.ScheduleProposalMeeting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send Thank You Note</para>
		/// <para><strong>Description</strong>: Select whether a thank you note has been sent to the account for considering the proposal.</para>
		/// <para><strong>Two Option</strong> - [<strong>Completed</strong>]: true - [<strong>Mark complete</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Mark complete</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendThankYouNote
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendThankYouNote); }
			set { Entity.Attributes[Fields.SendThankYouNote] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skip Price Calculation</para>
		/// <para><strong>Description</strong>: Skip Price Calculation (For Internal Use)</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.SkipPriceCalculation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.SkipPriceCalculation.DoPriceCalcAlways"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.SkipPriceCalculation? SkipPriceCalculation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SkipPriceCalculation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.SkipPriceCalculation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SkipPriceCalculation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SkipPriceCalculation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the opportunity record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this opportunity. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the opportunity is open, won, or lost. Won and lost opportunities are read-only and can&apos;t be edited until they are reactivated.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.StateCode.Open"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the opportunity&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Step</para>
		/// <para><strong>Description</strong>: Shows the ID of the workflow step.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StepId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StepId); }
			set { Entity.Attributes[Fields.StepId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pipeline Phase</para>
		/// <para><strong>Description</strong>: Shows the current phase in the sales pipeline for the opportunity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepName); }
			set { Entity.Attributes[Fields.StepName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TeamsFollowed</para>
		/// <para><strong>Description</strong>: Number of users or conversations followed the record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TeamsFollowed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TeamsFollowed); }
			set { Entity.Attributes[Fields.TeamsFollowed] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Timeline</para>
		/// <para><strong>Description</strong>: Select when the opportunity is likely to be closed.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.OpportunityOptionSets.TimeLine"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.OpportunityOptionSets.TimeLine? TimeLine
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.TimeLine);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.OpportunityOptionSets.TimeLine)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TimeLine] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.TimeLine] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Spent by me</para>
		/// <para><strong>Description</strong>: Total time spent for emails (read and write) and meetings by me in relation to the opportunity record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TimeSpentByMeOnEmailAndMeetings
		{
			get { return Entity.GetAttributeValue<string>(Fields.TimeSpentByMeOnEmailAndMeetings); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount</para>
		/// <para><strong>Description</strong>: Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Pre-Freight Amount</para>
		/// <para><strong>Description</strong>: Shows the total product amount for the opportunity, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount of the opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmountLessFreight] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmountLessFreight] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Pre-Freight Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Pre-Freight Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Discount Amount</para>
		/// <para><strong>Description</strong>: Shows the total discount amount, based on the discount price and rate entered on the opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalDiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Detail Amount</para>
		/// <para><strong>Description</strong>: Shows the sum of all existing and write-in products included on the opportunity, based on the specified price list and quantities.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Detail Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Detail Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Line Item Discount Amount</para>
		/// <para><strong>Description</strong>: Shows the total of the Manual Discount amounts specified on all products included in the opportunity. This value is reflected in the Total Detail Amount field on the opportunity and is added to any discount amount or rate specified on the opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Line Item Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Line Item Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Tax</para>
		/// <para><strong>Description</strong>: Shows the total of the Tax amounts specified on all products included in the opportunity, included in the Total Amount field calculation for the opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalTax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalTax] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Tax (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Tax in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}