//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets
{
	public enum OperationTypeId
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ACT</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ACT = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Incoming Email</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Incoming_Email = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outgoing Email</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Outgoing_Email = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class MailboxStatistics : EntityBase
	{
		public struct Fields
		{
			public const string AsyncEventId = "asynceventid";
			public const string CrmItemsBacklog = "crmitemsbacklog";
			public const string IndividualStepDurations = "individualstepdurations";
			public const string ItemsFailed = "itemsfailed";
			public const string ItemsProcessed = "itemsprocessed";
			public const string MachineName = "machinename";
			public const string MailboxId = "mailboxid";
			public const string MailboxProcessCompletedOn = "mailboxprocesscompletedon";
			public const string MailboxProcessScheduledOn = "mailboxprocessscheduledon";
			public const string MailboxProcessStartedOn = "mailboxprocessstartedon";
			public const string MailboxStatisticsId = "mailboxstatisticsid";
			public const string OperationTypeId = "operationtypeid";
			public const string OrganizationId = "organizationid";
			public const string ProcessResult = "processresult";
			public const string ProcessTimeIntervalInMinutes = "processtimeintervalinminutes";
			public const string ScheduledTimeIntervalInMinutes = "scheduledtimeintervalinminutes";
		}
		public const string EntityLogicalName = "mailboxstatistics";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9607;
		public const string EntityCollectionSchemaName = "MailboxStatistics";
		public const string EntityDisplayCollectionName = "Mailbox Statistics";
		public const string DisplayName = "Mailbox Statistics";
		public const string EntitySetName = "mailboxstatistics";
		public const string EntityLogicalCollectionName = "mailboxstatistics";
		public const string EntityPrimaryIdAttribute = "mailboxstatisticsid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "MailboxStatistics";
		[DebuggerNonUserCode()]
		public MailboxStatistics()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MailboxStatistics(Guid MailboxStatisticsId)
		{
			Entity = new Entity(EntityLogicalName, MailboxStatisticsId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MailboxStatistics(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MailboxStatistics"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public MailboxStatistics(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MailboxStatistics"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public MailboxStatistics(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new MailboxStatistics(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MailboxStatistics"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public MailboxStatistics(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new MailboxStatistics(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MailboxStatistics(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Async Event Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AsyncEventId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AsyncEventId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Items in CRM Left to Process</para>
		/// <para><strong>Description</strong>: Items remaining in CRM to process after this synchronization cycle.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CrmItemsBacklog
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CrmItemsBacklog); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Individual Step Durations</para>
		/// <para><strong>Description</strong>: Time each exchange sync step is taking</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IndividualStepDurations
		{
			get { return Entity.GetAttributeValue<string>(Fields.IndividualStepDurations); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Items Failed</para>
		/// <para><strong>Description</strong>: Number of items processed unsuccessfully.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsFailed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsFailed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Items Processed</para>
		/// <para><strong>Description</strong>: Number of items processed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ItemsProcessed
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ItemsProcessed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Machine Name</para>
		/// <para><strong>Description</strong>: Name of Machine on which mailbox was processed</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding Mailbox</para>
		/// <para><strong>Description</strong>: Regarding Mailbox.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MailboxId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End Time for Processing</para>
		/// <para><strong>Description</strong>: Completion time of the synchronization cycle.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MailboxProcessCompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MailboxProcessCompletedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Time for Processing</para>
		/// <para><strong>Description</strong>: Scheduled time of the synchronization cycle.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MailboxProcessScheduledOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MailboxProcessScheduledOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Time for Processing</para>
		/// <para><strong>Description</strong>: Start time of the synchronization cycle.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? MailboxProcessStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.MailboxProcessStartedOn); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid MailboxStatisticsId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mailbox Operation Type</para>
		/// <para><strong>Description</strong>: Type of the mailbox operation</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets.OperationTypeId"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets.OperationTypeId? OperationTypeId
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationTypeId);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.MailboxStatisticsOptionSets.OperationTypeId)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Result</para>
		/// <para><strong>Description</strong>: Result of Mailbox processing cycle</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Success</strong>]: true - [<strong>Failure</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Failure</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ProcessResult
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ProcessResult); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Duration</para>
		/// <para><strong>Description</strong>: Time it took to process the mailbox.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessTimeIntervalInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessTimeIntervalInMinutes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue Duration</para>
		/// <para><strong>Description</strong>: Time it took from the scheduled time to the actual start time to process the mailbox.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledTimeIntervalInMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledTimeIntervalInMinutes); }
		}
	}
}