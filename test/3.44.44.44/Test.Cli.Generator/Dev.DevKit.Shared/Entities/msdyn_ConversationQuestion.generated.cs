//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets
{
	public enum msdyn_Locale
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-ae</para>
		/// <para><strong>Value</strong>: 140</para>
		/// </summary>
		ar_ae = 140,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-bh</para>
		/// <para><strong>Value</strong>: 150</para>
		/// </summary>
		ar_bh = 150,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-eg</para>
		/// <para><strong>Value</strong>: 160</para>
		/// </summary>
		ar_eg = 160,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-iq</para>
		/// <para><strong>Value</strong>: 170</para>
		/// </summary>
		ar_iq = 170,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-jo</para>
		/// <para><strong>Value</strong>: 180</para>
		/// </summary>
		ar_jo = 180,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-kw</para>
		/// <para><strong>Value</strong>: 190</para>
		/// </summary>
		ar_kw = 190,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-lb</para>
		/// <para><strong>Value</strong>: 200</para>
		/// </summary>
		ar_lb = 200,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-om</para>
		/// <para><strong>Value</strong>: 210</para>
		/// </summary>
		ar_om = 210,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-qa</para>
		/// <para><strong>Value</strong>: 220</para>
		/// </summary>
		ar_qa = 220,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-sa</para>
		/// <para><strong>Value</strong>: 230</para>
		/// </summary>
		ar_sa = 230,
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-sy</para>
		/// <para><strong>Value</strong>: 240</para>
		/// </summary>
		ar_sy = 240,
		/// <summary>
		/// <para><strong>Display Name</strong>: da-dk</para>
		/// <para><strong>Value</strong>: 260</para>
		/// </summary>
		da_dk = 260,
		/// <summary>
		/// <para><strong>Display Name</strong>: de-de</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		de_de = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: en-gb</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		en_gb = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: en-us</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		en_us = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: es-es</para>
		/// <para><strong>Value</strong>: 50</para>
		/// </summary>
		es_es = 50,
		/// <summary>
		/// <para><strong>Display Name</strong>: es-mx</para>
		/// <para><strong>Value</strong>: 60</para>
		/// </summary>
		es_mx = 60,
		/// <summary>
		/// <para><strong>Display Name</strong>: fi-fi</para>
		/// <para><strong>Value</strong>: 280</para>
		/// </summary>
		fi_fi = 280,
		/// <summary>
		/// <para><strong>Display Name</strong>: fr-ca</para>
		/// <para><strong>Value</strong>: 120</para>
		/// </summary>
		fr_ca = 120,
		/// <summary>
		/// <para><strong>Display Name</strong>: fr-fr</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		fr_fr = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: he-il</para>
		/// <para><strong>Value</strong>: 250</para>
		/// </summary>
		he_il = 250,
		/// <summary>
		/// <para><strong>Display Name</strong>: it-it</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		it_it = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: ja-jp</para>
		/// <para><strong>Value</strong>: 70</para>
		/// </summary>
		ja_jp = 70,
		/// <summary>
		/// <para><strong>Display Name</strong>: nb-no</para>
		/// <para><strong>Value</strong>: 290</para>
		/// </summary>
		nb_no = 290,
		/// <summary>
		/// <para><strong>Display Name</strong>: nl-nl</para>
		/// <para><strong>Value</strong>: 110</para>
		/// </summary>
		nl_nl = 110,
		/// <summary>
		/// <para><strong>Display Name</strong>: pt-br</para>
		/// <para><strong>Value</strong>: 80</para>
		/// </summary>
		pt_br = 80,
		/// <summary>
		/// <para><strong>Display Name</strong>: pt-pt</para>
		/// <para><strong>Value</strong>: 130</para>
		/// </summary>
		pt_pt = 130,
		/// <summary>
		/// <para><strong>Display Name</strong>: sv-se</para>
		/// <para><strong>Value</strong>: 270</para>
		/// </summary>
		sv_se = 270,
		/// <summary>
		/// <para><strong>Display Name</strong>: zh-cn</para>
		/// <para><strong>Value</strong>: 90</para>
		/// </summary>
		zh_cn = 90
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ConversationQuestion : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Category = "msdyn_category";
			public const string msdyn_ConversationParticipantInsights = "msdyn_conversationparticipantinsights";
			public const string msdyn_ConversationQuestionId = "msdyn_conversationquestionid";
			public const string msdyn_DurationInMS = "msdyn_durationinms";
			public const string msdyn_FragmentEnd = "msdyn_fragmentend";
			public const string msdyn_FragmentStart = "msdyn_fragmentstart";
			public const string msdyn_Locale = "msdyn_locale";
			public const string msdyn_Name = "msdyn_name";
			public const string msdyn_OffsetInMS = "msdyn_offsetinms";
			public const string msdyn_Text = "msdyn_text";
			public const string msdyn_Type = "msdyn_type";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_conversationquestion";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10772;
		public const string EntityCollectionSchemaName = "msdyn_ConversationQuestions";
		public const string EntityDisplayCollectionName = "Conversation Questions";
		public const string DisplayName = "Conversation Question";
		public const string EntitySetName = "msdyn_conversationquestions";
		public const string EntityLogicalCollectionName = "msdyn_conversationquestions";
		public const string EntityPrimaryIdAttribute = "msdyn_conversationquestionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_ConversationQuestion";
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion(Guid msdyn_ConversationQuestionId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ConversationQuestionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ConversationQuestion"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ConversationQuestion"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ConversationQuestion(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ConversationQuestion"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ConversationQuestion(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ConversationQuestion(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Category
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Category); }
			set { Entity.Attributes[Fields.msdyn_Category] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationParticipantInsights</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_conversationparticipantinsights"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ConversationParticipantInsights
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ConversationParticipantInsights); }
			set { Entity.Attributes[Fields.msdyn_ConversationParticipantInsights] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Question</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ConversationQuestionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ConversationQuestionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DurationInMS</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DurationInMS
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DurationInMS); }
			set { Entity.Attributes[Fields.msdyn_DurationInMS] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FragmentEnd</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FragmentEnd
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FragmentEnd); }
			set { Entity.Attributes[Fields.msdyn_FragmentEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FragmentStart</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FragmentStart
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FragmentStart); }
			set { Entity.Attributes[Fields.msdyn_FragmentStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Locale</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.msdyn_Locale"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.msdyn_Locale? msdyn_Locale
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Locale);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.msdyn_Locale)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Locale] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Locale] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Name); }
			set { Entity.Attributes[Fields.msdyn_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OffsetInMS</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_OffsetInMS
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_OffsetInMS); }
			set { Entity.Attributes[Fields.msdyn_OffsetInMS] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Text
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Text); }
			set { Entity.Attributes[Fields.msdyn_Text] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Type); }
			set { Entity.Attributes[Fields.msdyn_Type] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Conversation Question</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Conversation Question</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ConversationQuestionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}