//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets
{
	public enum ActivityTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Appointment = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert</para>
		/// <para><strong>Value</strong>: 11,000</para>
		/// </summary>
		Booking_Alert = 11_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Activity</para>
		/// <para><strong>Value</strong>: 4,402</para>
		/// </summary>
		Campaign_Activity = 4_402,
		/// <summary>
		/// <para><strong>Display Name</strong>: Campaign Response</para>
		/// <para><strong>Value</strong>: 4,401</para>
		/// </summary>
		Campaign_Response = 4_401,
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Resolution</para>
		/// <para><strong>Value</strong>: 4,206</para>
		/// </summary>
		Case_Resolution = 4_206,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation</para>
		/// <para><strong>Value</strong>: 10,691</para>
		/// </summary>
		Conversation = 10_691,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Transcript</para>
		/// <para><strong>Value</strong>: 10,877</para>
		/// </summary>
		Copilot_Transcript = 10_877,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice alert</para>
		/// <para><strong>Value</strong>: 10,600</para>
		/// </summary>
		Customer_Voice_alert = 10_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey invite</para>
		/// <para><strong>Value</strong>: 10,610</para>
		/// </summary>
		Customer_Voice_survey_invite = 10_610,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey response</para>
		/// <para><strong>Value</strong>: 10,612</para>
		/// </summary>
		Customer_Voice_survey_response = 10_612,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax</para>
		/// <para><strong>Value</strong>: 4,204</para>
		/// </summary>
		Fax = 4_204,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invite Redemption</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Invite_Redemption = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Letter</para>
		/// <para><strong>Value</strong>: 4,207</para>
		/// </summary>
		Letter = 4_207,
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity Close</para>
		/// <para><strong>Value</strong>: 4,208</para>
		/// </summary>
		Opportunity_Close = 4_208,
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Close</para>
		/// <para><strong>Value</strong>: 4,209</para>
		/// </summary>
		Order_Close = 4_209,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message</para>
		/// <para><strong>Value</strong>: 11,063</para>
		/// </summary>
		Outbound_message = 11_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_Call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Portal_Comment = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick Campaign</para>
		/// <para><strong>Value</strong>: 4,406</para>
		/// </summary>
		Quick_Campaign = 4_406,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote Close</para>
		/// <para><strong>Value</strong>: 4,211</para>
		/// </summary>
		Quote_Close = 4_211,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Appointment</para>
		/// <para><strong>Value</strong>: 4,251</para>
		/// </summary>
		Recurring_Appointment = 4_251,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Value</strong>: 4,214</para>
		/// </summary>
		Service_Activity = 4_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Value</strong>: 10,708</para>
		/// </summary>
		Session = 10_708,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams chat</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Teams_chat = 10_185,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voicemail</para>
		/// <para><strong>Value</strong>: 11,070</para>
		/// </summary>
		Voicemail = 11_070
	}
	public enum Community
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages For Business</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Apple_Messages_For_Business = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Cortana</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Cortana = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Direct Line</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Direct_Line = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Direct Line Speech</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Direct_Line_Speech = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Email = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Facebook = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google's Business Messages</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Googles_Business_Messages = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: GroupMe</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		GroupMe = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kik</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Kik = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Line</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Line = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Microsoft_Teams = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Other = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skype</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Skype = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slack</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Slack = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Telegram</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Telegram = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Twitter = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wechat</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Wechat = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: WhatsApp</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		WhatsApp = 15
	}
	public enum DeliveryPriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum InstanceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Recurring</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Recurring = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Exception</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Recurring_Exception = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Future Exception</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Recurring_Future_Exception = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Instance</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Recurring_Instance = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Master</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Recurring_Master = 1
	}
	public enum msdyn_channel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages for Business</para>
		/// <para><strong>Value</strong>: 192,450,000</para>
		/// </summary>
		Apple_Messages_for_Business = 192_450_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Co-browse</para>
		/// <para><strong>Value</strong>: 192,390,000</para>
		/// </summary>
		Co_browse = 192_390_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Custom = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Records</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Entity_Records = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 192,330,000</para>
		/// </summary>
		Facebook = 192_330_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google's Business Messages</para>
		/// <para><strong>Value</strong>: 192,450,001</para>
		/// </summary>
		Googles_Business_Messages = 192_450_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: LINE</para>
		/// <para><strong>Value</strong>: 192,310,000</para>
		/// </summary>
		LINE = 192_310_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live chat</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Live_chat = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 19,241,000</para>
		/// </summary>
		Microsoft_Teams = 19_241_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen sharing</para>
		/// <para><strong>Value</strong>: 192,400,000</para>
		/// </summary>
		Screen_sharing = 192_400_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: SMS</para>
		/// <para><strong>Value</strong>: 192,340,000</para>
		/// </summary>
		SMS = 192_340_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Twitter = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Video</para>
		/// <para><strong>Value</strong>: 192,380,000</para>
		/// </summary>
		Video = 192_380_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 192,370,000</para>
		/// </summary>
		Voice = 192_370_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice call</para>
		/// <para><strong>Value</strong>: 192,440,000</para>
		/// </summary>
		Voice_call = 192_440_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WeChat</para>
		/// <para><strong>Value</strong>: 192,320,000</para>
		/// </summary>
		WeChat = 192_320_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WhatsApp</para>
		/// <para><strong>Value</strong>: 192,300,000</para>
		/// </summary>
		WhatsApp = 192_300_000
	}
	public enum msdyn_conversationactivitystate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ended</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Ended = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hold</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Hold = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Talk</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Talk = 1
	}
	public enum msdyn_customersentimentlabel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: N/A</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NA = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Negative</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Negative = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Neutral</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Neutral = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Positive</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Positive = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slightly negative</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Slightly_negative = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slightly positive</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Slightly_positive = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very negative</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Very_negative = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very positive</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Very_positive = 13
	}
	public enum msdyn_statuschangereason
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentMovedToWrapUp</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		AgentMovedToWrapUp = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: AssignedBySupervisor</para>
		/// <para><strong>Value</strong>: 192,350,017</para>
		/// </summary>
		AssignedBySupervisor = 192_350_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: AutoClosedBySystem</para>
		/// <para><strong>Value</strong>: 192,350,010</para>
		/// </summary>
		AutoClosedBySystem = 192_350_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: AutoClosedFromWaitingState</para>
		/// <para><strong>Value</strong>: 192,350,009</para>
		/// </summary>
		AutoClosedFromWaitingState = 192_350_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: AwaitingAgentAcceptance</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		AwaitingAgentAcceptance = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: AwaitingAgentAssignment</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		AwaitingAgentAssignment = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: AwaitingCustomerResponse</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		AwaitingCustomerResponse = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: ClosedDueToFailure</para>
		/// <para><strong>Value</strong>: 192,350,014</para>
		/// </summary>
		ClosedDueToFailure = 192_350_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: ClosedDueToOverflow</para>
		/// <para><strong>Value</strong>: 192,350,011</para>
		/// </summary>
		ClosedDueToOverflow = 192_350_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: ClosedInDataverseDirectlyByAdmin</para>
		/// <para><strong>Value</strong>: 192,350,016</para>
		/// </summary>
		ClosedInDataverseDirectlyByAdmin = 192_350_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationEndedByAgent</para>
		/// <para><strong>Value</strong>: 192,350,008</para>
		/// </summary>
		ConversationEndedByAgent = 192_350_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationEndedByBot</para>
		/// <para><strong>Value</strong>: 192,350,013</para>
		/// </summary>
		ConversationEndedByBot = 192_350_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerDisconnectedOrLeftActiveConversation</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		CustomerDisconnectedOrLeftActiveConversation = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerDisconnectedOrLeftOpenConversation</para>
		/// <para><strong>Value</strong>: 192,350,012</para>
		/// </summary>
		CustomerDisconnectedOrLeftOpenConversation = 192_350_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: CutomerMovedToWrapUp</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		CutomerMovedToWrapUp = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: ForceClosedBySupervisor</para>
		/// <para><strong>Value</strong>: 192,350,015</para>
		/// </summary>
		ForceClosedBySupervisor = 192_350_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: InConversation</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		InConversation = 192_350_003
	}
	public enum msdyn_urcustomersentimentlabel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: N/A</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NA = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Negative</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Negative = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Neutral</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Neutral = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Positive</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Positive = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slightly negative</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Slightly_negative = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slightly positive</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Slightly_positive = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very negative</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Very_negative = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very positive</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Very_positive = 13
	}
	public enum msdyn_workstreamworkdistributionmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Pick</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Pick = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Push</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Push = 192_350_000
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		High = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Low</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Low = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Normal = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Closed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolved</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Resolved = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Scheduled = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up (Deprecated)</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Wrap_up_Deprecated = 4
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Active = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Closed</strong></para>
		/// </summary>
		Closed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Open = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolved</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Resolved</strong></para>
		/// </summary>
		Resolved = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Scheduled</strong></para>
		/// </summary>
		Scheduled = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Waiting = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Wrap_up = 5
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocliveworkitem : EntityBase
	{
		public struct Fields
		{
			public const string ActivityAdditionalParams = "activityadditionalparams";
			public const string ActivityId = "activityid";
			public const string ActivityTypeCode = "activitytypecode";
			public const string ActualDurationMinutes = "actualdurationminutes";
			public const string ActualEnd = "actualend";
			public const string ActualStart = "actualstart";
			public const string BCC = "bcc";
			public const string CC = "cc";
			public const string Community = "community";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Customers = "customers";
			public const string DeliveryLastAttemptedOn = "deliverylastattemptedon";
			public const string DeliveryPriorityCode = "deliveryprioritycode";
			public const string Description = "description";
			public const string ExchangeItemId = "exchangeitemid";
			public const string ExchangeRate = "exchangerate";
			public const string ExchangeWebLink = "exchangeweblink";
			public const string From = "from";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InstanceTypeCode = "instancetypecode";
			public const string IsBilled = "isbilled";
			public const string IsMapiPrivate = "ismapiprivate";
			public const string IsRegularActivity = "isregularactivity";
			public const string IsWorkflowCreated = "isworkflowcreated";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string LeftVoiceMail = "leftvoicemail";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_activeagentassignedon = "msdyn_activeagentassignedon";
			public const string msdyn_activeagentgroupid = "msdyn_activeagentgroupid";
			public const string msdyn_activeagentid = "msdyn_activeagentid";
			public const string msdyn_activeintentfamilyid = "msdyn_activeintentfamilyid";
			public const string msdyn_activeintentgroupid = "msdyn_activeintentgroupid";
			public const string msdyn_activeintentid = "msdyn_activeintentid";
			public const string msdyn_activeintentstring = "msdyn_activeintentstring";
			public const string msdyn_activesessionparticipantid = "msdyn_activesessionparticipantid";
			public const string msdyn_averageresponsetimeinmsadjforoh = "msdyn_averageresponsetimeinmsadjforoh";
			public const string msdyn_casefieldsupdatedbyAI = "msdyn_casefieldsupdatedbyAI";
			public const string msdyn_cdsqueueid = "msdyn_cdsqueueid";
			public const string msdyn_channel = "msdyn_channel";
			public const string msdyn_channelconnectionid = "msdyn_channelconnectionid";
			public const string msdyn_channelinstanceid = "msdyn_channelinstanceid";
			public const string msdyn_channelproviderName = "msdyn_channelproviderName";
			public const string msdyn_closedon = "msdyn_closedon";
			public const string msdyn_conversationactivechattimeinseconds = "msdyn_conversationactivechattimeinseconds";
			public const string msdyn_conversationactivewrapuptimeinseconds = "msdyn_conversationactivewrapuptimeinseconds";
			public const string msdyn_conversationactivitystate = "msdyn_conversationactivitystate";
			public const string msdyn_conversationfirstwaittimeinseconds = "msdyn_conversationfirstwaittimeinseconds";
			public const string msdyn_conversationhandletimeinseconds = "msdyn_conversationhandletimeinseconds";
			public const string msdyn_conversationholdtimeinseconds = "msdyn_conversationholdtimeinseconds";
			public const string msdyn_ConversationSummaryField = "msdyn_conversationsummaryfield";
			public const string msdyn_conversationtalktimeinseconds = "msdyn_conversationtalktimeinseconds";
			public const string msdyn_conversationwrapuptimeinseconds = "msdyn_conversationwrapuptimeinseconds";
			public const string msdyn_copilotengaged = "msdyn_copilotengaged";
			public const string msdyn_createdon = "msdyn_createdon";
			public const string msdyn_customer = "msdyn_customer";
			public const string msdyn_customerlanguageid = "msdyn_customerlanguageid";
			public const string msdyn_customerlocale = "msdyn_customerlocale";
			public const string msdyn_customersentimentlabel = "msdyn_customersentimentlabel";
			public const string msdyn_dailytopicid = "msdyn_dailytopicid";
			public const string msdyn_effortpredictionresult = "msdyn_effortpredictionresult";
			public const string msdyn_escalationcount = "msdyn_escalationcount";
			public const string msdyn_externalcontext = "msdyn_externalcontext";
			public const string msdyn_firstresponsetimeinmsadjforoh = "msdyn_firstresponsetimeinmsadjforoh";
			public const string msdyn_firstwaitstartedon = "msdyn_firstwaitstartedon";
			public const string msdyn_infracreatedby = "msdyn_infracreatedby";
			public const string msdyn_initiatedon = "msdyn_initiatedon";
			public const string msdyn_intent = "msdyn_intent";
			public const string msdyn_isabandoned = "msdyn_isabandoned";
			public const string msdyn_isagentaccepted = "msdyn_isagentaccepted";
			public const string msdyn_isagentsession = "msdyn_isagentsession";
			public const string msdyn_isoutbound = "msdyn_isoutbound";
			public const string msdyn_IssueId = "msdyn_issueid";
			public const string msdyn_lastsessionid = "msdyn_lastsessionid";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_liveworkstreamnotificationdata = "msdyn_liveworkstreamnotificationdata";
			public const string msdyn_modifiedon = "msdyn_modifiedon";
			public const string msdyn_ocliveworkitemid = "msdyn_ocliveworkitemid";
			public const string msdyn_overflowtransfercount = "msdyn_overflowtransfercount";
			public const string msdyn_queueid = "msdyn_queueid";
			public const string msdyn_queueitemid = "msdyn_queueitemid";
			public const string msdyn_routableobjectid = "msdyn_routableobjectid";
			public const string msdyn_routableobjectlogicalname = "msdyn_routableobjectlogicalname";
			public const string msdyn_socialprofileid = "msdyn_socialprofileid";
			public const string msdyn_startedon = "msdyn_startedon";
			public const string msdyn_statereason = "msdyn_statereason";
			public const string msdyn_statuschangereason = "msdyn_statuschangereason";
			public const string msdyn_statusupdatedon = "msdyn_statusupdatedon";
			public const string msdyn_thirdpartyconversation = "msdyn_thirdpartyconversation";
			public const string msdyn_TimelineControlField = "msdyn_timelinecontrolfield";
			public const string msdyn_title = "msdyn_title";
			public const string msdyn_TranscriptControl = "msdyn_transcriptcontrol";
			public const string msdyn_transfercount = "msdyn_transfercount";
			public const string msdyn_urcustomersentimentkeywords = "msdyn_urcustomersentimentkeywords";
			public const string msdyn_urcustomersentimentlabel = "msdyn_urcustomersentimentlabel";
			public const string msdyn_urcustomersentimentscore = "msdyn_urcustomersentimentscore";
			public const string msdyn_workstreamworkdistributionmode = "msdyn_workstreamworkdistributionmode";
			public const string msdyn_wrapupinitiatedon = "msdyn_wrapupinitiatedon";
			public const string OnHoldTime = "onholdtime";
			public const string OptionalAttendees = "optionalattendees";
			public const string Organizer = "organizer";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Partners = "partners";
			public const string PostponeActivityProcessingUntil = "postponeactivityprocessinguntil";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RequiredAttendees = "requiredattendees";
			public const string Resources = "resources";
			public const string ScheduledDurationMinutes = "scheduleddurationminutes";
			public const string ScheduledEnd = "scheduledend";
			public const string ScheduledStart = "scheduledstart";
			public const string SenderMailboxId = "sendermailboxid";
			public const string SentOn = "senton";
			public const string SeriesId = "seriesid";
			public const string ServiceId = "serviceid";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string SortDate = "sortdate";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subject = "subject";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string To = "to";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_ocliveworkitem";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10691;
		public const string EntityCollectionSchemaName = "msdyn_ocliveworkitems";
		public const string EntityDisplayCollectionName = "Conversations";
		public const string DisplayName = "Conversation";
		public const string EntitySetName = "msdyn_ocliveworkitems";
		public const string EntityLogicalCollectionName = "msdyn_ocliveworkitems";
		public const string EntityPrimaryIdAttribute = "activityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "subject";
		public const string EntitySchemaName = "msdyn_ocliveworkitem";
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem(Guid msdyn_ocliveworkitemId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocliveworkitemId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocliveworkitem"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocliveworkitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocliveworkitem(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocliveworkitem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocliveworkitem(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocliveworkitem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Additional Parameters</para>
		/// <para><strong>Description</strong>: Additional information provided by the external application as JSON. For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityAdditionalParams
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityAdditionalParams); }
			set { Entity.Attributes[Fields.ActivityAdditionalParams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity</para>
		/// <para><strong>Description</strong>: Unique identifier of the activity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ActivityId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ActivityId); }
			set { Entity.Attributes[Fields.ActivityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Activity Type</para>
		/// <para><strong>Description</strong>: Type of activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Duration</para>
		/// <para><strong>Description</strong>: Actual duration of the activity in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualDurationMinutes); }
			set { Entity.Attributes[Fields.ActualDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual End</para>
		/// <para><strong>Description</strong>: Actual end time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualEnd); }
			set { Entity.Attributes[Fields.ActualEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual Start</para>
		/// <para><strong>Description</strong>: Actual start time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActualStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActualStart); }
			set { Entity.Attributes[Fields.ActualStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BCC</para>
		/// <para><strong>Description</strong>: Blind Carbon-copy (bcc) recipients of the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> BCC
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.BCC).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.BCC] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CC</para>
		/// <para><strong>Description</strong>: Carbon-copy (cc) recipients of the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> CC
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.CC).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.CC] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Channel</para>
		/// <para><strong>Description</strong>: Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.Community"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.Community? Community
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Community);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.Community)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Community] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Community] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Created</para>
		/// <para><strong>Description</strong>: Date and time when the activity was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the activitypointer.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customers</para>
		/// <para><strong>Description</strong>: Customer with which the activity is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Customers
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Customers).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Customers] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Delivery Last Attempted</para>
		/// <para><strong>Description</strong>: Date and time when the delivery of the activity was last attempted.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DeliveryLastAttemptedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DeliveryLastAttemptedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delivery Priority</para>
		/// <para><strong>Description</strong>: Priority of delivery of the activity to the email server.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.DeliveryPriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.DeliveryPriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.DeliveryPriorityCode? DeliveryPriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeliveryPriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.DeliveryPriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeliveryPriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeliveryPriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the activity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Item ID</para>
		/// <para><strong>Description</strong>: The message id of activity which is returned from Exchange Server.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeItemId
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeItemId); }
			set { Entity.Attributes[Fields.ExchangeItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the activitypointer with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange WebLink</para>
		/// <para><strong>Description</strong>: Shows the web link of Activity of type email.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExchangeWebLink
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExchangeWebLink); }
			set { Entity.Attributes[Fields.ExchangeWebLink] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From</para>
		/// <para><strong>Description</strong>: Person who the activity is from.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> From
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.From).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.From] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurring Instance Type</para>
		/// <para><strong>Description</strong>: Type of instance of a recurring series.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.InstanceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.InstanceTypeCode.Not_Recurring"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.InstanceTypeCode? InstanceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InstanceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.InstanceTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Billed</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity was billed as part of resolving a case.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsBilled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsBilled); }
			set { Entity.Attributes[Fields.IsBilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Private</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsMapiPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsMapiPrivate); }
			set { Entity.Attributes[Fields.IsMapiPrivate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Regular Activity</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity is a regular activity type or event type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRegularActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRegularActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Workflow Created</para>
		/// <para><strong>Description</strong>: Information regarding whether the activity was created from a workflow rule.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWorkflowCreated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWorkflowCreated); }
			set { Entity.Attributes[Fields.IsWorkflowCreated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date and time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Left Voice Mail</para>
		/// <para><strong>Description</strong>: Left the voice mail</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? LeftVoiceMail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.LeftVoiceMail); }
			set { Entity.Attributes[Fields.LeftVoiceMail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of user who last modified the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Updated</para>
		/// <para><strong>Description</strong>: Date and time when activity was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the activitypointer.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Agent Assigned On</para>
		/// <para><strong>Description</strong>: Date and time when last agent was assigned to the conversation</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_activeagentassignedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_activeagentassignedon); }
			set { Entity.Attributes[Fields.msdyn_activeagentassignedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Agent Group</para>
		/// <para><strong>Description</strong>: Active Agent Group Associated with the Conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_agentgroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeagentgroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeagentgroupid); }
			set { Entity.Attributes[Fields.msdyn_activeagentgroupid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Agent</para>
		/// <para><strong>Description</strong>: Indicates the agent currently assigned to the conversation or last assigned agent for a closed conversation. It is populated as empty or null if the customer(C2) ends or is disconnected before the agent accepts conversation.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeagentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeagentid); }
			set { Entity.Attributes[Fields.msdyn_activeagentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Intent Family</para>
		/// <para><strong>Description</strong>: Active Intent Family Associated with the Conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_intentfamily"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeintentfamilyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeintentfamilyid); }
			set { Entity.Attributes[Fields.msdyn_activeintentfamilyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Intent Group</para>
		/// <para><strong>Description</strong>: Active Intent Group Associated with the Conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_intent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeintentgroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeintentgroupid); }
			set { Entity.Attributes[Fields.msdyn_activeintentgroupid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Intent</para>
		/// <para><strong>Description</strong>: Active Intent Associated with the Conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_intent"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeintentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeintentid); }
			set { Entity.Attributes[Fields.msdyn_activeintentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Intent String</para>
		/// <para><strong>Description</strong>: intent string (in case the intent is new or unknown)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_activeintentstring
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_activeintentstring); }
			set { Entity.Attributes[Fields.msdyn_activeintentstring] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active session participant</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_sessionparticipant"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activesessionparticipantid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activesessionparticipantid); }
			set { Entity.Attributes[Fields.msdyn_activesessionparticipantid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation average response time</para>
		/// <para><strong>Description</strong>: Average time it took to respond to customer, excluding agent&apos;s out of operating hours (OOOH)</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_averageresponsetimeinmsadjforoh
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_averageresponsetimeinmsadjforoh); }
			set { Entity.Attributes[Fields.msdyn_averageresponsetimeinmsadjforoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Case Updated Fields by AI</para>
		/// <para><strong>Description</strong>: Stores the information about fields updated by Autonomous Case Create and Update process.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_casefieldsupdatedbyAI
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_casefieldsupdatedbyAI); }
			set { Entity.Attributes[Fields.msdyn_casefieldsupdatedbyAI] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Description</strong>: Unique identifier for Queue associated with Conversation.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_cdsqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_cdsqueueid); }
			set { Entity.Attributes[Fields.msdyn_cdsqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel</para>
		/// <para><strong>Description</strong>: The channel(s) in the conversation.</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_channel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_channel> msdyn_channel
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_channel>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_channel);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_channel)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_channel] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_channel] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Connection Id</para>
		/// <para><strong>Description</strong>: Unique identifier to identify the channel connection id. eg: WidgetAppId for LiveChat</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channelconnectionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channelconnectionid); }
			set { Entity.Attributes[Fields.msdyn_channelconnectionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Instance ID</para>
		/// <para><strong>Description</strong>: Unique identifier to identify the app to which this conversation belogs to.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_channelinstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_channelinstanceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_channelinstanceid); }
			set { Entity.Attributes[Fields.msdyn_channelinstanceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Provider Name</para>
		/// <para><strong>Description</strong>: Channel Provider Name.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channelproviderName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channelproviderName); }
			set { Entity.Attributes[Fields.msdyn_channelproviderName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was closed</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_closedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_closedon); }
			set { Entity.Attributes[Fields.msdyn_closedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Active Chat Time In Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationactivechattimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationactivechattimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationactivechattimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Active Wrap Up Time In Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationactivewrapuptimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationactivewrapuptimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationactivewrapuptimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation activity state</para>
		/// <para><strong>Description</strong>: Indicates the current step or activity within an active conversation, such as whether the agent is talking, the customer is on hold etc.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_conversationactivitystate"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_conversationactivitystate? msdyn_conversationactivitystate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_conversationactivitystate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_conversationactivitystate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_conversationactivitystate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_conversationactivitystate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation First Wait Time In Seconds</para>
		/// <para><strong>Description</strong>: Time in seconds conversation spend to be accepted</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationfirstwaittimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationfirstwaittimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationfirstwaittimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Handle Time In Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationhandletimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationhandletimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationhandletimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Hold Time In Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationholdtimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationholdtimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationholdtimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation summary field</para>
		/// <para><strong>Description</strong>: Field to bind conversation summary control</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ConversationSummaryField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ConversationSummaryField); }
			set { Entity.Attributes[Fields.msdyn_ConversationSummaryField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Talk Time In Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationtalktimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationtalktimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationtalktimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Wrap Up Time In Seconds</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_conversationwrapuptimeinseconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_conversationwrapuptimeinseconds); }
			set { Entity.Attributes[Fields.msdyn_conversationwrapuptimeinseconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Engaged</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_copilotengaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_copilotengaged); }
			set { Entity.Attributes[Fields.msdyn_copilotengaged] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the activity was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_createdon); }
			set { Entity.Attributes[Fields.msdyn_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Description</strong>: Customer with which the activity is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customer); }
			set { Entity.Attributes[Fields.msdyn_customer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Language</para>
		/// <para><strong>Description</strong>: The language of the customer in this conversation.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_oclanguage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customerlanguageid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customerlanguageid); }
			set { Entity.Attributes[Fields.msdyn_customerlanguageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Locale</para>
		/// <para><strong>Description</strong>: The locale of the customer participated in this conversation.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_customerlocale
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_customerlocale); }
			set { Entity.Attributes[Fields.msdyn_customerlocale] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Sentiment</para>
		/// <para><strong>Description</strong>: Customer Sentiment Label powered by Sentiment Service</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_customersentimentlabel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_customersentimentlabel? msdyn_customersentimentlabel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_customersentimentlabel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_customersentimentlabel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_customersentimentlabel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_customersentimentlabel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TopicID</para>
		/// <para><strong>Description</strong>: Look up to daily topic entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocsentimentdailytopic"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_dailytopicid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_dailytopicid); }
			set { Entity.Attributes[Fields.msdyn_dailytopicid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Effort prediction result</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_effortpredictionresult"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_effortpredictionresult
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_effortpredictionresult); }
			set { Entity.Attributes[Fields.msdyn_effortpredictionresult] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Escalation Count</para>
		/// <para><strong>Description</strong>: Number of times conversation was escalated to Supervisor i.e. transferred to Supervisor</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_escalationcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_escalationcount); }
			set { Entity.Attributes[Fields.msdyn_escalationcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External context</para>
		/// <para><strong>Description</strong>: External context captured.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocexternalcontext"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_externalcontext
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_externalcontext); }
			set { Entity.Attributes[Fields.msdyn_externalcontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation first response time</para>
		/// <para><strong>Description</strong>: Time it took to respond to customer, excluding agent&apos;s out of operating hours (OOOH)</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_firstresponsetimeinmsadjforoh
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_firstresponsetimeinmsadjforoh); }
			set { Entity.Attributes[Fields.msdyn_firstresponsetimeinmsadjforoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: First Wait Started On</para>
		/// <para><strong>Description</strong>: Time when conversation started waiting to be assigned</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_firstwaitstartedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_firstwaitstartedon); }
			set { Entity.Attributes[Fields.msdyn_firstwaitstartedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Infra Created By</para>
		/// <para><strong>Description</strong>: Signifies which infra this conversation was created by, and thereby which infra to process in. For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_infracreatedby
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_infracreatedby); }
			set { Entity.Attributes[Fields.msdyn_infracreatedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initiated On</para>
		/// <para><strong>Description</strong>: Time when conversation was initiated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_initiatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_initiatedon); }
			set { Entity.Attributes[Fields.msdyn_initiatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Intent  of Conversation</para>
		/// <para><strong>Description</strong>: Intent  of Conversation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_intent
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_intent); }
			set { Entity.Attributes[Fields.msdyn_intent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Abandoned</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isabandoned
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isabandoned); }
			set { Entity.Attributes[Fields.msdyn_isabandoned] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Agent Accepted</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isagentaccepted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isagentaccepted); }
			set { Entity.Attributes[Fields.msdyn_isagentaccepted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Agent Session</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isagentsession
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isagentsession); }
			set { Entity.Attributes[Fields.msdyn_isagentsession] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound Conversation</para>
		/// <para><strong>Description</strong>: Indicates if its an outbound Conversation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isoutbound
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isoutbound); }
			set { Entity.Attributes[Fields.msdyn_isoutbound] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Issue</para>
		/// <para><strong>Description</strong>: Unique identifier for Case associated with Conversation.</para>
		/// <para><strong>Lookup</strong>: <see cref="incident"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_IssueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_IssueId); }
			set { Entity.Attributes[Fields.msdyn_IssueId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Session</para>
		/// <para><strong>Description</strong>: Last agent session</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_lastsessionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_lastsessionid); }
			set { Entity.Attributes[Fields.msdyn_lastsessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work stream</para>
		/// <para><strong>Description</strong>: Work stream associated to the conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_liveworkstream"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LiveWorkStream Notification Data</para>
		/// <para><strong>Description</strong>: LiveWorkStream notification data provided as JSON. For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_liveworkstreamnotificationdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_liveworkstreamnotificationdata); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamnotificationdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was last modified</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_modifiedon); }
			set { Entity.Attributes[Fields.msdyn_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationId</para>
		/// <para><strong>Description</strong>: Unique Id of conversation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocliveworkitemid2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocliveworkitemid); }
			set { Entity.Attributes[Fields.msdyn_ocliveworkitemid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Overflow Transfer Count</para>
		/// <para><strong>Description</strong>: Number of times work item got transferred to another queue due to overflow</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_overflowtransfercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_overflowtransfercount); }
			set { Entity.Attributes[Fields.msdyn_overflowtransfercount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Description</strong>: Unique identifier for msdyn_omnichannelqueue associated with Conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_omnichannelqueue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_queueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_queueid); }
			set { Entity.Attributes[Fields.msdyn_queueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue item</para>
		/// <para><strong>Description</strong>: Queue item associated with the conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="queueitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_queueitemid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_queueitemid); }
			set { Entity.Attributes[Fields.msdyn_queueitemid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Routed record</para>
		/// <para><strong>Description</strong>: Unique identifier of the routed record. Records are of those entities enabled for Unified Routing and have at least one Workstream created. For internal use only.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocvoicemail"/>, <see cref="task"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_routableobjectid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_routableobjectid); }
			set { Entity.Attributes[Fields.msdyn_routableobjectid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record routing routable object type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_routableobjectlogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_routableobjectlogicalname); }
			set { Entity.Attributes[Fields.msdyn_routableobjectlogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Profile</para>
		/// <para><strong>Description</strong>: Lookup for the Social Profile Entity Record.</para>
		/// <para><strong>Lookup</strong>: <see cref="socialprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_socialprofileid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_socialprofileid); }
			set { Entity.Attributes[Fields.msdyn_socialprofileid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Started On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was started</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startedon); }
			set { Entity.Attributes[Fields.msdyn_startedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State Reason</para>
		/// <para><strong>Description</strong>: Reason for conversation for being in the current state</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_statereason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_statereason); }
			set { Entity.Attributes[Fields.msdyn_statereason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status change reason</para>
		/// <para><strong>Description</strong>: Reason for conversation status change</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_statuschangereason"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_statuschangereason? msdyn_statuschangereason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_statuschangereason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_statuschangereason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_statuschangereason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_statuschangereason] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Updated On</para>
		/// <para><strong>Description</strong>: Date and time when conversation status was last modified</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_statusupdatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_statusupdatedon); }
			set { Entity.Attributes[Fields.msdyn_statusupdatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Third Party Conversation</para>
		/// <para><strong>Description</strong>: Third Party Conversation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_thirdpartyconversation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_thirdpartyconversation); }
			set { Entity.Attributes[Fields.msdyn_thirdpartyconversation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Timeline Control Field</para>
		/// <para><strong>Description</strong>: Field to bind Timelinewall control</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TimelineControlField
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TimelineControlField); }
			set { Entity.Attributes[Fields.msdyn_TimelineControlField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: Conversation Title</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_title); }
			set { Entity.Attributes[Fields.msdyn_title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Chat Transcript</para>
		/// <para><strong>Description</strong>: Placeholder for Transcript Control</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TranscriptControl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TranscriptControl); }
			set { Entity.Attributes[Fields.msdyn_TranscriptControl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transfer Count</para>
		/// <para><strong>Description</strong>: Number of times the conversation was transferred</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_transfercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_transfercount); }
			set { Entity.Attributes[Fields.msdyn_transfercount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UR Customer Sentiment Keywords</para>
		/// <para><strong>Description</strong>: UR Customer Sentiment Keywords</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_urcustomersentimentkeywords
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_urcustomersentimentkeywords); }
			set { Entity.Attributes[Fields.msdyn_urcustomersentimentkeywords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sentiment Category</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_urcustomersentimentlabel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_urcustomersentimentlabel? msdyn_urcustomersentimentlabel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_urcustomersentimentlabel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_urcustomersentimentlabel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_urcustomersentimentlabel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_urcustomersentimentlabel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UR Customer Sentiment Score</para>
		/// <para><strong>Description</strong>: UR Customer Sentiment Score</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_urcustomersentimentscore
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_urcustomersentimentscore); }
			set { Entity.Attributes[Fields.msdyn_urcustomersentimentscore] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work distribution mode</para>
		/// <para><strong>Description</strong>: Work distribution mode of the associated work stream</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_workstreamworkdistributionmode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_workstreamworkdistributionmode? msdyn_workstreamworkdistributionmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_workstreamworkdistributionmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.msdyn_workstreamworkdistributionmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_workstreamworkdistributionmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_workstreamworkdistributionmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up Status Intiated On</para>
		/// <para><strong>Description</strong>: Date and time when conversation end</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_wrapupinitiatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_wrapupinitiatedon); }
			set { Entity.Attributes[Fields.msdyn_wrapupinitiatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows how long, in minutes, that the record was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Optional Attendees</para>
		/// <para><strong>Description</strong>: List of optional attendees for the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> OptionalAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.OptionalAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.OptionalAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organizer</para>
		/// <para><strong>Description</strong>: Person who organized the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Organizer
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Organizer).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Organizer] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team that owns the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user that owns the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outsource Vendors</para>
		/// <para><strong>Description</strong>: Outsource vendor with which activity is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Partners
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Partners).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Partners] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delay activity processing until</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeActivityProcessingUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeActivityProcessingUntil); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Priority of the activity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.PriorityCode.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Unique identifier of the Process.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Unique identifier of the object with which the activity is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="adx_invitation"/>, <see cref="bookableresourcebooking"/>, <see cref="bookableresourcebookingheader"/>, <see cref="bulkoperation"/>, <see cref="campaign"/>, <see cref="campaignactivity"/>, <see cref="contact"/>, <see cref="contract"/>, <see cref="entitlement"/>, <see cref="entitlementtemplate"/>, <see cref="incident"/>, <see cref="interactionforemail"/>, <see cref="invoice"/>, <see cref="knowledgearticle"/>, <see cref="knowledgebaserecord"/>, <see cref="lead"/>, <see cref="msdyncrm_contentsettings"/>, <see cref="msdyncrm_customerjourney"/>, <see cref="msdyncrm_leadscoremodel"/>, <see cref="msdyncrm_linkedinaccount"/>, <see cref="msdyncrm_linkedinactivity"/>, <see cref="msdyncrm_linkedinfieldmapping"/>, <see cref="msdyncrm_linkedinform"/>, <see cref="msdyncrm_linkedinformanswer"/>, <see cref="msdyncrm_linkedinformquestion"/>, <see cref="msdyncrm_linkedinformsubmission"/>, <see cref="msdyncrm_linkedinleadmatchingstrategy"/>, <see cref="msdyncrm_linkedinuserprofile"/>, <see cref="msdyncrm_marketingdynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemaildynamiccontentmetadata"/>, <see cref="msdyncrm_marketingemailtestsend"/>, <see cref="msdyncrm_migration"/>, <see cref="msdyncrm_uicconfig"/>, <see cref="msdyn_agreement"/>, <see cref="msdyn_agreementbookingdate"/>, <see cref="msdyn_agreementbookingincident"/>, <see cref="msdyn_agreementbookingproduct"/>, <see cref="msdyn_agreementbookingservice"/>, <see cref="msdyn_agreementbookingservicetask"/>, <see cref="msdyn_agreementbookingsetup"/>, <see cref="msdyn_agreementinvoicedate"/>, <see cref="msdyn_agreementinvoiceproduct"/>, <see cref="msdyn_agreementinvoicesetup"/>, <see cref="msdyn_bookingalertstatus"/>, <see cref="msdyn_bookingrule"/>, <see cref="msdyn_bookingtimestamp"/>, <see cref="msdyn_customerasset"/>, <see cref="msdyn_fieldservicesetting"/>, <see cref="msdyn_incidenttypecharacteristic"/>, <see cref="msdyn_incidenttypeproduct"/>, <see cref="msdyn_incidenttypeservice"/>, <see cref="msdyn_inventoryadjustment"/>, <see cref="msdyn_inventoryadjustmentproduct"/>, <see cref="msdyn_inventoryjournal"/>, <see cref="msdyn_inventorytransfer"/>, <see cref="msdyn_payment"/>, <see cref="msdyn_paymentdetail"/>, <see cref="msdyn_paymentmethod"/>, <see cref="msdyn_paymentterm"/>, <see cref="msdyn_playbookinstance"/>, <see cref="msdyn_postalbum"/>, <see cref="msdyn_postalcode"/>, <see cref="msdyn_productinventory"/>, <see cref="msdyn_purchaseorder"/>, <see cref="msdyn_purchaseorderbill"/>, <see cref="msdyn_purchaseorderproduct"/>, <see cref="msdyn_purchaseorderreceipt"/>, <see cref="msdyn_purchaseorderreceiptproduct"/>, <see cref="msdyn_purchaseordersubstatus"/>, <see cref="msdyn_quotebookingincident"/>, <see cref="msdyn_quotebookingproduct"/>, <see cref="msdyn_quotebookingservice"/>, <see cref="msdyn_quotebookingservicetask"/>, <see cref="msdyn_resourceterritory"/>, <see cref="msdyn_rma"/>, <see cref="msdyn_rmaproduct"/>, <see cref="msdyn_rmareceipt"/>, <see cref="msdyn_rmareceiptproduct"/>, <see cref="msdyn_rmasubstatus"/>, <see cref="msdyn_rtv"/>, <see cref="msdyn_rtvproduct"/>, <see cref="msdyn_rtvsubstatus"/>, <see cref="msdyn_salessuggestion"/>, <see cref="msdyn_shipvia"/>, <see cref="msdyn_swarm"/>, <see cref="msdyn_systemuserschedulersetting"/>, <see cref="msdyn_timegroup"/>, <see cref="msdyn_timegroupdetail"/>, <see cref="msdyn_timeoffrequest"/>, <see cref="msdyn_warehouse"/>, <see cref="msdyn_workorder"/>, <see cref="msdyn_workordercharacteristic"/>, <see cref="msdyn_workorderincident"/>, <see cref="msdyn_workorderproduct"/>, <see cref="msdyn_workorderresourcerestriction"/>, <see cref="msdyn_workorderservice"/>, <see cref="msdyn_workorderservicetask"/>, <see cref="msevtmgt_checkin"/>, <see cref="msevtmgt_event"/>, <see cref="msevtmgt_eventpurchase"/>, <see cref="msevtmgt_eventpurchaseattendee"/>, <see cref="msevtmgt_eventpurchasepass"/>, <see cref="msevtmgt_eventregistration"/>, <see cref="msevtmgt_hotel"/>, <see cref="msevtmgt_hotelroomallocation"/>, <see cref="msevtmgt_hotelroomreservation"/>, <see cref="msevtmgt_layout"/>, <see cref="msevtmgt_room"/>, <see cref="msevtmgt_session"/>, <see cref="msevtmgt_sessionregistration"/>, <see cref="msevtmgt_sessiontrack"/>, <see cref="msevtmgt_speaker"/>, <see cref="msevtmgt_speakerengagement"/>, <see cref="msevtmgt_sponsorablearticle"/>, <see cref="msevtmgt_sponsorship"/>, <see cref="msevtmgt_venue"/>, <see cref="msevtmgt_webinarconfiguration"/>, <see cref="msevtmgt_webinarprovider"/>, <see cref="mspp_adplacement"/>, <see cref="mspp_pollplacement"/>, <see cref="mspp_publishingstatetransitionrule"/>, <see cref="mspp_redirect"/>, <see cref="mspp_shortcut"/>, <see cref="mspp_website"/>, <see cref="opportunity"/>, <see cref="quote"/>, <see cref="salesorder"/>, <see cref="site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Attendees</para>
		/// <para><strong>Description</strong>: List of required attendees for the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="entitlement"/>, <see cref="equipment"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="queue"/>, <see cref="systemuser"/>, <see cref="unresolvedaddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> RequiredAttendees
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.RequiredAttendees).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.RequiredAttendees] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resources</para>
		/// <para><strong>Description</strong>: Users or facility/equipment that are required for the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="equipment"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> Resources
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.Resources).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.Resources] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scheduled Duration</para>
		/// <para><strong>Description</strong>: Scheduled duration of the activity, specified in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ScheduledDurationMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ScheduledDurationMinutes); }
			set { Entity.Attributes[Fields.ScheduledDurationMinutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Due Date</para>
		/// <para><strong>Description</strong>: Scheduled end time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledEnd); }
			set { Entity.Attributes[Fields.ScheduledEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start Date</para>
		/// <para><strong>Description</strong>: Scheduled start time of the activity.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ScheduledStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ScheduledStart); }
			set { Entity.Attributes[Fields.ScheduledStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender's Mailbox</para>
		/// <para><strong>Description</strong>: Unique identifier of the mailbox associated with the sender of the email message.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SenderMailboxId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SenderMailboxId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Sent</para>
		/// <para><strong>Description</strong>: Date and time when the activity was sent.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SentOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SentOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Series Id</para>
		/// <para><strong>Description</strong>: Uniqueidentifier specifying the id of recurring series of an instance.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SeriesId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SeriesId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service</para>
		/// <para><strong>Description</strong>: Unique identifier of an associated service.</para>
		/// <para><strong>Lookup</strong>: <see cref="service"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceId); }
			set { Entity.Attributes[Fields.ServiceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the case record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this case. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sort Date</para>
		/// <para><strong>Description</strong>: Shows the date and time by which the activities are sorted.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SortDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SortDate); }
			set { Entity.Attributes[Fields.SortDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Stage</para>
		/// <para><strong>Description</strong>: Unique identifier of the Stage.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>Description</strong>: State of the conversation record</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StateCode.Open"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the activity.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocliveworkitemOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Subject associated with the activity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To</para>
		/// <para><strong>Description</strong>: Person who is the receiver of the activity.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<ActivityParty> To
		{
			get
			{
				var data = new System.Collections.Generic.List<ActivityParty>();
				foreach (var item in Entity.GetAttributeValue<EntityCollection>(Fields.To).Entities)
					data.Add(new ActivityParty(item));
				return data;
			}
			set
			{
				var data = new EntityCollection();
				foreach (var item in value)
					data.Entities.Add(item.Entity);
				Entity.Attributes[Fields.To] = data;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the activitypointer.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Traversed Path</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}