//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:47
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SalesOrderOptionSets
{
	public enum FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: FOB</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		FOB = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Charge</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		No_Charge = 2
	}
	public enum msdyn_ordertype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Item based</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Item_based = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service-Maintenance Based</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Service_Maintenance_Based = 690_970_002
	}
	public enum OrderCreationMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 776,160,000</para>
		/// </summary>
		Unknown = 776_160_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Win Quote</para>
		/// <para><strong>Value</strong>: 776,160,001</para>
		/// </summary>
		Win_Quote = 776_160_001
	}
	public enum PaymentTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 2% 10, Net 30</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		_2_10_Net_30 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Net 30</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Net_30 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Net 45</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Net_45 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Net 60</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Net_60 = 4
	}
	public enum PricingErrorCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Currency Attribute Overflow</para>
		/// <para><strong>Value</strong>: 36</para>
		/// </summary>
		Base_Currency_Attribute_Overflow = 36,
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Currency Attribute Underflow</para>
		/// <para><strong>Value</strong>: 37</para>
		/// </summary>
		Base_Currency_Attribute_Underflow = 37,
		/// <summary>
		/// <para><strong>Display Name</strong>: Detail Error</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Detail_Error = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount Type Invalid State</para>
		/// <para><strong>Value</strong>: 27</para>
		/// </summary>
		Discount_Type_Invalid_State = 27,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Discount Type</para>
		/// <para><strong>Value</strong>: 33</para>
		/// </summary>
		Inactive_Discount_Type = 33,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive Price Level</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Inactive_Price_Level = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Current Cost</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Invalid_Current_Cost = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Discount</para>
		/// <para><strong>Value</strong>: 28</para>
		/// </summary>
		Invalid_Discount = 28,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Discount Type</para>
		/// <para><strong>Value</strong>: 26</para>
		/// </summary>
		Invalid_Discount_Type = 26,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price</para>
		/// <para><strong>Value</strong>: 19</para>
		/// </summary>
		Invalid_Price = 19,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Amount</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Invalid_Price_Level_Amount = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Currency</para>
		/// <para><strong>Value</strong>: 34</para>
		/// </summary>
		Invalid_Price_Level_Currency = 34,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Price Level Percentage</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		Invalid_Price_Level_Percentage = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Pricing Code</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Invalid_Pricing_Code = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Pricing Precision</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Invalid_Pricing_Precision = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Product</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Invalid_Product = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Quantity</para>
		/// <para><strong>Value</strong>: 29</para>
		/// </summary>
		Invalid_Quantity = 29,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Amount</para>
		/// <para><strong>Value</strong>: 24</para>
		/// </summary>
		Invalid_Rounding_Amount = 24,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Option</para>
		/// <para><strong>Value</strong>: 23</para>
		/// </summary>
		Invalid_Rounding_Option = 23,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Rounding Policy</para>
		/// <para><strong>Value</strong>: 22</para>
		/// </summary>
		Invalid_Rounding_Policy = 22,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid Standard Cost</para>
		/// <para><strong>Value</strong>: 21</para>
		/// </summary>
		Invalid_Standard_Cost = 21,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Current Cost</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Missing_Current_Cost = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Missing_Price = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Missing_Price_Level = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level Amount</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Missing_Price_Level_Amount = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Price Level Percentage</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Missing_Price_Level_Percentage = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Pricing Code</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Missing_Pricing_Code = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Missing_Product = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product Default UOM</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Missing_Product_Default_UOM = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Product UOM Schedule </para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Missing_Product_UOM_Schedule = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Quantity</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Missing_Quantity = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Standard Cost</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Missing_Standard_Cost = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing Unit Price</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Missing_Unit_Price = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Missing UOM</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Missing_UOM = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Attribute Out Of Range</para>
		/// <para><strong>Value</strong>: 35</para>
		/// </summary>
		Price_Attribute_Out_Of_Range = 35,
		/// <summary>
		/// <para><strong>Display Name</strong>: Price Calculation Error</para>
		/// <para><strong>Value</strong>: 25</para>
		/// </summary>
		Price_Calculation_Error = 25,
		/// <summary>
		/// <para><strong>Display Name</strong>: Product Not In Price Level</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Product_Not_In_Price_Level = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Transaction currency is not set for the product price list item</para>
		/// <para><strong>Value</strong>: 38</para>
		/// </summary>
		Transaction_currency_is_not_set_for_the_product_price_list_item = 38
	}
	public enum PriorityCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Airborne</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Airborne = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: DHL</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		DHL = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: FedEx</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		FedEx = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Full Load</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Full_Load = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Postal Mail</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Postal_Mail = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: UPS</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		UPS = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Will Call</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Will_Call = 7
	}
	public enum ShipTo_FreightTermsCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum SkipPriceCalculation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DoPriceCalcAlways</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		DoPriceCalcAlways = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: SkipPriceCalcOnRetrieve</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		SkipPriceCalcOnRetrieve = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fulfilled</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Fulfilled = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invoiced</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Invoiced = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Submitted = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Complete</para>
		/// <para><strong>Value</strong>: 100,001</para>
		/// <para><strong>StateCode.Fulfilled</strong></para>
		/// </summary>
		Complete = 100_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Submitted</strong></para>
		/// </summary>
		In_Progress = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invoiced</para>
		/// <para><strong>Value</strong>: 100,003</para>
		/// <para><strong>StateCode.Invoiced</strong></para>
		/// </summary>
		Invoiced = 100_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		New = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Money</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Canceled</strong></para>
		/// </summary>
		No_Money = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: On hold</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		On_hold = 690_970_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Partial</para>
		/// <para><strong>Value</strong>: 100,002</para>
		/// <para><strong>StateCode.Fulfilled</strong></para>
		/// </summary>
		Partial = 100_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Pending = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SalesOrder : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string BillTo_AddressId = "billto_addressid";
			public const string BillTo_City = "billto_city";
			public const string BillTo_Composite = "billto_composite";
			public const string BillTo_ContactName = "billto_contactname";
			public const string BillTo_Country = "billto_country";
			public const string BillTo_Fax = "billto_fax";
			public const string BillTo_Line1 = "billto_line1";
			public const string BillTo_Line2 = "billto_line2";
			public const string BillTo_Line3 = "billto_line3";
			public const string BillTo_Name = "billto_name";
			public const string BillTo_PostalCode = "billto_postalcode";
			public const string BillTo_StateOrProvince = "billto_stateorprovince";
			public const string BillTo_Telephone = "billto_telephone";
			public const string CampaignId = "campaignid";
			public const string ContactId = "contactid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string DateFulfilled = "datefulfilled";
			public const string Description = "description";
			public const string DiscountAmount = "discountamount";
			public const string DiscountAmount_Base = "discountamount_base";
			public const string DiscountPercentage = "discountpercentage";
			public const string EmailAddress = "emailaddress";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FreightAmount = "freightamount";
			public const string FreightAmount_Base = "freightamount_base";
			public const string FreightTermsCode = "freighttermscode";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsPriceLocked = "ispricelocked";
			public const string LastBackofficeSubmit = "lastbackofficesubmit";
			public const string LastOnHoldTime = "lastonholdtime";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Account = "msdyn_account";
			public const string msdyn_ordertype = "msdyn_ordertype";
			public const string msdyn_ProcessStartedOn = "msdyn_processstartedon";
			public const string Name = "name";
			public const string OnHoldTime = "onholdtime";
			public const string OpportunityId = "opportunityid";
			public const string OrderCreationMethod = "ordercreationmethod";
			public const string OrderNumber = "ordernumber";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PaymentTermsCode = "paymenttermscode";
			public const string PriceLevelId = "pricelevelid";
			public const string PricingErrorCode = "pricingerrorcode";
			public const string PriorityCode = "prioritycode";
			public const string ProcessId = "processid";
			public const string QuoteId = "quoteid";
			public const string RequestDeliveryBy = "requestdeliveryby";
			public const string SalesOrderId = "salesorderid";
			public const string ShippingMethodCode = "shippingmethodcode";
			public const string ShipTo_AddressId = "shipto_addressid";
			public const string ShipTo_City = "shipto_city";
			public const string ShipTo_Composite = "shipto_composite";
			public const string ShipTo_ContactName = "shipto_contactname";
			public const string ShipTo_Country = "shipto_country";
			public const string ShipTo_Fax = "shipto_fax";
			public const string ShipTo_FreightTermsCode = "shipto_freighttermscode";
			public const string ShipTo_Line1 = "shipto_line1";
			public const string ShipTo_Line2 = "shipto_line2";
			public const string ShipTo_Line3 = "shipto_line3";
			public const string ShipTo_Name = "shipto_name";
			public const string ShipTo_PostalCode = "shipto_postalcode";
			public const string ShipTo_StateOrProvince = "shipto_stateorprovince";
			public const string ShipTo_Telephone = "shipto_telephone";
			public const string SkipPriceCalculation = "skippricecalculation";
			public const string SLAId = "slaid";
			public const string SLAInvokedId = "slainvokedid";
			public const string StageId = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SubmitDate = "submitdate";
			public const string SubmitStatus = "submitstatus";
			public const string SubmitStatusDescription = "submitstatusdescription";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TotalAmount = "totalamount";
			public const string TotalAmount_Base = "totalamount_base";
			public const string TotalAmountLessFreight = "totalamountlessfreight";
			public const string TotalAmountLessFreight_Base = "totalamountlessfreight_base";
			public const string TotalDiscountAmount = "totaldiscountamount";
			public const string TotalDiscountAmount_Base = "totaldiscountamount_base";
			public const string TotalLineItemAmount = "totallineitemamount";
			public const string TotalLineItemAmount_Base = "totallineitemamount_base";
			public const string TotalLineItemDiscountAmount = "totallineitemdiscountamount";
			public const string TotalLineItemDiscountAmount_Base = "totallineitemdiscountamount_base";
			public const string TotalTax = "totaltax";
			public const string TotalTax_Base = "totaltax_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TraversedPath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WillCall = "willcall";
		}
		public const string EntityLogicalName = "salesorder";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1088;
		public const string EntityCollectionSchemaName = "SalesOrders";
		public const string EntityDisplayCollectionName = "Orders";
		public const string DisplayName = "Order";
		public const string EntitySetName = "salesorders";
		public const string EntityLogicalCollectionName = "salesorders";
		public const string EntityPrimaryIdAttribute = "salesorderid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SalesOrder";
		[DebuggerNonUserCode()]
		public SalesOrder()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SalesOrder(Guid SalesOrderId)
		{
			Entity = new Entity(EntityLogicalName, SalesOrderId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SalesOrder(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SalesOrder"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SalesOrder(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SalesOrder"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SalesOrder(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SalesOrder(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SalesOrder"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SalesOrder(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SalesOrder(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SalesOrder(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Shows the parent account related to the record. This information is used to link the sales order to the account selected in the Customer field for reporting and analytics.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Address ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the billing address.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BillTo_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BillTo_AddressId); }
			set { Entity.Attributes[Fields.BillTo_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To City</para>
		/// <para><strong>Description</strong>: Type the city for the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_City); }
			set { Entity.Attributes[Fields.BillTo_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Address</para>
		/// <para><strong>Description</strong>: Shows the complete Bill To address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Contact Name</para>
		/// <para><strong>Description</strong>: Type the primary contact name at the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_ContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_ContactName); }
			set { Entity.Attributes[Fields.BillTo_ContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Country/Region</para>
		/// <para><strong>Description</strong>: Type the country or region for the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Country); }
			set { Entity.Attributes[Fields.BillTo_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Fax</para>
		/// <para><strong>Description</strong>: Type the fax number for the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Fax); }
			set { Entity.Attributes[Fields.BillTo_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Street 1</para>
		/// <para><strong>Description</strong>: Type the first line of the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Line1); }
			set { Entity.Attributes[Fields.BillTo_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Street 2</para>
		/// <para><strong>Description</strong>: Type the second line of the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Line2); }
			set { Entity.Attributes[Fields.BillTo_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Street 3</para>
		/// <para><strong>Description</strong>: Type the third line of the billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Line3); }
			set { Entity.Attributes[Fields.BillTo_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Name</para>
		/// <para><strong>Description</strong>: Type a name for the customer&apos;s billing address, such as &quot;Headquarters&quot; or &quot;Field office&quot;, to identify the address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Name); }
			set { Entity.Attributes[Fields.BillTo_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: Type the ZIP Code or postal code for the billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_PostalCode); }
			set { Entity.Attributes[Fields.BillTo_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To State/Province</para>
		/// <para><strong>Description</strong>: Type the state or province for the billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_StateOrProvince); }
			set { Entity.Attributes[Fields.BillTo_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Phone</para>
		/// <para><strong>Description</strong>: Type the phone number for the customer&apos;s billing address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillTo_Telephone
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillTo_Telephone); }
			set { Entity.Attributes[Fields.BillTo_Telephone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Campaign</para>
		/// <para><strong>Description</strong>: Shows the campaign that the order was created from.</para>
		/// <para><strong>Lookup</strong>: <see cref="campaign"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CampaignId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CampaignId); }
			set { Entity.Attributes[Fields.CampaignId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Shows the parent contact related to the record. This information is used to link the contract to the contact selected in the Customer field for reporting and analytics.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Description</strong>: Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Fulfilled</para>
		/// <para><strong>Description</strong>: Enter the date that all or part of the order was shipped to the customer.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? DateFulfilledUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.DateFulfilled); }
			set { Entity.Attributes[Fields.DateFulfilled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the order, such as the products or services offered or details about the customer&apos;s product preferences.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Discount Amount</para>
		/// <para><strong>Description</strong>: Type the discount amount for the order if the customer is eligible for special savings.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.DiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Order Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.DiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Discount (%)</para>
		/// <para><strong>Description</strong>: Type the discount rate that should be applied to the Detail Amount field to include additional savings for the customer in the order.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DiscountPercentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DiscountPercentage); }
			set { Entity.Attributes[Fields.DiscountPercentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address</para>
		/// <para><strong>Description</strong>: The primary email address for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Freight Amount</para>
		/// <para><strong>Description</strong>: Type the cost of freight or shipping for the products included in the order for use in calculating the Total Amount field.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.FreightAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Freight Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Freight Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? FreightAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.FreightAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Freight Terms</para>
		/// <para><strong>Description</strong>: Select the freight terms to make sure shipping charges are processed correctly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.FreightTermsCode? FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prices Locked</para>
		/// <para><strong>Description</strong>: Select whether prices specified on the invoice are locked from any further updates.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPriceLocked
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPriceLocked); }
			set { Entity.Attributes[Fields.IsPriceLocked] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Submitted to Back Office</para>
		/// <para><strong>Description</strong>: Enter the date and time when the order was last submitted to an accounting or ERP system for processing.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastBackofficeSubmitUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastBackofficeSubmit); }
			set { Entity.Attributes[Fields.LastBackofficeSubmit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last On Hold Time</para>
		/// <para><strong>Description</strong>: Contains the date time stamp of the last on hold time.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastOnHoldTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastOnHoldTime); }
			set { Entity.Attributes[Fields.LastOnHoldTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Potential Customer</para>
		/// <para><strong>Description</strong>: Customer Account associated with this Order</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Account
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Account); }
			set { Entity.Attributes[Fields.msdyn_Account] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Type</para>
		/// <para><strong>Description</strong>: Internal use only</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_ordertype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_ordertype.Item_based"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_ordertype? msdyn_ordertype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ordertype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.msdyn_ordertype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ordertype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ordertype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Started On</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_ProcessStartedOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_ProcessStartedOn); }
			set { Entity.Attributes[Fields.msdyn_ProcessStartedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name for the order.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold Time (Minutes)</para>
		/// <para><strong>Description</strong>: Shows the duration in minutes for which the order was on hold.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? OnHoldTime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.OnHoldTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Opportunity</para>
		/// <para><strong>Description</strong>: Choose the related opportunity so that the data for the order and opportunity are linked for reporting and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OpportunityId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OpportunityId); }
			set { Entity.Attributes[Fields.OpportunityId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Creation Method</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.OrderCreationMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.OrderCreationMethod.Unknown"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.OrderCreationMethod? OrderCreationMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OrderCreationMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.OrderCreationMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OrderCreationMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OrderCreationMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order ID</para>
		/// <para><strong>Description</strong>: Shows the order number for customer reference and to use in search. The number cannot be modified.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OrderNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.OrderNumber); }
			set { Entity.Attributes[Fields.OrderNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Payment Terms</para>
		/// <para><strong>Description</strong>: Select the payment terms to indicate when the customer needs to pay the total amount.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PaymentTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PaymentTermsCode? PaymentTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PaymentTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PaymentTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PaymentTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PaymentTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Price List</para>
		/// <para><strong>Description</strong>: Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="pricelevel"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PriceLevelId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PriceLevelId); }
			set { Entity.Attributes[Fields.PriceLevelId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pricing Error</para>
		/// <para><strong>Description</strong>: Select the type of pricing error, such as a missing or invalid product, or missing quantity.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PricingErrorCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PricingErrorCode.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PricingErrorCode? PricingErrorCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PricingErrorCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PricingErrorCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PricingErrorCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PricingErrorCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Select the priority so that preferred customers or critical issues are handled quickly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PriorityCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PriorityCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PriorityCode? PriorityCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.PriorityCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.PriorityCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.PriorityCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.PriorityCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Id</para>
		/// <para><strong>Description</strong>: Contains the id of the process associated with the entity.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quote</para>
		/// <para><strong>Description</strong>: Choose the related quote so that order data and quote data are linked for reporting and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="quote"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QuoteId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QuoteId); }
			set { Entity.Attributes[Fields.QuoteId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requested Delivery Date</para>
		/// <para><strong>Description</strong>: Enter the delivery date requested by the customer for all products in the order.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RequestDeliveryByUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RequestDeliveryBy); }
			set { Entity.Attributes[Fields.RequestDeliveryBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order</para>
		/// <para><strong>Description</strong>: Unique identifier of the order.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SalesOrderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SalesOrderId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Shipping Method</para>
		/// <para><strong>Description</strong>: Select a shipping method for deliveries sent to this address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShippingMethodCode? ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Address ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the shipping address.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ShipTo_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ShipTo_AddressId); }
			set { Entity.Attributes[Fields.ShipTo_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To City</para>
		/// <para><strong>Description</strong>: Type the city for the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_City); }
			set { Entity.Attributes[Fields.ShipTo_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Address</para>
		/// <para><strong>Description</strong>: Shows the complete Ship To address.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Composite
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Composite); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Contact Name</para>
		/// <para><strong>Description</strong>: Type the primary contact name at the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_ContactName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_ContactName); }
			set { Entity.Attributes[Fields.ShipTo_ContactName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Country/Region</para>
		/// <para><strong>Description</strong>: Type the country or region for the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Country); }
			set { Entity.Attributes[Fields.ShipTo_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship to Fax</para>
		/// <para><strong>Description</strong>: Type the fax number for the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Fax); }
			set { Entity.Attributes[Fields.ShipTo_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Freight Terms</para>
		/// <para><strong>Description</strong>: Select the freight terms to make sure shipping orders are processed correctly.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShipTo_FreightTermsCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShipTo_FreightTermsCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShipTo_FreightTermsCode? ShipTo_FreightTermsCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ShipTo_FreightTermsCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.ShipTo_FreightTermsCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ShipTo_FreightTermsCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ShipTo_FreightTermsCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Street 1</para>
		/// <para><strong>Description</strong>: Type the first line of the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Line1); }
			set { Entity.Attributes[Fields.ShipTo_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Street 2</para>
		/// <para><strong>Description</strong>: Type the second line of the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Line2); }
			set { Entity.Attributes[Fields.ShipTo_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Street 3</para>
		/// <para><strong>Description</strong>: Type the third line of the shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Line3); }
			set { Entity.Attributes[Fields.ShipTo_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Name</para>
		/// <para><strong>Description</strong>: Type a name for the customer&apos;s shipping address, such as &quot;Headquarters&quot; or &quot;Field office&quot;,  to identify the address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Name); }
			set { Entity.Attributes[Fields.ShipTo_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: Type the ZIP Code or postal code for the shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_PostalCode); }
			set { Entity.Attributes[Fields.ShipTo_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To State/Province</para>
		/// <para><strong>Description</strong>: Type the state or province for the shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_StateOrProvince); }
			set { Entity.Attributes[Fields.ShipTo_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Phone</para>
		/// <para><strong>Description</strong>: Type the phone number for the customer&apos;s shipping address.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ShipTo_Telephone
		{
			get { return Entity.GetAttributeValue<string>(Fields.ShipTo_Telephone); }
			set { Entity.Attributes[Fields.ShipTo_Telephone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skip Price Calculation (For Internal Use)</para>
		/// <para><strong>Description</strong>: Skip Price Calculation</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.SkipPriceCalculation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.SkipPriceCalculation.DoPriceCalcAlways"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.SkipPriceCalculation? SkipPriceCalculation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SkipPriceCalculation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.SkipPriceCalculation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SkipPriceCalculation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SkipPriceCalculation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Choose the service level agreement (SLA) that you want to apply to the sales order record.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last SLA applied</para>
		/// <para><strong>Description</strong>: Last SLA that was applied to this sales order. This field is for internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAInvokedId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAInvokedId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Stage Id</para>
		/// <para><strong>Description</strong>: Contains the id of the stage where the entity is located.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? StageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.StageId); }
			set { Entity.Attributes[Fields.StageId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the order is active, submitted, fulfilled, canceled, or invoiced. Only active orders can be edited.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StateCode.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the order&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SalesOrderOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Submitted</para>
		/// <para><strong>Description</strong>: Enter the date when the order was submitted to the fulfillment or shipping center.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? SubmitDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.SubmitDate); }
			set { Entity.Attributes[Fields.SubmitDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted Status</para>
		/// <para><strong>Description</strong>: Type the code for the submitted status in the fulfillment or shipping center system.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubmitStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubmitStatus); }
			set { Entity.Attributes[Fields.SubmitStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submitted Status Description</para>
		/// <para><strong>Description</strong>: Type additional details or notes about the order for the fulfillment or shipping center.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubmitStatusDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubmitStatusDescription); }
			set { Entity.Attributes[Fields.SubmitStatusDescription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount</para>
		/// <para><strong>Description</strong>: Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Pre-Freight Amount</para>
		/// <para><strong>Description</strong>: Shows the total product amount for the order, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalAmountLessFreight] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalAmountLessFreight] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Pre-Freight Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Pre-Freight Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalAmountLessFreight_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalAmountLessFreight_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Discount Amount</para>
		/// <para><strong>Description</strong>: Shows the total discount amount, based on the discount price and rate entered on the order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalDiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Detail Amount</para>
		/// <para><strong>Description</strong>: Shows the sum of all existing and write-in products included on the order, based on the specified price list and quantities.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Detail Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Detail Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Line Item Discount Amount</para>
		/// <para><strong>Description</strong>: Shows the total of the Manual Discount amounts specified on all products included in the order. This value is reflected in the Detail Amount field on the order and is added to any discount amount or rate specified on the order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalLineItemDiscountAmount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Line Item Discount Amount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Line Item Discount Amount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalLineItemDiscountAmount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalLineItemDiscountAmount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Tax</para>
		/// <para><strong>Description</strong>: Shows the Tax amounts specified on all products included in the order, included in the Total Amount due calculation for the order.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TotalTax] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TotalTax] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Tax (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Tax in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalTax_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalTax_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Traversed Path</para>
		/// <para><strong>Description</strong>: A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To</para>
		/// <para><strong>Description</strong>: Select whether the products included in the order should be shipped to the specified address or held until the customer calls with further pick-up or delivery instructions.</para>
		/// <para><strong>Two Option</strong> - [<strong>Will Call</strong>]: true - [<strong>Address</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Address</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WillCall
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WillCall); }
			set { Entity.Attributes[Fields.WillCall] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}