//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets
{
	public enum msdyn_eventinfo
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Default = 192_350_000
	}
	public enum msdyn_eventreason
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Accepted</para>
		/// <para><strong>Value</strong>: 192,350,019</para>
		/// </summary>
		Accepted = 192_350_019,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentConversationJoin</para>
		/// <para><strong>Value</strong>: 192,350,041</para>
		/// </summary>
		AgentConversationJoin = 192_350_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentDisconnected</para>
		/// <para><strong>Value</strong>: 192,350,010</para>
		/// </summary>
		AgentDisconnected = 192_350_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentEndConsult</para>
		/// <para><strong>Value</strong>: 192,350,032</para>
		/// </summary>
		AgentEndConsult = 192_350_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentEndConversation</para>
		/// <para><strong>Value</strong>: 192,350,030</para>
		/// </summary>
		AgentEndConversation = 192_350_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentInviteRejected</para>
		/// <para><strong>Value</strong>: 192,350,008</para>
		/// </summary>
		AgentInviteRejected = 192_350_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentInviteTimeout</para>
		/// <para><strong>Value</strong>: 192,350,009</para>
		/// </summary>
		AgentInviteTimeout = 192_350_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentMonitor</para>
		/// <para><strong>Value</strong>: 192,350,040</para>
		/// </summary>
		AgentMonitor = 192_350_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentTimeout</para>
		/// <para><strong>Value</strong>: 192,350,011</para>
		/// </summary>
		AgentTimeout = 192_350_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentTransfer</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		AgentTransfer = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentTransferred</para>
		/// <para><strong>Value</strong>: 192,350,012</para>
		/// </summary>
		AgentTransferred = 192_350_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: AssignToAgentBySupervisor  </para>
		/// <para><strong>Value</strong>: 192,350,026</para>
		/// </summary>
		AssignToAgentBySupervisor = 192_350_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: AssignToQueueBySupervisor  </para>
		/// <para><strong>Value</strong>: 192,350,027</para>
		/// </summary>
		AssignToQueueBySupervisor = 192_350_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: AutoAccept</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		AutoAccept = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: AutoAccepted</para>
		/// <para><strong>Value</strong>: 192,350,020</para>
		/// </summary>
		AutoAccepted = 192_350_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: BotEndConversation </para>
		/// <para><strong>Value</strong>: 192,350,025</para>
		/// </summary>
		BotEndConversation = 192_350_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: BotTransferSession </para>
		/// <para><strong>Value</strong>: 192,350,024</para>
		/// </summary>
		BotTransferSession = 192_350_024,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		Closed = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: Consult</para>
		/// <para><strong>Value</strong>: 192,350,039</para>
		/// </summary>
		Consult = 192_350_039,
		/// <summary>
		/// <para><strong>Display Name</strong>: ConversationExpired</para>
		/// <para><strong>Value</strong>: 192,350,038</para>
		/// </summary>
		ConversationExpired = 192_350_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerDisconnect</para>
		/// <para><strong>Value</strong>: 192,350,014</para>
		/// </summary>
		CustomerDisconnect = 192_350_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerEndConversation</para>
		/// <para><strong>Value</strong>: 192,350,029</para>
		/// </summary>
		CustomerEndConversation = 192_350_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerRejoin</para>
		/// <para><strong>Value</strong>: 192,350,028</para>
		/// </summary>
		CustomerRejoin = 192_350_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerTimeout</para>
		/// <para><strong>Value</strong>: 192,350,013</para>
		/// </summary>
		CustomerTimeout = 192_350_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Default = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Disconnect</para>
		/// <para><strong>Value</strong>: 192,350,021</para>
		/// </summary>
		Disconnect = 192_350_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: End</para>
		/// <para><strong>Value</strong>: 192,350,023</para>
		/// </summary>
		End = 192_350_023,
		/// <summary>
		/// <para><strong>Display Name</strong>: Escalated</para>
		/// <para><strong>Value</strong>: 192,350,016</para>
		/// </summary>
		Escalated = 192_350_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: ForceClose</para>
		/// <para><strong>Value</strong>: 192,350,033</para>
		/// </summary>
		ForceClose = 192_350_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: OverflowAssignToQueue</para>
		/// <para><strong>Value</strong>: 192,350,036</para>
		/// </summary>
		OverflowAssignToQueue = 192_350_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: OverflowEndConversation</para>
		/// <para><strong>Value</strong>: 192,350,035</para>
		/// </summary>
		OverflowEndConversation = 192_350_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: OverflowQueueTransfer</para>
		/// <para><strong>Value</strong>: 192,350,034</para>
		/// </summary>
		OverflowQueueTransfer = 192_350_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: PostchatSurvey</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		PostchatSurvey = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: PreChatSurvey</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		PreChatSurvey = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preview</para>
		/// <para><strong>Value</strong>: 192,350,042</para>
		/// </summary>
		Preview = 192_350_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: QueueTransfer</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		QueueTransfer = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 192,350,017</para>
		/// </summary>
		Rejected = 192_350_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionEndAfterWrapUp</para>
		/// <para><strong>Value</strong>: 192,350,037</para>
		/// </summary>
		SessionEndAfterWrapUp = 192_350_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionTimeout</para>
		/// <para><strong>Value</strong>: 192,350,015</para>
		/// </summary>
		SessionTimeout = 192_350_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: SupervisorTransferToAgent</para>
		/// <para><strong>Value</strong>: 192,350,031</para>
		/// </summary>
		SupervisorTransferToAgent = 192_350_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: TimedOut</para>
		/// <para><strong>Value</strong>: 192,350,018</para>
		/// </summary>
		TimedOut = 192_350_018,
		/// <summary>
		/// <para><strong>Display Name</strong>: Timeout</para>
		/// <para><strong>Value</strong>: 192,350,022</para>
		/// </summary>
		Timeout = 192_350_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: UserAccept</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		UserAccept = 192_350_005
	}
	public enum msdyn_eventtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentAccepted</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		AgentAccepted = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentAddedToC2Chat</para>
		/// <para><strong>Value</strong>: 192,350,027</para>
		/// </summary>
		AgentAddedToC2Chat = 192_350_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentAssigned</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		AgentAssigned = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentDisconnected</para>
		/// <para><strong>Value</strong>: 192,350,014</para>
		/// </summary>
		AgentDisconnected = 192_350_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentEndConsult</para>
		/// <para><strong>Value</strong>: 192,350,029</para>
		/// </summary>
		AgentEndConsult = 192_350_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentEndConversation</para>
		/// <para><strong>Value</strong>: 192,350,026</para>
		/// </summary>
		AgentEndConversation = 192_350_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentInviteRejected</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		AgentInviteRejected = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentInviteTimeout</para>
		/// <para><strong>Value</strong>: 192,350,007</para>
		/// </summary>
		AgentInviteTimeout = 192_350_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentRemovedFromC2Chat</para>
		/// <para><strong>Value</strong>: 192,350,028</para>
		/// </summary>
		AgentRemovedFromC2Chat = 192_350_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: AgentTimeout</para>
		/// <para><strong>Value</strong>: 192,350,015</para>
		/// </summary>
		AgentTimeout = 192_350_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: AssignToAgentBySupervisor</para>
		/// <para><strong>Value</strong>: 192,350,023</para>
		/// </summary>
		AssignToAgentBySupervisor = 192_350_023,
		/// <summary>
		/// <para><strong>Display Name</strong>: AssignToQueueBySupervisor</para>
		/// <para><strong>Value</strong>: 192,350,024</para>
		/// </summary>
		AssignToQueueBySupervisor = 192_350_024,
		/// <summary>
		/// <para><strong>Display Name</strong>: BotEndConversation</para>
		/// <para><strong>Value</strong>: 192,350,022</para>
		/// </summary>
		BotEndConversation = 192_350_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: BotTransferSession</para>
		/// <para><strong>Value</strong>: 192,350,021</para>
		/// </summary>
		BotTransferSession = 192_350_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerDisconnected</para>
		/// <para><strong>Value</strong>: 192,350,017</para>
		/// </summary>
		CustomerDisconnected = 192_350_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerEndConversation</para>
		/// <para><strong>Value</strong>: 192,350,025</para>
		/// </summary>
		CustomerEndConversation = 192_350_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerTimeout</para>
		/// <para><strong>Value</strong>: 192,350,016</para>
		/// </summary>
		CustomerTimeout = 192_350_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Default = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Escalated</para>
		/// <para><strong>Value</strong>: 192,350,008</para>
		/// </summary>
		Escalated = 192_350_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: ExpiredConversationClose</para>
		/// <para><strong>Value</strong>: 192,350,032</para>
		/// </summary>
		ExpiredConversationClose = 192_350_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParticipantEnd</para>
		/// <para><strong>Value</strong>: 192,350,013</para>
		/// </summary>
		ParticipantEnd = 192_350_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParticipantInviteAccepted</para>
		/// <para><strong>Value</strong>: 192,350,011</para>
		/// </summary>
		ParticipantInviteAccepted = 192_350_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParticipantInvited</para>
		/// <para><strong>Value</strong>: 192,350,009</para>
		/// </summary>
		ParticipantInvited = 192_350_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParticipantInviteRejected</para>
		/// <para><strong>Value</strong>: 192,350,010</para>
		/// </summary>
		ParticipantInviteRejected = 192_350_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParticipantInviteTimeout</para>
		/// <para><strong>Value</strong>: 192,350,012</para>
		/// </summary>
		ParticipantInviteTimeout = 192_350_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: ParticipantLeft</para>
		/// <para><strong>Value</strong>: 192,350,020</para>
		/// </summary>
		ParticipantLeft = 192_350_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: QueueAssigned</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		QueueAssigned = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionCreated</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		SessionCreated = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionEnd</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		SessionEnd = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: SessionEndAfterWrapUp</para>
		/// <para><strong>Value</strong>: 192,350,031</para>
		/// </summary>
		SessionEndAfterWrapUp = 192_350_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: SupervisorForceClose</para>
		/// <para><strong>Value</strong>: 192,350,030</para>
		/// </summary>
		SupervisorForceClose = 192_350_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: TransferedToAgent</para>
		/// <para><strong>Value</strong>: 192,350,018</para>
		/// </summary>
		TransferedToAgent = 192_350_018,
		/// <summary>
		/// <para><strong>Display Name</strong>: TransferedToQueue</para>
		/// <para><strong>Value</strong>: 192,350,019</para>
		/// </summary>
		TransferedToQueue = 192_350_019
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sessionevent : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_eventinfo = "msdyn_eventinfo";
			public const string msdyn_eventreason = "msdyn_eventreason";
			public const string msdyn_eventtime = "msdyn_eventtime";
			public const string msdyn_eventtype = "msdyn_eventtype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_omnichannelsession = "msdyn_omnichannelsession";
			public const string msdyn_sessioneventId = "msdyn_sessioneventid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_sessionevent";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10727;
		public const string EntityCollectionSchemaName = "msdyn_sessionevents";
		public const string EntityDisplayCollectionName = "Session events";
		public const string DisplayName = "Session event";
		public const string EntitySetName = "msdyn_sessionevents";
		public const string EntityLogicalCollectionName = "msdyn_sessionevents";
		public const string EntityPrimaryIdAttribute = "msdyn_sessioneventid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_sessionevent";
		[DebuggerNonUserCode()]
		public msdyn_sessionevent()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Guid msdyn_sessioneventId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sessioneventId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sessionevent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sessionevent"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sessionevent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sessionevent(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sessionevent"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sessionevent(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sessionevent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event Info</para>
		/// <para><strong>Description</strong>: Event information</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventinfo"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventinfo? msdyn_eventinfo
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_eventinfo);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventinfo)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_eventinfo] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_eventinfo] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event Reason</para>
		/// <para><strong>Description</strong>: Reason for session event</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventreason"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventreason? msdyn_eventreason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_eventreason);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventreason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_eventreason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_eventreason] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event Time</para>
		/// <para><strong>Description</strong>: Date and time of session event</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_eventtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_eventtime); }
			set { Entity.Attributes[Fields.msdyn_eventtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event Type</para>
		/// <para><strong>Description</strong>: Type of session event e.g. accept, reject etc</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventtype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventtype? msdyn_eventtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_eventtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_eventtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_eventtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Omni Channel Session</para>
		/// <para><strong>Description</strong>: Unique identifier for the associated session</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_omnichannelsession
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_omnichannelsession); }
			set { Entity.Attributes[Fields.msdyn_omnichannelsession] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session event</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sessioneventId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sessioneventId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Session event</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Session event</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessioneventOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}