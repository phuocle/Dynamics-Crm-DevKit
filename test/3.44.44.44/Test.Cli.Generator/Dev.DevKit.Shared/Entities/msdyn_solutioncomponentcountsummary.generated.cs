//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_solutioncomponentcountsummaryOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_solutioncomponentcountsummary : EntityBase
	{
		public struct Fields
		{
			public const string msdyn_componentlogicalname = "msdyn_componentlogicalname";
			public const string msdyn_componenttype = "msdyn_componenttype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_primaryentityname = "msdyn_primaryentityname";
			public const string msdyn_solutioncomponentcountsummaryId = "msdyn_solutioncomponentcountsummaryid";
			public const string msdyn_solutionid = "msdyn_solutionid";
			public const string msdyn_subtype = "msdyn_subtype";
			public const string msdyn_total = "msdyn_total";
			public const string msdyn_workflowcategory = "msdyn_workflowcategory";
			public const string OrganizationId = "organizationid";
		}
		public const string EntityLogicalName = "msdyn_solutioncomponentcountsummary";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10015;
		public const string EntityCollectionSchemaName = "msdyn_solutioncomponentcountsummaries";
		public const string EntityDisplayCollectionName = "Solution Component Count Summaries";
		public const string DisplayName = "Solution Component Count Summary";
		public const string EntitySetName = "msdyn_solutioncomponentcountsummaries";
		public const string EntityLogicalCollectionName = "msdyn_solutioncomponentcountsummaries";
		public const string EntityPrimaryIdAttribute = "msdyn_solutioncomponentcountsummaryid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_solutioncomponentcountsummary";
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary(Guid msdyn_solutioncomponentcountsummaryId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_solutioncomponentcountsummaryId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_solutioncomponentcountsummary"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_solutioncomponentcountsummary"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_solutioncomponentcountsummary(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_solutioncomponentcountsummary"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_solutioncomponentcountsummary(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_solutioncomponentcountsummary(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component Logical Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_componentlogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_componentlogicalname); }
			set { Entity.Attributes[Fields.msdyn_componentlogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_componenttype</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_componenttype
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_componenttype); }
			set { Entity.Attributes[Fields.msdyn_componenttype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Entity Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_primaryentityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_primaryentityname); }
			set { Entity.Attributes[Fields.msdyn_primaryentityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SolutionComponentCountSummary</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_solutioncomponentcountsummaryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_solutioncomponentcountsummaryId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_solutionid</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_solutionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_solutionid); }
			set { Entity.Attributes[Fields.msdyn_solutionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_subtype</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_subtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_subtype); }
			set { Entity.Attributes[Fields.msdyn_subtype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_total</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_total
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_total); }
			set { Entity.Attributes[Fields.msdyn_total] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_workflowcategory</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_workflowcategory
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_workflowcategory); }
			set { Entity.Attributes[Fields.msdyn_workflowcategory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
	}
}