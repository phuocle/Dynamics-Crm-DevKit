//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets
{
	public enum msdyncrm_syncstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Active = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Forbidden</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Forbidden = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: No Form Submissions</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		No_Form_Submissions = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending Synchronization</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Pending_Synchronization = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_linkedinform : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_Description = "msdyncrm_description";
			public const string msdyncrm_Headline = "msdyncrm_headline";
			public const string msdyncrm_LandingpageURL = "msdyncrm_landingpageurl";
			public const string msdyncrm_lastsyncdate = "msdyncrm_lastsyncdate";
			public const string msdyncrm_linkedinformId = "msdyncrm_linkedinformid";
			public const string msdyncrm_LinkedInID = "msdyncrm_linkedinid";
			public const string msdyncrm_LinkedInParentAccount = "msdyncrm_linkedinparentaccount";
			public const string msdyncrm_LocaleCountry = "msdyncrm_localecountry";
			public const string msdyncrm_LocaleLanguage = "msdyncrm_localelanguage";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_PrivacyPolicyURL = "msdyncrm_privacypolicyurl";
			public const string msdyncrm_syncstatus = "msdyncrm_syncstatus";
			public const string msdyncrm_Thankyoumessage = "msdyncrm_thankyoumessage";
			public const string msdyncrm_totalsubmissions = "msdyncrm_totalsubmissions";
			public const string msdyncrm_totalsubmissions_Date = "msdyncrm_totalsubmissions_date";
			public const string msdyncrm_totalsubmissions_State = "msdyncrm_totalsubmissions_state";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_linkedinform";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11205;
		public const string EntityCollectionSchemaName = "msdyncrm_linkedinforms";
		public const string EntityDisplayCollectionName = "LinkedIn Lead Gen Forms";
		public const string DisplayName = "LinkedIn Lead Gen Form";
		public const string EntitySetName = "msdyncrm_linkedinforms";
		public const string EntityLogicalCollectionName = "msdyncrm_linkedinforms";
		public const string EntityPrimaryIdAttribute = "msdyncrm_linkedinformid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_linkedinform";
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform(Guid msdyncrm_linkedinformId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_linkedinformId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_linkedinform"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_linkedinform"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_linkedinform(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_linkedinform"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_linkedinform(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_linkedinform(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Indicates the person who created this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who created this for another person</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Indicates the person who modified this for another person.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the LinkedIn form</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Description); }
			set { Entity.Attributes[Fields.msdyncrm_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn form headline</para>
		/// <para><strong>Description</strong>: Headline displayed to leads on LinkedIn</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Headline
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Headline); }
			set { Entity.Attributes[Fields.msdyncrm_Headline] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Landing page URL</para>
		/// <para><strong>Description</strong>: Landing page URL used on the LinkedIn form</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LandingpageURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LandingpageURL); }
			set { Entity.Attributes[Fields.msdyncrm_LandingpageURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Sync Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_lastsyncdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_lastsyncdate); }
			set { Entity.Attributes[Fields.msdyncrm_lastsyncdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Lead Gen</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_linkedinformId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_linkedinformId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the LinkedIn form</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LinkedInID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LinkedInID); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LinkedIn Account</para>
		/// <para><strong>Description</strong>: LinkedIn account record to which this form belongs to</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyncrm_linkedinaccount"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_LinkedInParentAccount
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_LinkedInParentAccount); }
			set { Entity.Attributes[Fields.msdyncrm_LinkedInParentAccount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Locale country</para>
		/// <para><strong>Description</strong>: Locale country information for the LinkedIn form</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LocaleCountry
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LocaleCountry); }
			set { Entity.Attributes[Fields.msdyncrm_LocaleCountry] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Locale language</para>
		/// <para><strong>Description</strong>: Locale language information for the LinkedIn form</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_LocaleLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_LocaleLanguage); }
			set { Entity.Attributes[Fields.msdyncrm_LocaleLanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: LinkedIn form name</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Privacy policy URL</para>
		/// <para><strong>Description</strong>: Privacy policy URL displayed on the LinkedIn form</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_PrivacyPolicyURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_PrivacyPolicyURL); }
			set { Entity.Attributes[Fields.msdyncrm_PrivacyPolicyURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.msdyncrm_syncstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.msdyncrm_syncstatus.Pending_Synchronization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.msdyncrm_syncstatus? msdyncrm_syncstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_syncstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.msdyncrm_syncstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_syncstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_syncstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you message</para>
		/// <para><strong>Description</strong>: Thank you message to leads who submit a form on LinkedIn</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_Thankyoumessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_Thankyoumessage); }
			set { Entity.Attributes[Fields.msdyncrm_Thankyoumessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total submissions</para>
		/// <para><strong>Description</strong>: Total number of submissions received on this form</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_totalsubmissions
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_totalsubmissions); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total submissions (Last Updated On)</para>
		/// <para><strong>Description</strong>: Last Updated time of rollup field Total submissions.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_totalsubmissions_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_totalsubmissions_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total submissions (State)</para>
		/// <para><strong>Description</strong>: State of rollup field Total submissions.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_totalsubmissions_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_totalsubmissions_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Indicates the business unit that owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Indicates which team owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Indicates the person who owns this</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the LinkedIn Form</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the LinkedIn Form</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_linkedinformOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}