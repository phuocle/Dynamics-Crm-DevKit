//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets
{
	public enum msdyn_recomputepriority
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: High</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		High = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Normal</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Normal = 0
	}
	public enum msdyn_recomputestatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Completed = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Failed = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		InProgress = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		New = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Queued</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Queued = 10
	}
	public enum msdyn_recurrencestate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_recurrence : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_forecastconfigurationid = "msdyn_forecastconfigurationid";
			public const string msdyn_forecastrecurrencename = "msdyn_forecastrecurrencename";
			public const string msdyn_lastcomputedon = "msdyn_lastcomputedon";
			public const string msdyn_recomputationstarttime = "msdyn_recomputationstarttime";
			public const string msdyn_recomputeexecutorid = "msdyn_recomputeexecutorid";
			public const string msdyn_recomputepriority = "msdyn_recomputepriority";
			public const string msdyn_recomputestatus = "msdyn_recomputestatus";
			public const string msdyn_recomputestatuschangedon = "msdyn_recomputestatuschangedon";
			public const string msdyn_recurrencefailureinfo = "msdyn_recurrencefailureinfo";
			public const string msdyn_recurrenceId = "msdyn_recurrenceid";
			public const string msdyn_recurrenceindex = "msdyn_recurrenceindex";
			public const string msdyn_recurrencestate = "msdyn_recurrencestate";
			public const string msdyn_validfrom = "msdyn_validfrom";
			public const string msdyn_validto = "msdyn_validto";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartitionId = "partitionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_recurrence";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10533;
		public const string EntityCollectionSchemaName = "msdyn_recurrences";
		public const string EntityDisplayCollectionName = "Forecast Recurrences";
		public const string DisplayName = "Forecast Recurrence";
		public const string EntitySetName = "msdyn_recurrences";
		public const string EntityLogicalCollectionName = "msdyn_recurrences";
		public const string EntityPrimaryIdAttribute = "msdyn_recurrenceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_forecastrecurrencename";
		public const string EntitySchemaName = "msdyn_recurrence";
		[DebuggerNonUserCode()]
		public msdyn_recurrence()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_recurrence(Guid msdyn_recurrenceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_recurrenceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_recurrence(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_recurrence"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_recurrence(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_recurrence"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_recurrence(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_recurrence(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_recurrence"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_recurrence(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_recurrence(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_recurrence(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_forecastconfigurationid</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_forecastconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_forecastconfigurationid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_forecastconfigurationid); }
			set { Entity.Attributes[Fields.msdyn_forecastconfigurationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Name</para>
		/// <para><strong>Description</strong>: Recurrence Name</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_forecastrecurrencename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_forecastrecurrencename); }
			set { Entity.Attributes[Fields.msdyn_forecastrecurrencename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last computed on</para>
		/// <para><strong>Description</strong>: Date and time on which last compute was run</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastcomputedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastcomputedon); }
			set { Entity.Attributes[Fields.msdyn_lastcomputedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recomputation Start Time</para>
		/// <para><strong>Description</strong>: Date and time on which recompute started</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_recomputationstarttimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_recomputationstarttime); }
			set { Entity.Attributes[Fields.msdyn_recomputationstarttime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Executor Id</para>
		/// <para><strong>Description</strong>: Recurrence Executor Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 36</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recomputeexecutorid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recomputeexecutorid); }
			set { Entity.Attributes[Fields.msdyn_recomputeexecutorid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recompute Priority</para>
		/// <para><strong>Description</strong>: Recompute Priority</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputepriority"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputepriority.Normal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputepriority? msdyn_recomputepriority
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_recomputepriority);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputepriority)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_recomputepriority] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_recomputepriority] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recompute Status</para>
		/// <para><strong>Description</strong>: Recompute Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputestatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputestatus.New"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputestatus? msdyn_recomputestatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_recomputestatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recomputestatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_recomputestatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_recomputestatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recompute status changed on</para>
		/// <para><strong>Description</strong>: Date and time on which recompute status was changed</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_recomputestatuschangedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_recomputestatuschangedon); }
			set { Entity.Attributes[Fields.msdyn_recomputestatuschangedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Failure Info</para>
		/// <para><strong>Description</strong>: Recurrence Failure Info</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recurrencefailureinfo
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recurrencefailureinfo); }
			set { Entity.Attributes[Fields.msdyn_recurrencefailureinfo] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast Recurrence</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_recurrenceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_recurrenceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence Index</para>
		/// <para><strong>Description</strong>: Recurrence Index</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_recurrenceindex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_recurrenceindex); }
			set { Entity.Attributes[Fields.msdyn_recurrenceindex] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast Recurrence State</para>
		/// <para><strong>Description</strong>: Forecast Recurrence State</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recurrencestate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recurrencestate.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recurrencestate? msdyn_recurrencestate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_recurrencestate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_recurrenceOptionSets.msdyn_recurrencestate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_recurrencestate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_recurrencestate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid From</para>
		/// <para><strong>Description</strong>: Date from which recurrence is valid</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_validfromUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_validfrom); }
			set { Entity.Attributes[Fields.msdyn_validfrom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid To</para>
		/// <para><strong>Description</strong>: Date till which recurrence is valid</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_validtoUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_validto); }
			set { Entity.Attributes[Fields.msdyn_validto] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}