//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets
{
	public enum msdynmkt_source
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Insights - Data</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Customer_Insights_Data = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Insights - Journeys</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Customer_Insights_Journeys = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamics 365 Marketing (outbound)</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dynamics_365_Marketing_outbound = 1
	}
	public enum msdynmkt_statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum msdynmkt_statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed with warnings</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Completed_with_warnings = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivated</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deactivated = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Getting ready</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Getting_ready = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready to use</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Ready_to_use = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Stopped = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Stopping = 5
	}
	public enum msdynmkt_type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Compound</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Compound = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamic</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Dynamic = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expansion</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Expansion = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Static</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Static = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unknown = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_virtualsegment : EntityBase
	{
		public struct Fields
		{
			public const string msdynmkt_baseentity = "msdynmkt_baseentity";
			public const string msdynmkt_createdby = "msdynmkt_createdby";
			public const string msdynmkt_createddate = "msdynmkt_createddate";
			public const string msdynmkt_description = "msdynmkt_description";
			public const string msdynmkt_lastupdated = "msdynmkt_lastupdated";
			public const string msdynmkt_lastused = "msdynmkt_lastused";
			public const string msdynmkt_lastusedby = "msdynmkt_lastusedby";
			public const string msdynmkt_membercount = "msdynmkt_membercount";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_owningbusinessunit = "msdynmkt_owningbusinessunit";
			public const string msdynmkt_publishedjourneycount = "msdynmkt_publishedjourneycount";
			public const string msdynmkt_requiresexport = "msdynmkt_requiresexport";
			public const string msdynmkt_segmentdetails = "msdynmkt_segmentdetails";
			public const string msdynmkt_source = "msdynmkt_source";
			public const string msdynmkt_sourceentity = "msdynmkt_sourceentity";
			public const string msdynmkt_sourceentityid = "msdynmkt_sourceentityid";
			public const string msdynmkt_sourceuri = "msdynmkt_sourceuri";
			public const string msdynmkt_statecode = "msdynmkt_statecode";
			public const string msdynmkt_statuscode = "msdynmkt_statuscode";
			public const string msdynmkt_type = "msdynmkt_type";
			public const string msdynmkt_virtualsegmentId = "msdynmkt_virtualsegmentid";
		}
		public const string EntityLogicalName = "msdynmkt_virtualsegment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11298;
		public const string EntityCollectionSchemaName = "msdynmkt_virtualsegments";
		public const string EntityDisplayCollectionName = "Segments";
		public const string DisplayName = "Segment";
		public const string EntitySetName = "msdynmkt_virtualsegments";
		public const string EntityLogicalCollectionName = "msdynmkt_virtualsegments";
		public const string EntityPrimaryIdAttribute = "msdynmkt_virtualsegmentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_virtualsegment";
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment(Guid msdynmkt_virtualsegmentId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_virtualsegmentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_virtualsegment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_virtualsegment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_virtualsegment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_virtualsegment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_virtualsegment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_virtualsegment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base entity</para>
		/// <para><strong>Description</strong>: The entity supported by this segment.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_baseentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_baseentity); }
			set { Entity.Attributes[Fields.msdynmkt_baseentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: The who created the segment.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_createdby
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_createdby); }
			set { Entity.Attributes[Fields.msdynmkt_createdby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created date</para>
		/// <para><strong>Description</strong>: The date the segment was created</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_createddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_createddate); }
			set { Entity.Attributes[Fields.msdynmkt_createddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: The description of the segment.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_description); }
			set { Entity.Attributes[Fields.msdynmkt_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last update</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_lastupdatedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_lastupdated); }
			set { Entity.Attributes[Fields.msdynmkt_lastupdated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last used in journey</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_lastusedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_lastused); }
			set { Entity.Attributes[Fields.msdynmkt_lastused] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last used by</para>
		/// <para><strong>Description</strong>: The name the user who last associated a journey with this segment.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_lastusedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_lastusedby); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Members</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_membercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_membercount); }
			set { Entity.Attributes[Fields.msdynmkt_membercount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the segment.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business unit</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_owningbusinessunit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_owningbusinessunit); }
			set { Entity.Attributes[Fields.msdynmkt_owningbusinessunit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Live journeys</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_publishedjourneycount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_publishedjourneycount); }
			set { Entity.Attributes[Fields.msdynmkt_publishedjourneycount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requires export</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_requiresexport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_requiresexport); }
			set { Entity.Attributes[Fields.msdynmkt_requiresexport] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment details</para>
		/// <para><strong>Description</strong>: The segment details for use in the segment lookup.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_segmentdetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_segmentdetails); }
			set { Entity.Attributes[Fields.msdynmkt_segmentdetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source</para>
		/// <para><strong>Description</strong>: The source of the segment.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_source"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_source.Customer_Insights_Data"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_source? msdynmkt_source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_source] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source entity</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sourceentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sourceentity); }
			set { Entity.Attributes[Fields.msdynmkt_sourceentity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source entity id</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sourceentityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sourceentityid); }
			set { Entity.Attributes[Fields.msdynmkt_sourceentityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Uri</para>
		/// <para><strong>Description</strong>: The source uri of the segment.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sourceuri
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sourceuri); }
			set { Entity.Attributes[Fields.msdynmkt_sourceuri] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Virtual Segment</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_statecode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_statecode? msdynmkt_statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Virtual Segment</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_statuscode? msdynmkt_statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: The type of the segment.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_type.Unknown"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_type? msdynmkt_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_virtualsegmentOptionSets.msdynmkt_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_virtualsegmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_virtualsegmentId] = value;
				Entity.Id = value;
			}
		}
	}
}