//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets
{
	public enum msdyn_channel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages for Business</para>
		/// <para><strong>Value</strong>: 192,450,000</para>
		/// </summary>
		Apple_Messages_for_Business = 192_450_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Co-browse</para>
		/// <para><strong>Value</strong>: 192,390,000</para>
		/// </summary>
		Co_browse = 192_390_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Custom = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Records</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Entity_Records = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 192,330,000</para>
		/// </summary>
		Facebook = 192_330_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google's Business Messages</para>
		/// <para><strong>Value</strong>: 192,450,001</para>
		/// </summary>
		Googles_Business_Messages = 192_450_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: LINE</para>
		/// <para><strong>Value</strong>: 192,310,000</para>
		/// </summary>
		LINE = 192_310_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live chat</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Live_chat = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 19,241,000</para>
		/// </summary>
		Microsoft_Teams = 19_241_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen sharing</para>
		/// <para><strong>Value</strong>: 192,400,000</para>
		/// </summary>
		Screen_sharing = 192_400_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: SMS</para>
		/// <para><strong>Value</strong>: 192,340,000</para>
		/// </summary>
		SMS = 192_340_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Twitter = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Video</para>
		/// <para><strong>Value</strong>: 192,380,000</para>
		/// </summary>
		Video = 192_380_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 192,370,000</para>
		/// </summary>
		Voice = 192_370_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice call</para>
		/// <para><strong>Value</strong>: 192,440,000</para>
		/// </summary>
		Voice_call = 192_440_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WeChat</para>
		/// <para><strong>Value</strong>: 192,320,000</para>
		/// </summary>
		WeChat = 192_320_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WhatsApp</para>
		/// <para><strong>Value</strong>: 192,300,000</para>
		/// </summary>
		WhatsApp = 192_300_000
	}
	public enum msdyn_ocscope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Global</para>
		/// <para><strong>Value</strong>: 837,500,000</para>
		/// </summary>
		Global = 837_500_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Workstream</para>
		/// <para><strong>Value</strong>: 837,500,001</para>
		/// </summary>
		Workstream = 837_500_001
	}
	public enum msdyn_type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Create conversation on send</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Create_conversation_on_send = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Create conversation when customer responds </para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Create_conversation_when_customer_responds = 100_000_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocoutboundconfiguration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_channel = "msdyn_channel";
			public const string msdyn_channeldisplayname = "msdyn_channeldisplayname";
			public const string msdyn_channelid = "msdyn_channelid";
			public const string msdyn_defaultlocale = "msdyn_defaultlocale";
			public const string msdyn_displayoutboundconfigurationid = "msdyn_displayoutboundconfigurationid";
			public const string msdyn_enablemessagelogging = "msdyn_enablemessagelogging";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_messagetemplate = "msdyn_messagetemplate";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocoutboundconfigurationId = "msdyn_ocoutboundconfigurationid";
			public const string msdyn_ocscope = "msdyn_ocscope";
			public const string msdyn_secondarychanneldisplayname = "msdyn_secondarychanneldisplayname";
			public const string msdyn_secondarychannelid = "msdyn_secondarychannelid";
			public const string msdyn_showinactivities = "msdyn_showinactivities";
			public const string msdyn_type = "msdyn_type";
			public const string msdyn_usecustomerpreference = "msdyn_usecustomerpreference";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_ocoutboundconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11062;
		public const string EntityCollectionSchemaName = "msdyn_ocoutboundconfigurations";
		public const string EntityDisplayCollectionName = "Outbound Configurations";
		public const string DisplayName = "Outbound Configuration";
		public const string EntitySetName = "msdyn_ocoutboundconfigurationes";
		public const string EntityLogicalCollectionName = "msdyn_ocoutboundconfigurations";
		public const string EntityPrimaryIdAttribute = "msdyn_ocoutboundconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_ocoutboundconfiguration";
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Guid msdyn_ocoutboundconfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocoutboundconfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocoutboundconfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocoutboundconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocoutboundconfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocoutboundconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocoutboundconfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocoutboundconfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel type</para>
		/// <para><strong>Description</strong>: Channel type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_channel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_channel? msdyn_channel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_channel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_channel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_channel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_channel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Name</para>
		/// <para><strong>Description</strong>: User-friendly description of the selected channel.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channeldisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channeldisplayname); }
			set { Entity.Attributes[Fields.msdyn_channeldisplayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel</para>
		/// <para><strong>Description</strong>: Unique Identifier for Channel associated with the channel selected</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_channelid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_channelid); }
			set { Entity.Attributes[Fields.msdyn_channelid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Deprecated - Language</para>
		/// <para><strong>Description</strong>: Deprecated - This language will be used if there’s no customer preferred language or message template in customer&apos;s language.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_oclanguage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_defaultlocale
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_defaultlocale); }
			set { Entity.Attributes[Fields.msdyn_defaultlocale] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Configuration ID</para>
		/// <para><strong>Description</strong>: Configuration ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_displayoutboundconfigurationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_displayoutboundconfigurationid); }
			set { Entity.Attributes[Fields.msdyn_displayoutboundconfigurationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Message Logging</para>
		/// <para><strong>Description</strong>: Enable Message Logging</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablemessagelogging
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablemessagelogging); }
			set { Entity.Attributes[Fields.msdyn_enablemessagelogging] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Stream (Deprecated)</para>
		/// <para><strong>Description</strong>: Unique identifier for Work Stream associated with Outbound Configuration</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_liveworkstream"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message template</para>
		/// <para><strong>Description</strong>: Message template</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_ocsystemmessage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_messagetemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_messagetemplate); }
			set { Entity.Attributes[Fields.msdyn_messagetemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound Configuration</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ocoutboundconfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ocoutboundconfigurationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scope (Deprecated)</para>
		/// <para><strong>Description</strong>: Scope of the outbound configuration</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_ocscope"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_ocscope.Global"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_ocscope? msdyn_ocscope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ocscope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_ocscope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ocscope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ocscope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Secondary Channel Display Name</para>
		/// <para><strong>Description</strong>: User-friendly description of the selected secondary channel.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secondarychanneldisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secondarychanneldisplayname); }
			set { Entity.Attributes[Fields.msdyn_secondarychanneldisplayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Secondary Channel ID</para>
		/// <para><strong>Description</strong>: Secondary identifier associated with the channel selected.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secondarychannelid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secondarychannelid); }
			set { Entity.Attributes[Fields.msdyn_secondarychannelid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show in timeline</para>
		/// <para><strong>Description</strong>: If this is turned on, outbound activity record will be created in CRM.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_showinactivities
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_showinactivities); }
			set { Entity.Attributes[Fields.msdyn_showinactivities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation record</para>
		/// <para><strong>Description</strong>: Conversation record</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_type.Create_conversation_when_customer_responds"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_type? msdyn_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.msdyn_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use Customer Preferred channel</para>
		/// <para><strong>Description</strong>: Use Customer Preferred channel</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_usecustomerpreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_usecustomerpreference); }
			set { Entity.Attributes[Fields.msdyn_usecustomerpreference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Outbound Configuration</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Outbound Configuration</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocoutboundconfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}