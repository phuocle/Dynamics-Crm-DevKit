//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets
{
	public enum msdyncrm_domainalignmentvalidationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: canceled </para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Confirmed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirming DNS registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Confirming_DNS_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal error</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Internal_error = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keys not found on DNS</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Keys_not_found_on_DNS = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not requested</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_requested = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record not found</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Record_not_found = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting to confirm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Waiting_to_confirm = 0
	}
	public enum msdyncrm_emailkeysvalidationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: canceled </para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Confirmed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirming DNS registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Confirming_DNS_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal error</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Internal_error = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keys not found on DNS</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Keys_not_found_on_DNS = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not requested</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_requested = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record not found</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Record_not_found = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting to confirm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Waiting_to_confirm = 0
	}
	public enum msdyncrm_ownershipvalidationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: canceled </para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Confirmed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirming DNS registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Confirming_DNS_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal error</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Internal_error = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keys not found on DNS</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Keys_not_found_on_DNS = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not requested</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_requested = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record not found</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Record_not_found = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting to confirm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Waiting_to_confirm = 0
	}
	public enum msdynmkt_emaildnsrecord1status
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: canceled </para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Confirmed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirming DNS registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Confirming_DNS_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal error</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Internal_error = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keys not found on DNS</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Keys_not_found_on_DNS = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not requested</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_requested = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record not found</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Record_not_found = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting to confirm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Waiting_to_confirm = 0
	}
	public enum msdynmkt_emaildnsrecord2status
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: canceled </para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		canceled = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Confirmed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirming DNS registration</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Confirming_DNS_registration = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal error</para>
		/// <para><strong>Value</strong>: 32</para>
		/// </summary>
		Internal_error = 32,
		/// <summary>
		/// <para><strong>Display Name</strong>: Keys not found on DNS</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		Keys_not_found_on_DNS = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not requested</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Not_requested = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record not found</para>
		/// <para><strong>Value</strong>: 31</para>
		/// </summary>
		Record_not_found = 31,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting to confirm</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Waiting_to_confirm = 0
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_setupdomain : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_alignedname = "msdyncrm_alignedname";
			public const string msdyncrm_domainalignmentrequired = "msdyncrm_domainalignmentrequired";
			public const string msdyncrm_domainalignmentvalidationstatus = "msdyncrm_domainalignmentvalidationstatus";
			public const string msdyncrm_domalignrechost = "msdyncrm_domalignrechost";
			public const string msdyncrm_domalignrectype = "msdyncrm_domalignrectype";
			public const string msdyncrm_domalignrecvalue = "msdyncrm_domalignrecvalue";
			public const string msdyncrm_emailhost1 = "msdyncrm_emailhost1";
			public const string msdyncrm_emailhost2 = "msdyncrm_emailhost2";
			public const string msdyncrm_emailkey1 = "msdyncrm_emailkey1";
			public const string msdyncrm_emailkey2 = "msdyncrm_emailkey2";
			public const string msdyncrm_emailkeysvalidationstatus = "msdyncrm_emailkeysvalidationstatus";
			public const string msdyncrm_emailtyperecord1 = "msdyncrm_emailtyperecord1";
			public const string msdyncrm_emailtyperecord2 = "msdyncrm_emailtyperecord2";
			public const string msdyncrm_generatedomainalignmentkeys = "msdyncrm_generatedomainalignmentkeys";
			public const string msdyncrm_generateemailkeys = "msdyncrm_generateemailkeys";
			public const string msdyncrm_generateformkeys = "msdyncrm_generateformkeys";
			public const string msdyncrm_instructions = "msdyncrm_instructions";
			public const string msdyncrm_ipinstructions = "msdyncrm_ipinstructions";
			public const string msdyncrm_ipslist = "msdyncrm_ipslist";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_obmprefillenabled = "msdyncrm_obmprefillenabled";
			public const string msdyncrm_ownershipvalidationstatus = "msdyncrm_ownershipvalidationstatus";
			public const string msdyncrm_rtmprefillenabled = "msdyncrm_rtmprefillenabled";
			public const string msdyncrm_setupdomainId = "msdyncrm_setupdomainid";
			public const string msdyncrm_txthostinstructions = "msdyncrm_txthostinstructions";
			public const string msdyncrm_txtkey = "msdyncrm_txtkey";
			public const string msdyncrm_txttyperecord = "msdyncrm_txttyperecord";
			public const string msdyncrm_validationdate = "msdyncrm_validationdate";
			public const string msdynmkt_emaildnsrecord1status = "msdynmkt_emaildnsrecord1status";
			public const string msdynmkt_emaildnsrecord2status = "msdynmkt_emaildnsrecord2status";
			public const string msdynmkt_StepWizardProgress = "msdynmkt_stepwizardprogress";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_setupdomain";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11181;
		public const string EntityCollectionSchemaName = "msdyncrm_setupdomains";
		public const string EntityDisplayCollectionName = "Domains";
		public const string DisplayName = "Domain";
		public const string EntitySetName = "msdyncrm_setupdomains";
		public const string EntityLogicalCollectionName = "msdyncrm_setupdomains";
		public const string EntityPrimaryIdAttribute = "msdyncrm_setupdomainid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_setupdomain";
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain(Guid msdyncrm_setupdomainId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_setupdomainId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_setupdomain"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_setupdomain"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_setupdomain(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_setupdomain"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_setupdomain(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_setupdomain(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Envelope-from domain name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_alignedname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_alignedname); }
			set { Entity.Attributes[Fields.msdyncrm_alignedname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Envelope-from domain required</para>
		/// <para><strong>Description</strong>: Envelope-from domain required flag</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_domainalignmentrequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_domainalignmentrequired); }
			set { Entity.Attributes[Fields.msdyncrm_domainalignmentrequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Envelope-from status</para>
		/// <para><strong>Description</strong>: Envelope-from domain validation status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_domainalignmentvalidationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_domainalignmentvalidationstatus? msdyncrm_domainalignmentvalidationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_domainalignmentvalidationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_domainalignmentvalidationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_domainalignmentvalidationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_domainalignmentvalidationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Host</para>
		/// <para><strong>Description</strong>: Instructions for CNAME Host field</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_domalignrechost
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_domalignrechost); }
			set { Entity.Attributes[Fields.msdyncrm_domalignrechost] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record type</para>
		/// <para><strong>Description</strong>: the dns record type for Envelope-from domain</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_domalignrectype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_domalignrectype); }
			set { Entity.Attributes[Fields.msdyncrm_domalignrectype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Value</para>
		/// <para><strong>Description</strong>: the value of the dns record for Envelope-from domain</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_domalignrecvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_domalignrecvalue); }
			set { Entity.Attributes[Fields.msdyncrm_domalignrecvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Host</para>
		/// <para><strong>Description</strong>: The email DNS record 1 host</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailhost1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailhost1); }
			set { Entity.Attributes[Fields.msdyncrm_emailhost1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Host</para>
		/// <para><strong>Description</strong>: The email DNS record 2 host</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailhost2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailhost2); }
			set { Entity.Attributes[Fields.msdyncrm_emailhost2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Value</para>
		/// <para><strong>Description</strong>: Value of email key 1</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailkey1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailkey1); }
			set { Entity.Attributes[Fields.msdyncrm_emailkey1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Value</para>
		/// <para><strong>Description</strong>: Value of email key 1</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailkey2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailkey2); }
			set { Entity.Attributes[Fields.msdyncrm_emailkey2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email status</para>
		/// <para><strong>Description</strong>: Email keys validation status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_emailkeysvalidationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_emailkeysvalidationstatus? msdyncrm_emailkeysvalidationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_emailkeysvalidationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_emailkeysvalidationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_emailkeysvalidationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_emailkeysvalidationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record type</para>
		/// <para><strong>Description</strong>: The email DNS record 1 type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailtyperecord1
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailtyperecord1); }
			set { Entity.Attributes[Fields.msdyncrm_emailtyperecord1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record type</para>
		/// <para><strong>Description</strong>: The email DNS record 2 type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_emailtyperecord2
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_emailtyperecord2); }
			set { Entity.Attributes[Fields.msdyncrm_emailtyperecord2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable custom Envelope-from domain</para>
		/// <para><strong>Description</strong>: Enable custom Envelope-from domain - generate Envelope-from domain keys</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_generatedomainalignmentkeys
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_generatedomainalignmentkeys); }
			set { Entity.Attributes[Fields.msdyncrm_generatedomainalignmentkeys] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email sending enabled</para>
		/// <para><strong>Description</strong>: Enable for email sending (generate email keys)</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_generateemailkeys
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_generateemailkeys); }
			set { Entity.Attributes[Fields.msdyncrm_generateemailkeys] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form hosting enabled</para>
		/// <para><strong>Description</strong>: Enable for form hosting</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_generateformkeys
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_generateformkeys); }
			set { Entity.Attributes[Fields.msdyncrm_generateformkeys] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Instructions</para>
		/// <para><strong>Description</strong>: How-to for system admin</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_instructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_instructions); }
			set { Entity.Attributes[Fields.msdyncrm_instructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ip whitelisting instructions</para>
		/// <para><strong>Description</strong>: How to for system admin</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_ipinstructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_ipinstructions); }
			set { Entity.Attributes[Fields.msdyncrm_ipinstructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: List of Ips that should be whitelisted.</para>
		/// <para><strong>Description</strong>: How to for system admin.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_ipslist
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_ipslist); }
			set { Entity.Attributes[Fields.msdyncrm_ipslist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prefill outbound marketing forms</para>
		/// <para><strong>Description</strong>: Prefill outbound marketing forms</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_obmprefillenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_obmprefillenabled); }
			set { Entity.Attributes[Fields.msdyncrm_obmprefillenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ownership status</para>
		/// <para><strong>Description</strong>: Ownership validation status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_ownershipvalidationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_ownershipvalidationstatus? msdyncrm_ownershipvalidationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_ownershipvalidationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdyncrm_ownershipvalidationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_ownershipvalidationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_ownershipvalidationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prefill marketing forms</para>
		/// <para><strong>Description</strong>: Prefill marketing forms</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_rtmprefillenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_rtmprefillenabled); }
			set { Entity.Attributes[Fields.msdyncrm_rtmprefillenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Setup domain</para>
		/// <para><strong>Description</strong>: Unique identifier for this entity</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_setupdomainId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_setupdomainId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Host</para>
		/// <para><strong>Description</strong>: Host</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_txthostinstructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_txthostinstructions); }
			set { Entity.Attributes[Fields.msdyncrm_txthostinstructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Value</para>
		/// <para><strong>Description</strong>: The key of the DNS record for domain ownership</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_txtkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_txtkey); }
			set { Entity.Attributes[Fields.msdyncrm_txtkey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record type</para>
		/// <para><strong>Description</strong>: The DNS record type for domain ownership</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_txttyperecord
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_txttyperecord); }
			set { Entity.Attributes[Fields.msdyncrm_txttyperecord] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed on</para>
		/// <para><strong>Description</strong>: The date when DNS registration was last confirmed</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_validationdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_validationdate); }
			set { Entity.Attributes[Fields.msdyncrm_validationdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: emaildnsrecord1status</para>
		/// <para><strong>Description</strong>: Email dns record 1 status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdynmkt_emaildnsrecord1status"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdynmkt_emaildnsrecord1status? msdynmkt_emaildnsrecord1status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_emaildnsrecord1status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdynmkt_emaildnsrecord1status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_emaildnsrecord1status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_emaildnsrecord1status] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: emaildnsrecord2status</para>
		/// <para><strong>Description</strong>: Email dns record 2 status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdynmkt_emaildnsrecord2status"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdynmkt_emaildnsrecord2status? msdynmkt_emaildnsrecord2status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_emaildnsrecord2status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.msdynmkt_emaildnsrecord2status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_emaildnsrecord2status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_emaildnsrecord2status] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Step Wizard Progress</para>
		/// <para><strong>Description</strong>: Internal field for tracking progress of entity configuration via wizard</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_StepWizardProgress
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_StepWizardProgress); }
			set { Entity.Attributes[Fields.msdynmkt_StepWizardProgress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization ID</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the domain</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the domain</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_setupdomainOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}