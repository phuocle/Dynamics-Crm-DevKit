//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ContractOptionSets
{
	public enum AllotmentTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Coverage Dates</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Coverage_Dates = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of Cases</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Number_of_Cases = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Time</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Time = 2
	}
	public enum BillingFrequencyCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Annually</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Annually = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bimonthly</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Bimonthly = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monthly</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Monthly = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quarterly</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Quarterly = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Semiannually</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Semiannually = 4
	}
	public enum ContractServiceLevelCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bronze</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bronze = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Gold</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Gold = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Silver</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Silver = 2
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Active = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Canceled = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Expired = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invoiced</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Invoiced = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		On_Hold = 3
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Canceled</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Canceled</strong></para>
		/// </summary>
		Canceled = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expired</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Expired</strong></para>
		/// </summary>
		Expired = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invoiced</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Invoiced</strong></para>
		/// </summary>
		Invoiced = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: On Hold</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.On_Hold</strong></para>
		/// </summary>
		On_Hold = 4
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Contract : EntityBase
	{
		public struct Fields
		{
			public const string AccountId = "accountid";
			public const string ActiveOn = "activeon";
			public const string AllotmentTypeCode = "allotmenttypecode";
			public const string BillingAccountId = "billingaccountid";
			public const string BillingContactId = "billingcontactid";
			public const string BillingCustomerId = "billingcustomerid";
			public const string BillingEndOn = "billingendon";
			public const string BillingFrequencyCode = "billingfrequencycode";
			public const string BillingStartOn = "billingstarton";
			public const string BillToAddress = "billtoaddress";
			public const string CancelOn = "cancelon";
			public const string ContactId = "contactid";
			public const string ContractId = "contractid";
			public const string ContractLanguage = "contractlanguage";
			public const string ContractNumber = "contractnumber";
			public const string ContractServiceLevelCode = "contractservicelevelcode";
			public const string ContractTemplateAbbreviation = "contracttemplateabbreviation";
			public const string ContractTemplateId = "contracttemplateid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomerId = "customerid";
			public const string Duration = "duration";
			public const string EffectivityCalendar = "effectivitycalendar";
			public const string EmailAddress = "emailaddress";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ExpiresOn = "expireson";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string NetPrice = "netprice";
			public const string NetPrice_Base = "netprice_base";
			public const string OriginatingContract = "originatingcontract";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ServiceAddress = "serviceaddress";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TotalDiscount = "totaldiscount";
			public const string TotalDiscount_Base = "totaldiscount_base";
			public const string TotalPrice = "totalprice";
			public const string TotalPrice_Base = "totalprice_base";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UseDiscountAsPercentage = "usediscountaspercentage";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "contract";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1010;
		public const string EntityCollectionSchemaName = "Contracts";
		public const string EntityDisplayCollectionName = "Contracts";
		public const string DisplayName = "Contract";
		public const string EntitySetName = "contracts";
		public const string EntityLogicalCollectionName = "contracts";
		public const string EntityPrimaryIdAttribute = "contractid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "Contract";
		[DebuggerNonUserCode()]
		public Contract()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contract(Guid ContractId)
		{
			Entity = new Entity(EntityLogicalName, ContractId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contract(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contract"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Contract(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contract"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Contract(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Contract(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Contract"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Contract(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Contract(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Contract(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Description</strong>: Unique identifier of the account with which the contract is associated.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract Start Date</para>
		/// <para><strong>Description</strong>: Enter the date when the contract becomes active.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActiveOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActiveOn); }
			set { Entity.Attributes[Fields.ActiveOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allotment Type</para>
		/// <para><strong>Description</strong>: Type of allotment that the contract supports.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.AllotmentTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.AllotmentTypeCode? AllotmentTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AllotmentTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.AllotmentTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AllotmentTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AllotmentTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing Account</para>
		/// <para><strong>Description</strong>: Unique identifier of the account to which the contract is to be billed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="account"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillingAccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillingAccountId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing Contact</para>
		/// <para><strong>Description</strong>: Unique identifier of the contact to whom the contract is to be billed.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillingContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillingContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Customer</para>
		/// <para><strong>Description</strong>: Select the customer account or contact to which the contract should be billed to provide a quick link to address and other customer details.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillingCustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillingCustomerId); }
			set { Entity.Attributes[Fields.BillingCustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing End Date</para>
		/// <para><strong>Description</strong>: Enter the end date for the contract&apos;s billing period to indicate the period for which the customer must pay for a service.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? BillingEndOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.BillingEndOn); }
			set { Entity.Attributes[Fields.BillingEndOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing Frequency</para>
		/// <para><strong>Description</strong>: Select the billing schedule of the contract to indicate how often the customer should be invoiced.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.BillingFrequencyCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.BillingFrequencyCode.Monthly"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.BillingFrequencyCode? BillingFrequencyCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BillingFrequencyCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.BillingFrequencyCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BillingFrequencyCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BillingFrequencyCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Billing Start Date</para>
		/// <para><strong>Description</strong>: Enter the start date for the contract&apos;s billing period to indicate the period for which the customer must pay for a service. This defaults to the same date that is selected in the Contract Start Date field.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? BillingStartOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.BillingStartOn); }
			set { Entity.Attributes[Fields.BillingStartOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Address</para>
		/// <para><strong>Description</strong>: Choose which address to send the invoice to.</para>
		/// <para><strong>Lookup</strong>: <see cref="customeraddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BillToAddress
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BillToAddress); }
			set { Entity.Attributes[Fields.BillToAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancellation Date</para>
		/// <para><strong>Description</strong>: Shows the date and time when the contract was canceled.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CancelOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CancelOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Description</strong>: Unique identifier of the contact specified for the contract.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContactId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContactId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract</para>
		/// <para><strong>Description</strong>: Unique identifier of the contract.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ContractId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ContractId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information about the contract, such as the products or services provided to the customer.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractLanguage); }
			set { Entity.Attributes[Fields.ContractLanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract ID</para>
		/// <para><strong>Description</strong>: Shows the number for the contract for customer reference and searching capabilities. You cannot modify this number.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractNumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractNumber); }
			set { Entity.Attributes[Fields.ContractNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Level</para>
		/// <para><strong>Description</strong>: Select the level of service that should be provided for the contract based on your company&apos;s definition of bronze, silver, or gold.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.ContractServiceLevelCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.ContractServiceLevelCode.Gold"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.ContractServiceLevelCode? ContractServiceLevelCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ContractServiceLevelCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.ContractServiceLevelCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ContractServiceLevelCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ContractServiceLevelCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Template Abbreviation</para>
		/// <para><strong>Description</strong>: Shows the abbreviation of the contract template selected when the contract is created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ContractTemplateAbbreviation
		{
			get { return Entity.GetAttributeValue<string>(Fields.ContractTemplateAbbreviation); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract Template</para>
		/// <para><strong>Description</strong>: Choose the contract template that should be used to determine the terms of the contract, such as allotment type, available hours, and billing frequency.</para>
		/// <para><strong>Lookup</strong>: <see cref="contracttemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ContractTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ContractTemplateId); }
			set { Entity.Attributes[Fields.ContractTemplateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Description</strong>: Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CustomerId); }
			set { Entity.Attributes[Fields.CustomerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Shows for the duration of the contract, in days, based on the contract start and end dates.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Duration); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Support Calendar</para>
		/// <para><strong>Description</strong>: Days of the week and times during which customer service support is available for the duration of the contract.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 168</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EffectivityCalendar
		{
			get { return Entity.GetAttributeValue<string>(Fields.EffectivityCalendar); }
			set { Entity.Attributes[Fields.EffectivityCalendar] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address</para>
		/// <para><strong>Description</strong>: The primary email address for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract End Date</para>
		/// <para><strong>Description</strong>: Enter the date when the contract expires.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpiresOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpiresOn); }
			set { Entity.Attributes[Fields.ExpiresOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Net Price</para>
		/// <para><strong>Description</strong>: Shows the total charge to the customer for the service contract, calculated as the sum of values in the Net field for each existing contract line related to the contract.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? NetPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.NetPrice);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Net Price (Base)</para>
		/// <para><strong>Description</strong>: Value of the Net Price in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? NetPrice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.NetPrice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Originating Contract</para>
		/// <para><strong>Description</strong>: Choose the original contract that this contract was created from. This information is used to track renewal history.</para>
		/// <para><strong>Lookup</strong>: <see cref="contract"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingContract
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingContract); }
			set { Entity.Attributes[Fields.OriginatingContract] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract Address</para>
		/// <para><strong>Description</strong>: Choose the address for the customer account or contact where the services are provided.</para>
		/// <para><strong>Lookup</strong>: <see cref="customeraddress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ServiceAddress
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ServiceAddress); }
			set { Entity.Attributes[Fields.ServiceAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the contract is in draft, invoiced, active, on hold, canceled, or expired. You can edit only the contracts that are in draft status.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.StateCode.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the contract&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ContractOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ContractOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ContractOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract Name</para>
		/// <para><strong>Description</strong>: Type a title or name for the contract that indicates the purpose of the contract.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Discount</para>
		/// <para><strong>Description</strong>: Shows the total discount applied to the contract&apos;s service charges, calculated as the sum of values in the Discount fields for each existing contract line related to the contract.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscount);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Discount (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Discount in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalDiscount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalDiscount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Price</para>
		/// <para><strong>Description</strong>: Shows the total service charge for the contract, before any discounts are credited. This is calculated as the sum of values in the Total Price field for each existing contract line related to the contract.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalPrice
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalPrice);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total Price (Base)</para>
		/// <para><strong>Description</strong>: Value of the Total Price in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TotalPrice_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TotalPrice_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Discount</para>
		/// <para><strong>Description</strong>: Select whether the discounts entered on contract lines for this contract should be entered as a percentage or a fixed dollar value.</para>
		/// <para><strong>Two Option</strong> - [<strong>Percentage</strong>]: true - [<strong>Amount</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Amount</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UseDiscountAsPercentage
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UseDiscountAsPercentage); }
			set { Entity.Attributes[Fields.UseDiscountAsPercentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}