//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_smsphonenumberOptionSets
{
	public enum msdynmkt_status
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Active = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Pending = 192_350_000
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_smsphonenumber : EntityBase
	{
		public struct Fields
		{
			public const string msdynmkt_number = "msdynmkt_number";
			public const string msdynmkt_smsphonenumberId = "msdynmkt_smsphonenumberid";
			public const string msdynmkt_status = "msdynmkt_status";
			public const string msdynmkt_type = "msdynmkt_type";
		}
		public const string EntityLogicalName = "msdynmkt_smsphonenumber";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11306;
		public const string EntityCollectionSchemaName = "msdynmkt_smsphonenumbers";
		public const string EntityDisplayCollectionName = "Text message senders";
		public const string DisplayName = "Text message sender";
		public const string EntitySetName = "msdynmkt_smsphonenumbers";
		public const string EntityLogicalCollectionName = "msdynmkt_smsphonenumbers";
		public const string EntityPrimaryIdAttribute = "msdynmkt_smsphonenumberid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_number";
		public const string EntitySchemaName = "msdynmkt_smsphonenumber";
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber(Guid msdynmkt_smsphonenumberId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_smsphonenumberId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_smsphonenumber"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_smsphonenumber"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_smsphonenumber(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_smsphonenumber"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_smsphonenumber(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_smsphonenumber(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_number
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_number); }
			set { Entity.Attributes[Fields.msdynmkt_number] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text message sender ID</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_smsphonenumberId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_smsphonenumberId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_smsphonenumberOptionSets.msdynmkt_status"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_smsphonenumberOptionSets.msdynmkt_status.Pending"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_smsphonenumberOptionSets.msdynmkt_status? msdynmkt_status
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_status);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_smsphonenumberOptionSets.msdynmkt_status)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_status] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_status] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: The type of the custom entity.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_type
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_type); }
			set { Entity.Attributes[Fields.msdynmkt_type] = value; }
		}
	}
}