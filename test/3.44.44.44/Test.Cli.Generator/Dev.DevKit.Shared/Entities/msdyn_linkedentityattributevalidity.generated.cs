//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets
{
	public enum msdyn_attributetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Email = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Phone = 1
	}
	public enum msdyn_datavalidity
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Invalid = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Unknown = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Valid = 1
	}
	public enum msdyn_errorcode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Malformed</para>
		/// <para><strong>Value</strong>: 380</para>
		/// </summary>
		Address_Malformed = 380,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain exists</para>
		/// <para><strong>Value</strong>: 210</para>
		/// </summary>
		Domain_exists = 210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Exists But Disposable</para>
		/// <para><strong>Value</strong>: 360</para>
		/// </summary>
		Domain_Exists_But_Disposable = 360,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Exists But Expired Recently</para>
		/// <para><strong>Value</strong>: 250</para>
		/// </summary>
		Domain_Exists_But_Expired_Recently = 250,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Exists But Expires Soon</para>
		/// <para><strong>Value</strong>: 220</para>
		/// </summary>
		Domain_Exists_But_Expires_Soon = 220,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Exists But Spam</para>
		/// <para><strong>Value</strong>: 400</para>
		/// </summary>
		Domain_Exists_But_Spam = 400,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Expired</para>
		/// <para><strong>Value</strong>: 320</para>
		/// </summary>
		Domain_Expired = 320,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Invalid</para>
		/// <para><strong>Value</strong>: 340</para>
		/// </summary>
		Domain_Invalid = 340,
		/// <summary>
		/// <para><strong>Display Name</strong>: Domain Unknown</para>
		/// <para><strong>Value</strong>: 350</para>
		/// </summary>
		Domain_Unknown = 350,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Does Not Exist</para>
		/// <para><strong>Value</strong>: 390</para>
		/// </summary>
		Email_Does_Not_Exist = 390,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Exists</para>
		/// <para><strong>Value</strong>: 200</para>
		/// </summary>
		Email_Exists = 200,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Exists But Hub</para>
		/// <para><strong>Value</strong>: 370</para>
		/// </summary>
		Email_Exists_But_Hub = 370,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Exists But Spam</para>
		/// <para><strong>Value</strong>: 420</para>
		/// </summary>
		Email_Exists_But_Spam = 420,
		/// <summary>
		/// <para><strong>Display Name</strong>: Fake Alias</para>
		/// <para><strong>Value</strong>: 410</para>
		/// </summary>
		Fake_Alias = 410,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 230</para>
		/// </summary>
		None = 230,
		/// <summary>
		/// <para><strong>Display Name</strong>: Root Domain exists</para>
		/// <para><strong>Value</strong>: 240</para>
		/// </summary>
		Root_Domain_exists = 240,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unknown = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation In Progress</para>
		/// <para><strong>Value</strong>: 300</para>
		/// </summary>
		Validation_In_Progress = 300
	}
	public enum msdyn_validationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		In_Progress = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: New</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		New = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Success</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Success = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_linkedentityattributevalidity : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_attributename = "msdyn_attributename";
			public const string msdyn_attributetype = "msdyn_attributetype";
			public const string msdyn_datahash = "msdyn_datahash";
			public const string msdyn_datavalidity = "msdyn_datavalidity";
			public const string msdyn_errorcode = "msdyn_errorcode";
			public const string msdyn_linkedentityattributevalidityId = "msdyn_linkedentityattributevalidityid";
			public const string msdyn_linkeditemlookup = "msdyn_linkeditemlookup";
			public const string msdyn_validationresponse = "msdyn_validationresponse";
			public const string msdyn_validationstatus = "msdyn_validationstatus";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_linkedentityattributevalidity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10855;
		public const string EntityCollectionSchemaName = "msdyn_linkedentityattributevalidities";
		public const string EntityDisplayCollectionName = "Linked Entity Attribute Validations";
		public const string DisplayName = "Linked Entity Attribute Validity";
		public const string EntitySetName = "msdyn_linkedentityattributevalidiations";
		public const string EntityLogicalCollectionName = "msdyn_linkedentityattributevalidities";
		public const string EntityPrimaryIdAttribute = "msdyn_linkedentityattributevalidityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_attributename";
		public const string EntitySchemaName = "msdyn_linkedentityattributevalidity";
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity(Guid msdyn_linkedentityattributevalidityId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_linkedentityattributevalidityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_linkedentityattributevalidity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_linkedentityattributevalidity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_linkedentityattributevalidity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_linkedentityattributevalidity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_linkedentityattributevalidity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_linkedentityattributevalidity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attribute name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_attributename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_attributename); }
			set { Entity.Attributes[Fields.msdyn_attributename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attribute type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_attributetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_attributetype? msdyn_attributetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_attributetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_attributetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_attributetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_attributetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data hash</para>
		/// <para><strong>Description</strong>: Hash value for the record attribute that was used in the validation API.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_datahash
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_datahash); }
			set { Entity.Attributes[Fields.msdyn_datahash] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data validity</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_datavalidity"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_datavalidity? msdyn_datavalidity
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_datavalidity);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_datavalidity)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_datavalidity] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_datavalidity] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error message</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_errorcode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_errorcode? msdyn_errorcode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_errorcode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_errorcode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_errorcode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_errorcode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Entity Attribute Validity</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_linkedentityattributevalidityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_linkedentityattributevalidityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Entity</para>
		/// <para><strong>Description</strong>: Linked Entity Polymorphic Lookup Attribute</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="contact"/>, <see cref="lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_linkeditemlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_linkeditemlookup); }
			set { Entity.Attributes[Fields.msdyn_linkeditemlookup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation response</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_validationresponse
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_validationresponse); }
			set { Entity.Attributes[Fields.msdyn_validationresponse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation status</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_validationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_validationstatus? msdyn_validationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_validationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.msdyn_validationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_validationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_validationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Linked Entity Attribute Validity</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Linked Entity Attribute Validity</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_linkedentityattributevalidityOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}