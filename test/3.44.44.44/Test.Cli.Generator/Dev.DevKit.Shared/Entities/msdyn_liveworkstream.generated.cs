//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum msdyn_AllowedPresences
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Available</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Available = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Away</para>
		/// <para><strong>Value</strong>: 192,360,003</para>
		/// </summary>
		Away = 192_360_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Busy</para>
		/// <para><strong>Value</strong>: 192,360,001</para>
		/// </summary>
		Busy = 192_360_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Busy - DND</para>
		/// <para><strong>Value</strong>: 192,360,002</para>
		/// </summary>
		Busy_DND = 192_360_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Offline</para>
		/// <para><strong>Value</strong>: 192,360,004</para>
		/// </summary>
		Offline = 192_360_004
	}
	public enum msdyn_capacityformat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile based</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Profile_based = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unit based</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Unit_based = 192_350_000
	}
	public enum msdyn_conversationmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Live Chat</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Live_Chat = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Persistent Chat</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Persistent_Chat = 192_350_001
	}
	public enum msdyn_direction
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Direct Inbound</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Direct_Inbound = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Direct Outbound</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Direct_Outbound = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inbound</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Inbound = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Outbound = 1
	}
	public enum msdyn_matchinglogic
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Closest Match</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Closest_Match = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exact Match</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Exact_Match = 192_350_000
	}
	public enum msdyn_mode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Legacy</para>
		/// <para><strong>Value</strong>: 717,210,000</para>
		/// </summary>
		Legacy = 717_210_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Simplified</para>
		/// <para><strong>Value</strong>: 717,210,001</para>
		/// </summary>
		Simplified = 717_210_001
	}
	public enum msdyn_Notification
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Directly open session</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Directly_open_session = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen pop with decline</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Screen_pop_with_decline = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen pop with timeout</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Screen_pop_with_timeout = 100_000_001
	}
	public enum msdyn_Screenpoptimeout_optionSet
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 120</para>
		/// <para><strong>Value</strong>: 120</para>
		/// </summary>
		_120 = 120,
		/// <summary>
		/// <para><strong>Display Name</strong>: 150</para>
		/// <para><strong>Value</strong>: 150</para>
		/// </summary>
		_150 = 150,
		/// <summary>
		/// <para><strong>Display Name</strong>: 180</para>
		/// <para><strong>Value</strong>: 180</para>
		/// </summary>
		_180 = 180,
		/// <summary>
		/// <para><strong>Display Name</strong>: 210</para>
		/// <para><strong>Value</strong>: 210</para>
		/// </summary>
		_210 = 210,
		/// <summary>
		/// <para><strong>Display Name</strong>: 240</para>
		/// <para><strong>Value</strong>: 240</para>
		/// </summary>
		_240 = 240,
		/// <summary>
		/// <para><strong>Display Name</strong>: 270</para>
		/// <para><strong>Value</strong>: 270</para>
		/// </summary>
		_270 = 270,
		/// <summary>
		/// <para><strong>Display Name</strong>: 30</para>
		/// <para><strong>Value</strong>: 30</para>
		/// </summary>
		_30 = 30,
		/// <summary>
		/// <para><strong>Display Name</strong>: 300</para>
		/// <para><strong>Value</strong>: 300</para>
		/// </summary>
		_300 = 300,
		/// <summary>
		/// <para><strong>Display Name</strong>: 60</para>
		/// <para><strong>Value</strong>: 60</para>
		/// </summary>
		_60 = 60,
		/// <summary>
		/// <para><strong>Display Name</strong>: 90</para>
		/// <para><strong>Value</strong>: 90</para>
		/// </summary>
		_90 = 90
	}
	public enum msdyn_smsprovider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure Communication Services</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Azure_Communication_Services = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: TeleSign</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		TeleSign = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twilio</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Twilio = 192_350_001
	}
	public enum msdyn_streamsource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages for Business</para>
		/// <para><strong>Value</strong>: 192,450,000</para>
		/// </summary>
		Apple_Messages_for_Business = 192_450_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Co-browse</para>
		/// <para><strong>Value</strong>: 192,390,000</para>
		/// </summary>
		Co_browse = 192_390_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Custom = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Records</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Entity_Records = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 192,330,000</para>
		/// </summary>
		Facebook = 192_330_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google's Business Messages</para>
		/// <para><strong>Value</strong>: 192,450,001</para>
		/// </summary>
		Googles_Business_Messages = 192_450_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: LINE</para>
		/// <para><strong>Value</strong>: 192,310,000</para>
		/// </summary>
		LINE = 192_310_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live chat</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Live_chat = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 19,241,000</para>
		/// </summary>
		Microsoft_Teams = 19_241_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen sharing</para>
		/// <para><strong>Value</strong>: 192,400,000</para>
		/// </summary>
		Screen_sharing = 192_400_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: SMS</para>
		/// <para><strong>Value</strong>: 192,340,000</para>
		/// </summary>
		SMS = 192_340_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Twitter = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Video</para>
		/// <para><strong>Value</strong>: 192,380,000</para>
		/// </summary>
		Video = 192_380_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 192,370,000</para>
		/// </summary>
		Voice = 192_370_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice call</para>
		/// <para><strong>Value</strong>: 192,440,000</para>
		/// </summary>
		Voice_call = 192_440_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WeChat</para>
		/// <para><strong>Value</strong>: 192,320,000</para>
		/// </summary>
		WeChat = 192_320_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WhatsApp</para>
		/// <para><strong>Value</strong>: 192,300,000</para>
		/// </summary>
		WhatsApp = 192_300_000
	}
	public enum msdyn_workdistributionmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Pick</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Pick = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Push</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Push = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_liveworkstream : EntityBase
	{
		public struct Fields
		{
			public const string ComponentIdUnique = "componentidunique";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AllowedPresences = "msdyn_allowedpresences";
			public const string msdyn_APIKey = "msdyn_apikey";
			public const string msdyn_apikeyversionnumber = "msdyn_apikeyversionnumber";
			public const string msdyn_AssignWorkItemAfterDecline = "msdyn_assignworkitemafterdecline";
			public const string msdyn_AutoCloseAfterInactivity = "msdyn_autocloseafterinactivity";
			public const string msdyn_blockcapacityforwrapup = "msdyn_blockcapacityforwrapup";
			public const string msdyn_bot_queue = "msdyn_bot_queue";
			public const string msdyn_bot_rule = "msdyn_bot_rule";
			public const string msdyn_bot_user = "msdyn_bot_user";
			public const string msdyn_botfailureactionconfig = "msdyn_botfailureactionconfig";
			public const string msdyn_capacityformat = "msdyn_capacityformat";
			public const string msdyn_CapacityRequired = "msdyn_capacityrequired";
			public const string msdyn_ConnectorsURL = "msdyn_connectorsurl";
			public const string msdyn_conversationmode = "msdyn_conversationmode";
			public const string msdyn_CustomerDisconnectHoldDurationForOpenConversation = "msdyn_customerdisconnectholddurationforopenconversation";
			public const string msdyn_CustomerID = "msdyn_customerid";
			public const string msdyn_defaultqueue = "msdyn_defaultqueue";
			public const string msdyn_direction = "msdyn_direction";
			public const string msdyn_enableagentaffinity = "msdyn_enableagentaffinity";
			public const string msdyn_enableautomatedmessages = "msdyn_enableautomatedmessages";
			public const string msdyn_enableselectingfrompushbasedworkstreams = "msdyn_enableselectingfrompushbasedworkstreams";
			public const string msdyn_enablevoicev2 = "msdyn_enablevoicev2";
			public const string msdyn_EntityRoutingConfigurationId = "msdyn_entityroutingconfigurationid";
			public const string msdyn_FallBackLanguage = "msdyn_fallbacklanguage";
			public const string msdyn_FollowUpAfterWaiting = "msdyn_followupafterwaiting";
			public const string msdyn_handlingtimethreshold = "msdyn_handlingtimethreshold";
			public const string msdyn_intentfamilyid = "msdyn_intentfamilyid";
			public const string msdyn_intentfeatureenabled = "msdyn_intentfeatureenabled";
			public const string msdyn_isdefault = "msdyn_isdefault";
			public const string msdyn_isICDEnabled = "msdyn_isicdenabled";
			public const string msdyn_LastValidationOn = "msdyn_lastvalidationon";
			public const string msdyn_LastValidationStatus = "msdyn_lastvalidationstatus";
			public const string msdyn_liveworkstreamId = "msdyn_liveworkstreamid";
			public const string msdyn_masterentityroutingconfigurationid = "msdyn_masterentityroutingconfigurationid";
			public const string msdyn_matchinglogic = "msdyn_matchinglogic";
			public const string msdyn_MaxConcurrentConnection = "msdyn_maxconcurrentconnection";
			public const string msdyn_mode = "msdyn_mode";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_Notification = "msdyn_notification";
			public const string msdyn_notificationscenarioplaceholder = "msdyn_notificationscenarioplaceholder";
			public const string msdyn_notificationtemplate_callback_previewdialing = "msdyn_notificationtemplate_callback_previewdialing";
			public const string msdyn_notificationtemplate_consult = "msdyn_notificationtemplate_consult";
			public const string msdyn_notificationtemplate_incoming_auth = "msdyn_notificationtemplate_incoming_auth";
			public const string msdyn_notificationtemplate_incoming_unauth = "msdyn_notificationtemplate_incoming_unauth";
			public const string msdyn_notificationtemplate_returning_conv_assig = "msdyn_notificationtemplate_returning_conv_assig";
			public const string msdyn_notificationtemplate_supervisorassign = "msdyn_notificationtemplate_supervisorassign";
			public const string msdyn_notificationtemplate_transfer = "msdyn_notificationtemplate_transfer";
			public const string msdyn_outboundqueueid = "msdyn_outboundqueueid";
			public const string msdyn_recordidentificationrule = "msdyn_recordidentificationrule";
			public const string msdyn_RecordIdentificationValidationRule = "msdyn_recordidentificationvalidationrule";
			public const string msdyn_restrictdownloadrecording = "msdyn_restrictdownloadrecording";
			public const string msdyn_restrictdownloadtranscript = "msdyn_restrictdownloadtranscript";
			public const string msdyn_routingcontractid = "msdyn_routingcontractid";
			public const string msdyn_Screenpoptimeout = "msdyn_screenpoptimeout";
			public const string msdyn_Screenpoptimeout_optionSet = "msdyn_screenpoptimeout_optionSet";
			public const string msdyn_secureapikey = "msdyn_secureapikey";
			public const string msdyn_sessionscenarioplaceholder = "msdyn_sessionscenarioplaceholder";
			public const string msdyn_sessiontemplate_default = "msdyn_sessiontemplate_default";
			public const string msdyn_skillattachmentrulescount = "msdyn_skillattachmentrulescount";
			public const string msdyn_skillattachmentrulescount_Date = "msdyn_skillattachmentrulescount_date";
			public const string msdyn_skillattachmentrulescount_State = "msdyn_skillattachmentrulescount_state";
			public const string msdyn_smsprovider = "msdyn_smsprovider";
			public const string msdyn_streamsource = "msdyn_streamsource";
			public const string msdyn_TelesignInboundURL = "msdyn_telesigninboundurl";
			public const string msdyn_TwilioInboundURL = "msdyn_twilioinboundurl";
			public const string msdyn_waitingtimethreshold = "msdyn_waitingtimethreshold";
			public const string msdyn_workdistributionmode = "msdyn_workdistributionmode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string SolutionId = "solutionid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_liveworkstream";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10681;
		public const string EntityCollectionSchemaName = "msdyn_liveworkstreams";
		public const string EntityDisplayCollectionName = "Work Streams";
		public const string DisplayName = "Work Stream";
		public const string EntitySetName = "msdyn_liveworkstreams";
		public const string EntityLogicalCollectionName = "msdyn_liveworkstreams";
		public const string EntityPrimaryIdAttribute = "msdyn_liveworkstreamid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_liveworkstream";
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Guid msdyn_liveworkstreamId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_liveworkstreamId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_liveworkstream"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_liveworkstream"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_liveworkstream(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_liveworkstream"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_liveworkstream(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_liveworkstream(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Row id unique</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ComponentIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ComponentIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed Presences</para>
		/// <para><strong>Description</strong>: Allowed base presences for the work stream</para>
		/// <para>Required - <strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences> msdyn_AllowedPresences
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_AllowedPresences);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_AllowedPresences)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_AllowedPresences] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_AllowedPresences] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API Key</para>
		/// <para><strong>Description</strong>: The API Key equivalent to password of account set up with TeleSign</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_APIKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_APIKey); }
			set { Entity.Attributes[Fields.msdyn_APIKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API Key Version Number</para>
		/// <para><strong>Description</strong>: Version number of the API key</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_apikeyversionnumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_apikeyversionnumber); }
			set { Entity.Attributes[Fields.msdyn_apikeyversionnumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign WorkItem After Decline or Timeout</para>
		/// <para><strong>Description</strong>: Set the time after which a work item can be assigned to the agent again after he/she has declined the work item or the request has timed out</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AssignWorkItemAfterDecline
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AssignWorkItemAfterDecline); }
			set { Entity.Attributes[Fields.msdyn_AssignWorkItemAfterDecline] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto-close after inactivity</para>
		/// <para><strong>Description</strong>: Set the time after which the work item will be closed if there is no activity on the work item.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AutoCloseAfterInactivity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AutoCloseAfterInactivity); }
			set { Entity.Attributes[Fields.msdyn_AutoCloseAfterInactivity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Block capacity for wrap up state</para>
		/// <para><strong>Description</strong>: Time for which the agent&apos;s capacity is blocked for wrap up state. After this amount of time the agent&apos;s capacity will be released.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 43,200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_blockcapacityforwrapup
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_blockcapacityforwrapup); }
			set { Entity.Attributes[Fields.msdyn_blockcapacityforwrapup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot queue</para>
		/// <para><strong>Description</strong>: The queue created for the bot in the workstream.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bot_queue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bot_queue); }
			set { Entity.Attributes[Fields.msdyn_bot_queue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot rule</para>
		/// <para><strong>Description</strong>: The rule added to workstream for bot routing.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_bot_rule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_bot_rule); }
			set { Entity.Attributes[Fields.msdyn_bot_rule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot user</para>
		/// <para><strong>Description</strong>: The user of the bot.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_bot_user
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_bot_user); }
			set { Entity.Attributes[Fields.msdyn_bot_user] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bot Failure Action Config</para>
		/// <para><strong>Description</strong>: Link the bot action failure config to the workstream.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_overflowactionconfig"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_botfailureactionconfig
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_botfailureactionconfig); }
			set { Entity.Attributes[Fields.msdyn_botfailureactionconfig] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capacity format</para>
		/// <para><strong>Description</strong>: Defines how the work stream will measure capacity consumption</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_capacityformat"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_capacityformat.Unit_based"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_capacityformat? msdyn_capacityformat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_capacityformat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_capacityformat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_capacityformat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_capacityformat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Capacity</para>
		/// <para><strong>Description</strong>: The units of capacity that should be available for an item of this work stream to be processed.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_CapacityRequired
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_CapacityRequired); }
			set { Entity.Attributes[Fields.msdyn_CapacityRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connectors URL</para>
		/// <para><strong>Description</strong>: Flow URL for Dynamics 365 connector</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ConnectorsURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ConnectorsURL); }
			set { Entity.Attributes[Fields.msdyn_ConnectorsURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation mode of chat channels</para>
		/// <para><strong>Description</strong>: Conversation mode of chat channels</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_conversationmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_conversationmode.Live_Chat"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_conversationmode? msdyn_conversationmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_conversationmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_conversationmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_conversationmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_conversationmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Disconnect Hold Duration For Open Conversation</para>
		/// <para><strong>Description</strong>: Hold the time for which customer disconnect will not close the open conversation.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 43,200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_CustomerDisconnectHoldDurationForOpenConversation
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_CustomerDisconnectHoldDurationForOpenConversation); }
			set { Entity.Attributes[Fields.msdyn_CustomerDisconnectHoldDurationForOpenConversation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer ID</para>
		/// <para><strong>Description</strong>: The Customer Id equivalent to username of account set up with TeleSign</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomerID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomerID); }
			set { Entity.Attributes[Fields.msdyn_CustomerID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Queue</para>
		/// <para><strong>Description</strong>: Link the default queue to the workstream.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_defaultqueue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_defaultqueue); }
			set { Entity.Attributes[Fields.msdyn_defaultqueue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Direction</para>
		/// <para><strong>Description</strong>: Direction to indicate if it&apos;s an inbound, outbound, direct inbound or direct outbound workstream</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_direction"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_direction.Inbound"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_direction? msdyn_direction
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_direction);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_direction)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_direction] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_direction] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Keep same agent for entire conversation</para>
		/// <para><strong>Description</strong>: Keep same agent for entire conversation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableagentaffinity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableagentaffinity); }
			set { Entity.Attributes[Fields.msdyn_enableagentaffinity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Automated Messages</para>
		/// <para><strong>Description</strong>: Option for allowing automated messages or not</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableautomatedmessages
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableautomatedmessages); }
			set { Entity.Attributes[Fields.msdyn_enableautomatedmessages] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable selecting from push-based work streams</para>
		/// <para><strong>Description</strong>: Agents can choose to work on items from push-based work streams.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enableselectingfrompushbasedworkstreams
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enableselectingfrompushbasedworkstreams); }
			set { Entity.Attributes[Fields.msdyn_enableselectingfrompushbasedworkstreams] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Voice V2</para>
		/// <para><strong>Description</strong>: Enable Voice V2</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_enablevoicev2
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_enablevoicev2); }
			set { Entity.Attributes[Fields.msdyn_enablevoicev2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>Description</strong>: Unique identifier for Workstream Entity Configuration associated with Work Stream.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_entityroutingconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_EntityRoutingConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_EntityRoutingConfigurationId); }
			set { Entity.Attributes[Fields.msdyn_EntityRoutingConfigurationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FallBack Language</para>
		/// <para><strong>Description</strong>: Fall back language to be used for Live chat</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_FallBackLanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_FallBackLanguage); }
			set { Entity.Attributes[Fields.msdyn_FallBackLanguage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow-up after waiting</para>
		/// <para><strong>Description</strong>: Set the time after which the work item should be offered to an agent if the work item has been waiting for input.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FollowUpAfterWaiting
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FollowUpAfterWaiting); }
			set { Entity.Attributes[Fields.msdyn_FollowUpAfterWaiting] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Handling Time Threshold</para>
		/// <para><strong>Description</strong>: Declare the expected handling time under which work items for this work stream should get resolved</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_handlingtimethreshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_handlingtimethreshold); }
			set { Entity.Attributes[Fields.msdyn_handlingtimethreshold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: intentfamilyid</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_intentfamily"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_intentfamilyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_intentfamilyid); }
			set { Entity.Attributes[Fields.msdyn_intentfamilyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Is Intent based routing enabled for workstream</para>
		/// <para><strong>Description</strong>: (Deprecated) Is Intent based routing enabled for workstream</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_intentfeatureenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_intentfeatureenabled); }
			set { Entity.Attributes[Fields.msdyn_intentfeatureenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Default</para>
		/// <para><strong>Description</strong>: Indicates whether this is the default workstream or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdefault
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdefault); }
			set { Entity.Attributes[Fields.msdyn_isdefault] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Intent based routing enabled for workstream</para>
		/// <para><strong>Description</strong>: Is Intent based routing enabled for workstream</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isICDEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isICDEnabled); }
			set { Entity.Attributes[Fields.msdyn_isICDEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Validation On</para>
		/// <para><strong>Description</strong>: The time when Validation api was last run</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_LastValidationOn
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_LastValidationOn); }
			set { Entity.Attributes[Fields.msdyn_LastValidationOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Validation Status</para>
		/// <para><strong>Description</strong>: The status of the last Validation results</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LastValidationStatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LastValidationStatus); }
			set { Entity.Attributes[Fields.msdyn_LastValidationStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Stream</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_liveworkstreamId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_liveworkstreamId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>Description</strong>: Unique identifier for master entity routing configuration associated with work stream.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_masterentityroutingconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_masterentityroutingconfigurationid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_masterentityroutingconfigurationid); }
			set { Entity.Attributes[Fields.msdyn_masterentityroutingconfigurationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Matching Logic</para>
		/// <para><strong>Description</strong>: Matching logic used for Skill Based Routing like Exact Match or Closest match</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_matchinglogic"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_matchinglogic? msdyn_matchinglogic
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_matchinglogic);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_matchinglogic)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_matchinglogic] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_matchinglogic] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Max Concurrency</para>
		/// <para><strong>Description</strong>: Maximum number of concurrent sessions that an agent can work for a work item of a particular stream.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_MaxConcurrentConnection
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_MaxConcurrentConnection); }
			set { Entity.Attributes[Fields.msdyn_MaxConcurrentConnection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mode</para>
		/// <para><strong>Description</strong>: Mode of experience</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_mode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_mode.Legacy"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_mode? msdyn_mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_mode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of Work stream</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notification</para>
		/// <para><strong>Description</strong>: Notification type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Notification"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Notification.Screen_pop_with_timeout"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Notification? msdyn_Notification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Notification);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Notification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Notification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Notification] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: notification scenario placeholder</para>
		/// <para><strong>Description</strong>: Notification association with scenarios</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationscenarioplaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationscenarioplaceholder); }
			set { Entity.Attributes[Fields.msdyn_notificationscenarioplaceholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CallbackPreviewDialing</para>
		/// <para><strong>Description</strong>: callbackpreviewdialing notification template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_callback_previewdialing
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_callback_previewdialing); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_callback_previewdialing] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consult</para>
		/// <para><strong>Description</strong>: Consult  notification template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_consult
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_consult); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_consult] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incoming authenticated</para>
		/// <para><strong>Description</strong>: Incoming authenticated notification template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_incoming_auth
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_incoming_auth); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_incoming_auth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incoming unauthenticated</para>
		/// <para><strong>Description</strong>: Incoming unauthenticated notification template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_incoming_unauth
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_incoming_unauth); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_incoming_unauth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Returning conversation assignment</para>
		/// <para><strong>Description</strong>: Notification template for assignment of new messages in a conversation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_returning_conv_assig
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_returning_conv_assig); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_returning_conv_assig] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SupervisorAssign</para>
		/// <para><strong>Description</strong>: supervisorAssign notification template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_supervisorassign
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_supervisorassign); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_supervisorassign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transfer</para>
		/// <para><strong>Description</strong>: Transfer notification template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_notificationtemplate_transfer
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_notificationtemplate_transfer); }
			set { Entity.Attributes[Fields.msdyn_notificationtemplate_transfer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound queue</para>
		/// <para><strong>Description</strong>: Unique identifier for outbound queue associated with workstream</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_outboundqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_outboundqueueid); }
			set { Entity.Attributes[Fields.msdyn_outboundqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Identification Rule</para>
		/// <para><strong>Description</strong>: Record identification rule associated to a workstream</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_recordidentificationrule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_recordidentificationrule); }
			set { Entity.Attributes[Fields.msdyn_recordidentificationrule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Identification Validation Rule</para>
		/// <para><strong>Description</strong>: Record Identification Validation Rule</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RecordIdentificationValidationRule
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RecordIdentificationValidationRule); }
			set { Entity.Attributes[Fields.msdyn_RecordIdentificationValidationRule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Restrict download of recording</para>
		/// <para><strong>Description</strong>: Restrict download of recording</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_restrictdownloadrecording
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_restrictdownloadrecording); }
			set { Entity.Attributes[Fields.msdyn_restrictdownloadrecording] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Restrict download of transcript</para>
		/// <para><strong>Description</strong>: Restrict download of transcript</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_restrictdownloadtranscript
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_restrictdownloadtranscript); }
			set { Entity.Attributes[Fields.msdyn_restrictdownloadtranscript] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contract Id</para>
		/// <para><strong>Description</strong>: Link contracts with live work streams.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_decisioncontract"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_routingcontractid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_routingcontractid); }
			set { Entity.Attributes[Fields.msdyn_routingcontractid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen pop timeout</para>
		/// <para><strong>Description</strong>: Time duration for which notification will be shown to agent.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_Screenpoptimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_Screenpoptimeout); }
			set { Entity.Attributes[Fields.msdyn_Screenpoptimeout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen pop timeout</para>
		/// <para><strong>Description</strong>: Time duration options for notification.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Screenpoptimeout_optionSet"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Screenpoptimeout_optionSet._120"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Screenpoptimeout_optionSet? msdyn_Screenpoptimeout_optionSet
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Screenpoptimeout_optionSet);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_Screenpoptimeout_optionSet)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Screenpoptimeout_optionSet] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Screenpoptimeout_optionSet] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Secure API Key</para>
		/// <para><strong>Description</strong>: The secure API Key equivalent to password of account set up with TeleSign</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_secureapikey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_secureapikey); }
			set { Entity.Attributes[Fields.msdyn_secureapikey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: session scenario placeholder</para>
		/// <para><strong>Description</strong>: Session association with scenarios</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sessionscenarioplaceholder
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sessionscenarioplaceholder); }
			set { Entity.Attributes[Fields.msdyn_sessionscenarioplaceholder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Description</strong>: Default session template scenario</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sessiontemplate_default
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sessiontemplate_default); }
			set { Entity.Attributes[Fields.msdyn_sessiontemplate_default] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skill Attachment Rules Count</para>
		/// <para><strong>Description</strong>: Skill Attachment Rules Count</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_skillattachmentrulescount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_skillattachmentrulescount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skill Attachment Rules Count (Last Updated On)</para>
		/// <para><strong>Description</strong>: Last Updated time of rollup field Skill Attachment Rules Count.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_skillattachmentrulescount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_skillattachmentrulescount_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Skill Attachment Rules Count (State)</para>
		/// <para><strong>Description</strong>: State of rollup field Skill Attachment Rules Count.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_skillattachmentrulescount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_skillattachmentrulescount_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SMS Provider</para>
		/// <para><strong>Description</strong>: SMS Provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_smsprovider"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_smsprovider? msdyn_smsprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_smsprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_smsprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_smsprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_smsprovider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel</para>
		/// <para><strong>Description</strong>: The channel to which this workstream is attached</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_streamsource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_streamsource? msdyn_streamsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_streamsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_streamsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_streamsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_streamsource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TeleSign Inbound URL</para>
		/// <para><strong>Description</strong>: URL for TeleSign Inbound link</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TelesignInboundURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TelesignInboundURL); }
			set { Entity.Attributes[Fields.msdyn_TelesignInboundURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Twilio Inbound URL</para>
		/// <para><strong>Description</strong>: URL for Twilio Inbound link</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_TwilioInboundURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_TwilioInboundURL); }
			set { Entity.Attributes[Fields.msdyn_TwilioInboundURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting Time Threshold</para>
		/// <para><strong>Description</strong>: Declare the expected waiting time under which work items for this work stream should be assigned to agents</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_waitingtimethreshold
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_waitingtimethreshold); }
			set { Entity.Attributes[Fields.msdyn_waitingtimethreshold] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Distribution Mode</para>
		/// <para><strong>Description</strong>: Specifies the mode i.e Push/Pick for the workstream</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_workdistributionmode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_workdistributionmode.Push"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_workdistributionmode? msdyn_workdistributionmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_workdistributionmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.msdyn_workdistributionmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_workdistributionmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_workdistributionmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Work stream</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Work stream</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveworkstreamOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}