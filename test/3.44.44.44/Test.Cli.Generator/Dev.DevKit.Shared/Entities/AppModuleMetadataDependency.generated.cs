//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.AppModuleMetadataDependencyOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class AppModuleMetadataDependency : EntityBase
	{
		public struct Fields
		{
			public const string AppModuleMetadataDependencyId = "appmodulemetadatadependencyid";
			public const string CreatedOn = "createdon";
			public const string DependentComponentId = "dependentcomponentid";
			public const string ModifiedOn = "modifiedon";
			public const string RequiredComponentId = "requiredcomponentid";
			public const string RequiredComponentInternalId = "requiredcomponentinternalid";
			public const string RequiredComponentSubType = "requiredcomponentsubtype";
			public const string RequiredComponentType = "requiredcomponenttype";
			public const string RequiredComponentVersion = "requiredcomponentversion";
			public const string State = "state";
		}
		public const string EntityLogicalName = "appmodulemetadatadependency";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8701;
		public const string EntityCollectionSchemaName = "AppModuleMetadataDependencyCollection";
		public const string EntityDisplayCollectionName = "AppModule Metadata Dependency Collection";
		public const string DisplayName = "AppModule Metadata Dependency";
		public const string EntitySetName = "appmodulemetadatadependencycollection";
		public const string EntityLogicalCollectionName = "appmodulemetadatadependencycollection";
		public const string EntityPrimaryIdAttribute = "appmodulemetadatadependencyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "AppModuleMetadataDependency";
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency(Guid AppModuleMetadataDependencyId)
		{
			Entity = new Entity(EntityLogicalName, AppModuleMetadataDependencyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AppModuleMetadataDependency"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AppModuleMetadataDependency"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new AppModuleMetadataDependency(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="AppModuleMetadataDependency"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new AppModuleMetadataDependency(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public AppModuleMetadataDependency(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AppModule Metadata Dependency Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AppModuleMetadataDependencyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AppModuleMetadataDependencyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dependent Component Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DependentComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DependentComponentId); }
			set { Entity.Attributes[Fields.DependentComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Component Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RequiredComponentId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RequiredComponentId); }
			set { Entity.Attributes[Fields.RequiredComponentId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Component Internal Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RequiredComponentInternalId
		{
			get { return Entity.GetAttributeValue<string>(Fields.RequiredComponentInternalId); }
			set { Entity.Attributes[Fields.RequiredComponentInternalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Component Sub-Type</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RequiredComponentSubType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RequiredComponentSubType); }
			set { Entity.Attributes[Fields.RequiredComponentSubType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Component Type</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RequiredComponentType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RequiredComponentType); }
			set { Entity.Attributes[Fields.RequiredComponentType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required Component Version</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? RequiredComponentVersion
		{
			get { return Entity.GetAttributeValue<long?>(Fields.RequiredComponentVersion); }
			set { Entity.Attributes[Fields.RequiredComponentVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State of the record</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.State); }
			set { Entity.Attributes[Fields.State] = value; }
		}
	}
}