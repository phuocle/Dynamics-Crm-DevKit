//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Closed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Closed</strong></para>
		/// </summary>
		Published = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Saved</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Saved = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_teamsdialeradminsettings : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_addparticipantenabled = "msdyn_addparticipantenabled";
			public const string msdyn_answerexternalincomingcalls = "msdyn_answerexternalincomingcalls";
			public const string msdyn_AppModules = "msdyn_appmodules";
			public const string msdyn_CICallPaneEntryPoints = "msdyn_cicallpaneentrypoints";
			public const string msdyn_ignoreinternalincomingcalls = "msdyn_ignoreinternalincomingcalls";
			public const string msdyn_LayoutSchema = "msdyn_layoutschema";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_RecordingSecurityRoles = "msdyn_recordingsecurityroles";
			public const string msdyn_SecurityRoles = "msdyn_securityroles";
			public const string msdyn_SecurityRolesAllSelected = "msdyn_securityrolesallselected";
			public const string msdyn_teamsdialeradminsettingsId = "msdyn_teamsdialeradminsettingsid";
			public const string msdyn_transfercallsenabled = "msdyn_transfercallsenabled";
			public const string msdyn_valuesjson = "msdyn_valuesjson";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_teamsdialeradminsettings";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10512;
		public const string EntityCollectionSchemaName = "msdyn_teamsdialeradminsettingses";
		public const string EntityDisplayCollectionName = "Teams Dialer Admin settings set";
		public const string DisplayName = "Teams Dialer Admin settings";
		public const string EntitySetName = "msdyn_teamsdialeradminsettingset";
		public const string EntityLogicalCollectionName = "msdyn_teamsdialeradminsettingses";
		public const string EntityPrimaryIdAttribute = "msdyn_teamsdialeradminsettingsid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_teamsdialeradminsettings";
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings(Guid msdyn_teamsdialeradminsettingsId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_teamsdialeradminsettingsId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_teamsdialeradminsettings"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_teamsdialeradminsettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_teamsdialeradminsettings(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_teamsdialeradminsettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_teamsdialeradminsettings(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_teamsdialeradminsettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_addparticipantenabled</para>
		/// <para><strong>Description</strong>: Control if Add Particiapnt featrue is enabled or not</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_addparticipantenabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_addparticipantenabled); }
			set { Entity.Attributes[Fields.msdyn_addparticipantenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Answer External Incoming Calls</para>
		/// <para><strong>Description</strong>: Should answer incoming calls from users outside my org</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_answerexternalincomingcalls
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_answerexternalincomingcalls); }
			set { Entity.Attributes[Fields.msdyn_answerexternalincomingcalls] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: App module list</para>
		/// <para><strong>Description</strong>: App modules enabled for settings instance</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AppModules
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AppModules); }
			set { Entity.Attributes[Fields.msdyn_AppModules] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Layout configuration schema</para>
		/// <para><strong>Description</strong>: Layout configuration for custom controls to be loaded</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CICallPaneEntryPoints
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CICallPaneEntryPoints); }
			set { Entity.Attributes[Fields.msdyn_CICallPaneEntryPoints] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ignore Internal Incoming Calls</para>
		/// <para><strong>Description</strong>: Should incoming calls from users within the org be ignored</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_ignoreinternalincomingcalls
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_ignoreinternalincomingcalls); }
			set { Entity.Attributes[Fields.msdyn_ignoreinternalincomingcalls] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Layout configuration schema</para>
		/// <para><strong>Description</strong>: Layout configuration for custom controls to be loaded</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_LayoutSchema
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_LayoutSchema); }
			set { Entity.Attributes[Fields.msdyn_LayoutSchema] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the Teams Dialer Admin settings instance.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording Security Roles List</para>
		/// <para><strong>Description</strong>: Recording security roles enabled for the settings instance</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RecordingSecurityRoles
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RecordingSecurityRoles); }
			set { Entity.Attributes[Fields.msdyn_RecordingSecurityRoles] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Security role list</para>
		/// <para><strong>Description</strong>: Security roles enabled for the settings instance</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SecurityRoles
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SecurityRoles); }
			set { Entity.Attributes[Fields.msdyn_SecurityRoles] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_SecurityRolesAllSelected</para>
		/// <para><strong>Description</strong>: In Teams dialer settings page, were all security roles selected or not</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SecurityRolesAllSelected
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SecurityRolesAllSelected); }
			set { Entity.Attributes[Fields.msdyn_SecurityRolesAllSelected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Dialer Admin settings ID</para>
		/// <para><strong>Description</strong>: Unique identifier for Teams Dialer Admin settings instance</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_teamsdialeradminsettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_teamsdialeradminsettingsId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_transfercallsenabled</para>
		/// <para><strong>Description</strong>: Control if Calls Transfer featrue is enabled or not (controlled by admin in Teams calls settings page)</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_transfercallsenabled
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_transfercallsenabled); }
			set { Entity.Attributes[Fields.msdyn_transfercallsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdyn_valuesjson</para>
		/// <para><strong>Description</strong>: json to store all msdyn_teamsdialeradminsettings fields, to avoid changing this file when adding a field</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_valuesjson
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_valuesjson); }
			set { Entity.Attributes[Fields.msdyn_valuesjson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Teams Dialer Admin settings</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Teams Dialer Admin settings</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_teamsdialeradminsettingsOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}