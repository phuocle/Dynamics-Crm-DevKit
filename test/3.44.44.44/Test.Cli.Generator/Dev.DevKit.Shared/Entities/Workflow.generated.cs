//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.WorkflowOptionSets
{
	public enum BusinessProcessType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Flow</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Business_Flow = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task Flow</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Task_Flow = 1
	}
	public enum Category
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Action</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Action = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: AI Flow</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		AI_Flow = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Process Flow</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Business_Process_Flow = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Rule</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Business_Rule = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Desktop Flow</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Desktop_Flow = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dialog</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Dialog = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Modern Flow</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Modern_Flow = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Web Client API Flow</para>
		/// <para><strong>Value</strong>: 9,000</para>
		/// </summary>
		Web_Client_API_Flow = 9_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Workflow</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Workflow = 0
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum CreateStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Post-operation</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Post_operation = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre-operation</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Pre_operation = 20
	}
	public enum DeleteStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Post-operation</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Post_operation = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre-operation</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Pre_operation = 20
	}
	public enum Mode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Background</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Background = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Real-time</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Real_time = 1
	}
	public enum ProcessTriggerScope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Entity = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Form</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Form = 1
	}
	public enum RunAs
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Calling User</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Calling_User = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Owner = 0
	}
	public enum Scope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Business_Unit = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Organization = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent: Child Business Units</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Parent_Child_Business_Units = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		User = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Activated</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Activated = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Suspended</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Suspended = 2
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Activated</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Activated</strong></para>
		/// </summary>
		Activated = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: CompanyDLPViolation</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Suspended</strong></para>
		/// </summary>
		CompanyDLPViolation = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 1
	}
	public enum ThrottlingBehavior
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: TenantPool</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		TenantPool = 1
	}
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Activation</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Activation = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Definition = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Template</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Template = 3
	}
	public enum UIFlowType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Power Automate Desktop</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Power_Automate_Desktop = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording</para>
		/// <para><strong>Value</strong>: 101</para>
		/// </summary>
		Recording = 101,
		/// <summary>
		/// <para><strong>Display Name</strong>: Selenium IDE</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Selenium_IDE = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Windows recorder (V1)</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Windows_recorder_V1 = 0
	}
	public enum UpdateStage
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Post-operation</para>
		/// <para><strong>Value</strong>: 40</para>
		/// </summary>
		Post_operation = 40,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pre-operation</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		Pre_operation = 20
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Workflow : EntityBase
	{
		public struct Fields
		{
			public const string ActiveWorkflowId = "activeworkflowid";
			public const string AsyncAutoDelete = "asyncautodelete";
			public const string BillingContext = "billingcontext";
			public const string BusinessProcessType = "businessprocesstype";
			public const string Category = "category";
			public const string ClientData = "clientdata";
			public const string ClientDataIsCompressed = "clientdataiscompressed";
			public const string ComponentState = "componentstate";
			public const string ConnectionReferences = "connectionreferences";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreateMetadata = "createmetadata";
			public const string CreateStage = "createstage";
			public const string Credentials = "credentials";
			public const string Definition = "definition";
			public const string DeleteStage = "deletestage";
			public const string Dependencies = "dependencies";
			public const string Description = "description";
			public const string DesktopFlowModules = "desktopflowmodules";
			public const string DynamicsSolutionContext = "dynamicssolutioncontext";
			public const string EntityImageId = "entityimageid";
			public const string FormId = "formid";
			public const string InputParameters = "inputparameters";
			public const string Inputs = "inputs";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCrmUIWorkflow = "iscrmuiworkflow";
			public const string IsManaged = "ismanaged";
			public const string IsTransacted = "istransacted";
			public const string LanguageCode = "languagecode";
			public const string LicenseEntitledBy = "licenseentitledby";
			public const string Metadata = "metadata";
			public const string Mode = "mode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifyMetadata = "modifymetadata";
			public const string Name = "name";
			public const string OnDemand = "ondemand";
			public const string Outputs = "outputs";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentWorkflowId = "parentworkflowid";
			public const string PlanVerified = "planverified";
			public const string PluginTypeId = "plugintypeid";
			public const string PrimaryEntity = "primaryentity";
			public const string ProcessOrder = "processorder";
			public const string ProcessRoleAssignment = "processroleassignment";
			public const string ProcessTriggerFormId = "processtriggerformid";
			public const string ProcessTriggerScope = "processtriggerscope";
			public const string Rank = "rank";
			public const string RendererObjectTypeCode = "rendererobjecttypecode";
			public const string ResourceContainer = "resourcecontainer";
			public const string ResourceId = "resourceid";
			public const string RunAs = "runas";
			public const string SchemaVersion = "schemaversion";
			public const string Scope = "scope";
			public const string SdkMessageId = "sdkmessageid";
			public const string SolutionId = "solutionid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subprocess = "subprocess";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SuspensionReasonDetails = "suspensionreasondetails";
			public const string SyncWorkflowLogOnFailure = "syncworkflowlogonfailure";
			public const string ThrottlingBehavior = "throttlingbehavior";
			public const string TriggerOnCreate = "triggeroncreate";
			public const string TriggerOnDelete = "triggerondelete";
			public const string TriggerOnUpdateAttributeList = "triggeronupdateattributelist";
			public const string TrustedAccess = "trustedaccess";
			public const string Type = "type";
			public const string UIData = "uidata";
			public const string UIFlowType = "uiflowtype";
			public const string UniqueName = "uniquename";
			public const string UpdateStage = "updatestage";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowId = "workflowid";
			public const string WorkflowIdUnique = "workflowidunique";
			public const string Xaml = "xaml";
		}
		public const string EntityLogicalName = "workflow";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 4703;
		public const string EntityCollectionSchemaName = "Workflows";
		public const string EntityDisplayCollectionName = "Processes";
		public const string DisplayName = "Process";
		public const string EntitySetName = "workflows";
		public const string EntityLogicalCollectionName = "workflows";
		public const string EntityPrimaryIdAttribute = "workflowid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Workflow";
		[DebuggerNonUserCode()]
		public Workflow()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Workflow(Guid WorkflowId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Workflow(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Workflow"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Workflow(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Workflow"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Workflow(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Workflow(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Workflow"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Workflow(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Workflow(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Workflow(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Process ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the latest activation record for the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ActiveWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ActiveWorkflowId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delete Job On Completion</para>
		/// <para><strong>Description</strong>: Indicates whether the asynchronous system job is automatically deleted on completion.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AsyncAutoDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AsyncAutoDelete); }
			set { Entity.Attributes[Fields.AsyncAutoDelete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BillingContext</para>
		/// <para><strong>Description</strong>: Billing context this flow is in.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BillingContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.BillingContext); }
			set { Entity.Attributes[Fields.BillingContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Process Type</para>
		/// <para><strong>Description</strong>: Business Process Type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType.Business_Flow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType? BusinessProcessType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BusinessProcessType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.BusinessProcessType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BusinessProcessType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BusinessProcessType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Category</para>
		/// <para><strong>Description</strong>: Category of the process.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Category"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Category? Category
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Category);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Category)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Category] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Category] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client Data</para>
		/// <para><strong>Description</strong>: Business logic converted into client data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientData
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientData); }
			set { Entity.Attributes[Fields.ClientData] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client Data Is Compressed</para>
		/// <para><strong>Description</strong>: For Internal Use Only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Workflow has compressed client data</strong>]: true - [<strong>Workflow does not have compressed client data</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Workflow does not have compressed client data</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ClientDataIsCompressed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ClientDataIsCompressed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connection references</para>
		/// <para><strong>Description</strong>: Connection References related to this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectionReferences
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectionReferences); }
			set { Entity.Attributes[Fields.ConnectionReferences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the process was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create metadata</para>
		/// <para><strong>Description</strong>: Create metadata for this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CreateMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.CreateMetadata); }
			set { Entity.Attributes[Fields.CreateMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create Stage</para>
		/// <para><strong>Description</strong>: Stage of the process when triggered on Create.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.CreateStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.CreateStage? CreateStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CreateStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.CreateStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreateStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CreateStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Credentials</para>
		/// <para><strong>Description</strong>: Credentials related to this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Credentials
		{
			get { return Entity.GetAttributeValue<string>(Fields.Credentials); }
			set { Entity.Attributes[Fields.Credentials] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition</para>
		/// <para><strong>Description</strong>: Definition of the business logic of this workflow instance.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 16,777,216</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Definition
		{
			get { return Entity.GetAttributeValue<string>(Fields.Definition); }
			set { Entity.Attributes[Fields.Definition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delete stage</para>
		/// <para><strong>Description</strong>: Stage of the process when triggered on Delete.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.DeleteStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.DeleteStage? DeleteStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeleteStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.DeleteStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeleteStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeleteStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dependencies</para>
		/// <para><strong>Description</strong>: Soft dependencies of this workflow instance.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Dependencies
		{
			get { return Entity.GetAttributeValue<string>(Fields.Dependencies); }
			set { Entity.Attributes[Fields.Dependencies] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the process.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Desktop flow modules</para>
		/// <para><strong>Description</strong>: Desktop flow modules related to this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DesktopFlowModules
		{
			get { return Entity.GetAttributeValue<string>(Fields.DesktopFlowModules); }
			set { Entity.Attributes[Fields.DesktopFlowModules] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DynamicsSolutionContext</para>
		/// <para><strong>Description</strong>: comma separated list of one or more Dynamics First Party Solution Unique names that this workflow is in context of.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DynamicsSolutionContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.DynamicsSolutionContext); }
			set { Entity.Attributes[Fields.DynamicsSolutionContext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Image Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated form.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormId); }
			set { Entity.Attributes[Fields.FormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Input Parameters</para>
		/// <para><strong>Description</strong>: Input parameters to the process.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InputParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.InputParameters); }
			set { Entity.Attributes[Fields.InputParameters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inputs</para>
		/// <para><strong>Description</strong>: Inputs definition for this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Inputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Inputs); }
			set { Entity.Attributes[Fields.Inputs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Introduced Version</para>
		/// <para><strong>Description</strong>: Version in which the form is introduced.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is CRM Process</para>
		/// <para><strong>Description</strong>: Indicates whether the process was created using the Microsoft Dynamics 365 Web application.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCrmUIWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCrmUIWorkflow); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Transacted</para>
		/// <para><strong>Description</strong>: Whether or not the steps in the process are executed in a single transaction.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTransacted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTransacted); }
			set { Entity.Attributes[Fields.IsTransacted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: Language of the process.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: License entitled by</para>
		/// <para><strong>Description</strong>: The source of the license entitlements.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference LicenseEntitledBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.LicenseEntitledBy); }
			set { Entity.Attributes[Fields.LicenseEntitledBy] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metadata</para>
		/// <para><strong>Description</strong>: Additional metadata for this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Metadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.Metadata); }
			set { Entity.Attributes[Fields.Metadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mode</para>
		/// <para><strong>Description</strong>: Shows the mode of the process.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode.Background"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode? Mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Mode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the process was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ModifyMetadata</para>
		/// <para><strong>Description</strong>: Flow modify metadata used for telemetry, etc.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ModifyMetadata
		{
			get { return Entity.GetAttributeValue<string>(Fields.ModifyMetadata); }
			set { Entity.Attributes[Fields.ModifyMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Name</para>
		/// <para><strong>Description</strong>: Name of the process.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Run as On Demand</para>
		/// <para><strong>Description</strong>: Indicates whether the process is able to run as an on-demand process.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OnDemand
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OnDemand); }
			set { Entity.Attributes[Fields.OnDemand] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outputs</para>
		/// <para><strong>Description</strong>: Outputs definition for this workflow.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Outputs
		{
			get { return Entity.GetAttributeValue<string>(Fields.Outputs); }
			set { Entity.Attributes[Fields.Outputs] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the process.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Process ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the definition for process activation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentWorkflowId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plan Verified</para>
		/// <para><strong>Description</strong>: For Internal Use Only.</para>
		/// <para><strong>Two Option</strong> - [<strong>Verified</strong>]: true - [<strong>NotVerified</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>NotVerified</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? PlanVerified
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.PlanVerified); }
			set { Entity.Attributes[Fields.PlanVerified] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the plug-in type.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sdkmessagefilter"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PluginTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PluginTypeId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Entity</para>
		/// <para><strong>Description</strong>: Primary entity for the process. The process can be associated for one or more SDK operations defined on the primary entity.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntity); }
			set { Entity.Attributes[Fields.PrimaryEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process Order</para>
		/// <para><strong>Description</strong>: Type the business process flow order.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessOrder); }
			set { Entity.Attributes[Fields.ProcessOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Role assignment for Process</para>
		/// <para><strong>Description</strong>: Contains the role assignment for the process.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessRoleAssignment
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessRoleAssignment); }
			set { Entity.Attributes[Fields.ProcessRoleAssignment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ProcessTriggerFormId</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated form for process trigger.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessTriggerFormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessTriggerFormId); }
			set { Entity.Attributes[Fields.ProcessTriggerFormId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ProcessTriggerScope</para>
		/// <para><strong>Description</strong>: Scope of the process trigger.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope? ProcessTriggerScope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessTriggerScope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProcessTriggerScope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProcessTriggerScope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rank</para>
		/// <para><strong>Description</strong>: Indicates the rank for order of execution for the synchronous workflow.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
			set { Entity.Attributes[Fields.Rank] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Renderer Type</para>
		/// <para><strong>Description</strong>: The renderer type of Workflow</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RendererObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.RendererObjectTypeCode); }
			set { Entity.Attributes[Fields.RendererObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ResourceContainer</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ResourceContainer
		{
			get { return Entity.GetAttributeValue<string>(Fields.ResourceContainer); }
			set { Entity.Attributes[Fields.ResourceContainer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ResourceId</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ResourceId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ResourceId); }
			set { Entity.Attributes[Fields.ResourceId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Run As User</para>
		/// <para><strong>Description</strong>: Specifies the system user account under which a workflow executes.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs.Calling_User"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs? RunAs
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RunAs);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.RunAs)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RunAs] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RunAs] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schema Version</para>
		/// <para><strong>Description</strong>: Schema version for this workflow.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SchemaVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.SchemaVersion); }
			set { Entity.Attributes[Fields.SchemaVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scope</para>
		/// <para><strong>Description</strong>: Scope of the process.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Scope"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Scope? Scope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Scope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Scope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Scope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Scope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SDK Message</para>
		/// <para><strong>Description</strong>: Unique identifier of the SDK Message associated with this workflow.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="sdkmessage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the workflow</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode.Draft"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the workflow</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Child Process</para>
		/// <para><strong>Description</strong>: Indicates whether the process can be included in other processes as a child process.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Subprocess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Subprocess); }
			set { Entity.Attributes[Fields.Subprocess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SuspensionReasonDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.SuspensionReasonDetails); }
			set { Entity.Attributes[Fields.SuspensionReasonDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Log upon Failure</para>
		/// <para><strong>Description</strong>: Select whether synchronous workflow failures will be saved to log files.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncWorkflowLogOnFailure
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncWorkflowLogOnFailure); }
			set { Entity.Attributes[Fields.SyncWorkflowLogOnFailure] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Throttling behavior type</para>
		/// <para><strong>Description</strong>: The throttling behavior type.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.ThrottlingBehavior"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.ThrottlingBehavior? ThrottlingBehavior
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ThrottlingBehavior);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.ThrottlingBehavior)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ThrottlingBehavior] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ThrottlingBehavior] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trigger On Create</para>
		/// <para><strong>Description</strong>: Indicates whether the process will be triggered when the primary entity is created.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TriggerOnCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TriggerOnCreate); }
			set { Entity.Attributes[Fields.TriggerOnCreate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trigger On Delete</para>
		/// <para><strong>Description</strong>: Indicates whether the process will be triggered on deletion of the primary entity.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TriggerOnDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TriggerOnDelete); }
			set { Entity.Attributes[Fields.TriggerOnDelete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trigger On Update Attribute List</para>
		/// <para><strong>Description</strong>: Attributes that trigger the process when updated.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TriggerOnUpdateAttributeList
		{
			get { return Entity.GetAttributeValue<string>(Fields.TriggerOnUpdateAttributeList); }
			set { Entity.Attributes[Fields.TriggerOnUpdateAttributeList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trusted Access</para>
		/// <para><strong>Description</strong>: For Internal Use Only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Workflow has gone through access check</strong>]: true - [<strong>Workflow has not gone through access check</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Workflow has not gone through access check</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TrustedAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TrustedAccess); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Type of the process.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UI Data</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UIData
		{
			get { return Entity.GetAttributeValue<string>(Fields.UIData); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UI Flow Type</para>
		/// <para><strong>Description</strong>: Type of the UI Flow process.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.UIFlowType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.UIFlowType? UIFlowType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UIFlowType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.UIFlowType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UIFlowType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UIFlowType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Name</para>
		/// <para><strong>Description</strong>: Unique name of the process</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 256</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update Stage</para>
		/// <para><strong>Description</strong>: Select the stage a process will be triggered on update.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.WorkflowOptionSets.UpdateStage"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.WorkflowOptionSets.UpdateStage? UpdateStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpdateStage);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.WorkflowOptionSets.UpdateStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpdateStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpdateStage] = null;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process</para>
		/// <para><strong>Description</strong>: Unique identifier of the process.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? WorkflowIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.WorkflowIdUnique); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: XAML that defines the process.</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Xaml
		{
			get { return Entity.GetAttributeValue<string>(Fields.Xaml); }
			set { Entity.Attributes[Fields.Xaml] = value; }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}