//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum DefaultSyncDirection
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bidirectional</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bidirectional = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToCRM</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ToCRM = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToExchange</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ToExchange = 1
	}
	public enum SyncDirection
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bidirectional</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Bidirectional = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToCRM</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		ToCRM = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ToExchange</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ToExchange = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SyncAttributeMapping : EntityBase
	{
		public struct Fields
		{
			public const string AllowedSyncDirection = "allowedsyncdirection";
			public const string AttributeCRMName = "attributecrmname";
			public const string AttributeExchangeName = "attributeexchangename";
			public const string ComponentState = "componentstate";
			public const string ComputedProperties = "computedproperties";
			public const string DefaultSyncDirection = "defaultsyncdirection";
			public const string EntityTypeCode = "entitytypecode";
			public const string IsComputed = "iscomputed";
			public const string IsManaged = "ismanaged";
			public const string MappingName = "mappingname";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string ParentSyncAttributeMappingId = "parentsyncattributemappingid";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SyncAttributeMappingId = "syncattributemappingid";
			public const string SyncAttributeMappingIdUnique = "syncattributemappingidunique";
			public const string SyncAttributeMappingProfileId = "syncattributemappingprofileid";
			public const string SyncDirection = "syncdirection";
		}
		public const string EntityLogicalName = "syncattributemapping";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1401;
		public const string EntityCollectionSchemaName = "SyncAttributeMappings";
		public const string EntityDisplayCollectionName = "Sync Attribute Mappings";
		public const string DisplayName = "Sync Attribute Mapping";
		public const string EntitySetName = "syncattributemappings";
		public const string EntityLogicalCollectionName = "syncattributemappings";
		public const string EntityPrimaryIdAttribute = "syncattributemappingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "SyncAttributeMapping";
		[DebuggerNonUserCode()]
		public SyncAttributeMapping()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SyncAttributeMapping(Guid SyncAttributeMappingId)
		{
			Entity = new Entity(EntityLogicalName, SyncAttributeMappingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SyncAttributeMapping(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SyncAttributeMapping"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SyncAttributeMapping(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SyncAttributeMapping"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SyncAttributeMapping(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SyncAttributeMapping(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SyncAttributeMapping"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SyncAttributeMapping(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SyncAttributeMapping(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SyncAttributeMapping(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed Sync Directions</para>
		/// <para><strong>Description</strong>: Allowed Sync Directions</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: -1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AllowedSyncDirection
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AllowedSyncDirection); }
			set { Entity.Attributes[Fields.AllowedSyncDirection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CRM Name of the attribute for which this mapping is defined</para>
		/// <para><strong>Description</strong>: CRM Attribute Name.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeCRMName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeCRMName); }
			set { Entity.Attributes[Fields.AttributeCRMName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Name of the attribute for which this mapping is defined</para>
		/// <para><strong>Description</strong>: Exchange Attribute Name.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeExchangeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeExchangeName); }
			set { Entity.Attributes[Fields.AttributeExchangeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Computed Properties for one attribute</para>
		/// <para><strong>Description</strong>: Computed Properties.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ComputedProperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.ComputedProperties); }
			set { Entity.Attributes[Fields.ComputedProperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync Direction</para>
		/// <para><strong>Description</strong>: Default Sync Direction</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.DefaultSyncDirection"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.DefaultSyncDirection.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.DefaultSyncDirection? DefaultSyncDirection
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DefaultSyncDirection);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.DefaultSyncDirection)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DefaultSyncDirection] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DefaultSyncDirection] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name of the Entity for which this attribute mapping is defined</para>
		/// <para><strong>Description</strong>: Entity name.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityTypeCode2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityTypeCode); }
			set { Entity.Attributes[Fields.EntityTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Computed</para>
		/// <para><strong>Description</strong>: Indicates whether the mapping is a computed property</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsComputed
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsComputed); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name of the attribute for which this mapping is defined</para>
		/// <para><strong>Description</strong>: Attribute Name.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MappingName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MappingName); }
			set { Entity.Attributes[Fields.MappingName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Sync-Attribute Mapping</para>
		/// <para><strong>Description</strong>: Parent Sync-Attribute Mapping to which this mapping belongs</para>
		/// <para><strong>Lookup</strong>: <see cref="syncattributemapping"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentSyncAttributeMappingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentSyncAttributeMappingId); }
			set { Entity.Attributes[Fields.ParentSyncAttributeMappingId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync-Attribute Mapping Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the Sync-Attribute Mapping.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SyncAttributeMappingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SyncAttributeMappingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync-Attribute Mapping</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SyncAttributeMappingIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SyncAttributeMappingIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile</para>
		/// <para><strong>Description</strong>: Unique identifier of profile to which this mapping belongs.</para>
		/// <para><strong>Lookup</strong>: <see cref="syncattributemappingprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SyncAttributeMappingProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SyncAttributeMappingProfileId); }
			set { Entity.Attributes[Fields.SyncAttributeMappingProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sync Direction</para>
		/// <para><strong>Description</strong>: Sync Direction</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.SyncDirection"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.SyncDirection.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.SyncDirection? SyncDirection
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SyncDirection);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SyncAttributeMappingOptionSets.SyncDirection)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SyncDirection] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SyncDirection] = null;
			}
		}
	}
}