//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:47:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.MonthlyFiscalCalendarOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class MonthlyFiscalCalendar : EntityBase
	{
		public struct Fields
		{
			public const string BusinessUnitId = "businessunitid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EffectiveOn = "effectiveon";
			public const string ExchangeRate = "exchangerate";
			public const string FiscalPeriodType = "fiscalperiodtype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Period1 = "month1";
			public const string Period1_Base = "month1_base";
			public const string Period10 = "month10";
			public const string Period10_Base = "month10_base";
			public const string Period11 = "month11";
			public const string Period11_Base = "month11_base";
			public const string Period12 = "month12";
			public const string Period12_Base = "month12_base";
			public const string Period2 = "month2";
			public const string Period2_Base = "month2_base";
			public const string Period3 = "month3";
			public const string Period3_Base = "month3_base";
			public const string Period4 = "month4";
			public const string Period4_Base = "month4_base";
			public const string Period5 = "month5";
			public const string Period5_Base = "month5_base";
			public const string Period6 = "month6";
			public const string Period6_Base = "month6_base";
			public const string Period7 = "month7";
			public const string Period7_Base = "month7_base";
			public const string Period8 = "month8";
			public const string Period8_Base = "month8_base";
			public const string Period9 = "month9";
			public const string Period9_Base = "month9_base";
			public const string SalesPersonId = "salespersonid";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UserFiscalCalendarId = "userfiscalcalendarid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "monthlyfiscalcalendar";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2003;
		public const string EntityCollectionSchemaName = "MonthlyFiscalCalendars";
		public const string EntityDisplayCollectionName = "Monthly Fiscal Calendars";
		public const string DisplayName = "Monthly Fiscal Calendar";
		public const string EntitySetName = "monthlyfiscalcalendars";
		public const string EntityLogicalCollectionName = "monthlyfiscalcalendars";
		public const string EntityPrimaryIdAttribute = "userfiscalcalendarid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "MonthlyFiscalCalendar";
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar(Guid MonthlyFiscalCalendarId)
		{
			Entity = new Entity(EntityLogicalName, MonthlyFiscalCalendarId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MonthlyFiscalCalendar"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MonthlyFiscalCalendar"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new MonthlyFiscalCalendar(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="MonthlyFiscalCalendar"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new MonthlyFiscalCalendar(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public MonthlyFiscalCalendar(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - Required - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the fiscal calendar.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Date and time when the quota for the monthly fiscal calendar was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the monthlyfiscalcalendar.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Date and time when the monthly fiscal calendar sales quota takes effect.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? EffectiveOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.EffectiveOn); }
			set { Entity.Attributes[Fields.EffectiveOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the monthly fiscal calendar with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Type of fiscal period used in the sales quota.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FiscalPeriodType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FiscalPeriodType); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the quota for the monthly fiscal calendar.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Date and time when the quota for the monthly fiscal calendar was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the monthlyfiscalcalendar.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the first month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period1
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period1);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period1] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period1] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the first month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period1_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period1_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the tenth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period10
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period10);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period10] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period10] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the tenth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period10_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period10_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the eleventh month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period11
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period11);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period11] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period11] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the eleventh month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period11_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period11_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the twelfth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period12
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period12);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period12] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period12] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the twelfth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period12_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period12_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the second month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period2
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period2);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period2] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period2] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the second month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period2_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period2_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the third month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period3
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period3);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period3] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period3] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the third month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period3_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period3_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the fourth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period4
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period4);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period4] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period4] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the fourth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period4_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period4_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the fifth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period5
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period5);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period5] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period5] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the fifth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period5_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period5_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the sixth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period6
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period6);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period6] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period6] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the sixth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period6_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period6_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the seventh month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period7
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period7);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period7] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period7] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the seventh month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period7_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period7_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the eighth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period8
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period8);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period8] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period8] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the eighth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period8_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period8_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Sales quota for the ninth month in the fiscal year.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period9
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period9);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Period9] = new Money(value.Value);
				else
					Entity.Attributes[Fields.Period9] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Base currency equivalent of the sales quota for the ninth month in the fiscal year.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Period9_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.Period9_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the associated salesperson.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SalesPersonId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SalesPersonId); }
			set { Entity.Attributes[Fields.SalesPersonId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the monthly fiscal calendar.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier of the monthly fiscal calendar.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserFiscalCalendarId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserFiscalCalendarId); }
			set { Entity.Attributes[Fields.UserFiscalCalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}