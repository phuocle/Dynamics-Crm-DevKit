//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets
{
	public enum msdynmkt_validationfcm
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Checking ...</para>
		/// <para><strong>Value</strong>: 295,660,001</para>
		/// </summary>
		Checking = 295_660_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 295,660,003</para>
		/// </summary>
		Invalid = 295_660_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 295,660,000</para>
		/// </summary>
		Not_started = 295_660_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 295,660,002</para>
		/// </summary>
		Valid = 295_660_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid connected</para>
		/// <para><strong>Value</strong>: 295,660,004</para>
		/// </summary>
		Valid_connected = 295_660_004
	}
	public enum msdynmkt_validationios
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Checking ...</para>
		/// <para><strong>Value</strong>: 295,660,001</para>
		/// </summary>
		Checking = 295_660_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 295,660,003</para>
		/// </summary>
		Invalid = 295_660_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 295,660,000</para>
		/// </summary>
		Not_started = 295_660_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 295,660,002</para>
		/// </summary>
		Valid = 295_660_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid connected</para>
		/// <para><strong>Value</strong>: 295,660,004</para>
		/// </summary>
		Valid_connected = 295_660_004
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_mobileapplication : EntityBase
	{
		public struct Fields
		{
			public const string msdynmkt_activefcm = "msdynmkt_activefcm";
			public const string msdynmkt_activeios = "msdynmkt_activeios";
			public const string msdynmkt_apikey = "msdynmkt_apikey";
			public const string msdynmkt_apiToken = "msdynmkt_apitoken";
			public const string msdynmkt_applicationmode = "msdynmkt_applicationmode";
			public const string msdynmkt_applicationnicknameapns = "msdynmkt_applicationnicknameapns";
			public const string msdynmkt_applicationnicknamefcm = "msdynmkt_applicationnicknamefcm";
			public const string msdynmkt_authenticationmode = "msdynmkt_authenticationmode";
			public const string msdynmkt_BundleId = "msdynmkt_bundleid";
			public const string msdynmkt_certificate = "msdynmkt_certificate";
			public const string msdynmkt_CertificateName = "msdynmkt_certificatename";
			public const string msdynmkt_description = "msdynmkt_description";
			public const string msdynmkt_endpoint = "msdynmkt_endpoint";
			public const string msdynmkt_isconnected = "msdynmkt_isconnected";
			public const string msdynmkt_keyId = "msdynmkt_keyid";
			public const string msdynmkt_mobileapplicationId = "msdynmkt_mobileapplicationid";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_organizationid = "msdynmkt_organizationid";
			public const string msdynmkt_password = "msdynmkt_password";
			public const string msdynmkt_signingKey = "msdynmkt_signingkey";
			public const string msdynmkt_teamId = "msdynmkt_teamid";
			public const string msdynmkt_testmessage = "msdynmkt_testmessage";
			public const string msdynmkt_tokencopied = "msdynmkt_tokencopied";
			public const string msdynmkt_validationfcm = "msdynmkt_validationfcm";
			public const string msdynmkt_validationios = "msdynmkt_validationios";
			public const string OverriddenCreatedOn = "overriddencreatedon";
		}
		public const string EntityLogicalName = "msdynmkt_mobileapplication";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11334;
		public const string EntityCollectionSchemaName = "msdynmkt_mobileapplications";
		public const string EntityDisplayCollectionName = "Mobile app configurations";
		public const string DisplayName = "Mobile app configuration";
		public const string EntitySetName = "msdynmkt_mobileapplications";
		public const string EntityLogicalCollectionName = "msdynmkt_mobileapplications";
		public const string EntityPrimaryIdAttribute = "msdynmkt_mobileapplicationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_mobileapplication";
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication(Guid msdynmkt_mobileapplicationId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_mobileapplicationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileapplication"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileapplication"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_mobileapplication(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_mobileapplication"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_mobileapplication(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_mobileapplication(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>On</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_activefcm
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_activefcm); }
			set { Entity.Attributes[Fields.msdynmkt_activefcm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>On</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_activeios
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_activeios); }
			set { Entity.Attributes[Fields.msdynmkt_activeios] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API token</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_apikey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_apikey); }
			set { Entity.Attributes[Fields.msdynmkt_apikey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: API token</para>
		/// <para><strong>Description</strong>: Unique identifier for API token associated with mobile application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_apiToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_apiToken); }
			set { Entity.Attributes[Fields.msdynmkt_apiToken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application mode</para>
		/// <para><strong>Two Option</strong> - [<strong>Sandbox</strong>]: true - [<strong>Production</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Production</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_applicationmode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_applicationmode); }
			set { Entity.Attributes[Fields.msdynmkt_applicationmode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: iOS app</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_applicationnicknameapns
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_applicationnicknameapns); }
			set { Entity.Attributes[Fields.msdynmkt_applicationnicknameapns] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android app</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_applicationnicknamefcm
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_applicationnicknamefcm); }
			set { Entity.Attributes[Fields.msdynmkt_applicationnicknamefcm] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authentication mode</para>
		/// <para><strong>Two Option</strong> - [<strong>Token</strong>]: true - [<strong>Certificate</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Certificate</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_authenticationmode
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_authenticationmode); }
			set { Entity.Attributes[Fields.msdynmkt_authenticationmode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bundle Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_BundleId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_BundleId); }
			set { Entity.Attributes[Fields.msdynmkt_BundleId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Upload certificate</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_certificate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_certificate); }
			set { Entity.Attributes[Fields.msdynmkt_certificate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Certificate name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_CertificateName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_CertificateName); }
			set { Entity.Attributes[Fields.msdynmkt_CertificateName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: The description of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_description); }
			set { Entity.Attributes[Fields.msdynmkt_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Public endpoint</para>
		/// <para><strong>Description</strong>: The public endpoint.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_endpoint
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_endpoint); }
			set { Entity.Attributes[Fields.msdynmkt_endpoint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is connected</para>
		/// <para><strong>Description</strong>: Is ready to be used</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_isconnected
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_isconnected); }
			set { Entity.Attributes[Fields.msdynmkt_isconnected] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Key Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_keyId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_keyId); }
			set { Entity.Attributes[Fields.msdynmkt_keyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Application Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_mobileapplicationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_mobileapplicationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: The organization id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_organizationid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_organizationid); }
			set { Entity.Attributes[Fields.msdynmkt_organizationid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Password</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_password
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_password); }
			set { Entity.Attributes[Fields.msdynmkt_password] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Key Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_signingKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_signingKey); }
			set { Entity.Attributes[Fields.msdynmkt_signingKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Team Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_teamId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_teamId); }
			set { Entity.Attributes[Fields.msdynmkt_teamId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Test message</para>
		/// <para><strong>Description</strong>: Notification message for test send</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_testmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_testmessage); }
			set { Entity.Attributes[Fields.msdynmkt_testmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Copied</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_tokencopied
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_tokencopied); }
			set { Entity.Attributes[Fields.msdynmkt_tokencopied] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Android validation status</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationfcm"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationfcm.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationfcm? msdynmkt_validationfcm
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_validationfcm);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationfcm)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_validationfcm] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_validationfcm] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: iOS validation status</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationios"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationios.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationios? msdynmkt_validationios
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_validationios);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_mobileapplicationOptionSets.msdynmkt_validationios)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_validationios] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_validationios] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
	}
}