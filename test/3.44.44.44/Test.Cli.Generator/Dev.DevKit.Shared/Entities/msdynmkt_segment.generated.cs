//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets
{
	public enum msdynmkt_scope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Business unit</para>
		/// <para><strong>Value</strong>: 270,100,001</para>
		/// </summary>
		Business_unit = 270_100_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Value</strong>: 270,100,000</para>
		/// </summary>
		Organization = 270_100_000
	}
	public enum msdynmkt_source
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Insights</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Customer_Insights = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Marketing = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Real-time Journeys</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Real_time_Journeys = 12
	}
	public enum msdynmkt_type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamic</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Dynamic = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Expansion</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Expansion = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Static</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Static = 10
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ComputedWithWarnings</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		ComputedWithWarnings = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Computing</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Computing = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Deleted = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Error = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Exporting</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Exporting = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Stopped = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Stopping = 8
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_segment : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_baseentitylogicalname = "msdynmkt_baseentitylogicalname";
			public const string msdynmkt_cdmmanifestrelativepath = "msdynmkt_cdmmanifestrelativepath";
			public const string msdynmkt_cdmpartitionprimarykeycolumn = "msdynmkt_cdmpartitionprimarykeycolumn";
			public const string msdynmkt_datalakefolderid = "msdynmkt_datalakefolderid";
			public const string msdynmkt_description = "msdynmkt_description";
			public const string msdynmkt_displayname = "msdynmkt_displayname";
			public const string msdynmkt_lastevaluated = "msdynmkt_lastevaluated";
			public const string msdynmkt_lastexportedat = "msdynmkt_lastexportedat";
			public const string msdynmkt_lastupdatedon = "msdynmkt_lastupdatedon";
			public const string msdynmkt_lastusedinjourney = "msdynmkt_lastusedinjourney";
			public const string msdynmkt_lastusedinjourneyby = "msdynmkt_lastusedinjourneyby";
			public const string msdynmkt_membercount = "msdynmkt_membercount";
			public const string msdynmkt_membercount_Date = "msdynmkt_membercount_date";
			public const string msdynmkt_membercount_State = "msdynmkt_membercount_state";
			public const string msdynmkt_publishedjourneycount = "msdynmkt_publishedjourneycount";
			public const string msdynmkt_scope = "msdynmkt_scope";
			public const string msdynmkt_segmentId = "msdynmkt_segmentid";
			public const string msdynmkt_source = "msdynmkt_source";
			public const string msdynmkt_sourcesegmentcreatedby = "msdynmkt_sourcesegmentcreatedby";
			public const string msdynmkt_sourcesegmentcreatedon = "msdynmkt_sourcesegmentcreatedon";
			public const string msdynmkt_sourcesegmentuid = "msdynmkt_sourcesegmentuid";
			public const string msdynmkt_sourcesegmenturi = "msdynmkt_sourcesegmenturi";
			public const string msdynmkt_timerequiredby = "msdynmkt_timerequiredby";
			public const string msdynmkt_timerequiredend = "msdynmkt_timerequiredend";
			public const string msdynmkt_type = "msdynmkt_type";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_segment";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11254;
		public const string EntityCollectionSchemaName = "msdynmkt_segments";
		public const string EntityDisplayCollectionName = "Segments";
		public const string DisplayName = "Segment";
		public const string EntitySetName = "msdynmkt_segments";
		public const string EntityLogicalCollectionName = "msdynmkt_segments";
		public const string EntityPrimaryIdAttribute = "msdynmkt_segmentid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_sourcesegmentuid";
		public const string EntitySchemaName = "msdynmkt_segment";
		[DebuggerNonUserCode()]
		public msdynmkt_segment()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_segment(Guid msdynmkt_segmentId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_segmentId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_segment(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_segment"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_segment(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_segment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_segment(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_segment(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_segment"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_segment(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_segment(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_segment(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Entity Logical Name</para>
		/// <para><strong>Description</strong>: The logical name of the entity of the segment members</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_baseentitylogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_baseentitylogicalname); }
			set { Entity.Attributes[Fields.msdynmkt_baseentitylogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CDM Manifest Relative Path</para>
		/// <para><strong>Description</strong>: CDM manifest path relative to the data lake folder path.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_cdmmanifestrelativepath
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_cdmmanifestrelativepath); }
			set { Entity.Attributes[Fields.msdynmkt_cdmmanifestrelativepath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CDM Partition Primary Key Column</para>
		/// <para><strong>Description</strong>: The column name of the id field in actual segment member data (CDM partitions)</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_cdmpartitionprimarykeycolumn
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_cdmpartitionprimarykeycolumn); }
			set { Entity.Attributes[Fields.msdynmkt_cdmpartitionprimarykeycolumn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Lake Folder Id</para>
		/// <para><strong>Description</strong>: Reference to the data lake folder where actual segment member data (CDM partitions) is</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="datalakefolder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_datalakefolderid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_datalakefolderid); }
			set { Entity.Attributes[Fields.msdynmkt_datalakefolderid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_description); }
			set { Entity.Attributes[Fields.msdynmkt_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Name</para>
		/// <para><strong>Description</strong>: Display name.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_displayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_displayname); }
			set { Entity.Attributes[Fields.msdynmkt_displayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last evaluation time</para>
		/// <para><strong>Description</strong>: Last time when this was evaluated for journey associations.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_lastevaluatedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_lastevaluated); }
			set { Entity.Attributes[Fields.msdynmkt_lastevaluated] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Exported At</para>
		/// <para><strong>Description</strong>: Date and time when the segment was last export for consumption by internal services.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_lastexportedatUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_lastexportedat); }
			set { Entity.Attributes[Fields.msdynmkt_lastexportedat] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Updated On</para>
		/// <para><strong>Description</strong>: Last updated on.</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_lastupdatedon
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_lastupdatedon); }
			set { Entity.Attributes[Fields.msdynmkt_lastupdatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last used</para>
		/// <para><strong>Description</strong>: Last time when this segment was used in a journey.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_lastusedinjourneyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_lastusedinjourney); }
			set { Entity.Attributes[Fields.msdynmkt_lastusedinjourney] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last used by</para>
		/// <para><strong>Description</strong>: The name the user who last associated a journey with this segment.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_lastusedinjourneyby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_lastusedinjourneyby); }
			set { Entity.Attributes[Fields.msdynmkt_lastusedinjourneyby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Member Count</para>
		/// <para><strong>Description</strong>: Member count.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_membercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_membercount); }
			set { Entity.Attributes[Fields.msdynmkt_membercount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Member Count (Last Updated On)</para>
		/// <para><strong>Description</strong>: Last Updated time of rollup field Member Count.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_membercount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_membercount_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Member Count (State)</para>
		/// <para><strong>Description</strong>: State of rollup field Member Count.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_membercount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_membercount_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Live journey count</para>
		/// <para><strong>Description</strong>: The number of live journeys associated with the segment</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_publishedjourneycount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_publishedjourneycount); }
			set { Entity.Attributes[Fields.msdynmkt_publishedjourneycount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Scope</para>
		/// <para><strong>Description</strong>: Business-unit scope for selecting segment members</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_scope"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_scope.Organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_scope? msdynmkt_scope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_scope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_scope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_scope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_scope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_segmentId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_segmentId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source</para>
		/// <para><strong>Description</strong>: Source.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_source"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_source.Marketing"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_source? msdynmkt_source
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_source);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_source)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_source] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_source] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Segment Created By</para>
		/// <para><strong>Description</strong>: The creator of the source segment.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sourcesegmentcreatedby
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sourcesegmentcreatedby); }
			set { Entity.Attributes[Fields.msdynmkt_sourcesegmentcreatedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Segment Created On</para>
		/// <para><strong>Description</strong>: Date and time when the source segment was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_sourcesegmentcreatedon
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_sourcesegmentcreatedon); }
			set { Entity.Attributes[Fields.msdynmkt_sourcesegmentcreatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Segment Uid</para>
		/// <para><strong>Description</strong>: Unique identifier of the source segment.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sourcesegmentuid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sourcesegmentuid); }
			set { Entity.Attributes[Fields.msdynmkt_sourcesegmentuid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Segment Uri</para>
		/// <para><strong>Description</strong>: Uri to the source segment.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sourcesegmenturi
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sourcesegmenturi); }
			set { Entity.Attributes[Fields.msdynmkt_sourcesegmenturi] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time required by</para>
		/// <para><strong>Description</strong>: Date and time when the segment is first required by dependent services.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_timerequiredbyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_timerequiredby); }
			set { Entity.Attributes[Fields.msdynmkt_timerequiredby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time required end</para>
		/// <para><strong>Description</strong>: Date and time when the segment is last required by dependent services.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_timerequiredendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_timerequiredend); }
			set { Entity.Attributes[Fields.msdynmkt_timerequiredend] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Type.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_type.Static"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_type? msdynmkt_type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.msdynmkt_type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_type] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the msdynmkt_segment</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the msdynmkt_segment</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}