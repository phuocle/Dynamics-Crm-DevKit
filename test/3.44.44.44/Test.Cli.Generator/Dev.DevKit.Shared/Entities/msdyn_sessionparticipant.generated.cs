//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets
{
	public enum msdyn_consultmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chat</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Chat = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chat And Voice</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Chat_And_Voice = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Voice = 2
	}
	public enum msdyn_conversationaccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Default = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Private</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Private = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Public = 1
	}
	public enum msdyn_externalparticipantchanneltype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 426,120,001</para>
		/// </summary>
		Microsoft_Teams = 426_120_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Number</para>
		/// <para><strong>Value</strong>: 426,120,000</para>
		/// </summary>
		Phone_Number = 426_120_000
	}
	public enum msdyn_mode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Consult</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Consult = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monitor</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Monitor = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Preview</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Preview = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Primary = 192_350_002
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sessionparticipant : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_activechattime = "msdyn_activechattime";
			public const string msdyn_activedirectoryuserid = "msdyn_activedirectoryuserid";
			public const string msdyn_activetime = "msdyn_activetime";
			public const string msdyn_activewrapuptime = "msdyn_activewrapuptime";
			public const string msdyn_addedon = "msdyn_addedon";
			public const string msdyn_agentid = "msdyn_agentid";
			public const string msdyn_assignreason = "msdyn_assignreason";
			public const string msdyn_cdsqueueid = "msdyn_cdsqueueid";
			public const string msdyn_consultmode = "msdyn_consultmode";
			public const string msdyn_conversationaccess = "msdyn_conversationaccess";
			public const string msdyn_externalparticipantchannel = "msdyn_externalparticipantchannel";
			public const string msdyn_externalparticipantchanneltype = "msdyn_externalparticipantchanneltype";
			public const string msdyn_holdtime = "msdyn_holdtime";
			public const string msdyn_idletime = "msdyn_idletime";
			public const string msdyn_inactivetime = "msdyn_inactivetime";
			public const string msdyn_joinedon = "msdyn_joinedon";
			public const string msdyn_lastupdatedon = "msdyn_lastupdatedon";
			public const string msdyn_lefton = "msdyn_lefton";
			public const string msdyn_leftonreason = "msdyn_leftonreason";
			public const string msdyn_mode = "msdyn_mode";
			public const string msdyn_modifiedon = "msdyn_modifiedon";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_omnichannelsession = "msdyn_omnichannelsession";
			public const string msdyn_sessionparticipantId = "msdyn_sessionparticipantid";
			public const string msdyn_startactivetime = "msdyn_startactivetime";
			public const string msdyn_startactivewrapuptime = "msdyn_startactivewrapuptime";
			public const string msdyn_startholdtime = "msdyn_startholdtime";
			public const string msdyn_startidletime = "msdyn_startidletime";
			public const string msdyn_startinactivetime = "msdyn_startinactivetime";
			public const string msdyn_starttalktime = "msdyn_starttalktime";
			public const string msdyn_talktime = "msdyn_talktime";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_sessionparticipant";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10728;
		public const string EntityCollectionSchemaName = "msdyn_sessionparticipants";
		public const string EntityDisplayCollectionName = "Session participants";
		public const string DisplayName = "Session participant";
		public const string EntitySetName = "msdyn_sessionparticipants";
		public const string EntityLogicalCollectionName = "msdyn_sessionparticipants";
		public const string EntityPrimaryIdAttribute = "msdyn_sessionparticipantid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_sessionparticipant";
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Guid msdyn_sessionparticipantId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sessionparticipantId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sessionparticipant"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sessionparticipant"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sessionparticipant(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sessionparticipant"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sessionparticipant(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sessionparticipant(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active chat time</para>
		/// <para><strong>Description</strong>: Active chat time for an agent in the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_activechattime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_activechattime); }
			set { Entity.Attributes[Fields.msdyn_activechattime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Directory User Id</para>
		/// <para><strong>Description</strong>: Unique identifier of Active Directory User participating in session.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_activedirectoryuserid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_activedirectoryuserid); }
			set { Entity.Attributes[Fields.msdyn_activedirectoryuserid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active time</para>
		/// <para><strong>Description</strong>: Active time for agent on the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_activetime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_activetime); }
			set { Entity.Attributes[Fields.msdyn_activetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active wrapup time</para>
		/// <para><strong>Description</strong>: Active wrapup time for an agent on the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_activewrapuptime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_activewrapuptime); }
			set { Entity.Attributes[Fields.msdyn_activewrapuptime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Added On</para>
		/// <para><strong>Description</strong>: Date and time when agent assigned to the session.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_addedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_addedon); }
			set { Entity.Attributes[Fields.msdyn_addedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent</para>
		/// <para><strong>Description</strong>: Unique identifier of System User participating in session.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_agentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_agentid); }
			set { Entity.Attributes[Fields.msdyn_agentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assign Reason</para>
		/// <para><strong>Description</strong>: The agent assignment reason (This is for internal use only. Customers are advised to not use this property)</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_assignreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_assignreason); }
			set { Entity.Attributes[Fields.msdyn_assignreason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Queue associated with Session Participant.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_cdsqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_cdsqueueid); }
			set { Entity.Attributes[Fields.msdyn_cdsqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Consult Mode</para>
		/// <para><strong>Description</strong>: Consultation mode of the participant</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_consultmode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_consultmode? msdyn_consultmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_consultmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_consultmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_consultmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_consultmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Access</para>
		/// <para><strong>Description</strong>: This field denotes the level of access a participant has in a conversation</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_conversationaccess"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_conversationaccess? msdyn_conversationaccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_conversationaccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_conversationaccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_conversationaccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_conversationaccess] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External channel of participant</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_externalparticipantchannel
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_externalparticipantchannel); }
			set { Entity.Attributes[Fields.msdyn_externalparticipantchannel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel type of external participant</para>
		/// <para><strong>Description</strong>: Channel type of external participant</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_externalparticipantchanneltype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_externalparticipantchanneltype? msdyn_externalparticipantchanneltype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_externalparticipantchanneltype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_externalparticipantchanneltype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_externalparticipantchanneltype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_externalparticipantchanneltype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hold time</para>
		/// <para><strong>Description</strong>: Hold time for an agent on the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_holdtime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_holdtime); }
			set { Entity.Attributes[Fields.msdyn_holdtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Idle time</para>
		/// <para><strong>Description</strong>: Idle time for agent on the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_idletime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_idletime); }
			set { Entity.Attributes[Fields.msdyn_idletime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive time</para>
		/// <para><strong>Description</strong>: Inactive time for agent on the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_inactivetime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_inactivetime); }
			set { Entity.Attributes[Fields.msdyn_inactivetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Joined On</para>
		/// <para><strong>Description</strong>: Date and time when agent accepted the session.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_joinedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_joinedon); }
			set { Entity.Attributes[Fields.msdyn_joinedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Updated On</para>
		/// <para><strong>Description</strong>: Last Updated On timestamp for the record</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_lastupdatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lastupdatedon); }
			set { Entity.Attributes[Fields.msdyn_lastupdatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Left On</para>
		/// <para><strong>Description</strong>: Date and time when agent left the session.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_leftonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_lefton); }
			set { Entity.Attributes[Fields.msdyn_lefton] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LeftOn Reason</para>
		/// <para><strong>Description</strong>: The agent left on reason (This is for internal use only. Customers are advised to not use this property)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_leftonreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_leftonreason); }
			set { Entity.Attributes[Fields.msdyn_leftonreason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mode</para>
		/// <para><strong>Description</strong>: Mode of Agent participation i.e. primary, consult, monitor, preview etc.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_mode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_mode? msdyn_mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.msdyn_mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_mode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session Participant Modified On</para>
		/// <para><strong>Description</strong>: Date and time when session participant information was last modified.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_modifiedon); }
			set { Entity.Attributes[Fields.msdyn_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Omni Channel Session</para>
		/// <para><strong>Description</strong>: Unique identifier of the session associated to the participant.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_omnichannelsession
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_omnichannelsession); }
			set { Entity.Attributes[Fields.msdyn_omnichannelsession] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session participant</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sessionparticipantId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sessionparticipantId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start active time</para>
		/// <para><strong>Description</strong>: Start active time for agent on the session</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startactivetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startactivetime); }
			set { Entity.Attributes[Fields.msdyn_startactivetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start active wrapup time</para>
		/// <para><strong>Description</strong>: Start active wrapup time for an agent on the session</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startactivewrapuptimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startactivewrapuptime); }
			set { Entity.Attributes[Fields.msdyn_startactivewrapuptime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start hold time</para>
		/// <para><strong>Description</strong>: Start hold time for an agent on the session</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startholdtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startholdtime); }
			set { Entity.Attributes[Fields.msdyn_startholdtime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start idle time</para>
		/// <para><strong>Description</strong>: Start idle time for agent on the session</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startidletimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startidletime); }
			set { Entity.Attributes[Fields.msdyn_startidletime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start inactive time</para>
		/// <para><strong>Description</strong>: Start inactive time for agent on the session</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startinactivetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startinactivetime); }
			set { Entity.Attributes[Fields.msdyn_startinactivetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start talk time</para>
		/// <para><strong>Description</strong>: Start talk time for an agent on the session</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_starttalktimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_starttalktime); }
			set { Entity.Attributes[Fields.msdyn_starttalktime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Talk time</para>
		/// <para><strong>Description</strong>: Talk time for an agent on the session</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_talktime
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_talktime); }
			set { Entity.Attributes[Fields.msdyn_talktime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Session participant</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Session participant</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sessionparticipantOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}