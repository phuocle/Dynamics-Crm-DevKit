//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.CanvasAppOptionSets
{
	public enum CanvasAppType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: App Component Library</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		App_Component_Library = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Classic Canvas App</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Classic_Canvas_App = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Canvas Page</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Custom_Canvas_Page = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unified App</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Unified_App = 3
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class CanvasApp : EntityBase
	{
		public struct Fields
		{
			public const string AADCreatedById = "aadcreatedbyid";
			public const string AADLastModifiedById = "aadlastmodifiedbyid";
			public const string AADLastPublishedById = "aadlastpublishedbyid";
			public const string AdminControlBypassConsent = "admincontrolbypassconsent";
			public const string AppComponentDependencies = "appcomponentdependencies";
			public const string AppComponents = "appcomponents";
			public const string AppOpenUri = "appopenuri";
			public const string AppVersion = "appversion";
			public const string Assets = "assets";
			public const string Assets_name = "assets_name";
			public const string AuthorizationReferences = "authorizationreferences";
			public const string BackgroundColor = "backgroundcolor";
			public const string BackgroundImage = "background_image";
			public const string BackgroundImage_name = "background_image_name";
			public const string BypassConsent = "bypassconsent";
			public const string CanConsumeAppPass = "canconsumeapppass";
			public const string CanvasAppId = "canvasappid";
			public const string CanvasAppRowId = "canvasapprowid";
			public const string CanvasAppType = "canvasapptype";
			public const string CdsDependencies = "cdsdependencies";
			public const string CommitMessage = "commitmessage";
			public const string ComponentState = "componentstate";
			public const string ConnectionReferences = "connectionreferences";
			public const string CreatedByClientVersion = "createdbyclientversion";
			public const string CreatedTime = "createdtime";
			public const string DatabaseReferences = "databasereferences";
			public const string Description = "description";
			public const string DisplayName = "displayname";
			public const string Document = "document";
			public const string Document_name = "document_name";
			public const string EmbeddedApp = "embeddedapp";
			public const string GalleryItemId = "galleryitemid";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCdsUpgraded = "iscdsupgraded";
			public const string IsFeaturedApp = "isfeaturedapp";
			public const string IsHeroApp = "isheroapp";
			public const string IsHidden = "ishidden";
			public const string IsManaged = "ismanaged";
			public const string LargeIcon = "large_icon";
			public const string LargeIcon_name = "large_icon_name";
			public const string LastModifiedTime = "lastmodifiedtime";
			public const string LastPublishTime = "lastpublishtime";
			public const string MediumIcon = "medium_icon";
			public const string MediumIcon_name = "medium_icon_name";
			public const string MinClientVersion = "minclientversion";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Publisher = "publisher";
			public const string SmallIcon = "small_icon";
			public const string SmallIcon_name = "small_icon_name";
			public const string SolutionId = "solutionid";
			public const string Status = "status";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string Tags = "tags";
			public const string TeamsIcon = "teams_icon";
			public const string TeamsIcon_name = "teams_icon_name";
			public const string UniqueCanvasAppId = "uniquecanvasappid";
			public const string VersionNumber = "versionnumber";
			public const string WideIcon = "wide_icon";
			public const string WideIcon_name = "wide_icon_name";
		}
		public const string EntityLogicalName = "canvasapp";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 300;
		public const string EntityCollectionSchemaName = "Canvas Apps";
		public const string EntityDisplayCollectionName = "Canvas Apps";
		public const string DisplayName = "Canvas App";
		public const string EntitySetName = "canvasapps";
		public const string EntityLogicalCollectionName = "canvasapps";
		public const string EntityPrimaryIdAttribute = "canvasappid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "CanvasApp";
		[DebuggerNonUserCode()]
		public CanvasApp()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CanvasApp(Guid CanvasAppId)
		{
			Entity = new Entity(EntityLogicalName, CanvasAppId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CanvasApp(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CanvasApp"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public CanvasApp(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CanvasApp"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CanvasApp(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CanvasApp(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="CanvasApp"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public CanvasApp(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new CanvasApp(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public CanvasApp(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the canvas app.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AADCreatedById
		{
			get { return Entity.GetAttributeValue<string>(Fields.AADCreatedById); }
			set { Entity.Attributes[Fields.AADCreatedById] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AADLastModifiedById
		{
			get { return Entity.GetAttributeValue<string>(Fields.AADLastModifiedById); }
			set { Entity.Attributes[Fields.AADLastModifiedById] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Published By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last published the application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AADLastPublishedById
		{
			get { return Entity.GetAttributeValue<string>(Fields.AADLastPublishedById); }
			set { Entity.Attributes[Fields.AADLastPublishedById] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Admin Control Bypass Consent</para>
		/// <para><strong>Description</strong>: Indicates whether the canvas app was marked for bypass consent by an admin.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AdminControlBypassConsent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AdminControlBypassConsent); }
			set { Entity.Attributes[Fields.AdminControlBypassConsent] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The app component dependencies.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 768,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppComponentDependencies
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppComponentDependencies); }
			set { Entity.Attributes[Fields.AppComponentDependencies] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The app components.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 768,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppComponents
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppComponents); }
			set { Entity.Attributes[Fields.AppComponents] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The app open URI.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppOpenUri
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppOpenUri); }
			set { Entity.Attributes[Fields.AppOpenUri] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The application version.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AppVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.AppVersion); }
			set { Entity.Attributes[Fields.AppVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assets</para>
		/// <para><strong>Description</strong>: Assets for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Assets_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Assets_name); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The authorization references of the application.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AuthorizationReferences
		{
			get { return Entity.GetAttributeValue<string>(Fields.AuthorizationReferences); }
			set { Entity.Attributes[Fields.AuthorizationReferences] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The background image color.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BackgroundColor
		{
			get { return Entity.GetAttributeValue<string>(Fields.BackgroundColor); }
			set { Entity.Attributes[Fields.BackgroundColor] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Background Image</para>
		/// <para><strong>Description</strong>: Background image for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BackgroundImage_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.BackgroundImage_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bypass Consent</para>
		/// <para><strong>Description</strong>: Indicates whether the canvas app should bypass consent from consumers.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BypassConsent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BypassConsent); }
			set { Entity.Attributes[Fields.BypassConsent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Can Consume App Pass</para>
		/// <para><strong>Description</strong>: The type of the canvas app.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanConsumeAppPass
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanConsumeAppPass); }
			set { Entity.Attributes[Fields.CanConsumeAppPass] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid CanvasAppId
		{
			get { return Entity.GetAttributeValue<Guid>(Fields.CanvasAppId); }
			set
			{
				Entity.Attributes[Fields.CanvasAppId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CanvasAppRowId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CanvasAppRowId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Canvas App Type</para>
		/// <para><strong>Description</strong>: The type of the canvas app.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.CanvasAppOptionSets.CanvasAppType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CanvasAppOptionSets.CanvasAppType? CanvasAppType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanvasAppType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CanvasAppOptionSets.CanvasAppType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanvasAppType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanvasAppType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: Internal use. The app dependency details.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 768,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CdsDependencies
		{
			get { return Entity.GetAttributeValue<string>(Fields.CdsDependencies); }
			set { Entity.Attributes[Fields.CdsDependencies] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The commit message.</para>
		/// <para><strong>Description</strong>: The commit message of the app.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CommitMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.CommitMessage); }
			set { Entity.Attributes[Fields.CommitMessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.CanvasAppOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.CanvasAppOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.CanvasAppOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Description</strong>: The connection references of the application.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 768,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ConnectionReferences
		{
			get { return Entity.GetAttributeValue<string>(Fields.ConnectionReferences); }
			set { Entity.Attributes[Fields.ConnectionReferences] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The version of the client that was used to author the application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CreatedByClientVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.CreatedByClientVersion); }
			set { Entity.Attributes[Fields.CreatedByClientVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created Time</para>
		/// <para><strong>Description</strong>: Date and time when the application was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedTime); }
			set { Entity.Attributes[Fields.CreatedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The database references of the application.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 768,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DatabaseReferences
		{
			get { return Entity.GetAttributeValue<string>(Fields.DatabaseReferences); }
			set { Entity.Attributes[Fields.DatabaseReferences] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The description.</para>
		/// <para><strong>Description</strong>: The description of the app.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The display name of the app.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisplayName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisplayName); }
			set { Entity.Attributes[Fields.DisplayName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Document</para>
		/// <para><strong>Description</strong>: Document for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Document_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Document_name); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Internal use. The embedded app information.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmbeddedApp
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmbeddedApp); }
			set { Entity.Attributes[Fields.EmbeddedApp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The gallery item identifier</para>
		/// <para><strong>Description</strong>: The gallery item identifier.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string GalleryItemId
		{
			get { return Entity.GetAttributeValue<string>(Fields.GalleryItemId); }
			set { Entity.Attributes[Fields.GalleryItemId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Introduced Version</para>
		/// <para><strong>Description</strong>: Version in which the canvas app is introduced.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is CDS Upgraded</para>
		/// <para><strong>Description</strong>: Indicates whether the canvas app contains CDS 1.0 references.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCdsUpgraded
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCdsUpgraded); }
			set { Entity.Attributes[Fields.IsCdsUpgraded] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Featured App</para>
		/// <para><strong>Description</strong>: Indicates whether the canvas app is a featured app.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFeaturedApp
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFeaturedApp); }
			set { Entity.Attributes[Fields.IsFeaturedApp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Hero App</para>
		/// <para><strong>Description</strong>: Indicates whether the canvas app is a hero app.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsHeroApp
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsHeroApp); }
			set { Entity.Attributes[Fields.IsHeroApp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Hidden</para>
		/// <para><strong>Description</strong>: Indicates whether the canvas app is hidden from a user&apos;s list.</para>
		/// <para><strong>Two Option</strong> - [<strong>True</strong>]: true - [<strong>False</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>False</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsHidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsHidden); }
			set { Entity.Attributes[Fields.IsHidden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Large Icon</para>
		/// <para><strong>Description</strong>: Large icon for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LargeIcon_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.LargeIcon_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Modified Time</para>
		/// <para><strong>Description</strong>: Date and time when the application was last modified.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastModifiedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastModifiedTime); }
			set { Entity.Attributes[Fields.LastModifiedTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Publish Time</para>
		/// <para><strong>Description</strong>: Date and time when the application was last published.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastPublishTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastPublishTime); }
			set { Entity.Attributes[Fields.LastPublishTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Medium Icon</para>
		/// <para><strong>Description</strong>: Medium icon for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MediumIcon_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.MediumIcon_name); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The version of the client that was used to author the application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MinClientVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.MinClientVersion); }
			set { Entity.Attributes[Fields.MinClientVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CanvasApp Name</para>
		/// <para><strong>Description</strong>: Name of the CanvasApp</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the canvas app.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The publisher of the app.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Publisher
		{
			get { return Entity.GetAttributeValue<string>(Fields.Publisher); }
			set { Entity.Attributes[Fields.Publisher] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Small Icon</para>
		/// <para><strong>Description</strong>: Small icon for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SmallIcon_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.SmallIcon_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: A value indicating whether the application is ready for consumption.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Status
		{
			get { return Entity.GetAttributeValue<string>(Fields.Status); }
			set { Entity.Attributes[Fields.Status] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Description</strong>: The metadata tags of the application.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Tags
		{
			get { return Entity.GetAttributeValue<string>(Fields.Tags); }
			set { Entity.Attributes[Fields.Tags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Icon</para>
		/// <para><strong>Description</strong>: Teams icon for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TeamsIcon_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.TeamsIcon_name); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique CanvasApp Id</para>
		/// <para><strong>Description</strong>: The globally unique canvas app id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueCanvasAppId
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueCanvasAppId); }
			set { Entity.Attributes[Fields.UniqueCanvasAppId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Wide Icon</para>
		/// <para><strong>Description</strong>: Wide icon for Canvas Apps.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Virtual</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WideIcon_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.WideIcon_name); }
		}
	}
}