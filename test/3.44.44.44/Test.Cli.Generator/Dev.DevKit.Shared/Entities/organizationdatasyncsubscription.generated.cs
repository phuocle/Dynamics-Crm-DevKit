//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:44
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets
{
	public enum BlobPartitionBy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Day</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Day = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Month</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Month = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Year</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Year = 3
	}
	public enum DataEndpointPostingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DefaultEndpoint</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		DefaultEndpoint = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: HTTPS</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		HTTPS = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: ServiceBusEventHub</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		ServiceBusEventHub = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: ServiceBusTopic</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		ServiceBusTopic = 1
	}
	public enum DataProcessingType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Batch</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Batch = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mixed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Mixed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotificationOnly</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		NotificationOnly = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Streaming</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Streaming = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unknown = 0
	}
	public enum MigrationState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: DsfCloudService</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		DsfCloudService = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: DsfSdk</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		DsfSdk = 1
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Activated</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Activated = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deactivated</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Deactivated = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Uninitialized</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Uninitialized = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class organizationdatasyncsubscription : EntityBase
	{
		public struct Fields
		{
			public const string AadApplicationId = "aadapplicationid";
			public const string BlobPartitionBy = "blobpartitionby";
			public const string CanSyncAllMetadata = "cansyncallmetadata";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataEndpointPostingType = "dataendpointpostingtype";
			public const string DataProcessingType = "dataprocessingtype";
			public const string EndpointSettings = "endpointsettings";
			public const string EntityFilters = "entityfilters";
			public const string EntitySettings = "entitysettings";
			public const string FullSyncOnly = "fullsynconly";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsOutOfBoxSubscription = "isoutofboxsubscription";
			public const string MigrationState = "migrationstate";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string name = "name";
			public const string NeedCopyAttachmentsToBlob = "needcopyattachmentstoblob";
			public const string NeedToCopyFilesToBlob = "needtocopyfilestoblob";
			public const string NewEntities = "newentities";
			public const string NewFnoTables = "newfnotables";
			public const string organizationdatasyncsubscriptionId = "organizationdatasyncsubscriptionid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartnerPrefix = "partnerprefix";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string SubscribedToAllEntities = "subscribedtoallentities";
			public const string SubscriptionEndpointStatus = "subscriptionendpointstatus";
			public const string SubscriptionEntities = "subscriptionentities";
			public const string SubscriptionFnoTables = "subscriptionfnotables";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UnsubscribedEntities = "unsubscribedentities";
			public const string UnsubscribedFnoTables = "unsubscribedfnotables";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "organizationdatasyncsubscription";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10218;
		public const string EntityCollectionSchemaName = "organizationdatasyncsubscriptions";
		public const string EntityDisplayCollectionName = "OrganizationDataSyncSubscriptions";
		public const string DisplayName = "OrganizationDataSyncSubscription";
		public const string EntitySetName = "organizationdatasyncsubscriptions";
		public const string EntityLogicalCollectionName = "organizationdatasyncsubscriptions";
		public const string EntityPrimaryIdAttribute = "organizationdatasyncsubscriptionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "organizationdatasyncsubscription";
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Guid organizationdatasyncsubscriptionId)
		{
			Entity = new Entity(EntityLogicalName, organizationdatasyncsubscriptionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="organizationdatasyncsubscription"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="organizationdatasyncsubscription"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new organizationdatasyncsubscription(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="organizationdatasyncsubscription"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new organizationdatasyncsubscription(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public organizationdatasyncsubscription(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: AadApplicationId</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AadApplicationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.AadApplicationId); }
			set { Entity.Attributes[Fields.AadApplicationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: BlobPartitionBy</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.BlobPartitionBy"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.BlobPartitionBy.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.BlobPartitionBy? BlobPartitionBy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BlobPartitionBy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.BlobPartitionBy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BlobPartitionBy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BlobPartitionBy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CanSyncAllMetadata</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanSyncAllMetadata
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanSyncAllMetadata); }
			set { Entity.Attributes[Fields.CanSyncAllMetadata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DataEndpointPostingType</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataEndpointPostingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataEndpointPostingType? DataEndpointPostingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataEndpointPostingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataEndpointPostingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataEndpointPostingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataEndpointPostingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: DataProcessingType</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataProcessingType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataProcessingType? DataProcessingType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataProcessingType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.DataProcessingType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataProcessingType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataProcessingType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EndpointSettings</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 20,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EndpointSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.EndpointSettings); }
			set { Entity.Attributes[Fields.EndpointSettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityFilters</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 300,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityFilters
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityFilters); }
			set { Entity.Attributes[Fields.EntityFilters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntitySettings</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntitySettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntitySettings); }
			set { Entity.Attributes[Fields.EntitySettings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FullSyncOnly</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? FullSyncOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.FullSyncOnly); }
			set { Entity.Attributes[Fields.FullSyncOnly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: IsOutOfBoxSubscription</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOutOfBoxSubscription
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOutOfBoxSubscription); }
			set { Entity.Attributes[Fields.IsOutOfBoxSubscription] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MigrationState</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.MigrationState"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.MigrationState.DsfCloudService"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.MigrationState? MigrationState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.MigrationState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.MigrationState)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.MigrationState] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.MigrationState] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string name
		{
			get { return Entity.GetAttributeValue<string>(Fields.name); }
			set { Entity.Attributes[Fields.name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NeedCopyAttachmentsToBlob</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NeedCopyAttachmentsToBlob
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NeedCopyAttachmentsToBlob); }
			set { Entity.Attributes[Fields.NeedCopyAttachmentsToBlob] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NeedToCopyFilesToBlob</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? NeedToCopyFilesToBlob
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.NeedToCopyFilesToBlob); }
			set { Entity.Attributes[Fields.NeedToCopyFilesToBlob] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NewEntities</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NewEntities
		{
			get { return Entity.GetAttributeValue<string>(Fields.NewEntities); }
			set { Entity.Attributes[Fields.NewEntities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: NewFnoTables</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NewFnoTables
		{
			get { return Entity.GetAttributeValue<string>(Fields.NewFnoTables); }
			set { Entity.Attributes[Fields.NewFnoTables] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OrganizationDataSyncSubscription</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid organizationdatasyncsubscriptionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.organizationdatasyncsubscriptionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PartnerPrefix</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartnerPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartnerPrefix); }
			set { Entity.Attributes[Fields.PartnerPrefix] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the OrganizationDataSyncSubscription</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the OrganizationDataSyncSubscription</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.organizationdatasyncsubscriptionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SubscribedToAllEntities</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SubscribedToAllEntities
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SubscribedToAllEntities); }
			set { Entity.Attributes[Fields.SubscribedToAllEntities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SubscriptionEndpointStatus</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 6</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SubscriptionEndpointStatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SubscriptionEndpointStatus); }
			set { Entity.Attributes[Fields.SubscriptionEndpointStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: subscriptionentities</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubscriptionEntities
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubscriptionEntities); }
			set { Entity.Attributes[Fields.SubscriptionEntities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: subscriptionfnotables</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SubscriptionFnoTables
		{
			get { return Entity.GetAttributeValue<string>(Fields.SubscriptionFnoTables); }
			set { Entity.Attributes[Fields.SubscriptionFnoTables] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UnsubscribedEntities</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 20,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UnsubscribedEntities
		{
			get { return Entity.GetAttributeValue<string>(Fields.UnsubscribedEntities); }
			set { Entity.Attributes[Fields.UnsubscribedEntities] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UnsubscribedFnoTables</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 20,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UnsubscribedFnoTables
		{
			get { return Entity.GetAttributeValue<string>(Fields.UnsubscribedFnoTables); }
			set { Entity.Attributes[Fields.UnsubscribedFnoTables] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of OrganizationDataSyncSubscription.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}