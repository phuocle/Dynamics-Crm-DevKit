//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class EntityDataProvider : EntityBase
	{
		public struct Fields
		{
			public const string ArchivePlugin = "archiveplugin";
			public const string BulkArchivePlugin = "bulkarchiveplugin";
			public const string BulkRetainPlugin = "bulkretainplugin";
			public const string ComponentState = "componentstate";
			public const string CreateMultiplePlugin = "createmultipleplugin";
			public const string CreatePlugin = "createplugin";
			public const string DataSourceLogicalName = "datasourcelogicalname";
			public const string DeleteMultiplePlugin = "deletemultipleplugin";
			public const string DeletePlugin = "deleteplugin";
			public const string Description = "description";
			public const string EntityDataProviderId = "entitydataproviderid";
			public const string EntityDataProviderIdUnique = "entitydataprovideridunique";
			public const string IntroducedVersion = "introducedversion";
			public const string IsManaged = "ismanaged";
			public const string LookupExpansionEnabled = "lookupexpansionenabled";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string PurgeArchivedContentPlugin = "purgearchivedcontentplugin";
			public const string PurgeRetainedContentPlugin = "purgeretainedcontentplugin";
			public const string RetainPlugin = "retainplugin";
			public const string RetrieveEntityChangesPlugin = "retrieveentitychangesplugin";
			public const string RetrieveMultiplePlugin = "retrievemultipleplugin";
			public const string RetrievePlugin = "retrieveplugin";
			public const string RollbackRetainPlugin = "rollbackretainplugin";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string UpdateMultiplePlugin = "updatemultipleplugin";
			public const string UpdatePlugin = "updateplugin";
			public const string UpsertMultiplePlugin = "upsertmultipleplugin";
			public const string UpsertPlugin = "upsertplugin";
			public const string ValidateArchiveConfigPlugin = "validatearchiveconfigplugin";
			public const string ValidateRetentionConfigPlugin = "validateretentionconfigplugin";
		}
		public const string EntityLogicalName = "entitydataprovider";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 78;
		public const string EntityCollectionSchemaName = "EntityDataProviders";
		public const string EntityDisplayCollectionName = "Virtual Entity Data Providers";
		public const string DisplayName = "Virtual Entity Data Provider";
		public const string EntitySetName = "entitydataproviders";
		public const string EntityLogicalCollectionName = "entitydataproviders";
		public const string EntityPrimaryIdAttribute = "entitydataproviderid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "EntityDataProvider";
		[DebuggerNonUserCode()]
		public EntityDataProvider()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EntityDataProvider(Guid EntityDataProviderId)
		{
			Entity = new Entity(EntityLogicalName, EntityDataProviderId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EntityDataProvider(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EntityDataProvider"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityDataProvider(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EntityDataProvider"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public EntityDataProvider(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new EntityDataProvider(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="EntityDataProvider"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public EntityDataProvider(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new EntityDataProvider(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public EntityDataProvider(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the archiveplugin id that should be run when Archive is invoked</para>
		/// <para><strong>Description</strong>: Contains the archiveplugin id that should be run when Archive is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ArchivePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ArchivePlugin); }
			set { Entity.Attributes[Fields.ArchivePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the bulkarchiveplugin id that should be run when BulkArchive is invoked</para>
		/// <para><strong>Description</strong>: Contains the bulkarchiveplugin id that should be run when BulkArchive is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BulkArchivePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BulkArchivePlugin); }
			set { Entity.Attributes[Fields.BulkArchivePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the bulkretainplugin id that should be run when BulkRetain is invoked</para>
		/// <para><strong>Description</strong>: Contains the bulkretainplugin id that should be run when BulkRetain is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BulkRetainPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BulkRetainPlugin); }
			set { Entity.Attributes[Fields.BulkRetainPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.EntityDataProviderOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the createmultipleplugin id that should be run when CreateMultiple is invoked</para>
		/// <para><strong>Description</strong>: Contains the createmultipleplugin id that should be run when CreateMultiple is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CreateMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CreateMultiplePlugin); }
			set { Entity.Attributes[Fields.CreateMultiplePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create Plugin</para>
		/// <para><strong>Description</strong>: Create Plugin</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CreatePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CreatePlugin); }
			set { Entity.Attributes[Fields.CreatePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Source Entity Logical Name</para>
		/// <para><strong>Description</strong>: When creating a Data Provider, the end user must select the name of the Data Source entity that will be created for the provider.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataSourceLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataSourceLogicalName); }
			set { Entity.Attributes[Fields.DataSourceLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the deletemultipleplugin id that should be run when DeleteMultiple is invoked</para>
		/// <para><strong>Description</strong>: Contains the deletemultipleplugin id that should be run when DeleteMultiple is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DeleteMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DeleteMultiplePlugin); }
			set { Entity.Attributes[Fields.DeleteMultiplePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delete Plugin</para>
		/// <para><strong>Description</strong>: Delete Plugin</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DeletePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DeletePlugin); }
			set { Entity.Attributes[Fields.DeletePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: What is this Data Provider used for and data store technologies does it target?</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Provider</para>
		/// <para><strong>Description</strong>: Unique identifier of the data provider.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EntityDataProviderId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EntityDataProviderId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityDataProviderIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityDataProviderIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Introduced Version</para>
		/// <para><strong>Description</strong>: Version in which the form is introduced.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 48</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: LookupExpansionEnabled</para>
		/// <para><strong>Description</strong>: Enables expansion support for lookups columns. Only applicable to RetrieveMultiple plugin. Enabling this might modify the filter expression supplied to RetrieveMultiple plugin. Default value is false.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? LookupExpansionEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.LookupExpansionEnabled); }
			set { Entity.Attributes[Fields.LookupExpansionEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of this Data Provider. This is the name that appears in the dropdown when creating a new entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OrganizationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the purgearchivedcontentplugin id that should be run when PurgeArchivedContent is invoked</para>
		/// <para><strong>Description</strong>: Contains the purgearchivedcontentplugin id that should be run when PurgeArchivedContent is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PurgeArchivedContentPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PurgeArchivedContentPlugin); }
			set { Entity.Attributes[Fields.PurgeArchivedContentPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the purgeretainedcontentplugin id that should be run when PurgeRetainedContent is invoked</para>
		/// <para><strong>Description</strong>: Contains the purgeretainedcontentplugin id that should be run when PurgeRetainedContent is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? PurgeRetainedContentPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.PurgeRetainedContentPlugin); }
			set { Entity.Attributes[Fields.PurgeRetainedContentPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the retainplugin id that should be run when Retain is invoked</para>
		/// <para><strong>Description</strong>: Contains the retainplugin id that should be run when Retain is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetainPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetainPlugin); }
			set { Entity.Attributes[Fields.RetainPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the retrieveentitychangesplugin id that should be run when RetrieveEntityChanges is invoked</para>
		/// <para><strong>Description</strong>: Contains the retrieveentitychangesplugin id that should be run when RetrieveEntityChanges is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetrieveEntityChangesPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetrieveEntityChangesPlugin); }
			set { Entity.Attributes[Fields.RetrieveEntityChangesPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MultipleRetrieve Plugin</para>
		/// <para><strong>Description</strong>: MultipleRetrieve Plugin</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetrieveMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetrieveMultiplePlugin); }
			set { Entity.Attributes[Fields.RetrieveMultiplePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Retrieve Plugin</para>
		/// <para><strong>Description</strong>: Retrieve Plugin</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RetrievePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RetrievePlugin); }
			set { Entity.Attributes[Fields.RetrievePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the rollbackretainplugin id that should be run when Rollback Retain is invoked</para>
		/// <para><strong>Description</strong>: Contains the rollbackretainplugin id that should be run when Rollback Retain is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RollbackRetainPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RollbackRetainPlugin); }
			set { Entity.Attributes[Fields.RollbackRetainPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the updatemultipleplugin id that should be run when UpdateMultiple is invoked</para>
		/// <para><strong>Description</strong>: Contains the updatemultipleplugin id that should be run when UpdateMultiple is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpdateMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpdateMultiplePlugin); }
			set { Entity.Attributes[Fields.UpdateMultiplePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update Plugin</para>
		/// <para><strong>Description</strong>: Update Plugin</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpdatePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpdatePlugin); }
			set { Entity.Attributes[Fields.UpdatePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the upsertmultipleplugin id that should be run when UpsertMultiple is invoked</para>
		/// <para><strong>Description</strong>: Contains the upsertmultipleplugin id that should be run when UpsertMultiple is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpsertMultiplePlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpsertMultiplePlugin); }
			set { Entity.Attributes[Fields.UpsertMultiplePlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the upsertplugin id that should be run when Upsert is invoked</para>
		/// <para><strong>Description</strong>: Contains the upsertplugin id that should be run when Upsert is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UpsertPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UpsertPlugin); }
			set { Entity.Attributes[Fields.UpsertPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the validatearchiveconfigplugin id that should be run when ValidateArchiveConfig is invoked</para>
		/// <para><strong>Description</strong>: Contains the validatearchiveconfigplugin id that should be run when ValidateArchiveConfig is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ValidateArchiveConfigPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ValidateArchiveConfigPlugin); }
			set { Entity.Attributes[Fields.ValidateArchiveConfigPlugin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contains the validateretentionconfigplugin id that should be run when ValidateRetentionConfig is invoked</para>
		/// <para><strong>Description</strong>: Contains the validateretentionconfigplugin id that should be run when ValidateRetentionConfig is invoked</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ValidateRetentionConfigPlugin
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ValidateRetentionConfigPlugin); }
			set { Entity.Attributes[Fields.ValidateRetentionConfigPlugin] = value; }
		}
	}
}