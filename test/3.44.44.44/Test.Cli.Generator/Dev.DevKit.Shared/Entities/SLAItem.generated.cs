//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:39
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.SLAItemOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class SLAItem : EntityBase
	{
		public struct Fields
		{
			public const string actionflowuniquename = "actionflowuniquename";
			public const string ActionURL = "actionurl";
			public const string AllowPauseResume = "allowpauseresume";
			public const string ApplicableEntity = "applicableentity";
			public const string ApplicableWhenXml = "applicablewhenxml";
			public const string BusinessHoursId = "businesshoursid";
			public const string ChangedAttributeList = "changedattributelist";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string FailureAfter = "failureafter";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdvancedPauseConfiguration = "msdyn_advancedpauseconfiguration";
			public const string msdyn_CustomTimeCalculation = "msdyn_customtimecalculation";
			public const string msdyn_CustomTimeCalculationWorkflowId = "msdyn_customtimecalculationworkflowid";
			public const string msdyn_PauseConfigurationXml = "msdyn_pauseconfigurationxml";
			public const string msdyn_slakpiid = "msdyn_slakpiid";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
			public const string RelatedField = "relatedfield";
			public const string SequenceNumber = "sequencenumber";
			public const string SLAId = "slaid";
			public const string SLAItemId = "slaitemid";
			public const string SLAItemIdUnique = "slaitemidunique";
			public const string SolutionId = "solutionid";
			public const string SuccessConditionsXml = "successconditionsxml";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
			public const string WarnAfter = "warnafter";
			public const string WorkflowId = "workflowid";
		}
		public const string EntityLogicalName = "slaitem";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9751;
		public const string EntityCollectionSchemaName = "SLAItems";
		public const string EntityDisplayCollectionName = "SLA Items";
		public const string DisplayName = "SLA Item";
		public const string EntitySetName = "slaitems";
		public const string EntityLogicalCollectionName = "slaitems";
		public const string EntityPrimaryIdAttribute = "slaitemid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "SLAItem";
		[DebuggerNonUserCode()]
		public SLAItem()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SLAItem(Guid SLAItemId)
		{
			Entity = new Entity(EntityLogicalName, SLAItemId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SLAItem(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SLAItem"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public SLAItem(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SLAItem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SLAItem(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SLAItem(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="SLAItem"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public SLAItem(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new SLAItem(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public SLAItem(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Action Flow Unique Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string actionflowuniquename
		{
			get { return Entity.GetAttributeValue<string>(Fields.actionflowuniquename); }
			set { Entity.Attributes[Fields.actionflowuniquename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Action URL</para>
		/// <para><strong>Description</strong>: Action URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActionURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActionURL); }
			set { Entity.Attributes[Fields.ActionURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Pause and Resume</para>
		/// <para><strong>Description</strong>: Select whether this SLA will allow pausing and resuming during the time calculation.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowPauseResume
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowPauseResume); }
			set { Entity.Attributes[Fields.AllowPauseResume] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Applicable Entity</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicableEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicableEntity); }
			set { Entity.Attributes[Fields.ApplicableEntity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ApplicableWhenXml</para>
		/// <para><strong>Description</strong>: Condition for SLA item</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ApplicableWhenXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ApplicableWhenXml); }
			set { Entity.Attributes[Fields.ApplicableWhenXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Hours</para>
		/// <para><strong>Description</strong>: Choose the business hours for calculating SLA item timelines.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BusinessHoursId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessHoursId); }
			set { Entity.Attributes[Fields.BusinessHoursId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Changed Attribute List</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ChangedAttributeList
		{
			get { return Entity.GetAttributeValue<string>(Fields.ChangedAttributeList); }
			set { Entity.Attributes[Fields.ChangedAttributeList] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.SLAItemOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.SLAItemOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.SLAItemOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the SLA Item</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate between the currency associated with the SLA Item record and the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Failure After</para>
		/// <para><strong>Description</strong>: Select how soon the success criteria must be met until the SLA item is considered failed and failure actions are initiated. The actual duration is based on the business hours as specified in the associated SLA record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FailureAfter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FailureAfter); }
			set { Entity.Attributes[Fields.FailureAfter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Advanced Pause Configuration</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AdvancedPauseConfiguration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AdvancedPauseConfiguration); }
			set { Entity.Attributes[Fields.msdyn_AdvancedPauseConfiguration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Time Calculation Flag</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CustomTimeCalculation
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CustomTimeCalculation); }
			set { Entity.Attributes[Fields.msdyn_CustomTimeCalculation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Time Calculation Workflow</para>
		/// <para><strong>Description</strong>: Unique identifier for Custom Time Calculation Workflow associated with SLA Item.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_CustomTimeCalculationWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_CustomTimeCalculationWorkflowId); }
			set { Entity.Attributes[Fields.msdyn_CustomTimeCalculationWorkflowId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PauseConfigurationXml</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PauseConfigurationXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PauseConfigurationXml); }
			set { Entity.Attributes[Fields.msdyn_PauseConfigurationXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA KPI</para>
		/// <para><strong>Description</strong>: Unique identifier for SLAKPI associated with SLA Item.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_slakpi"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_slakpiid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_slakpiid); }
			set { Entity.Attributes[Fields.msdyn_slakpiid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Type a descriptive name of the service level agreement (SLA) item.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Enter the user or team who owns the SLA. This field is updated every time the item is assigned to a different user.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the SLA Item record.</para>
		/// <para><strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
			set { Entity.Attributes[Fields.OwningUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Related Case Field</para>
		/// <para><strong>Description</strong>: Select the service level agreement (SLA) key performance indicator (KPI) that this SLA Item is created for.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RelatedField
		{
			get { return Entity.GetAttributeValue<string>(Fields.RelatedField); }
			set { Entity.Attributes[Fields.RelatedField] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence</para>
		/// <para><strong>Description</strong>: Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? SequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.SequenceNumber); }
			set { Entity.Attributes[Fields.SequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA</para>
		/// <para><strong>Description</strong>: Unique identifier for SLA associated with SLA Item.</para>
		/// <para><strong>Lookup</strong>: <see cref="sla"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SLAId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SLAId); }
			set { Entity.Attributes[Fields.SLAId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SLA Item</para>
		/// <para><strong>Description</strong>: Unique identifier of the SLA Item.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid SLAItemId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.SLAItemId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SLAItemIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SLAItemIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SuccessConditionsXml</para>
		/// <para><strong>Description</strong>: Condition for SLA item</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SuccessConditionsXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.SuccessConditionsXml); }
			set { Entity.Attributes[Fields.SuccessConditionsXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the SLA Item record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the SLA Item.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Warn After</para>
		/// <para><strong>Description</strong>: Select how soon the success criteria must be met before warning actions are initiated. The actual duration is based on the business hours as specified in the associated SLA record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? WarnAfter
		{
			get { return Entity.GetAttributeValue<int?>(Fields.WarnAfter); }
			set { Entity.Attributes[Fields.WarnAfter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Workflow ID</para>
		/// <para><strong>Description</strong>: Workflow associated with the SLA Item.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowId); }
			set { Entity.Attributes[Fields.WorkflowId] = value; }
		}
	}
}