//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:41
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets
{
	public enum msevtmgt_allowmeetingchat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disabled</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Disabled = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Enabled = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: In-meeting only</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_meeting_only = 100_000_002
	}
	public enum msevtmgt_autoadmittedusers
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Everyone</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Everyone = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Only me</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Only_me = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: People I invite</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		People_I_invite = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: People in my organization and guests</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		People_in_my_organization_and_guests = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: People in my organization, trusted organizations and guests</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		People_in_my_organization_trusted_organizations_and_guests = 100_000_002
	}
	public enum msevtmgt_BookedFlightReservations
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_BookRooms
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_CateringRequired
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Yes = 100_000_002
	}
	public enum msevtmgt_ConfirmedHotelChoices
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_CreateMarketingCollateral
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_creationsource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Dynamics</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Dynamics = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Microsoft_Teams = 100_000_002
	}
	public enum msevtmgt_DefinePackagesandPricing
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_DefineSessions
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_DefineTeam
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_descriptorsyncstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Going_live = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live failed</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Going_live_failed = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Modifying capacity</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Modifying_capacity = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Modifying capacity failed</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Modifying_capacity_failed = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Synced</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Not_Synced = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Synced</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Synced = 100_000_000
	}
	public enum msevtmgt_DevelopMarketingPlan
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_EventDebriefing
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_EventFormat
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Hybrid</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Hybrid = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: On site</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		On_site = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Webinar = 100_000_002
	}
	public enum msevtmgt_EventType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Conference</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Conference = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Demonstration</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Demonstration = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Executive briefing</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Executive_briefing = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Training</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Training = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Webcast</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Webcast = 100_000_005
	}
	public enum msevtmgt_FollowUpOnLeads
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_GuestLogistics
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Yes = 100_000_002
	}
	public enum msevtmgt_IdentifySpeakers
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_IdentifySponsors
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Complete</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Complete = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Incomplete</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Incomplete = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_applicable = 100_000_001
	}
	public enum msevtmgt_istemplate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_Language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Simplified)</para>
		/// <para><strong>Value</strong>: 100,000,009</para>
		/// </summary>
		Chinese_Simplified = 100_000_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Traditional)</para>
		/// <para><strong>Value</strong>: 100,000,013</para>
		/// </summary>
		Chinese_Traditional = 100_000_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Dutch = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: English</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		English = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: French</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		French = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: German</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		German = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew</para>
		/// <para><strong>Value</strong>: 100,000,012</para>
		/// </summary>
		Hebrew = 100_000_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Italian = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese</para>
		/// <para><strong>Value</strong>: 100,000,010</para>
		/// </summary>
		Japanese = 100_000_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean</para>
		/// <para><strong>Value</strong>: 100,000,011</para>
		/// </summary>
		Korean = 100_000_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese</para>
		/// <para><strong>Value</strong>: 100,000,008</para>
		/// </summary>
		Portuguese = 100_000_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Russian = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Spanish = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish</para>
		/// <para><strong>Value</strong>: 100,000,007</para>
		/// </summary>
		Turkish = 100_000_007
	}
	public enum msevtmgt_MakePaymentsDue
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_ManageRegistrationCount
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum msevtmgt_NotifyAuthoritiesOfEvent
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_PlanRegistration
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_PrimaryGoal
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Education</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Education = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Marketing = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Morale</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Morale = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Sales = 100_000_002
	}
	public enum msevtmgt_PublishStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Cancelled</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Cancelled = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Draft = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Going live</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Going_live = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Live = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready to go live</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Ready_to_go_live = 100_000_001
	}
	public enum msevtmgt_RequestSponsorship
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_ScheduleAirportPickups
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_ScheduleSessions
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_SelectSpeakers
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_SelectVendors
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_SendEventInvitation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_SendMarketingMaterial
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_SendPreEventReminders
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_SendThankYouEmails
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_sourcesystem
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound marketing</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Outbound_marketing = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Real-time Journeys</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Real_time_Journeys = 100_000_002
	}
	public enum msevtmgt_streamingprovider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Other</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Other = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Live Events</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Teams_Live_Events = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Meetings</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Teams_Meetings = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Town Hall</para>
		/// <para><strong>Value</strong>: 100,000,006</para>
		/// </summary>
		Teams_Town_Hall = 100_000_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Virtual Events</para>
		/// <para><strong>Value</strong>: 100,000,005</para>
		/// </summary>
		Teams_Virtual_Events = 100_000_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams Webinars</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Teams_Webinars = 100_000_004
	}
	public enum msevtmgt_TeamDebriefing
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Completed = 100_000_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		In_progress = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not applicable</para>
		/// <para><strong>Value</strong>: 100,000,004</para>
		/// </summary>
		Not_applicable = 100_000_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not started</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_started = 100_000_001
	}
	public enum msevtmgt_WaitlistthisEvent
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Yes = 100_000_002
	}
	public enum msevtmgt_websitepreference
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: On a standalone registration page</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		On_a_standalone_registration_page = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: On your own website</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		On_your_own_website = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: This event doesn’t have a website</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		This_event_doesnt_have_a_website = 192_350_003
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_Event : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_EventURLspecified = "msdyncrm_eventurlspecified";
			public const string msdyncrm_marketingformid = "msdyncrm_marketingformid";
			public const string msdyncrm_SessionsCount = "msdyncrm_sessionscount";
			public const string msdyncrm_SessionsCount_Date = "msdyncrm_sessionscount_date";
			public const string msdyncrm_SessionsCount_State = "msdyncrm_sessionscount_state";
			public const string msdyncrm_usemarketingform = "msdyncrm_usemarketingform";
			public const string msdynmkt_bannerimageid = "msdynmkt_bannerimageid";
			public const string msdynmkt_completiondate = "msdynmkt_completiondate";
			public const string msdynmkt_linkedvirtualeventid = "msdynmkt_linkedvirtualeventid";
			public const string msdynmkt_logoimageid = "msdynmkt_logoimageid";
			public const string msevtmgt_allowanonymousregistrations = "msevtmgt_allowanonymousregistrations";
			public const string msevtmgt_allowattendeestounmute = "msevtmgt_allowattendeestounmute";
			public const string msevtmgt_allowcameraforattendees = "msevtmgt_allowcameraforattendees";
			public const string msevtmgt_allowcustomagenda = "msevtmgt_allowcustomagenda";
			public const string msevtmgt_allowexternalpresenters = "msevtmgt_allowexternalpresenters";
			public const string msevtmgt_allowmeetingchat = "msevtmgt_allowmeetingchat";
			public const string msevtmgt_allowpstnsserstobypasslobby = "msevtmgt_allowpstnsserstobypasslobby";
			public const string msevtmgt_allowteamsmeetingreactions = "msevtmgt_allowteamsmeetingreactions";
			public const string msevtmgt_attendeeengagementreport = "msevtmgt_attendeeengagementreport";
			public const string msevtmgt_attendeeurl = "msevtmgt_attendeeurl";
			public const string msevtmgt_autoadmittedusers = "msevtmgt_autoadmittedusers";
			public const string msevtmgt_autorecordingenabled = "msevtmgt_autorecordingenabled";
			public const string msevtmgt_autoregisterwaitlistitems = "msevtmgt_autoregisterwaitlistitems";
			public const string msevtmgt_baserecurrenteventid = "msevtmgt_baserecurrenteventid";
			public const string msevtmgt_BookedFlightReservations = "msevtmgt_bookedflightreservations";
			public const string msevtmgt_BookRooms = "msevtmgt_bookrooms";
			public const string msevtmgt_BudgetAllocated = "msevtmgt_budgetallocated";
			public const string msevtmgt_budgetallocated_Base = "msevtmgt_budgetallocated_base";
			public const string msevtmgt_building = "msevtmgt_building";
			public const string msevtmgt_calendarcontent = "msevtmgt_calendarcontent";
			public const string msevtmgt_calendarcontent_plaintext = "msevtmgt_calendarcontent_plaintext";
			public const string msevtmgt_calendarevent = "msevtmgt_calendarevent";
			public const string msevtmgt_CateringRequired = "msevtmgt_cateringrequired";
			public const string msevtmgt_changemeetingoptions = "msevtmgt_changemeetingoptions";
			public const string msevtmgt_CheckInCount = "msevtmgt_checkincount";
			public const string msevtmgt_ConfirmedHotelChoices = "msevtmgt_confirmedhotelchoices";
			public const string msevtmgt_CountdownInDays = "msevtmgt_countdownindays";
			public const string msevtmgt_createleadsforeventregistrations = "msevtmgt_createleadsforeventregistrations";
			public const string msevtmgt_CreateMarketingCollateral = "msevtmgt_createmarketingcollateral";
			public const string msevtmgt_creationsource = "msevtmgt_creationsource";
			public const string msevtmgt_customeventurl = "msevtmgt_customeventurl";
			public const string msevtmgt_DefinePackagesandPricing = "msevtmgt_definepackagesandpricing";
			public const string msevtmgt_DefineSessions = "msevtmgt_definesessions";
			public const string msevtmgt_DefineTeam = "msevtmgt_defineteam";
			public const string msevtmgt_Description = "msevtmgt_description";
			public const string msevtmgt_descriptorsyncstatus = "msevtmgt_descriptorsyncstatus";
			public const string msevtmgt_DevelopMarketingPlan = "msevtmgt_developmarketingplan";
			public const string msevtmgt_EarlyBirdCutOffDate = "msevtmgt_earlybirdcutoffdate";
			public const string msevtmgt_embedregistrationform = "msevtmgt_embedregistrationform";
			public const string msevtmgt_enablecaptcha = "msevtmgt_enablecaptcha";
			public const string msevtmgt_Enablemultiattendeeregistration = "msevtmgt_enablemultiattendeeregistration";
			public const string msevtmgt_entryexitannouncementsenabled = "msevtmgt_entryexitannouncementsenabled";
			public const string msevtmgt_EventDebriefing = "msevtmgt_eventdebriefing";
			public const string msevtmgt_EventEndDate = "msevtmgt_eventenddate";
			public const string msevtmgt_EventFormat = "msevtmgt_eventformat";
			public const string msevtmgt_EventId = "msevtmgt_eventid";
			public const string msevtmgt_eventimage = "msevtmgt_eventimage";
			public const string msevtmgt_EventStartDate = "msevtmgt_eventstartdate";
			public const string msevtmgt_EventTimeZone = "msevtmgt_eventtimezone";
			public const string msevtmgt_EventTimeZoneName = "msevtmgt_eventtimezonename";
			public const string msevtmgt_EventType = "msevtmgt_eventtype";
			public const string msevtmgt_EventVenueCost = "msevtmgt_eventvenuecost";
			public const string msevtmgt_eventvenuecost_Base = "msevtmgt_eventvenuecost_base";
			public const string msevtmgt_ExpectedOutcome = "msevtmgt_expectedoutcome";
			public const string msevtmgt_FollowUpOnLeads = "msevtmgt_followuponleads";
			public const string msevtmgt_formpagejavascriptcode = "msevtmgt_formpagejavascriptcode";
			public const string msevtmgt_GuestLogistics = "msevtmgt_guestlogistics";
			public const string msevtmgt_IdentifySpeakers = "msevtmgt_identifyspeakers";
			public const string msevtmgt_IdentifySponsors = "msevtmgt_identifysponsors";
			public const string msevtmgt_isoutofsync = "msevtmgt_isoutofsync";
			public const string msevtmgt_IsRecurringEvent = "msevtmgt_isrecurringevent";
			public const string msevtmgt_istemplate = "msevtmgt_istemplate";
			public const string msevtmgt_Language = "msevtmgt_language";
			public const string msevtmgt_lastteamssyncdate = "msevtmgt_lastteamssyncdate";
			public const string msevtmgt_layout = "msevtmgt_layout";
			public const string msevtmgt_MakePaymentsDue = "msevtmgt_makepaymentsdue";
			public const string msevtmgt_ManageRegistrationCount = "msevtmgt_manageregistrationcount";
			public const string msevtmgt_marketingformid = "msevtmgt_marketingformid";
			public const string msevtmgt_MaximumEventCapacity = "msevtmgt_maximumeventcapacity";
			public const string msevtmgt_MaxNumberOfRegistrations = "msevtmgt_maxnumberofregistrations";
			public const string msevtmgt_MiscellaneousCosts = "msevtmgt_miscellaneouscosts";
			public const string msevtmgt_miscellaneouscosts_Base = "msevtmgt_miscellaneouscosts_base";
			public const string msevtmgt_Name = "msevtmgt_name";
			public const string msevtmgt_NotifyAuthoritiesOfEvent = "msevtmgt_notifyauthoritiesofevent";
			public const string msevtmgt_numberofinvitations = "msevtmgt_numberofinvitations";
			public const string msevtmgt_PlanRegistration = "msevtmgt_planregistration";
			public const string msevtmgt_portalspecificeventenddate = "msevtmgt_portalspecificeventenddate";
			public const string msevtmgt_portalspecificeventstartdate = "msevtmgt_portalspecificeventstartdate";
			public const string msevtmgt_PresentationManagerUrl = "msevtmgt_presentationmanagerurl";
			public const string msevtmgt_previousnumberoffreeslots = "msevtmgt_previousnumberoffreeslots";
			public const string msevtmgt_PrimaryGoal = "msevtmgt_primarygoal";
			public const string msevtmgt_PrimaryVenue = "msevtmgt_primaryvenue";
			public const string msevtmgt_producer = "msevtmgt_producer";
			public const string msevtmgt_publiceventurl = "msevtmgt_publiceventurl";
			public const string msevtmgt_PublishStatus = "msevtmgt_publishstatus";
			public const string msevtmgt_qna = "msevtmgt_qna";
			public const string msevtmgt_readableeventid = "msevtmgt_readableeventid";
			public const string msevtmgt_recordingforattendees = "msevtmgt_recordingforattendees";
			public const string msevtmgt_recordingforproducersandspeakers = "msevtmgt_recordingforproducersandspeakers";
			public const string msevtmgt_recoveryitems = "msevtmgt_recoveryitems";
			public const string msevtmgt_RecurrencePattern = "msevtmgt_recurrencepattern";
			public const string msevtmgt_recurrenteventstatus = "msevtmgt_recurrenteventstatus";
			public const string msevtmgt_RegistrationCount = "msevtmgt_registrationcount";
			public const string msevtmgt_registrationcounterlock = "msevtmgt_registrationcounterlock";
			public const string msevtmgt_RegistrationsTarget = "msevtmgt_registrationstarget";
			public const string msevtmgt_RequestSponsorship = "msevtmgt_requestsponsorship";
			public const string msevtmgt_RevenueFromSponsorship = "msevtmgt_revenuefromsponsorship";
			public const string msevtmgt_revenuefromsponsorship_Base = "msevtmgt_revenuefromsponsorship_base";
			public const string msevtmgt_room = "msevtmgt_room";
			public const string msevtmgt_ScheduleAirportPickups = "msevtmgt_scheduleairportpickups";
			public const string msevtmgt_ScheduleSessions = "msevtmgt_schedulesessions";
			public const string msevtmgt_SelectSpeakers = "msevtmgt_selectspeakers";
			public const string msevtmgt_SelectVendors = "msevtmgt_selectvendors";
			public const string msevtmgt_SendEventInvitation = "msevtmgt_sendeventinvitation";
			public const string msevtmgt_SendMarketingMaterial = "msevtmgt_sendmarketingmaterial";
			public const string msevtmgt_SendPreEventReminders = "msevtmgt_sendpreeventreminders";
			public const string msevtmgt_SendThankYouEmails = "msevtmgt_sendthankyouemails";
			public const string msevtmgt_setregistrationsenddate = "msevtmgt_setregistrationsenddate";
			public const string msevtmgt_showautomaticregistrationcheckbox = "msevtmgt_showautomaticregistrationcheckbox";
			public const string msevtmgt_showwaitlist = "msevtmgt_showwaitlist";
			public const string msevtmgt_sourcesystem = "msevtmgt_sourcesystem";
			public const string msevtmgt_Stopwebsiteregistrationson = "msevtmgt_stopwebsiteregistrationson";
			public const string msevtmgt_streamingenabled = "msevtmgt_streamingenabled";
			public const string msevtmgt_streamingprovider = "msevtmgt_streamingprovider";
			public const string msevtmgt_streamowner = "msevtmgt_streamowner";
			public const string msevtmgt_TargetRevenue = "msevtmgt_targetrevenue";
			public const string msevtmgt_targetrevenue_Base = "msevtmgt_targetrevenue_base";
			public const string msevtmgt_TeamDebriefing = "msevtmgt_teamdebriefing";
			public const string msevtmgt_teamsevent = "msevtmgt_teamsevent";
			public const string msevtmgt_teamsinvitationhtml = "msevtmgt_teamsinvitationhtml";
			public const string msevtmgt_TotalCostOfEventsActivities = "msevtmgt_totalcostofeventsactivities";
			public const string msevtmgt_totalcostofeventsactivities_Base = "msevtmgt_totalcostofeventsactivities_base";
			public const string msevtmgt_TotalCostOfExternalMembers = "msevtmgt_totalcostofexternalmembers";
			public const string msevtmgt_totalcostofexternalmembers_Base = "msevtmgt_totalcostofexternalmembers_base";
			public const string msevtmgt_TotalRegistrationFee = "msevtmgt_totalregistrationfee";
			public const string msevtmgt_totalregistrationfee_Base = "msevtmgt_totalregistrationfee_base";
			public const string msevtmgt_TotalRevenueFromTheEvent = "msevtmgt_totalrevenuefromtheevent";
			public const string msevtmgt_totalrevenuefromtheevent_Base = "msevtmgt_totalrevenuefromtheevent_base";
			public const string msevtmgt_TransactionCurrencyId = "msevtmgt_transactioncurrencyid";
			public const string msevtmgt_WaitlistStartingPoint = "msevtmgt_waitliststartingpoint";
			public const string msevtmgt_WaitlistthisEvent = "msevtmgt_waitlistthisevent";
			public const string msevtmgt_WebinarConfigurationId = "msevtmgt_webinarconfigurationid";
			public const string msevtmgt_WebinarID = "msevtmgt_webinarid";
			public const string msevtmgt_webinarnotificationseen = "msevtmgt_webinarnotificationseen";
			public const string msevtmgt_webinaroperation = "msevtmgt_webinaroperation";
			public const string msevtmgt_webinarstatus = "msevtmgt_webinarstatus";
			public const string msevtmgt_webinarstatusreason = "msevtmgt_webinarstatusreason";
			public const string msevtmgt_WebinarType = "msevtmgt_webinartype";
			public const string msevtmgt_webinarURL = "msevtmgt_webinarurl";
			public const string msevtmgt_Websitemessage = "msevtmgt_websitemessage";
			public const string msevtmgt_websitepreference = "msevtmgt_websitepreference";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_event";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11091;
		public const string EntityCollectionSchemaName = "msevtmgt_Events";
		public const string EntityDisplayCollectionName = "Events";
		public const string DisplayName = "Event";
		public const string EntitySetName = "msevtmgt_events";
		public const string EntityLogicalCollectionName = "msevtmgt_events";
		public const string EntityPrimaryIdAttribute = "msevtmgt_eventid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_Event";
		[DebuggerNonUserCode()]
		public msevtmgt_Event()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Event(Guid msevtmgt_EventId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_EventId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Event(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Event"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_Event(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Event"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_Event(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_Event(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_Event"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_Event(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_Event(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_Event(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange rate</para>
		/// <para><strong>Description</strong>: Exchange rate between the base currency and the currency associated with the entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event URL specified</para>
		/// <para><strong>Description</strong>: Determines whether an event URL is specified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_EventURLspecified
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_EventURLspecified); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form</para>
		/// <para><strong>Description</strong>: Unique identifier for the marketing form associated with the event.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_marketingformid); }
			set { Entity.Attributes[Fields.msdyncrm_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session count</para>
		/// <para><strong>Description</strong>: The number of sessions in this event</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// <para><strong>Rollup Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_SessionsCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_SessionsCount); }
			set { Entity.Attributes[Fields.msdyncrm_SessionsCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session count (Last Updated On)</para>
		/// <para><strong>Description</strong>: Last Updated time of rollup field Session count.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_SessionsCount_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_SessionsCount_Date); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Session count (State)</para>
		/// <para><strong>Description</strong>: State of rollup field Session count.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_SessionsCount_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_SessionsCount_State); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Use new form templates</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_usemarketingform
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_usemarketingform); }
			set { Entity.Attributes[Fields.msdyncrm_usemarketingform] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Banner image id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_bannerimageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_bannerimageid); }
			set { Entity.Attributes[Fields.msdynmkt_bannerimageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Completion date</para>
		/// <para><strong>Description</strong>: Virtual Event Completion Date.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_completiondate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_completiondate); }
			set { Entity.Attributes[Fields.msdynmkt_completiondate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked Virtual Event Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_linkedvirtualeventid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_linkedvirtualeventid); }
			set { Entity.Attributes[Fields.msdynmkt_linkedvirtualeventid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Logo image id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_logoimageid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_logoimageid); }
			set { Entity.Attributes[Fields.msdynmkt_logoimageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow anonymous registrations</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowanonymousregistrations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowanonymousregistrations); }
			set { Entity.Attributes[Fields.msevtmgt_allowanonymousregistrations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow attendees to unmute</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowattendeestounmute
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowattendeestounmute); }
			set { Entity.Attributes[Fields.msevtmgt_allowattendeestounmute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow camera for attendees</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowcameraforattendees
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowcameraforattendees); }
			set { Entity.Attributes[Fields.msevtmgt_allowcameraforattendees] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow custom agenda</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowcustomagenda
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowcustomagenda); }
			set { Entity.Attributes[Fields.msevtmgt_allowcustomagenda] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do you want to allow external presenters</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowexternalpresenters
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowexternalpresenters); }
			set { Entity.Attributes[Fields.msevtmgt_allowexternalpresenters] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow meeting chat</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_allowmeetingchat"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_allowmeetingchat.Enabled"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_allowmeetingchat? msevtmgt_allowmeetingchat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_allowmeetingchat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_allowmeetingchat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_allowmeetingchat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_allowmeetingchat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Always let callers bypass the lobby</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowpstnsserstobypasslobby
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowpstnsserstobypasslobby); }
			set { Entity.Attributes[Fields.msevtmgt_allowpstnsserstobypasslobby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow reactions</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_allowteamsmeetingreactions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_allowteamsmeetingreactions); }
			set { Entity.Attributes[Fields.msevtmgt_allowteamsmeetingreactions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attendee engagement report</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_attendeeengagementreport
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_attendeeengagementreport); }
			set { Entity.Attributes[Fields.msevtmgt_attendeeengagementreport] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_attendeeurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_attendeeurl); }
			set { Entity.Attributes[Fields.msevtmgt_attendeeurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Who can bypass the lobby?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_autoadmittedusers"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_autoadmittedusers.People_in_my_organization_and_guests"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_autoadmittedusers? msevtmgt_autoadmittedusers
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_autoadmittedusers);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_autoadmittedusers)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_autoadmittedusers] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_autoadmittedusers] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record automatically</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_autorecordingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_autorecordingenabled); }
			set { Entity.Attributes[Fields.msevtmgt_autorecordingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Automatically register waitlisted contacts</para>
		/// <para><strong>Description</strong>: For free events, we will automatically register waitlisted contacts by default as soon as additional capacity becomes available</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_autoregisterwaitlistitems
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_autoregisterwaitlistitems); }
			set { Entity.Attributes[Fields.msevtmgt_autoregisterwaitlistitems] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base recurrent event ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 40</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_baserecurrenteventid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_baserecurrenteventid); }
			set { Entity.Attributes[Fields.msevtmgt_baserecurrenteventid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Are flight reservations booked?</para>
		/// <para><strong>Description</strong>: Flight reservations booking status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_BookedFlightReservations"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_BookedFlightReservations? msevtmgt_BookedFlightReservations
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_BookedFlightReservations);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_BookedFlightReservations)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_BookedFlightReservations] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_BookedFlightReservations] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Book rooms</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_BookRooms"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_BookRooms? msevtmgt_BookRooms
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_BookRooms);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_BookRooms)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_BookRooms] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_BookRooms] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget allocated</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_BudgetAllocated
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_BudgetAllocated);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_BudgetAllocated] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_BudgetAllocated] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Budget allocated (Base)</para>
		/// <para><strong>Description</strong>: Value of the budget allocated (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_budgetallocated_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_budgetallocated_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Building</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_building"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_building
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_building); }
			set { Entity.Attributes[Fields.msevtmgt_building] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: HTML calendar content</para>
		/// <para><strong>Description</strong>: Rich text calendar content for events.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_calendarcontent
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_calendarcontent); }
			set { Entity.Attributes[Fields.msevtmgt_calendarcontent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text calendar content</para>
		/// <para><strong>Description</strong>: Plain text calendar content for events.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_calendarcontent_plaintext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_calendarcontent_plaintext); }
			set { Entity.Attributes[Fields.msevtmgt_calendarcontent_plaintext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Obsolete) HTML calendar content</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_calendarevent
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_calendarevent); }
			set { Entity.Attributes[Fields.msevtmgt_calendarevent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Catering required?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_CateringRequired"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_CateringRequired? msevtmgt_CateringRequired
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_CateringRequired);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_CateringRequired)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_CateringRequired] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_CateringRequired] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Change meeting options</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_changemeetingoptions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_changemeetingoptions); }
			set { Entity.Attributes[Fields.msevtmgt_changemeetingoptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check-in count</para>
		/// <para><strong>Description</strong>: Check-in count</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_CheckInCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_CheckInCount); }
			set { Entity.Attributes[Fields.msevtmgt_CheckInCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Confirmed hotel choices?</para>
		/// <para><strong>Description</strong>: Hotel choices confirmation status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ConfirmedHotelChoices"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ConfirmedHotelChoices? msevtmgt_ConfirmedHotelChoices
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_ConfirmedHotelChoices);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ConfirmedHotelChoices)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_ConfirmedHotelChoices] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_ConfirmedHotelChoices] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Countdown in days</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_CountdownInDays
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_CountdownInDays); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create leads for event registrations</para>
		/// <para><strong>Description</strong>: Indicates whether a lead should be created each time somebody registers for this event</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_createleadsforeventregistrations
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_createleadsforeventregistrations); }
			set { Entity.Attributes[Fields.msevtmgt_createleadsforeventregistrations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create marketing collateral</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_CreateMarketingCollateral"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_CreateMarketingCollateral? msevtmgt_CreateMarketingCollateral
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_CreateMarketingCollateral);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_CreateMarketingCollateral)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_CreateMarketingCollateral] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_CreateMarketingCollateral] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Creation source</para>
		/// <para><strong>Description</strong>: Available event creation sources</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_creationsource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_creationsource? msevtmgt_creationsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_creationsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_creationsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_creationsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_creationsource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom event URL</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_customeventurl
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_customeventurl); }
			set { Entity.Attributes[Fields.msevtmgt_customeventurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Define packages and pricing</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefinePackagesandPricing"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefinePackagesandPricing? msevtmgt_DefinePackagesandPricing
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_DefinePackagesandPricing);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefinePackagesandPricing)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_DefinePackagesandPricing] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_DefinePackagesandPricing] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Define sessions</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefineSessions"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefineSessions? msevtmgt_DefineSessions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_DefineSessions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefineSessions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_DefineSessions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_DefineSessions] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Define team</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefineTeam"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefineTeam? msevtmgt_DefineTeam
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_DefineTeam);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DefineTeam)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_DefineTeam] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_DefineTeam] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Description); }
			set { Entity.Attributes[Fields.msevtmgt_Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Descriptor sync status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_descriptorsyncstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_descriptorsyncstatus.Synced"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_descriptorsyncstatus? msevtmgt_descriptorsyncstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_descriptorsyncstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_descriptorsyncstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_descriptorsyncstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_descriptorsyncstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Develop marketing plan</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DevelopMarketingPlan"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DevelopMarketingPlan? msevtmgt_DevelopMarketingPlan
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_DevelopMarketingPlan);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_DevelopMarketingPlan)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_DevelopMarketingPlan] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_DevelopMarketingPlan] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Early bird cut-off date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_EarlyBirdCutOffDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_EarlyBirdCutOffDate); }
			set { Entity.Attributes[Fields.msevtmgt_EarlyBirdCutOffDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Embed registration form</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_embedregistrationform
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_embedregistrationform); }
			set { Entity.Attributes[Fields.msevtmgt_embedregistrationform] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable CAPTCHA</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_enablecaptcha
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_enablecaptcha); }
			set { Entity.Attributes[Fields.msevtmgt_enablecaptcha] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable multi-attendee registration</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_Enablemultiattendeeregistration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_Enablemultiattendeeregistration); }
			set { Entity.Attributes[Fields.msevtmgt_Enablemultiattendeeregistration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Announce when callers join or leave</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_entryexitannouncementsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_entryexitannouncementsenabled); }
			set { Entity.Attributes[Fields.msevtmgt_entryexitannouncementsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event debriefing</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventDebriefing"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventDebriefing? msevtmgt_EventDebriefing
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_EventDebriefing);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventDebriefing)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_EventDebriefing] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_EventDebriefing] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event end date</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_EventEndDate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_EventEndDate); }
			set { Entity.Attributes[Fields.msevtmgt_EventEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event format</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventFormat"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventFormat.On_site"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventFormat? msevtmgt_EventFormat
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_EventFormat);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventFormat)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_EventFormat] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_EventFormat] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_EventId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_EventId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event image</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_file"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_eventimage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_eventimage); }
			set { Entity.Attributes[Fields.msevtmgt_eventimage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event start date</para>
		/// <para>Required - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_EventStartDate
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_EventStartDate); }
			set { Entity.Attributes[Fields.msevtmgt_EventStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event time zone</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_EventTimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_EventTimeZone); }
			set { Entity.Attributes[Fields.msevtmgt_EventTimeZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event time zone name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_EventTimeZoneName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_EventTimeZoneName); }
			set { Entity.Attributes[Fields.msevtmgt_EventTimeZoneName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventType? msevtmgt_EventType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_EventType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_EventType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_EventType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_EventType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event venue cost</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_EventVenueCost
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_EventVenueCost);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_EventVenueCost] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_EventVenueCost] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event venue cost (base)</para>
		/// <para><strong>Description</strong>: Value of the event venue cost (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_eventvenuecost_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_eventvenuecost_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expected outcome</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_ExpectedOutcome
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_ExpectedOutcome); }
			set { Entity.Attributes[Fields.msevtmgt_ExpectedOutcome] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Follow up on leads</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_FollowUpOnLeads"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_FollowUpOnLeads? msevtmgt_FollowUpOnLeads
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_FollowUpOnLeads);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_FollowUpOnLeads)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_FollowUpOnLeads] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_FollowUpOnLeads] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form hosting script</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_formpagejavascriptcode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_formpagejavascriptcode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Guest logistics?</para>
		/// <para><strong>Description</strong>: Indicates whether guest logistics are required</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_GuestLogistics"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_GuestLogistics? msevtmgt_GuestLogistics
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_GuestLogistics);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_GuestLogistics)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_GuestLogistics] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_GuestLogistics] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify speakers</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySpeakers"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySpeakers.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySpeakers? msevtmgt_IdentifySpeakers
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_IdentifySpeakers);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySpeakers)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_IdentifySpeakers] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_IdentifySpeakers] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Identify sponsors</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySponsors"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySponsors? msevtmgt_IdentifySponsors
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_IdentifySponsors);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_IdentifySponsors)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_IdentifySponsors] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_IdentifySponsors] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event is out of sync</para>
		/// <para><strong>Description</strong>: Field specifying if a streamed event is out of synchronization with it&apos;s provider.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_isoutofsync
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_isoutofsync); }
			set { Entity.Attributes[Fields.msevtmgt_isoutofsync] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is a recurring event</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_IsRecurringEvent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_IsRecurringEvent); }
			set { Entity.Attributes[Fields.msevtmgt_IsRecurringEvent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is template</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_istemplate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_istemplate.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_istemplate? msevtmgt_istemplate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_istemplate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_istemplate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_istemplate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_istemplate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para><strong>Description</strong>: The language of the webinar</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_Language"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_Language? msevtmgt_Language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_Language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_Language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_Language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_Language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last sync with Teams date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_lastteamssyncdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_lastteamssyncdate); }
			set { Entity.Attributes[Fields.msevtmgt_lastteamssyncdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Layout</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_layout"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_layout
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_layout); }
			set { Entity.Attributes[Fields.msevtmgt_layout] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Make payments due</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_MakePaymentsDue"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_MakePaymentsDue? msevtmgt_MakePaymentsDue
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_MakePaymentsDue);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_MakePaymentsDue)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_MakePaymentsDue] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_MakePaymentsDue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manage registration count?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ManageRegistrationCount"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ManageRegistrationCount.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ManageRegistrationCount? msevtmgt_ManageRegistrationCount
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_ManageRegistrationCount);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ManageRegistrationCount)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_ManageRegistrationCount] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_ManageRegistrationCount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form</para>
		/// <para><strong>Description</strong>: Unique Identifier for the marketing form associated with the event</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_marketingform"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_marketingformid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_marketingformid); }
			set { Entity.Attributes[Fields.msevtmgt_marketingformid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum event capacity</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_MaximumEventCapacity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_MaximumEventCapacity); }
			set { Entity.Attributes[Fields.msevtmgt_MaximumEventCapacity] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Max. number of registrations</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_MaxNumberOfRegistrations
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_MaxNumberOfRegistrations); }
			set { Entity.Attributes[Fields.msevtmgt_MaxNumberOfRegistrations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Miscellaneous costs</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_MiscellaneousCosts
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_MiscellaneousCosts);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_MiscellaneousCosts] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_MiscellaneousCosts] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Miscellaneous costs (base)</para>
		/// <para><strong>Description</strong>: Value of the miscellaneous costs (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_miscellaneouscosts_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_miscellaneouscosts_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Name); }
			set { Entity.Attributes[Fields.msevtmgt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Notify authorities of event</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_NotifyAuthoritiesOfEvent"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_NotifyAuthoritiesOfEvent? msevtmgt_NotifyAuthoritiesOfEvent
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_NotifyAuthoritiesOfEvent);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_NotifyAuthoritiesOfEvent)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_NotifyAuthoritiesOfEvent] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_NotifyAuthoritiesOfEvent] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Number of invitations per slot</para>
		/// <para><strong>Description</strong>: Specify the number of invitations to be sent for each available slot. This value is used by the waitlist function.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_numberofinvitations
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_numberofinvitations); }
			set { Entity.Attributes[Fields.msevtmgt_numberofinvitations] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Plan registration</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PlanRegistration"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PlanRegistration? msevtmgt_PlanRegistration
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PlanRegistration);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PlanRegistration)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PlanRegistration] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PlanRegistration] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal specific event end date</para>
		/// <para><strong>Description</strong>: User local aware event end date field used for Real-time Journeys portal integration only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_portalspecificeventenddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_portalspecificeventenddate); }
			set { Entity.Attributes[Fields.msevtmgt_portalspecificeventenddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal specific event start date</para>
		/// <para><strong>Description</strong>: User local aware event start date field used for Real-time Journeys portal integration only.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_portalspecificeventstartdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_portalspecificeventstartdate); }
			set { Entity.Attributes[Fields.msevtmgt_portalspecificeventstartdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Presentation manager URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_PresentationManagerUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_PresentationManagerUrl); }
			set { Entity.Attributes[Fields.msevtmgt_PresentationManagerUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous number of free slots</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_previousnumberoffreeslots
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_previousnumberoffreeslots); }
			set { Entity.Attributes[Fields.msevtmgt_previousnumberoffreeslots] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary goal</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PrimaryGoal"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PrimaryGoal? msevtmgt_PrimaryGoal
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PrimaryGoal);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PrimaryGoal)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PrimaryGoal] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PrimaryGoal] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary venue</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_venue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_PrimaryVenue
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_PrimaryVenue); }
			set { Entity.Attributes[Fields.msevtmgt_PrimaryVenue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Producer</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_eventteammember"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_producer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_producer); }
			set { Entity.Attributes[Fields.msevtmgt_producer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_publiceventurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_publiceventurl); }
			set { Entity.Attributes[Fields.msevtmgt_publiceventurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Publish status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PublishStatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PublishStatus? msevtmgt_PublishStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_PublishStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_PublishStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_PublishStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_PublishStatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Do you want to enable Q/A for this event</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_qna
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_qna); }
			set { Entity.Attributes[Fields.msevtmgt_qna] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Readable event ID</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_readableeventid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_readableeventid); }
			set { Entity.Attributes[Fields.msevtmgt_readableeventid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording available to attendees</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_recordingforattendees
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_recordingforattendees); }
			set { Entity.Attributes[Fields.msevtmgt_recordingforattendees] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recording available to producers and speakers</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_recordingforproducersandspeakers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_recordingforproducersandspeakers); }
			set { Entity.Attributes[Fields.msevtmgt_recordingforproducersandspeakers] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recovery items</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_recoveryitems
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_recoveryitems); }
			set { Entity.Attributes[Fields.msevtmgt_recoveryitems] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence pattern</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 512</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_RecurrencePattern
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_RecurrencePattern); }
			set { Entity.Attributes[Fields.msevtmgt_RecurrencePattern] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrent event status</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_recurrenteventstatus
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_recurrenteventstatus); }
			set { Entity.Attributes[Fields.msevtmgt_recurrenteventstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration count</para>
		/// <para><strong>Description</strong>: Number of registrations for this event</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_RegistrationCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_RegistrationCount); }
			set { Entity.Attributes[Fields.msevtmgt_RegistrationCount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Event registration counter lock</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_registrationcounterlock
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_registrationcounterlock); }
			set { Entity.Attributes[Fields.msevtmgt_registrationcounterlock] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registrations target</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_RegistrationsTarget
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_RegistrationsTarget); }
			set { Entity.Attributes[Fields.msevtmgt_RegistrationsTarget] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Request sponsorship</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_RequestSponsorship"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_RequestSponsorship? msevtmgt_RequestSponsorship
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_RequestSponsorship);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_RequestSponsorship)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_RequestSponsorship] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_RequestSponsorship] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Revenue from sponsorship</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_RevenueFromSponsorship
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_RevenueFromSponsorship);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_RevenueFromSponsorship] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_RevenueFromSponsorship] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Revenue from sponsorship (base)</para>
		/// <para><strong>Description</strong>: Value of the revenue from sponsorship (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_revenuefromsponsorship_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_revenuefromsponsorship_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Room</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_room"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_room
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_room); }
			set { Entity.Attributes[Fields.msevtmgt_room] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule airport pickups?</para>
		/// <para><strong>Description</strong>: Airport pickups scheduling status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleAirportPickups"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleAirportPickups? msevtmgt_ScheduleAirportPickups
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_ScheduleAirportPickups);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleAirportPickups)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_ScheduleAirportPickups] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_ScheduleAirportPickups] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Schedule sessions</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleSessions"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleSessions.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleSessions? msevtmgt_ScheduleSessions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_ScheduleSessions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_ScheduleSessions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_ScheduleSessions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_ScheduleSessions] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Select speakers</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SelectSpeakers"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SelectSpeakers? msevtmgt_SelectSpeakers
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SelectSpeakers);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SelectSpeakers)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SelectSpeakers] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SelectSpeakers] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Select vendors</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SelectVendors"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SelectVendors? msevtmgt_SelectVendors
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SelectVendors);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SelectVendors)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SelectVendors] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SelectVendors] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send event invitation</para>
		/// <para><strong>Description</strong>: Event invitation sending status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendEventInvitation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendEventInvitation.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendEventInvitation? msevtmgt_SendEventInvitation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SendEventInvitation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendEventInvitation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SendEventInvitation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SendEventInvitation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send marketing material</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendMarketingMaterial"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendMarketingMaterial? msevtmgt_SendMarketingMaterial
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SendMarketingMaterial);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendMarketingMaterial)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SendMarketingMaterial] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SendMarketingMaterial] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send pre-event reminders</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendPreEventReminders"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendPreEventReminders.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendPreEventReminders? msevtmgt_SendPreEventReminders
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SendPreEventReminders);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendPreEventReminders)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SendPreEventReminders] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SendPreEventReminders] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send thank you emails</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendThankYouEmails"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendThankYouEmails? msevtmgt_SendThankYouEmails
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_SendThankYouEmails);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_SendThankYouEmails)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_SendThankYouEmails] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_SendThankYouEmails] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Set registration close date</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_setregistrationsenddate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_setregistrationsenddate); }
			set { Entity.Attributes[Fields.msevtmgt_setregistrationsenddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contacts can choose to be registered automatically</para>
		/// <para><strong>Description</strong>: Show the automatic registration check box</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_showautomaticregistrationcheckbox
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_showautomaticregistrationcheckbox); }
			set { Entity.Attributes[Fields.msevtmgt_showautomaticregistrationcheckbox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show waitlist</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_showwaitlist
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_showwaitlist); }
			set { Entity.Attributes[Fields.msevtmgt_showwaitlist] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing origin</para>
		/// <para><strong>Description</strong>: Event creation origin</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_sourcesystem"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_sourcesystem? msevtmgt_sourcesystem
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_sourcesystem);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_sourcesystem)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_sourcesystem] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_sourcesystem] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Close online registration on</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: TimeZoneIndependent - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_Stopwebsiteregistrationson
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_Stopwebsiteregistrationson); }
			set { Entity.Attributes[Fields.msevtmgt_Stopwebsiteregistrationson] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Streamed event</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_streamingenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_streamingenabled); }
			set { Entity.Attributes[Fields.msevtmgt_streamingenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Streaming provider</para>
		/// <para><strong>Description</strong>: A list of streaming providers</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_streamingprovider"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_streamingprovider? msevtmgt_streamingprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_streamingprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_streamingprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_streamingprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_streamingprovider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Streamed event owner</para>
		/// <para><strong>Description</strong>: User that owns the streamed event.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_streamowner
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_streamowner); }
			set { Entity.Attributes[Fields.msevtmgt_streamowner] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target revenue</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_TargetRevenue
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_TargetRevenue);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TargetRevenue] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TargetRevenue] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target revenue (Base)</para>
		/// <para><strong>Description</strong>: Value of the target revenue (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_targetrevenue_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_targetrevenue_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Team debriefing</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_TeamDebriefing"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_TeamDebriefing.Not_started"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_TeamDebriefing? msevtmgt_TeamDebriefing
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_TeamDebriefing);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_TeamDebriefing)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TeamDebriefing] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TeamDebriefing] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Obsolete) Team event metadata</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_teamsevent
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_teamsevent); }
			set { Entity.Attributes[Fields.msevtmgt_teamsevent] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Invitation HTML</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_teamsinvitationhtml
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_teamsinvitationhtml); }
			set { Entity.Attributes[Fields.msevtmgt_teamsinvitationhtml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total cost of events activities</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_TotalCostOfEventsActivities
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_TotalCostOfEventsActivities);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TotalCostOfEventsActivities] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TotalCostOfEventsActivities] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total cost of events activities (base)</para>
		/// <para><strong>Description</strong>: Value of the total cost of events activities (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_totalcostofeventsactivities_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_totalcostofeventsactivities_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total cost of external members</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_TotalCostOfExternalMembers
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_TotalCostOfExternalMembers);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TotalCostOfExternalMembers] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TotalCostOfExternalMembers] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total cost of external members (base)</para>
		/// <para><strong>Description</strong>: Value of the total cost of external members (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_totalcostofexternalmembers_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_totalcostofexternalmembers_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total registration fee (package cost)</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_TotalRegistrationFee
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_TotalRegistrationFee);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TotalRegistrationFee] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TotalRegistrationFee] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total registration fee (package cost) (base)</para>
		/// <para><strong>Description</strong>: Value of the total registration fee (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_totalregistrationfee_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_totalregistrationfee_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total revenue from the event</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_TotalRevenueFromTheEvent
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_TotalRevenueFromTheEvent);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_TotalRevenueFromTheEvent] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_TotalRevenueFromTheEvent] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Total revenue from the event (base)</para>
		/// <para><strong>Description</strong>: Value of the total revenue from the event (in the base currency)</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msevtmgt_totalrevenuefromtheevent_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msevtmgt_totalrevenuefromtheevent_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_TransactionCurrencyId); }
			set { Entity.Attributes[Fields.msevtmgt_TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Waitlist starting point</para>
		/// <para><strong>Description</strong>: Waitlist starting point</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msevtmgt_WaitlistStartingPoint
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msevtmgt_WaitlistStartingPoint); }
			set { Entity.Attributes[Fields.msevtmgt_WaitlistStartingPoint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Waitlist this event</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_WaitlistthisEvent"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_WaitlistthisEvent? msevtmgt_WaitlistthisEvent
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_WaitlistthisEvent);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_WaitlistthisEvent)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_WaitlistthisEvent] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_WaitlistthisEvent] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar configuration</para>
		/// <para><strong>Description</strong>: Webinar configuration</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_webinarconfiguration"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_WebinarConfigurationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_WebinarConfigurationId); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarConfigurationId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar ID</para>
		/// <para><strong>Description</strong>: Webinar ID of the event</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_WebinarID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_WebinarID); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar notification seen</para>
		/// <para><strong>Description</strong>: Indicates whether the webinar creation notification has been seen</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msevtmgt_webinarnotificationseen
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msevtmgt_webinarnotificationseen); }
			set { Entity.Attributes[Fields.msevtmgt_webinarnotificationseen] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar operation</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinaroperation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinaroperation); }
			set { Entity.Attributes[Fields.msevtmgt_webinaroperation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar status</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinarstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinarstatus); }
			set { Entity.Attributes[Fields.msevtmgt_webinarstatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar status reason</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 5,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinarstatusreason
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinarstatusreason); }
			set { Entity.Attributes[Fields.msevtmgt_webinarstatusreason] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar type</para>
		/// <para><strong>Lookup</strong>: <see cref="msevtmgt_webinartype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_WebinarType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_WebinarType); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar URL</para>
		/// <para><strong>Description</strong>: The URL of the webinar. This might belong to an external webinar provider.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_webinarURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_webinarURL); }
			set { Entity.Attributes[Fields.msevtmgt_webinarURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration closed message</para>
		/// <para><strong>Description</strong>: Message that will be displayed on the event page if user tries to register after event registrations are closed.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 3,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Websitemessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Websitemessage); }
			set { Entity.Attributes[Fields.msevtmgt_Websitemessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website preference</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_websitepreference"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_websitepreference.On_a_standalone_registration_page"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_websitepreference? msevtmgt_websitepreference
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_websitepreference);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.msevtmgt_websitepreference)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_websitepreference] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_websitepreference] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner ID</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning business unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning user</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Process ID</para>
		/// <para><strong>Description</strong>: Contains the ID of the process associated with the entity</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stage ID</para>
		/// <para><strong>Description</strong>: Contains the ID of the stage where the entity is located</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the event</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the event</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_EventOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Traversed path</para>
		/// <para><strong>Description</strong>: A comma-separated list of string values representing the unique IDs of stages in a business-process flow instance, in the order that they occur.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}