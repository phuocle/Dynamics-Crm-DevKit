//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:35
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynci_unifiedactivityOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynci_unifiedactivity : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynci_activityforeignkey = "msdynci_activityforeignkey";
			public const string msdynci_activityid = "msdynci_activityid";
			public const string msdynci_activityname = "msdynci_activityname";
			public const string msdynci_activitytime = "msdynci_activitytime";
			public const string msdynci_activitytype = "msdynci_activitytype";
			public const string msdynci_activitytypedisplay = "msdynci_activitytypedisplay";
			public const string msdynci_actualactivityid = "msdynci_actualactivityid";
			public const string msdynci_customerid = "msdynci_customerid";
			public const string msdynci_entityname = "msdynci_entityname";
			public const string msdynci_externalurl = "msdynci_externalurl";
			public const string msdynci_lookupfield_customer = "msdynci_lookupfield_customer";
			public const string msdynci_rangeindex = "msdynci_rangeindex";
			public const string msdynci_semanticdata = "msdynci_semanticdata";
			public const string msdynci_title = "msdynci_title";
			public const string msdynci_unifiedactivityId = "msdynci_unifiedactivityid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PartitionId = "partitionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynci_unifiedactivity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11473;
		public const string EntityCollectionSchemaName = "msdynci_unifiedactivities";
		public const string EntityDisplayCollectionName = "UnifiedActivity";
		public const string DisplayName = "UnifiedActivity";
		public const string EntitySetName = "msdynci_unifiedactivities";
		public const string EntityLogicalCollectionName = "msdynci_unifiedactivities";
		public const string EntityPrimaryIdAttribute = "msdynci_unifiedactivityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynci_activityid";
		public const string EntitySchemaName = "msdynci_unifiedactivity";
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity(Guid msdynci_unifiedactivityId)
		{
			Entity = new Entity(EntityLogicalName, msdynci_unifiedactivityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynci_unifiedactivity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynci_unifiedactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynci_unifiedactivity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynci_unifiedactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynci_unifiedactivity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynci_unifiedactivity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityForeignKey</para>
		/// <para><strong>Description</strong>: ActivityForeignKey</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_activityforeignkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_activityforeignkey); }
			set { Entity.Attributes[Fields.msdynci_activityforeignkey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityId</para>
		/// <para><strong>Description</strong>: ActivityId</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_activityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_activityid); }
			set { Entity.Attributes[Fields.msdynci_activityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityName</para>
		/// <para><strong>Description</strong>: ActivityName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_activityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_activityname); }
			set { Entity.Attributes[Fields.msdynci_activityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityTime</para>
		/// <para><strong>Description</strong>: ActivityTime</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynci_activitytimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynci_activitytime); }
			set { Entity.Attributes[Fields.msdynci_activitytime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityType</para>
		/// <para><strong>Description</strong>: ActivityType</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_activitytype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_activitytype); }
			set { Entity.Attributes[Fields.msdynci_activitytype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActivityTypeDisplay</para>
		/// <para><strong>Description</strong>: ActivityTypeDisplay</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_activitytypedisplay
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_activitytypedisplay); }
			set { Entity.Attributes[Fields.msdynci_activitytypedisplay] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ActualActivityId</para>
		/// <para><strong>Description</strong>: ActualActivityId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_actualactivityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_actualactivityid); }
			set { Entity.Attributes[Fields.msdynci_actualactivityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CustomerId</para>
		/// <para><strong>Description</strong>: CustomerId</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_customerid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_customerid); }
			set { Entity.Attributes[Fields.msdynci_customerid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: EntityName</para>
		/// <para><strong>Description</strong>: EntityName</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_entityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_entityname); }
			set { Entity.Attributes[Fields.msdynci_entityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ExternalUrl</para>
		/// <para><strong>Description</strong>: ExternalUrl</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_externalurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_externalurl); }
			set { Entity.Attributes[Fields.msdynci_externalurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: msdynci_lookupfield_customer</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynci_customerprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynci_lookupfield_customer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynci_lookupfield_customer); }
			set { Entity.Attributes[Fields.msdynci_lookupfield_customer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RangeIndex</para>
		/// <para><strong>Description</strong>: RangeIndex</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_rangeindex
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_rangeindex); }
			set { Entity.Attributes[Fields.msdynci_rangeindex] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SemanticData</para>
		/// <para><strong>Description</strong>: SemanticData</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_semanticdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_semanticdata); }
			set { Entity.Attributes[Fields.msdynci_semanticdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: Title</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynci_title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynci_title); }
			set { Entity.Attributes[Fields.msdynci_title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UnifiedActivity</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynci_unifiedactivityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynci_unifiedactivityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}