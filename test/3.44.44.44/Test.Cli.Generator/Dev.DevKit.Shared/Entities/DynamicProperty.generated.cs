//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets
{
	public enum DataType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Decimal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Decimal = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Floating Point Number</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Floating_Point_Number = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Option Set</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Option_Set = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Single Line Of Text</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Single_Line_Of_Text = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Whole Number</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Whole_Number = 4
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Draft = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retired</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Retired = 2
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Retired</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Retired</strong></para>
		/// </summary>
		Retired = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class DynamicProperty : EntityBase
	{
		public struct Fields
		{
			public const string BaseDynamicPropertyId = "basedynamicpropertyid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DataType = "datatype";
			public const string DefaultAttributeValue = "defaultattributevalue";
			public const string DefaultValueDecimal = "defaultvaluedecimal";
			public const string DefaultValueDouble = "defaultvaluedouble";
			public const string DefaultValueInteger = "defaultvalueinteger";
			public const string DefaultValueOptionSet = "defaultvalueoptionset";
			public const string DefaultValueString = "defaultvaluestring";
			public const string Description = "description";
			public const string DMTImportState = "dmtimportstate";
			public const string DynamicPropertyId = "dynamicpropertyid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsHidden = "ishidden";
			public const string IsReadOnly = "isreadonly";
			public const string IsRequired = "isrequired";
			public const string MaxLengthString = "maxlengthstring";
			public const string MaxValueDecimal = "maxvaluedecimal";
			public const string MaxValueDouble = "maxvaluedouble";
			public const string MaxValueInteger = "maxvalueinteger";
			public const string MinValueDecimal = "minvaluedecimal";
			public const string MinValueDouble = "minvaluedouble";
			public const string MinValueInteger = "minvalueinteger";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OverwrittenDynamicPropertyId = "overwrittendynamicpropertyid";
			public const string Precision = "precision";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RootDynamicPropertyId = "rootdynamicpropertyid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "dynamicproperty";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1048;
		public const string EntityCollectionSchemaName = "DynamicProperties";
		public const string EntityDisplayCollectionName = "Properties";
		public const string DisplayName = "Property";
		public const string EntitySetName = "dynamicproperties";
		public const string EntityLogicalCollectionName = "dynamicproperties";
		public const string EntityPrimaryIdAttribute = "dynamicpropertyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "DynamicProperty";
		[DebuggerNonUserCode()]
		public DynamicProperty()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DynamicProperty(Guid DynamicPropertyId)
		{
			Entity = new Entity(EntityLogicalName, DynamicPropertyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DynamicProperty(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DynamicProperty"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public DynamicProperty(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DynamicProperty"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DynamicProperty(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DynamicProperty(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="DynamicProperty"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public DynamicProperty(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new DynamicProperty(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public DynamicProperty(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Property</para>
		/// <para><strong>Description</strong>: Shows the property in the product family that this property is being inherited from.</para>
		/// <para><strong>Lookup</strong>: <see cref="dynamicproperty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BaseDynamicPropertyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BaseDynamicPropertyId); }
			set { Entity.Attributes[Fields.BaseDynamicPropertyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Data Type</para>
		/// <para><strong>Description</strong>: Select the data type of the property.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.DataType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.DataType? DataType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DataType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.DataType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DataType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DataType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Description</strong>: Default Value</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultAttributeValue
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultAttributeValue); }
			set { Entity.Attributes[Fields.DefaultAttributeValue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Decimal Value</para>
		/// <para><strong>Description</strong>: Shows the default value of the property for a decimal data type.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? DefaultValueDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.DefaultValueDecimal); }
			set { Entity.Attributes[Fields.DefaultValueDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Double Value</para>
		/// <para><strong>Description</strong>: Shows the default value of the property for a double data type.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? DefaultValueDouble
		{
			get { return Entity.GetAttributeValue<double?>(Fields.DefaultValueDouble); }
			set { Entity.Attributes[Fields.DefaultValueDouble] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Whole Number Value</para>
		/// <para><strong>Description</strong>: Shows the default value of the property for a whole number data type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DefaultValueInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DefaultValueInteger); }
			set { Entity.Attributes[Fields.DefaultValueInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default OptionSet Value</para>
		/// <para><strong>Description</strong>: Shows the default value of the property.</para>
		/// <para><strong>Lookup</strong>: <see cref="dynamicpropertyoptionsetitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultValueOptionSet
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultValueOptionSet); }
			set { Entity.Attributes[Fields.DefaultValueOptionSet] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default String Value</para>
		/// <para><strong>Description</strong>: Shows the default value of the property for a string data type.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DefaultValueString
		{
			get { return Entity.GetAttributeValue<string>(Fields.DefaultValueString); }
			set { Entity.Attributes[Fields.DefaultValueString] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type a description for the property.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Use Only</para>
		/// <para><strong>Description</strong>: Internal Use Only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? DMTImportState
		{
			get { return Entity.GetAttributeValue<int?>(Fields.DMTImportState); }
			set { Entity.Attributes[Fields.DMTImportState] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Property ID</para>
		/// <para><strong>Description</strong>: Shows the unique identifier of the property.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid DynamicPropertyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.DynamicPropertyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hidden</para>
		/// <para><strong>Description</strong>: Defines whether the attribute is hidden or shown.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsHidden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsHidden); }
			set { Entity.Attributes[Fields.IsHidden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Read-Only</para>
		/// <para><strong>Description</strong>: Defines whether the attribute is read-only or if it can be edited.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsReadOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsReadOnly); }
			set { Entity.Attributes[Fields.IsReadOnly] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Required</para>
		/// <para><strong>Description</strong>: Defines whether the attribute is mandatory.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsRequired); }
			set { Entity.Attributes[Fields.IsRequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum String Length</para>
		/// <para><strong>Description</strong>: Shows the maximum allowed length of the property for a string data type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxLengthString
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxLengthString); }
			set { Entity.Attributes[Fields.MaxLengthString] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum Decimal Value</para>
		/// <para><strong>Description</strong>: Shows the maximum allowed value of the property for a decimal data type.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MaxValueDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MaxValueDecimal); }
			set { Entity.Attributes[Fields.MaxValueDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum Double Value</para>
		/// <para><strong>Description</strong>: Shows the maximum allowed value of the property for a double data type.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? MaxValueDouble
		{
			get { return Entity.GetAttributeValue<double?>(Fields.MaxValueDouble); }
			set { Entity.Attributes[Fields.MaxValueDouble] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum Whole Number Value</para>
		/// <para><strong>Description</strong>: Shows the maximum allowed value of the property for a whole number data type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MaxValueInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MaxValueInteger); }
			set { Entity.Attributes[Fields.MaxValueInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum Decimal Value</para>
		/// <para><strong>Description</strong>: Shows the minimum allowed value of the property for a decimal data type.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? MinValueDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.MinValueDecimal); }
			set { Entity.Attributes[Fields.MinValueDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum Double Value</para>
		/// <para><strong>Description</strong>: Shows the minimum allowed value of the property for a double data type.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? MinValueDouble
		{
			get { return Entity.GetAttributeValue<double?>(Fields.MinValueDouble); }
			set { Entity.Attributes[Fields.MinValueDouble] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Minimum Whole Number Value</para>
		/// <para><strong>Description</strong>: Shows the minimum allowed value of the property for a whole number data type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? MinValueInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.MinValueInteger); }
			set { Entity.Attributes[Fields.MinValueInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Type the name of the property.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Overwritten Property</para>
		/// <para><strong>Description</strong>: Shows the related overwritten property.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OverwrittenDynamicPropertyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OverwrittenDynamicPropertyId); }
			set { Entity.Attributes[Fields.OverwrittenDynamicPropertyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Precision</para>
		/// <para><strong>Description</strong>: Shows the allowed precision of the property for a whole number data type.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 5</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Precision
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Precision); }
			set { Entity.Attributes[Fields.Precision] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Choose the product that the property is associated with.</para>
		/// <para><strong>Lookup</strong>: <see cref="product"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Root Property</para>
		/// <para><strong>Description</strong>: Shows the root property that this property is derived from.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RootDynamicPropertyId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RootDynamicPropertyId); }
			set { Entity.Attributes[Fields.RootDynamicPropertyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows the state of the property.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Shows whether the property is active or inactive.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.DynamicPropertyOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}