//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.Entity2OptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Entity2 : EntityBase
	{
		public struct Fields
		{
			public const string AddressTableName = "addresstablename";
			public const string BaseTableName = "basetablename";
			public const string CollectionName = "collectionname";
			public const string ComponentState = "componentstate";
			public const string EntityId = "entityid";
			public const string EntitySetName = "entitysetname";
			public const string ExtensionTableName = "extensiontablename";
			public const string ExternalCollectionName = "externalcollectionname";
			public const string ExternalName = "externalname";
			public const string IsActivity = "isactivity";
			public const string LogicalCollectionName = "logicalcollectionname";
			public const string LogicalName = "logicalname";
			public const string Name = "name";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OriginalLocalizedCollectionName = "originallocalizedcollectionname";
			public const string OriginalLocalizedName = "originallocalizedname";
			public const string OverwriteTime = "overwritetime";
			public const string ParentControllingAttributeName = "parentcontrollingattributename";
			public const string PhysicalName = "physicalname";
			public const string ReportViewName = "reportviewname";
			public const string SolutionId = "solutionid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "entity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9800;
		public const string EntityCollectionSchemaName = "Entities";
		public const string EntityDisplayCollectionName = "Entities";
		public const string DisplayName = "Entity";
		public const string EntitySetName = "entities";
		public const string EntityLogicalCollectionName = "entities";
		public const string EntityPrimaryIdAttribute = "entityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Entity";
		[DebuggerNonUserCode()]
		public Entity2()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Entity2(Guid Entity2Id)
		{
			Entity = new Entity(EntityLogicalName, Entity2Id);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Entity2(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Entity2"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Entity2(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Entity2"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Entity2(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Entity2(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Entity2"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Entity2(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Entity2(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Entity2(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Table Name</para>
		/// <para><strong>Description</strong>: The address table name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AddressTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AddressTableName); }
			set { Entity.Attributes[Fields.AddressTableName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Base Table Name</para>
		/// <para><strong>Description</strong>: The base table name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string BaseTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.BaseTableName); }
			set { Entity.Attributes[Fields.BaseTableName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Collection Name</para>
		/// <para><strong>Description</strong>: The collection name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.CollectionName); }
			set { Entity.Attributes[Fields.CollectionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.Entity2OptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.Entity2OptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.Entity2OptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>Description</strong>: Unique identifier of the entity.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid EntityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.EntityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Set Name</para>
		/// <para><strong>Description</strong>: The entity set name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntitySetName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntitySetName); }
			set { Entity.Attributes[Fields.EntitySetName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Extension Table Name</para>
		/// <para><strong>Description</strong>: The extension table name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExtensionTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExtensionTableName); }
			set { Entity.Attributes[Fields.ExtensionTableName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Collection Name</para>
		/// <para><strong>Description</strong>: The external collection name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalCollectionName); }
			set { Entity.Attributes[Fields.ExternalCollectionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: External Name</para>
		/// <para><strong>Description</strong>: The external name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ExternalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ExternalName); }
			set { Entity.Attributes[Fields.ExternalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Activity</para>
		/// <para><strong>Description</strong>: Whether this entity is of type activity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong></strong>]: true - [<strong></strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong></strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsActivity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsActivity); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Logical Collection Name</para>
		/// <para><strong>Description</strong>: The logical collection name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LogicalCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.LogicalCollectionName); }
			set { Entity.Attributes[Fields.LogicalCollectionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Logical Name</para>
		/// <para><strong>Description</strong>: The logical name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LogicalName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.LogicalName); }
			set { Entity.Attributes[Fields.LogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of this Entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Object Type Code</para>
		/// <para><strong>Description</strong>: The object type code of this entity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Original Localized Collection Name</para>
		/// <para><strong>Description</strong>: The original localized collection name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OriginalLocalizedCollectionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OriginalLocalizedCollectionName); }
			set { Entity.Attributes[Fields.OriginalLocalizedCollectionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Original Localized Name</para>
		/// <para><strong>Description</strong>: The original localized name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OriginalLocalizedName
		{
			get { return Entity.GetAttributeValue<string>(Fields.OriginalLocalizedName); }
			set { Entity.Attributes[Fields.OriginalLocalizedName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Controlling Attribute Name</para>
		/// <para><strong>Description</strong>: The parent controlling attribute name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ParentControllingAttributeName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ParentControllingAttributeName); }
			set { Entity.Attributes[Fields.ParentControllingAttributeName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Physical Name</para>
		/// <para><strong>Description</strong>: The physical name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.PhysicalName); }
			set { Entity.Attributes[Fields.PhysicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Report View Name</para>
		/// <para><strong>Description</strong>: The Report view name of this entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReportViewName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReportViewName); }
			set { Entity.Attributes[Fields.ReportViewName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: The version number of this entity.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}