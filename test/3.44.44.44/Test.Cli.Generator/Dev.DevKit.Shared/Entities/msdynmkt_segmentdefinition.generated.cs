//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets
{
	public enum msdynmkt_computationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 723,270,002</para>
		/// </summary>
		Error = 723_270_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finished</para>
		/// <para><strong>Value</strong>: 723,270,001</para>
		/// </summary>
		Finished = 723_270_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: NotStarted</para>
		/// <para><strong>Value</strong>: 723,270,003</para>
		/// </summary>
		NotStarted = 723_270_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Running</para>
		/// <para><strong>Value</strong>: 723,270,000</para>
		/// </summary>
		Running = 723_270_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 723,270,003</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Deleted = 723_270_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 723,270,001</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 723_270_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: GoingLive</para>
		/// <para><strong>Value</strong>: 723,270,002</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		GoingLive = 723_270_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live</para>
		/// <para><strong>Value</strong>: 723,270,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Live = 723_270_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: LiveWithWarnings</para>
		/// <para><strong>Value</strong>: 723,270,004</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		LiveWithWarnings = 723_270_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopped</para>
		/// <para><strong>Value</strong>: 723,270,006</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopped = 723_270_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Stopping</para>
		/// <para><strong>Value</strong>: 723,270,005</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Stopping = 723_270_005
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_segmentdefinition : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_complianceprofiles = "msdynmkt_complianceprofiles";
			public const string msdynmkt_computationfinishedon = "msdynmkt_computationfinishedon";
			public const string msdynmkt_computationstartedon = "msdynmkt_computationstartedon";
			public const string msdynmkt_computationstatus = "msdynmkt_computationstatus";
			public const string msdynmkt_definitionmodifiedon = "msdynmkt_definitionmodifiedon";
			public const string msdynmkt_dependentsegmentids = "msdynmkt_dependentsegmentids";
			public const string msdynmkt_disablesegmentrefresh = "msdynmkt_disablesegmentrefresh";
			public const string msdynmkt_excludedmembers = "msdynmkt_excludedmembers";
			public const string msdynmkt_includedmembers = "msdynmkt_includedmembers";
			public const string msdynmkt_name = "msdynmkt_name";
			public const string msdynmkt_segmentdefinitionId = "msdynmkt_segmentdefinitionid";
			public const string msdynmkt_segmentquery = "msdynmkt_segmentquery";
			public const string msdynmkt_segmentrefreshintervalminutes = "msdynmkt_segmentrefreshintervalminutes";
			public const string msdynmkt_stoprefreshafter = "msdynmkt_stoprefreshafter";
			public const string msdynmkt_targetedsegmentids = "msdynmkt_targetedsegmentids";
			public const string msdynmkt_timezonecode = "msdynmkt_timezonecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_segmentdefinition";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11256;
		public const string EntityCollectionSchemaName = "msdynmkt_segmentdefinitions";
		public const string EntityDisplayCollectionName = "Segment Definition";
		public const string DisplayName = "Segment Definition";
		public const string EntitySetName = "msdynmkt_segmentdefinitions";
		public const string EntityLogicalCollectionName = "msdynmkt_segmentdefinitions";
		public const string EntityPrimaryIdAttribute = "msdynmkt_segmentdefinitionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_segmentdefinition";
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition(Guid msdynmkt_segmentdefinitionId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_segmentdefinitionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_segmentdefinition"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_segmentdefinition"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_segmentdefinition(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_segmentdefinition"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_segmentdefinition(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_segmentdefinition(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Compliance Profiles</para>
		/// <para><strong>Description</strong>: JSON string describing the compliance profiles with the following attributes: compliance_profile, purpose, topic</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_complianceprofiles
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_complianceprofiles); }
			set { Entity.Attributes[Fields.msdynmkt_complianceprofiles] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Computation Finished On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_computationfinishedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_computationfinishedon); }
			set { Entity.Attributes[Fields.msdynmkt_computationfinishedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Computation Started On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_computationstartedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_computationstartedon); }
			set { Entity.Attributes[Fields.msdynmkt_computationstartedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Computation Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.msdynmkt_computationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.msdynmkt_computationstatus? msdynmkt_computationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_computationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.msdynmkt_computationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_computationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_computationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition Modified On</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_definitionmodifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_definitionmodifiedon); }
			set { Entity.Attributes[Fields.msdynmkt_definitionmodifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Dependent segment ids</para>
		/// <para><strong>Description</strong>: List of unique segment ids that depend on this segment for execution.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_dependentsegmentids
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_dependentsegmentids); }
			set { Entity.Attributes[Fields.msdynmkt_dependentsegmentids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Segment Refresh</para>
		/// <para><strong>Description</strong>: A flag to disable periodic refresh of the Segment</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_disablesegmentrefresh
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_disablesegmentrefresh); }
			set { Entity.Attributes[Fields.msdynmkt_disablesegmentrefresh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Always excluded segment members</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_excludedmembers
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_excludedmembers); }
			set { Entity.Attributes[Fields.msdynmkt_excludedmembers] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Always included segment members</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_includedmembers
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_includedmembers); }
			set { Entity.Attributes[Fields.msdynmkt_includedmembers] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_name); }
			set { Entity.Attributes[Fields.msdynmkt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Definition Id</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_segmentdefinitionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_segmentdefinitionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment Query</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_segmentquery
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_segmentquery); }
			set { Entity.Attributes[Fields.msdynmkt_segmentquery] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Refresh Rate</para>
		/// <para><strong>Description</strong>: Segment refresh rate in minutes</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_segmentrefreshintervalminutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_segmentrefreshintervalminutes); }
			set { Entity.Attributes[Fields.msdynmkt_segmentrefreshintervalminutes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stop Refresh After</para>
		/// <para><strong>Description</strong>: The date and time when the Segment should stop getting refreshed automatically</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdynmkt_stoprefreshafterUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdynmkt_stoprefreshafter); }
			set { Entity.Attributes[Fields.msdynmkt_stoprefreshafter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment ids targeted by this segment</para>
		/// <para><strong>Description</strong>: List of unique segment ids that are targeted by this segment for execution.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_targetedsegmentids
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_targetedsegmentids); }
			set { Entity.Attributes[Fields.msdynmkt_targetedsegmentids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Timezone code</para>
		/// <para><strong>Description</strong>: Value of timezone code for the segment</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdynmkt_timezonecode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdynmkt_timezonecode); }
			set { Entity.Attributes[Fields.msdynmkt_timezonecode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Segment Definition</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Segment Definition</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_segmentdefinitionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}