//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:44
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.PostRoleOptionSets
{
	public enum Type
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Mentioning</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Mentioning = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mentioning And Regarding</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Mentioning_And_Regarding = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Regarding = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Topic</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Topic = 4
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class PostRole : EntityBase
	{
		public struct Fields
		{
			public const string OrganizationId = "organizationid";
			public const string PostId = "postid";
			public const string PostRoleId = "postroleid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string Type = "type";
		}
		public const string EntityLogicalName = "postrole";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8001;
		public const string EntityCollectionSchemaName = "PostRoles";
		public const string EntityDisplayCollectionName = "Post Roles";
		public const string DisplayName = "Post Role";
		public const string EntitySetName = "postroles";
		public const string EntityLogicalCollectionName = "postroles";
		public const string EntityPrimaryIdAttribute = "postroleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "PostRole";
		[DebuggerNonUserCode()]
		public PostRole()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PostRole(Guid PostRoleId)
		{
			Entity = new Entity(EntityLogicalName, PostRoleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PostRole(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PostRole"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public PostRole(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PostRole"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PostRole(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PostRole(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="PostRole"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public PostRole(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new PostRole(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public PostRole(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post</para>
		/// <para><strong>Description</strong>: Unique identifier of the post with which the post role is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="post"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PostId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PostId); }
			set { Entity.Attributes[Fields.PostId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: PostRoleId</para>
		/// <para><strong>Description</strong>: Unique identifier of the post role.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PostRoleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PostRoleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: RegardingObjectId</para>
		/// <para><strong>Description</strong>: Choose the record that the post role relates to.</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="appointment"/>, <see cref="competitor"/>, <see cref="contact"/>, <see cref="incident"/>, <see cref="knowledgearticle"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="msdyn_swarm"/>, <see cref="opportunity"/>, <see cref="phonecall"/>, <see cref="processsession"/>, <see cref="queue"/>, <see cref="recurringappointmentmaster"/>, <see cref="systemuser"/>, <see cref="task"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post Role, Regarding, Mention, Topic, etc</para>
		/// <para><strong>Description</strong>: Select the role type for the post.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.PostRoleOptionSets.Type"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.PostRoleOptionSets.Type.Regarding"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.PostRoleOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.PostRoleOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}
	}
}