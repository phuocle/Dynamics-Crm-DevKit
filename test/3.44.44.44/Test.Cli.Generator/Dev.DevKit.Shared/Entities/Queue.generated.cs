//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:45
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.QueueOptionSets
{
	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Approved</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Approved = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Empty</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Empty = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending Approval</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Pending_Approval = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rejected</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Rejected = 3
	}
	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Forward Mailbox</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Forward_Mailbox = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Server-Side Synchronization or Email Router</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}
	public enum IncomingEmailFilteringMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: All email messages</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		All_email_messages = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email messages from Dynamics 365 Leads, Contacts and Accounts</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email_messages_from_Dynamics_365_Leads_Contacts_and_Accounts = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email messages from Dynamics 365 records that are email enabled</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Email_messages_from_Dynamics_365_records_that_are_email_enabled = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email messages in response to Dynamics 365 email</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Email_messages_in_response_to_Dynamics_365_email = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: No email messages</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		No_email_messages = 4
	}
	public enum msdyn_assignmentstrategy
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Assignment Configuration</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Custom_Assignment_Configuration = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Longest Idle</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Longest_Idle = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Omnichannel Assignment</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Omnichannel_Assignment = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Round Robin</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Round_Robin = 192_350_001
	}
	public enum msdyn_queuetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Entity = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Messaging</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Messaging = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Voice = 192_350_002
	}
	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		None = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Server-Side Synchronization or Email Router</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}
	public enum QueueTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum QueueViewType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Private</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Private = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Public</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Public = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Queue : EntityBase
	{
		public struct Fields
		{
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string AllowEmailCredentials = "allowemailcredentials";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string BusinessUnitId = "businessunitid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultMailbox = "defaultmailbox";
			public const string Description = "description";
			public const string EMailAddress = "emailaddress";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string EmailPassword = "emailpassword";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmailSignature = "emailsignature";
			[System.Obsolete("Deprecated from version: 6.0.0.0")]
			public const string EmailUsername = "emailusername";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string IsFaxQueue = "isfaxqueue";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_assignmentinputcontractid = "msdyn_assignmentinputcontractid";
			public const string msdyn_assignmentstrategy = "msdyn_assignmentstrategy";
			public const string msdyn_inqueueoverflowrulesetid = "msdyn_inqueueoverflowrulesetid";
			public const string msdyn_intentfamilyid = "msdyn_intentfamilyid";
			public const string msdyn_isdefaultqueue = "msdyn_isdefaultqueue";
			public const string msdyn_isomnichannelqueue = "msdyn_isomnichannelqueue";
			public const string msdyn_maxqueuesize = "msdyn_maxqueuesize";
			public const string msdyn_operatinghourid = "msdyn_operatinghourid";
			public const string msdyn_operatinghoursbasedassignment = "msdyn_operatinghoursbasedassignment";
			public const string msdyn_prequeueoverflowrulesetid = "msdyn_prequeueoverflowrulesetid";
			public const string msdyn_priority = "msdyn_priority";
			public const string msdyn_processqueueperiodically = "msdyn_processqueueperiodically";
			public const string msdyn_queuetype = "msdyn_queuetype";
			public const string msdyn_uniquename = "msdyn_uniquename";
			public const string Name = "name";
			public const string NumberOfItems = "numberofitems";
			public const string NumberOfMembers = "numberofmembers";
			public const string OrganizationId = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			[System.Obsolete("Deprecated from version: 5.0.0.0")]
			public const string PrimaryUserId = "primaryuserid";
			public const string QueueId = "queueid";
			public const string QueueTypeCode = "queuetypecode";
			public const string QueueViewType = "queueviewtype";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "queue";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2020;
		public const string EntityCollectionSchemaName = "Queues";
		public const string EntityDisplayCollectionName = "Queues";
		public const string DisplayName = "Queue";
		public const string EntitySetName = "queues";
		public const string EntityLogicalCollectionName = "queues";
		public const string EntityPrimaryIdAttribute = "queueid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "Queue";
		[DebuggerNonUserCode()]
		public Queue()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Queue(Guid QueueId)
		{
			Entity = new Entity(EntityLogicalName, QueueId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Queue(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Queue"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Queue(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Queue"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Queue(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Queue(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Queue"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Queue(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Queue(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Queue(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow to Use Credentials for Email Processing (Obsolete)</para>
		/// <para><strong>Description</strong>: This attribute is no longer used. The data is now in the Mailbox.AllowEmailConnectorToUseCredentials attribute.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public bool? AllowEmailCredentials
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowEmailCredentials); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit with which the queue is associated.</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public EntityReference BusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BusinessUnitId); }
			set { Entity.Attributes[Fields.BusinessUnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the queue record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the queue was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mailbox</para>
		/// <para><strong>Description</strong>: Select the mailbox associated with this queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMailbox
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMailbox); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the queue.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incoming Email</para>
		/// <para><strong>Description</strong>: Email address that is associated with the queue.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress); }
			set { Entity.Attributes[Fields.EMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Password (Obsolete)</para>
		/// <para><strong>Description</strong>: This attribute is no longer used. The data is now in the Mailbox.Password attribute.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public string EmailPassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailPassword); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Email Status</para>
		/// <para><strong>Description</strong>: Shows the status of the primary email address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval.Empty"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Signature</para>
		/// <para><strong>Lookup</strong>: <see cref="emailsignature"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference EmailSignature
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.EmailSignature); }
			set { Entity.Attributes[Fields.EmailSignature] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User Name (Obsolete)</para>
		/// <para><strong>Description</strong>: This attribute is no longer used. The data is now in the Mailbox.UserName attribute.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 6.0.0.0")]
		public string EmailUsername
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailUsername); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Image Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the queue with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Convert To Email Activities</para>
		/// <para><strong>Description</strong>: Information that specifies whether a queue is to ignore unsolicited email (deprecated).</para>
		/// <para><strong>Two Option</strong> - [<strong>Only specific Emails</strong>]: true - [<strong>All incoming Emails</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>All incoming Emails</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreUnsolicitedEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreUnsolicitedEmail); }
			set { Entity.Attributes[Fields.IgnoreUnsolicitedEmail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Incoming Email Delivery Method</para>
		/// <para><strong>Description</strong>: Incoming email delivery method for the queue.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Convert Incoming Email To Activities</para>
		/// <para><strong>Description</strong>: Convert Incoming Email To Activities</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod.All_email_messages"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod? IncomingEmailFilteringMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailFilteringMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email Address O365 Admin Approval Status</para>
		/// <para><strong>Description</strong>: Shows the status of approval of the email address by O365 Admin.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fax Queue</para>
		/// <para><strong>Description</strong>: Indication of whether a queue is the fax delivery queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Fax Queue</strong>]: true - [<strong>Non-fax Queue</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Non-fax Queue</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public bool? IsFaxQueue
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFaxQueue); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the queue was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Input Contract Id</para>
		/// <para><strong>Description</strong>: Link assignment input contract with queue.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_decisioncontract"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_assignmentinputcontractid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_assignmentinputcontractid); }
			set { Entity.Attributes[Fields.msdyn_assignmentinputcontractid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Strategy</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_assignmentstrategy"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_assignmentstrategy? msdyn_assignmentstrategy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_assignmentstrategy);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_assignmentstrategy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_assignmentstrategy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_assignmentstrategy] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inqueue Overflow Ruleset</para>
		/// <para><strong>Description</strong>: Define overflow rules for work items after it enters queue</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_decisionruleset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_inqueueoverflowrulesetid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_inqueueoverflowrulesetid); }
			set { Entity.Attributes[Fields.msdyn_inqueueoverflowrulesetid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: intentfamilyid</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_intentfamily"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_intentfamilyid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_intentfamilyid); }
			set { Entity.Attributes[Fields.msdyn_intentfamilyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Default Queue</para>
		/// <para><strong>Description</strong>: Shows whether the queue is set as default or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isdefaultqueue
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isdefaultqueue); }
			set { Entity.Attributes[Fields.msdyn_isdefaultqueue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Omnichannel queue</para>
		/// <para><strong>Description</strong>: Shows whether the queue is used as Omnichannel queue for work distribution.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isomnichannelqueue
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isomnichannelqueue); }
			set { Entity.Attributes[Fields.msdyn_isomnichannelqueue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum queue size</para>
		/// <para><strong>Description</strong>: Maximum queue size</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_maxqueuesize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_maxqueuesize); }
			set { Entity.Attributes[Fields.msdyn_maxqueuesize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Operating Hours</para>
		/// <para><strong>Description</strong>: Unique identifier for Operating hour associated with Queue</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_operatinghour"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_operatinghourid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_operatinghourid); }
			set { Entity.Attributes[Fields.msdyn_operatinghourid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Operating Hours Based Assignment for Queue</para>
		/// <para><strong>Description</strong>: Setting to enable/disable periodic processing of a queue</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_operatinghoursbasedassignment
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_operatinghoursbasedassignment); }
			set { Entity.Attributes[Fields.msdyn_operatinghoursbasedassignment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prequeue Overflow Ruleset</para>
		/// <para><strong>Description</strong>: Define overflow rules for work items before it enters queue</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_decisionruleset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_prequeueoverflowrulesetid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_prequeueoverflowrulesetid); }
			set { Entity.Attributes[Fields.msdyn_prequeueoverflowrulesetid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Priority of the queue to indicate conversation assignment order to the agent.</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_priority
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_priority); }
			set { Entity.Attributes[Fields.msdyn_priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Periodic Processing of Queue</para>
		/// <para><strong>Description</strong>: Setting to enable/disable periodic processing of a queue</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_processqueueperiodically
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_processqueueperiodically); }
			set { Entity.Attributes[Fields.msdyn_processqueueperiodically] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue type</para>
		/// <para><strong>Description</strong>: Defines the type of channels handled by this queue</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_queuetype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_queuetype.Messaging"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_queuetype? msdyn_queuetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_queuetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.msdyn_queuetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_queuetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_queuetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Name</para>
		/// <para><strong>Description</strong>: Unique Name for the entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_uniquename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_uniquename); }
			set { Entity.Attributes[Fields.msdyn_uniquename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the queue.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue Items</para>
		/// <para><strong>Description</strong>: Number of Queue items associated with the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfItems
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfItems); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: No. of Members</para>
		/// <para><strong>Description</strong>: Number of Members associated with the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfMembers
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfMembers); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outgoing Email Delivery Method</para>
		/// <para><strong>Description</strong>: Outgoing email delivery method for the queue.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the queue.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner (deprecated)</para>
		/// <para><strong>Description</strong>: Unique identifier of the owner of the queue.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		[System.Obsolete("Deprecated from version: 5.0.0.0")]
		public EntityReference PrimaryUserId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrimaryUserId); }
			set { Entity.Attributes[Fields.PrimaryUserId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Description</strong>: Unique identifier of the queue.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid QueueId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.QueueId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue Type</para>
		/// <para><strong>Description</strong>: Type of queue that is automatically assigned when a user or queue is created. The type can be public, private, or work in process.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode? QueueTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QueueTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.QueueTypeCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Type</para>
		/// <para><strong>Description</strong>: Select whether the queue is public or private. A public queue can be viewed by all. A private queue can be viewed only by the members added to the queue.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType.Public"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType? QueueViewType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QueueViewType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.QueueViewType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.QueueViewType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.QueueViewType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the queue.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode.Active"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the queue.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.QueueOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.QueueOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.QueueOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the queue.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the queue.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}