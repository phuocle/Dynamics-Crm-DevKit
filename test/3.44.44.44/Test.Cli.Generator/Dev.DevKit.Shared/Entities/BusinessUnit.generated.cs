//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.BusinessUnitOptionSets
{
	public enum Address1_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address1_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_AddressTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
	public enum Address2_ShippingMethodCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Default Value</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Default_Value = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class BusinessUnit : EntityBase
	{
		public struct Fields
		{
			public const string Address1_AddressId = "address1_addressid";
			public const string Address1_AddressTypeCode = "address1_addresstypecode";
			public const string Address1_City = "address1_city";
			public const string Address1_Country = "address1_country";
			public const string Address1_County = "address1_county";
			public const string Address1_Fax = "address1_fax";
			public const string Address1_Latitude = "address1_latitude";
			public const string Address1_Line1 = "address1_line1";
			public const string Address1_Line2 = "address1_line2";
			public const string Address1_Line3 = "address1_line3";
			public const string Address1_Longitude = "address1_longitude";
			public const string Address1_Name = "address1_name";
			public const string Address1_PostalCode = "address1_postalcode";
			public const string Address1_PostOfficeBox = "address1_postofficebox";
			public const string Address1_ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1_StateOrProvince = "address1_stateorprovince";
			public const string Address1_Telephone1 = "address1_telephone1";
			public const string Address1_Telephone2 = "address1_telephone2";
			public const string Address1_Telephone3 = "address1_telephone3";
			public const string Address1_UPSZone = "address1_upszone";
			public const string Address1_UTCOffset = "address1_utcoffset";
			public const string Address2_AddressId = "address2_addressid";
			public const string Address2_AddressTypeCode = "address2_addresstypecode";
			public const string Address2_City = "address2_city";
			public const string Address2_Country = "address2_country";
			public const string Address2_County = "address2_county";
			public const string Address2_Fax = "address2_fax";
			public const string Address2_Latitude = "address2_latitude";
			public const string Address2_Line1 = "address2_line1";
			public const string Address2_Line2 = "address2_line2";
			public const string Address2_Line3 = "address2_line3";
			public const string Address2_Longitude = "address2_longitude";
			public const string Address2_Name = "address2_name";
			public const string Address2_PostalCode = "address2_postalcode";
			public const string Address2_PostOfficeBox = "address2_postofficebox";
			public const string Address2_ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2_StateOrProvince = "address2_stateorprovince";
			public const string Address2_Telephone1 = "address2_telephone1";
			public const string Address2_Telephone2 = "address2_telephone2";
			public const string Address2_Telephone3 = "address2_telephone3";
			public const string Address2_UPSZone = "address2_upszone";
			public const string Address2_UTCOffset = "address2_utcoffset";
			public const string BusinessUnitId = "businessunitid";
			public const string CalendarId = "calendarid";
			public const string CostCenter = "costcenter";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreditLimit = "creditlimit";
			public const string Description = "description";
			public const string DisabledReason = "disabledreason";
			public const string DivisionName = "divisionname";
			public const string EMailAddress = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string FileAsName = "fileasname";
			public const string FtpSiteUrl = "ftpsiteurl";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InheritanceMask = "inheritancemask";
			public const string IsDisabled = "isdisabled";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Team = "msdyn_team";
			public const string msdyn_Warehouse = "msdyn_warehouse";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentBusinessUnitId = "parentbusinessunitid";
			public const string Picture = "picture";
			public const string StockExchange = "stockexchange";
			public const string TickerSymbol = "tickersymbol";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UserGroupId = "usergroupid";
			public const string UTCOffset = "utcoffset";
			public const string VersionNumber = "versionnumber";
			public const string WebSiteUrl = "websiteurl";
			public const string WorkflowSuspended = "workflowsuspended";
		}
		public const string EntityLogicalName = "businessunit";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10;
		public const string EntityCollectionSchemaName = "BusinessUnits";
		public const string EntityDisplayCollectionName = "Business Units";
		public const string DisplayName = "Business Unit";
		public const string EntitySetName = "businessunits";
		public const string EntityLogicalCollectionName = "businessunits";
		public const string EntityPrimaryIdAttribute = "businessunitid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "BusinessUnit";
		[DebuggerNonUserCode()]
		public BusinessUnit()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BusinessUnit(Guid BusinessUnitId)
		{
			Entity = new Entity(EntityLogicalName, BusinessUnitId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BusinessUnit(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BusinessUnit"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public BusinessUnit(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BusinessUnit"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BusinessUnit(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BusinessUnit(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="BusinessUnit"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public BusinessUnit(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new BusinessUnit(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public BusinessUnit(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 1.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address1_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address1_AddressId); }
			set { Entity.Attributes[Fields.Address1_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Address Type</para>
		/// <para><strong>Description</strong>: Type of address for address 1, such as billing, shipping, or primary address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_AddressTypeCode? Address1_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To City</para>
		/// <para><strong>Description</strong>: City name for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_City); }
			set { Entity.Attributes[Fields.Address1_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Country/Region</para>
		/// <para><strong>Description</strong>: Country/region name for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Country); }
			set { Entity.Attributes[Fields.Address1_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: County</para>
		/// <para><strong>Description</strong>: County name for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_County); }
			set { Entity.Attributes[Fields.Address1_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Fax</para>
		/// <para><strong>Description</strong>: Fax number for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Fax); }
			set { Entity.Attributes[Fields.Address1_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Latitude</para>
		/// <para><strong>Description</strong>: Latitude for address 1.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Latitude); }
			set { Entity.Attributes[Fields.Address1_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Street 1</para>
		/// <para><strong>Description</strong>: First line for entering address 1 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line1); }
			set { Entity.Attributes[Fields.Address1_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Street 2</para>
		/// <para><strong>Description</strong>: Second line for entering address 1 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line2); }
			set { Entity.Attributes[Fields.Address1_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To Street 3</para>
		/// <para><strong>Description</strong>: Third line for entering address 1 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Line3); }
			set { Entity.Attributes[Fields.Address1_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Longitude</para>
		/// <para><strong>Description</strong>: Longitude for address 1.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address1_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address1_Longitude); }
			set { Entity.Attributes[Fields.Address1_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Name</para>
		/// <para><strong>Description</strong>: Name to enter for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Name); }
			set { Entity.Attributes[Fields.Address1_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: ZIP Code or postal code for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostalCode); }
			set { Entity.Attributes[Fields.Address1_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Post Office Box</para>
		/// <para><strong>Description</strong>: Post office box number for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address1_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Shipping Method</para>
		/// <para><strong>Description</strong>: Method of shipment for address 1.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_ShippingMethodCode? Address1_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address1_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address1_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address1_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bill To State/Province</para>
		/// <para><strong>Description</strong>: State or province for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_StateOrProvince); }
			set { Entity.Attributes[Fields.Address1_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Main Phone</para>
		/// <para><strong>Description</strong>: First telephone number associated with address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone1); }
			set { Entity.Attributes[Fields.Address1_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other Phone</para>
		/// <para><strong>Description</strong>: Second telephone number associated with address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone2); }
			set { Entity.Attributes[Fields.Address1_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: Telephone 3</para>
		/// <para><strong>Description</strong>: Third telephone number associated with address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_Telephone3); }
			set { Entity.Attributes[Fields.Address1_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UPS Zone</para>
		/// <para><strong>Description</strong>: United Parcel Service (UPS) zone for address 1.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address1_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address1_UPSZone); }
			set { Entity.Attributes[Fields.Address1_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 1: UTC Offset</para>
		/// <para><strong>Description</strong>: UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address1_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address1_UTCOffset); }
			set { Entity.Attributes[Fields.Address1_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: ID</para>
		/// <para><strong>Description</strong>: Unique identifier for address 2.</para>
		/// <para><strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Address2_AddressId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Address2_AddressId); }
			set { Entity.Attributes[Fields.Address2_AddressId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Address Type</para>
		/// <para><strong>Description</strong>: Type of address for address 2, such as billing, shipping, or primary address.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_AddressTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_AddressTypeCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_AddressTypeCode? Address2_AddressTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_AddressTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_AddressTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_AddressTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_AddressTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To City</para>
		/// <para><strong>Description</strong>: City name for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_City); }
			set { Entity.Attributes[Fields.Address2_City] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Country/Region</para>
		/// <para><strong>Description</strong>: Country/region name for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 80</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Country
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Country); }
			set { Entity.Attributes[Fields.Address2_Country] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: County</para>
		/// <para><strong>Description</strong>: County name for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_County
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_County); }
			set { Entity.Attributes[Fields.Address2_County] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Fax</para>
		/// <para><strong>Description</strong>: Fax number for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Fax
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Fax); }
			set { Entity.Attributes[Fields.Address2_Fax] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Latitude</para>
		/// <para><strong>Description</strong>: Latitude for address 2.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Latitude); }
			set { Entity.Attributes[Fields.Address2_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Street 1</para>
		/// <para><strong>Description</strong>: First line for entering address 2 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line1); }
			set { Entity.Attributes[Fields.Address2_Line1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Street 2</para>
		/// <para><strong>Description</strong>: Second line for entering address 2 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line2); }
			set { Entity.Attributes[Fields.Address2_Line2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To Street 3</para>
		/// <para><strong>Description</strong>: Third line for entering address 2 information.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Line3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Line3); }
			set { Entity.Attributes[Fields.Address2_Line3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Longitude</para>
		/// <para><strong>Description</strong>: Longitude for address 2.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? Address2_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.Address2_Longitude); }
			set { Entity.Attributes[Fields.Address2_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Name</para>
		/// <para><strong>Description</strong>: Name to enter for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Name); }
			set { Entity.Attributes[Fields.Address2_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To ZIP/Postal Code</para>
		/// <para><strong>Description</strong>: ZIP Code or postal code for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostalCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostalCode); }
			set { Entity.Attributes[Fields.Address2_PostalCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Post Office Box</para>
		/// <para><strong>Description</strong>: Post office box number for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_PostOfficeBox
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_PostOfficeBox); }
			set { Entity.Attributes[Fields.Address2_PostOfficeBox] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Shipping Method</para>
		/// <para><strong>Description</strong>: Method of shipment for address 2.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_ShippingMethodCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_ShippingMethodCode.Default_Value"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_ShippingMethodCode? Address2_ShippingMethodCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Address2_ShippingMethodCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.BusinessUnitOptionSets.Address2_ShippingMethodCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Address2_ShippingMethodCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ship To State/Province</para>
		/// <para><strong>Description</strong>: State or province for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_StateOrProvince
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_StateOrProvince); }
			set { Entity.Attributes[Fields.Address2_StateOrProvince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 1</para>
		/// <para><strong>Description</strong>: First telephone number associated with address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone1
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone1); }
			set { Entity.Attributes[Fields.Address2_Telephone1] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 2</para>
		/// <para><strong>Description</strong>: Second telephone number associated with address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone2
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone2); }
			set { Entity.Attributes[Fields.Address2_Telephone2] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: Telephone 3</para>
		/// <para><strong>Description</strong>: Third telephone number associated with address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_Telephone3
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_Telephone3); }
			set { Entity.Attributes[Fields.Address2_Telephone3] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UPS Zone</para>
		/// <para><strong>Description</strong>: United Parcel Service (UPS) zone for address 2.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Address2_UPSZone
		{
			get { return Entity.GetAttributeValue<string>(Fields.Address2_UPSZone); }
			set { Entity.Attributes[Fields.Address2_UPSZone] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address 2: UTC Offset</para>
		/// <para><strong>Description</strong>: UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Address2_UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Address2_UTCOffset); }
			set { Entity.Attributes[Fields.Address2_UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BusinessUnitId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BusinessUnitId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar</para>
		/// <para><strong>Description</strong>: Fiscal calendar associated with the business unit.</para>
		/// <para><strong>Lookup</strong>: <see cref="calendar"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CalendarId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CalendarId); }
			set { Entity.Attributes[Fields.CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Cost Center</para>
		/// <para><strong>Description</strong>: Name of the business unit cost center.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CostCenter
		{
			get { return Entity.GetAttributeValue<string>(Fields.CostCenter); }
			set { Entity.Attributes[Fields.CostCenter] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the business unit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the business unit was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the businessunit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Credit Limit</para>
		/// <para><strong>Description</strong>: Credit limit for the business unit.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? CreditLimit
		{
			get { return Entity.GetAttributeValue<double?>(Fields.CreditLimit); }
			set { Entity.Attributes[Fields.CreditLimit] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the business unit.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Disable Reason</para>
		/// <para><strong>Description</strong>: Reason for disabling the business unit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DisabledReason
		{
			get { return Entity.GetAttributeValue<string>(Fields.DisabledReason); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Division</para>
		/// <para><strong>Description</strong>: Name of the division to which the business unit belongs.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DivisionName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DivisionName); }
			set { Entity.Attributes[Fields.DivisionName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Description</strong>: Email address for the business unit.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress); }
			set { Entity.Attributes[Fields.EMailAddress] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the businessunit with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: File as Name</para>
		/// <para><strong>Description</strong>: Alternative name under which the business unit can be filed.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileAsName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileAsName); }
			set { Entity.Attributes[Fields.FileAsName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: FTP Site</para>
		/// <para><strong>Description</strong>: FTP site URL for the business unit.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FtpSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.FtpSiteUrl); }
			set { Entity.Attributes[Fields.FtpSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Unique identifier of the data import or data migration that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inheritance Mask</para>
		/// <para><strong>Description</strong>: Inheritance mask for the business unit.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InheritanceMask
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InheritanceMask); }
			set { Entity.Attributes[Fields.InheritanceMask] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Disabled</para>
		/// <para><strong>Description</strong>: Information about whether the business unit is enabled or disabled.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDisabled); }
			set { Entity.Attributes[Fields.IsDisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who last modified the business unit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the business unit was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the businessunit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Frontline Team</para>
		/// <para><strong>Description</strong>: This is a lookup to Teams from the Business Unit</para>
		/// <para><strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Team
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Team); }
			set { Entity.Attributes[Fields.msdyn_Team] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Warehouse (Deprecated)</para>
		/// <para><strong>Description</strong>: Unique identifier for Warehouse associated with Business Unit.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_warehouse"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Warehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Warehouse); }
			set { Entity.Attributes[Fields.msdyn_Warehouse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the business unit.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 160</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the business unit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Business</para>
		/// <para><strong>Description</strong>: Unique identifier for the parent business unit.</para>
		/// <para><strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentBusinessUnitId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentBusinessUnitId); }
			set { Entity.Attributes[Fields.ParentBusinessUnitId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Picture</para>
		/// <para><strong>Description</strong>: Picture or diagram of the business unit.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Picture
		{
			get { return Entity.GetAttributeValue<string>(Fields.Picture); }
			set { Entity.Attributes[Fields.Picture] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stock Exchange</para>
		/// <para><strong>Description</strong>: Stock exchange on which the business is listed.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 20</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StockExchange
		{
			get { return Entity.GetAttributeValue<string>(Fields.StockExchange); }
			set { Entity.Attributes[Fields.StockExchange] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Ticker Symbol</para>
		/// <para><strong>Description</strong>: Stock exchange ticker symbol for the business unit.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 10</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TickerSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.TickerSymbol); }
			set { Entity.Attributes[Fields.TickerSymbol] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the businessunit.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? UserGroupId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.UserGroupId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Offset</para>
		/// <para><strong>Description</strong>: UTC offset for the business unit. This is the difference between local time and standard Coordinated Universal Time.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1,500 - <strong>MaxValue</strong>: 1,500</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCOffset
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCOffset); }
			set { Entity.Attributes[Fields.UTCOffset] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version number</para>
		/// <para><strong>Description</strong>: Version number of the business unit.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Website URL for the business unit.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WebSiteUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.WebSiteUrl); }
			set { Entity.Attributes[Fields.WebSiteUrl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Workflow Suspended</para>
		/// <para><strong>Description</strong>: Information about whether workflow or sales process rules have been suspended.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WorkflowSuspended
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WorkflowSuspended); }
			set { Entity.Attributes[Fields.WorkflowSuspended] = value; }
		}
	}
}