//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:35
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets
{
	public enum msdyncrm_durationunit
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Day</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Day = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hour</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Hour = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Month</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Month = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Week</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Week = 192_350_003
	}
	public enum msdyncrm_permitteddays
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Friday</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Friday = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: Monday</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Monday = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Saturday</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Saturday = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sunday</para>
		/// <para><strong>Value</strong>: 192,350,006</para>
		/// </summary>
		Sunday = 192_350_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thursday</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Thursday = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Tuesday</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Tuesday = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wednesday</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Wednesday = 192_350_002
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_delaydurationactivity : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_automateschedule = "msdyncrm_automateschedule";
			public const string msdyncrm_delaydurationactivityId = "msdyncrm_delaydurationactivityid";
			public const string msdyncrm_description = "msdyncrm_description";
			public const string msdyncrm_durationamount = "msdyncrm_durationamount";
			public const string msdyncrm_durationunit = "msdyncrm_durationunit";
			public const string msdyncrm_expiration = "msdyncrm_expiration";
			public const string msdyncrm_expirationdate = "msdyncrm_expirationdate";
			public const string msdyncrm_insightsdata = "msdyncrm_insightsdata";
			public const string msdyncrm_manualschedulerdisabled = "msdyncrm_manualschedulerdisabled";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_permitteddays = "msdyncrm_permitteddays";
			public const string msdyncrm_permittedtimeend = "msdyncrm_permittedtimeend";
			public const string msdyncrm_permittedtimestart = "msdyncrm_permittedtimestart";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_delaydurationactivity";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11216;
		public const string EntityCollectionSchemaName = "msdyncrm_delaydurationactivities";
		public const string EntityDisplayCollectionName = "Delay (duration) activities";
		public const string DisplayName = "Delay (duration) Activity";
		public const string EntitySetName = "msdyncrm_delaydurationactivities";
		public const string EntityLogicalCollectionName = "msdyncrm_delaydurationactivities";
		public const string EntityPrimaryIdAttribute = "msdyncrm_delaydurationactivityid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_delaydurationactivity";
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity(Guid msdyncrm_delaydurationactivityId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_delaydurationactivityId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_delaydurationactivity"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_delaydurationactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_delaydurationactivity(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_delaydurationactivity"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_delaydurationactivity(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_delaydurationactivity(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Automate schedule</para>
		/// <para><strong>Two Option</strong> - [<strong>Automated scheduling enabled</strong>]: true - [<strong>Automated scheduling disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Automated scheduling disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_automateschedule
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_automateschedule); }
			set { Entity.Attributes[Fields.msdyncrm_automateschedule] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: delayactivity</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_delaydurationactivityId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_delaydurationactivityId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_description); }
			set { Entity.Attributes[Fields.msdyncrm_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration Amount</para>
		/// <para>Required - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 365</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyncrm_durationamount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyncrm_durationamount); }
			set { Entity.Attributes[Fields.msdyncrm_durationamount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration Unit</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_durationunit"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_durationunit.Hour"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_durationunit? msdyncrm_durationunit
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyncrm_durationunit);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_durationunit)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyncrm_durationunit] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyncrm_durationunit] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Automate schedule</para>
		/// <para><strong>Two Option</strong> - [<strong>Scheduler expiration enabled</strong>]: true - [<strong>Scheduler expiration disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Scheduler expiration disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_expiration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_expiration); }
			set { Entity.Attributes[Fields.msdyncrm_expiration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Expiration date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_expirationdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_expirationdate); }
			set { Entity.Attributes[Fields.msdyncrm_expirationdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Insights data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_insightsdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_insightsdata); }
			set { Entity.Attributes[Fields.msdyncrm_insightsdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual schedule</para>
		/// <para><strong>Two Option</strong> - [<strong>Manual scheduling enabled</strong>]: true - [<strong>Manual scheduling disabled</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Manual scheduling disabled</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_manualschedulerdisabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_manualschedulerdisabled); }
			set { Entity.Attributes[Fields.msdyncrm_manualschedulerdisabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permitted Days</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_permitteddays"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_permitteddays> msdyncrm_permitteddays
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_permitteddays>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyncrm_permitteddays);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.msdyncrm_permitteddays)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyncrm_permitteddays] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyncrm_permitteddays] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permitted hours: end</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_permittedtimeendUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_permittedtimeend); }
			set { Entity.Attributes[Fields.msdyncrm_permittedtimeend] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permitted hours: start</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyncrm_permittedtimestartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyncrm_permittedtimestart); }
			set { Entity.Attributes[Fields.msdyncrm_permittedtimestart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the delayactivity</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the delayactivity</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_delaydurationactivityOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}