//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.UserEntityUISettingsOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class UserEntityUISettings : EntityBase
	{
		public struct Fields
		{
			public const string InsertIntoEmailMRUXml = "insertintoemailmruxml";
			public const string LastViewedFormXml = "lastviewedformxml";
			public const string LookupMRUXml = "lookupmruxml";
			public const string MRUXml = "mruxml";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ReadingPaneXml = "readingpanexml";
			public const string RecentlyViewedXml = "recentlyviewedxml";
			public const string ShowInAddressBook = "showinaddressbook";
			public const string TabOrderXml = "taborderxml";
			public const string UserEntityUISettingsId = "userentityuisettingsid";
			public const string VersionNumber = "versionnumber";
			public const string ViewPersonalizationSettings = "viewpersonalizationsettings";
		}
		public const string EntityLogicalName = "userentityuisettings";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 2500;
		public const string EntityCollectionSchemaName = "UserEntityUISettingses";
		public const string EntityDisplayCollectionName = "User Entity UI Settings";
		public const string DisplayName = "User Entity UI Settings";
		public const string EntitySetName = "userentityuisettingsset";
		public const string EntityLogicalCollectionName = "userentityuisettingses";
		public const string EntityPrimaryIdAttribute = "userentityuisettingsid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "UserEntityUISettings";
		[DebuggerNonUserCode()]
		public UserEntityUISettings()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Guid UserEntityUISettingsId)
		{
			Entity = new Entity(EntityLogicalName, UserEntityUISettingsId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public UserEntityUISettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="UserEntityUISettings"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="UserEntityUISettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new UserEntityUISettings(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="UserEntityUISettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public UserEntityUISettings(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new UserEntityUISettings(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public UserEntityUISettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most Recently Inserted Into Email Xml</para>
		/// <para><strong>Description</strong>: Describes which entities are most recently inserted into email for this entity</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InsertIntoEmailMRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.InsertIntoEmailMRUXml); }
			set { Entity.Attributes[Fields.InsertIntoEmailMRUXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Viewed Form Xml</para>
		/// <para><strong>Description</strong>: Describes which forms are most recently viewed for this entity.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LastViewedFormXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LastViewedFormXml); }
			set { Entity.Attributes[Fields.LastViewedFormXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most Recently Used Xml</para>
		/// <para><strong>Description</strong>: List of most recently used lookup references for this entity</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LookupMRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.LookupMRUXml); }
			set { Entity.Attributes[Fields.LookupMRUXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most Recently Used Xml</para>
		/// <para><strong>Description</strong>: Describes which tabs are most recently used for this entity</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MRUXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.MRUXml); }
			set { Entity.Attributes[Fields.MRUXml] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Object Type Code</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the settings.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns this saved view.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns this saved view.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conditional formatting</para>
		/// <para><strong>Description</strong>: Describes the reading pane formatting of this entity</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ReadingPaneXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.ReadingPaneXml); }
			set { Entity.Attributes[Fields.ReadingPaneXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Most Recently Viewed Objects</para>
		/// <para><strong>Description</strong>: Describes which objects are most recently viewed for this entity</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecentlyViewedXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecentlyViewedXml); }
			set { Entity.Attributes[Fields.RecentlyViewedXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show In Address Book</para>
		/// <para><strong>Description</strong>: Determines whether a record type is exposed in the Outlook Address Book</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ShowInAddressBook
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ShowInAddressBook); }
			set { Entity.Attributes[Fields.ShowInAddressBook] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tab Order Xml</para>
		/// <para><strong>Description</strong>: Describes the tab ordering for this entity</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TabOrderXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TabOrderXml); }
			set { Entity.Attributes[Fields.TabOrderXml] = value; }
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier user entity</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid UserEntityUISettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.UserEntityUISettingsId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: View personalization settings</para>
		/// <para><strong>Description</strong>: Data representing the view personalization settings</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ViewPersonalizationSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.ViewPersonalizationSettings); }
			set { Entity.Attributes[Fields.ViewPersonalizationSettings] = value; }
		}
	}
}