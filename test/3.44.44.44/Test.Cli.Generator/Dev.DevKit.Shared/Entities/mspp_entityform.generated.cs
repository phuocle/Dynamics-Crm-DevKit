//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.mspp_entityformOptionSets
{
	public enum mspp_attachfilesaveoption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Notes</para>
		/// <para><strong>Value</strong>: 756,150,000</para>
		/// </summary>
		Notes = 756_150_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Portal_Comment = 756_150_001
	}
	public enum mspp_attachfilestoragelocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Azure Blob Storage</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Azure_Blob_Storage = 756_150_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Note Attachment</para>
		/// <para><strong>Value</strong>: 756,150,000</para>
		/// </summary>
		Note_Attachment = 756_150_000
	}
	public enum mspp_entitysourcetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Current Portal User</para>
		/// <para><strong>Value</strong>: 756,150,002</para>
		/// </summary>
		Current_Portal_User = 756_150_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Query String</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Query_String = 756_150_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Associated to Current Portal User</para>
		/// <para><strong>Value</strong>: 756,150,003</para>
		/// </summary>
		Record_Associated_to_Current_Portal_User = 756_150_003
	}
	public enum mspp_geolocation_maptype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Bing</para>
		/// <para><strong>Value</strong>: 756,150,000</para>
		/// </summary>
		Bing = 756_150_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Esri</para>
		/// <para><strong>Value</strong>: 756,150,002</para>
		/// </summary>
		Esri = 756_150_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Google = 756_150_001
	}
	public enum mspp_mode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Edit</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Edit = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Insert</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Insert = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: ReadOnly</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		ReadOnly = 100_000_002
	}
	public enum mspp_onsuccess
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Success Message</para>
		/// <para><strong>Value</strong>: 756,150,000</para>
		/// </summary>
		Display_Success_Message = 756_150_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Redirect = 756_150_001
	}
	public enum mspp_referenceentitysourcetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Query String</para>
		/// <para><strong>Value</strong>: 756,150,000</para>
		/// </summary>
		Query_String = 756_150_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Associated to Current Portal User</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Record_Associated_to_Current_Portal_User = 756_150_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class mspp_entityform : EntityBase
	{
		public struct Fields
		{
			public const string mspp_appendquerystring = "mspp_appendquerystring";
			public const string mspp_associatecurrentportaluser = "mspp_associatecurrentportaluser";
			public const string mspp_attachfile = "mspp_attachfile";
			public const string mspp_attachfileaccept = "mspp_attachfileaccept";
			public const string mspp_attachfileacceptextensions = "mspp_attachfileacceptextensions";
			public const string mspp_attachfileallowmultiple = "mspp_attachfileallowmultiple";
			public const string mspp_attachfilelabel = "mspp_attachfilelabel";
			public const string mspp_attachfilemaxsize = "mspp_attachfilemaxsize";
			public const string mspp_attachfilerequired = "mspp_attachfilerequired";
			public const string mspp_attachfilerequirederrormessage = "mspp_attachfilerequirederrormessage";
			public const string mspp_attachfilerestrictaccept = "mspp_attachfilerestrictaccept";
			public const string mspp_attachfilesaveoption = "mspp_attachfilesaveoption";
			public const string mspp_attachfilesizeerrormessage = "mspp_attachfilesizeerrormessage";
			public const string mspp_attachfilestoragelocation = "mspp_attachfilestoragelocation";
			public const string mspp_attachfiletypeerrormessage = "mspp_attachfiletypeerrormessage";
			public const string mspp_autogeneratesteps = "mspp_autogeneratesteps";
			public const string mspp_captcharequired = "mspp_captcharequired";
			public const string mspp_containername = "mspp_containername";
			public const string mspp_createdby = "mspp_createdby";
			public const string mspp_createdon = "mspp_createdon";
			public const string mspp_entityformId = "mspp_entityformid";
			public const string mspp_entityname = "mspp_entityname";
			public const string mspp_entitypermissionsenabled = "mspp_entitypermissionsenabled";
			public const string mspp_entitysourcetype = "mspp_entitysourcetype";
			public const string mspp_forceallfieldsrequired = "mspp_forceallfieldsrequired";
			public const string mspp_formname = "mspp_formname";
			public const string mspp_geolocation_addresslinefieldname = "mspp_geolocation_addresslinefieldname";
			public const string mspp_geolocation_cityfieldname = "mspp_geolocation_cityfieldname";
			public const string mspp_geolocation_countryfieldname = "mspp_geolocation_countryfieldname";
			public const string mspp_geolocation_countyfieldname = "mspp_geolocation_countyfieldname";
			public const string mspp_geolocation_displaymap = "mspp_geolocation_displaymap";
			public const string mspp_geolocation_enabled = "mspp_geolocation_enabled";
			public const string mspp_geolocation_formattedaddressfieldname = "mspp_geolocation_formattedaddressfieldname";
			public const string mspp_geolocation_latitudefieldname = "mspp_geolocation_latitudefieldname";
			public const string mspp_geolocation_longitudefieldname = "mspp_geolocation_longitudefieldname";
			public const string mspp_geolocation_maptype = "mspp_geolocation_maptype";
			public const string mspp_geolocation_neighborhoodfieldname = "mspp_geolocation_neighborhoodfieldname";
			public const string mspp_geolocation_postalcodefieldname = "mspp_geolocation_postalcodefieldname";
			public const string mspp_geolocation_statefieldname = "mspp_geolocation_statefieldname";
			public const string mspp_hideformonsuccess = "mspp_hideformonsuccess";
			public const string mspp_instructions = "mspp_instructions";
			public const string mspp_maximumnooffiles = "mspp_maximumnooffiles";
			public const string mspp_mode = "mspp_mode";
			public const string mspp_modifiedby = "mspp_modifiedby";
			public const string mspp_modifiedon = "mspp_modifiedon";
			public const string mspp_name = "mspp_name";
			public const string mspp_nextbuttoncssclass = "mspp_nextbuttoncssclass";
			public const string mspp_nextbuttontext = "mspp_nextbuttontext";
			public const string mspp_onsuccess = "mspp_onsuccess";
			public const string mspp_populatereferenceentitylookupfield = "mspp_populatereferenceentitylookupfield";
			public const string mspp_portaluserlookupattributeisactivityparty = "mspp_portaluserlookupattributeisactivityparty";
			public const string mspp_previousbuttoncssclass = "mspp_previousbuttoncssclass";
			public const string mspp_previousbuttontext = "mspp_previousbuttontext";
			public const string mspp_primarykeyname = "mspp_primarykeyname";
			public const string mspp_provisionedlanguages = "mspp_provisionedlanguages";
			public const string mspp_recommendedfieldsrequired = "mspp_recommendedfieldsrequired";
			public const string mspp_recordidquerystringparametername = "mspp_recordidquerystringparametername";
			public const string mspp_recordnotfoundmessage = "mspp_recordnotfoundmessage";
			public const string mspp_recordsourceallowcreateonnull = "mspp_recordsourceallowcreateonnull";
			public const string mspp_recordsourceentitylogicalname = "mspp_recordsourceentitylogicalname";
			public const string mspp_recordsourcerelationshipname = "mspp_recordsourcerelationshipname";
			public const string mspp_redirecturl = "mspp_redirecturl";
			public const string mspp_redirecturlappendentityidquerystring = "mspp_redirecturlappendentityidquerystring";
			public const string mspp_redirecturlcustomquerystring = "mspp_redirecturlcustomquerystring";
			public const string mspp_redirecturlquerystringattribute = "mspp_redirecturlquerystringattribute";
			public const string mspp_redirecturlquerystringattributeparamname = "mspp_redirecturlquerystringattributeparamname";
			public const string mspp_redirecturlquerystringname = "mspp_redirecturlquerystringname";
			public const string mspp_redirectwebpage = "mspp_redirectwebpage";
			public const string mspp_referenceentitylogicalname = "mspp_referenceentitylogicalname";
			public const string mspp_referenceentityprimarykeylogicalname = "mspp_referenceentityprimarykeylogicalname";
			public const string mspp_referenceentityreadonlyformname = "mspp_referenceentityreadonlyformname";
			public const string mspp_referenceentityrelationshipname = "mspp_referenceentityrelationshipname";
			public const string mspp_referenceentityshowreadonlyform = "mspp_referenceentityshowreadonlyform";
			public const string mspp_referenceentitysourcetype = "mspp_referenceentitysourcetype";
			public const string mspp_referencequeryattributelogicalname = "mspp_referencequeryattributelogicalname";
			public const string mspp_referencequerystringisprimarykey = "mspp_referencequerystringisprimarykey";
			public const string mspp_referencequerystringname = "mspp_referencequerystringname";
			public const string mspp_referencerecordsourcerelationshipname = "mspp_referencerecordsourcerelationshipname";
			public const string mspp_referencetargetlookupattributelogicalname = "mspp_referencetargetlookupattributelogicalname";
			public const string mspp_registerstartupscript = "mspp_registerstartupscript";
			public const string mspp_renderwebresourcesinline = "mspp_renderwebresourcesinline";
			public const string mspp_setentityreference = "mspp_setentityreference";
			public const string mspp_settings = "mspp_settings";
			public const string mspp_showcaptchaforauthenticatedusers = "mspp_showcaptchaforauthenticatedusers";
			public const string mspp_showownerfields = "mspp_showownerfields";
			public const string mspp_showunsupportedfields = "mspp_showunsupportedfields";
			public const string mspp_storageaccountname = "mspp_storageaccountname";
			public const string mspp_submitbuttonbusytext = "mspp_submitbuttonbusytext";
			public const string mspp_submitbuttoncssclass = "mspp_submitbuttoncssclass";
			public const string mspp_submitbuttontext = "mspp_submitbuttontext";
			public const string mspp_successmessage = "mspp_successmessage";
			public const string mspp_tabname = "mspp_tabname";
			public const string mspp_targetentityportaluserlookupattribute = "mspp_targetentityportaluserlookupattribute";
			public const string mspp_tooltipenabled = "mspp_tooltipenabled";
			public const string mspp_validationgroup = "mspp_validationgroup";
			public const string mspp_validationsummarycssclass = "mspp_validationsummarycssclass";
			public const string mspp_validationsummaryheadertext = "mspp_validationsummaryheadertext";
			public const string mspp_validationsummarylinksenabled = "mspp_validationsummarylinksenabled";
			public const string mspp_validationsummarylinktext = "mspp_validationsummarylinktext";
			public const string mspp_websiteid = "mspp_websiteid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
		}
		public const string EntityLogicalName = "mspp_entityform";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10321;
		public const string EntityCollectionSchemaName = "mspp_entityforms";
		public const string EntityDisplayCollectionName = "Basic Forms";
		public const string DisplayName = "Basic Form";
		public const string EntitySetName = "mspp_entityforms";
		public const string EntityLogicalCollectionName = "mspp_entityforms";
		public const string EntityPrimaryIdAttribute = "mspp_entityformid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "mspp_name";
		public const string EntitySchemaName = "mspp_entityform";
		[DebuggerNonUserCode()]
		public mspp_entityform()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_entityform(Guid mspp_entityformId)
		{
			Entity = new Entity(EntityLogicalName, mspp_entityformId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_entityform(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_entityform"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public mspp_entityform(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_entityform"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_entityform(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_entityform(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_entityform"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_entityform(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_entityform(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_entityform(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Append Query String</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_appendquerystring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_appendquerystring); }
			set { Entity.Attributes[Fields.mspp_appendquerystring] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Associate Current Portal User</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_associatecurrentportaluser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_associatecurrentportaluser); }
			set { Entity.Attributes[Fields.mspp_associatecurrentportaluser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_attachfile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_attachfile); }
			set { Entity.Attributes[Fields.mspp_attachfile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File MIME Type Accept</para>
		/// <para><strong>Description</strong>: The accept attribute specifies the MIME types of files that the server accepts through file upload. To specify more than one value, separate the values with a comma (e.g. audio/*,video/*,image/*).</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_attachfileaccept
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_attachfileaccept); }
			set { Entity.Attributes[Fields.mspp_attachfileaccept] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Extension Type Accept</para>
		/// <para><strong>Description</strong>: The accept attribute specifies the extension types of files that the server accepts through file upload. To specify more than one value, separate the values with a comma (e.g. .docx,.pdf,.txt).</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_attachfileacceptextensions
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_attachfileacceptextensions); }
			set { Entity.Attributes[Fields.mspp_attachfileacceptextensions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Allow Multiple</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_attachfileallowmultiple
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_attachfileallowmultiple); }
			set { Entity.Attributes[Fields.mspp_attachfileallowmultiple] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Label</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_attachfilelabel
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_attachfilelabel); }
			set { Entity.Attributes[Fields.mspp_attachfilelabel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum File Size</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_attachfilemaxsize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_attachfilemaxsize); }
			set { Entity.Attributes[Fields.mspp_attachfilemaxsize] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Required</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_attachfilerequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_attachfilerequired); }
			set { Entity.Attributes[Fields.mspp_attachfilerequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Required Error Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_attachfilerequirederrormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_attachfilerequirederrormessage); }
			set { Entity.Attributes[Fields.mspp_attachfilerequirederrormessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Restrict Files To Accepted Types</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_attachfilerestrictaccept
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_attachfilerestrictaccept); }
			set { Entity.Attributes[Fields.mspp_attachfilerestrictaccept] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Save Option</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_attachfilesaveoption"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_attachfilesaveoption? mspp_attachfilesaveoption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_attachfilesaveoption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_attachfilesaveoption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_attachfilesaveoption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_attachfilesaveoption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Size Error Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_attachfilesizeerrormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_attachfilesizeerrormessage); }
			set { Entity.Attributes[Fields.mspp_attachfilesizeerrormessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Storage Location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_attachfilestoragelocation"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_attachfilestoragelocation? mspp_attachfilestoragelocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_attachfilestoragelocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_attachfilestoragelocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_attachfilestoragelocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_attachfilestoragelocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attach File Type Error Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_attachfiletypeerrormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_attachfiletypeerrormessage); }
			set { Entity.Attributes[Fields.mspp_attachfiletypeerrormessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto Generate Steps From Tabs</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_autogeneratesteps
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_autogeneratesteps); }
			set { Entity.Attributes[Fields.mspp_autogeneratesteps] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Captcha Required</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_captcharequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_captcharequired); }
			set { Entity.Attributes[Fields.mspp_captcharequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Container Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_containername
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_containername); }
			set { Entity.Attributes[Fields.mspp_containername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_createdby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_createdby); }
			set { Entity.Attributes[Fields.mspp_createdby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_createdon); }
			set { Entity.Attributes[Fields.mspp_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Basic Form</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid mspp_entityformId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.mspp_entityformId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Table Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_entityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_entityname); }
			set { Entity.Attributes[Fields.mspp_entityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Table Permissions</para>
		/// <para><strong>Description</strong>: Indicates whether or not the table permission provider will assert privileges.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_entitypermissionsenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_entitypermissionsenabled); }
			set { Entity.Attributes[Fields.mspp_entitypermissionsenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Table Source Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_entitysourcetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_entitysourcetype? mspp_entitysourcetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_entitysourcetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_entitysourcetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_entitysourcetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_entitysourcetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Make All Fields Required</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_forceallfieldsrequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_forceallfieldsrequired); }
			set { Entity.Attributes[Fields.mspp_forceallfieldsrequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form Name</para>
		/// <para><strong>Description</strong>: Shows the name of the entity form to render.</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_formname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_formname); }
			set { Entity.Attributes[Fields.mspp_formname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Address Line Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_addresslinefieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_addresslinefieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_addresslinefieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: City Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_cityfieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_cityfieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_cityfieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country/Region Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_countryfieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_countryfieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_countryfieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: County Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_countyfieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_countyfieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_countyfieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Display Map</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_geolocation_displaymap
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_geolocation_displaymap); }
			set { Entity.Attributes[Fields.mspp_geolocation_displaymap] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_geolocation_enabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_geolocation_enabled); }
			set { Entity.Attributes[Fields.mspp_geolocation_enabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Formatted Address Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_formattedaddressfieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_formattedaddressfieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_formattedaddressfieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_latitudefieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_latitudefieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_latitudefieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_longitudefieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_longitudefieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_longitudefieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Map Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_geolocation_maptype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_geolocation_maptype.Bing"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_geolocation_maptype? mspp_geolocation_maptype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_geolocation_maptype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_geolocation_maptype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_geolocation_maptype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_geolocation_maptype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Neighborhood Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_neighborhoodfieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_neighborhoodfieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_neighborhoodfieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Zip/Postal Code Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_postalcodefieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_postalcodefieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_postalcodefieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State or Province Field Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_geolocation_statefieldname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_geolocation_statefieldname); }
			set { Entity.Attributes[Fields.mspp_geolocation_statefieldname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Hide Form on Success</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_hideformonsuccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_hideformonsuccess); }
			set { Entity.Attributes[Fields.mspp_hideformonsuccess] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Instructions</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_instructions
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_instructions); }
			set { Entity.Attributes[Fields.mspp_instructions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum No Of Files</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_maximumnooffiles
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_maximumnooffiles); }
			set { Entity.Attributes[Fields.mspp_maximumnooffiles] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mode</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_mode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_mode.Insert"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_mode? mspp_mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_mode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_mode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_modifiedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_modifiedby); }
			set { Entity.Attributes[Fields.mspp_modifiedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was modified.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_modifiedon); }
			set { Entity.Attributes[Fields.mspp_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_name); }
			set { Entity.Attributes[Fields.mspp_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Button CSS Class</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_nextbuttoncssclass
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_nextbuttoncssclass); }
			set { Entity.Attributes[Fields.mspp_nextbuttoncssclass] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Next Button Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_nextbuttontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_nextbuttontext); }
			set { Entity.Attributes[Fields.mspp_nextbuttontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: On Success</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_onsuccess"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_onsuccess.Display_Success_Message"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_onsuccess? mspp_onsuccess
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_onsuccess);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_onsuccess)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_onsuccess] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_onsuccess] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Populate Table Reference Lookup Field</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_populatereferenceentitylookupfield
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_populatereferenceentitylookupfield); }
			set { Entity.Attributes[Fields.mspp_populatereferenceentitylookupfield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Activity Party</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_portaluserlookupattributeisactivityparty
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_portaluserlookupattributeisactivityparty); }
			set { Entity.Attributes[Fields.mspp_portaluserlookupattributeisactivityparty] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous Button CSS Class</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_previousbuttoncssclass
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_previousbuttoncssclass); }
			set { Entity.Attributes[Fields.mspp_previousbuttoncssclass] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous Button Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_previousbuttontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_previousbuttontext); }
			set { Entity.Attributes[Fields.mspp_previousbuttontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Primary Key Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_primarykeyname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_primarykeyname); }
			set { Entity.Attributes[Fields.mspp_primarykeyname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Provisioned Languages</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? mspp_provisionedlanguages
		{
			get { return Entity.GetAttributeValue<int?>(Fields.mspp_provisionedlanguages); }
			set { Entity.Attributes[Fields.mspp_provisionedlanguages] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recommended Fields Required</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_recommendedfieldsrequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_recommendedfieldsrequired); }
			set { Entity.Attributes[Fields.mspp_recommendedfieldsrequired] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record ID Parameter Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_recordidquerystringparametername
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_recordidquerystringparametername); }
			set { Entity.Attributes[Fields.mspp_recordidquerystringparametername] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Not Found Message</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_recordnotfoundmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_recordnotfoundmessage); }
			set { Entity.Attributes[Fields.mspp_recordnotfoundmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Create If Null</para>
		/// <para><strong>Description</strong>: This flag, when set to &quot;true,&quot; allows the user to create a record if the record doesn&apos;t already exist and the Record Source Type is &quot;Record Associated with Current Portal User.&quot;</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_recordsourceallowcreateonnull
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_recordsourceallowcreateonnull); }
			set { Entity.Attributes[Fields.mspp_recordsourceallowcreateonnull] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Source Table Logical Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_recordsourceentitylogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_recordsourceentitylogicalname); }
			set { Entity.Attributes[Fields.mspp_recordsourceentitylogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Relationship Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_recordsourcerelationshipname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_recordsourcerelationshipname); }
			set { Entity.Attributes[Fields.mspp_recordsourcerelationshipname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect URL</para>
		/// <para><strong>Description</strong>: Shows the URL to redirect to.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_redirecturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_redirecturl); }
			set { Entity.Attributes[Fields.mspp_redirecturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Append Table ID To Query String</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_redirecturlappendentityidquerystring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_redirecturlappendentityidquerystring); }
			set { Entity.Attributes[Fields.mspp_redirecturlappendentityidquerystring] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Query String</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_redirecturlcustomquerystring
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_redirecturlcustomquerystring); }
			set { Entity.Attributes[Fields.mspp_redirecturlcustomquerystring] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Attribute Logical Name</para>
		/// <para><strong>Description</strong>: Add an attribute value as a query string value by specifying the logical name of the attribute to assign its value to the query string.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_redirecturlquerystringattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_redirecturlquerystringattribute); }
			set { Entity.Attributes[Fields.mspp_redirecturlquerystringattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Query String Parameter Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_redirecturlquerystringattributeparamname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_redirecturlquerystringattributeparamname); }
			set { Entity.Attributes[Fields.mspp_redirecturlquerystringattributeparamname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect URL Query String Name</para>
		/// <para><strong>Description</strong>: The url to redirect to is dynamically retrieved from the query string using this parameter name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_redirecturlquerystringname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_redirecturlquerystringname); }
			set { Entity.Attributes[Fields.mspp_redirecturlquerystringname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect Web Page</para>
		/// <para><strong>Description</strong>: Web Page to redirect to.</para>
		/// <para><strong>Lookup</strong>: <see cref="mspp_webpage"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_redirectwebpage
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_redirectwebpage); }
			set { Entity.Attributes[Fields.mspp_redirectwebpage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Table name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referenceentitylogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referenceentitylogicalname); }
			set { Entity.Attributes[Fields.mspp_referenceentitylogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Table Primary Key Logical Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referenceentityprimarykeylogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referenceentityprimarykeylogicalname); }
			set { Entity.Attributes[Fields.mspp_referenceentityprimarykeylogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Entity ReadOnly Form Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referenceentityreadonlyformname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referenceentityreadonlyformname); }
			set { Entity.Attributes[Fields.mspp_referenceentityreadonlyformname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Entity Relationship Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 150</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referenceentityrelationshipname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referenceentityrelationshipname); }
			set { Entity.Attributes[Fields.mspp_referenceentityrelationshipname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show Reference Entity ReadOnly Form</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_referenceentityshowreadonlyform
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_referenceentityshowreadonlyform); }
			set { Entity.Attributes[Fields.mspp_referenceentityshowreadonlyform] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_referenceentitysourcetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_referenceentitysourcetype? mspp_referenceentitysourcetype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_referenceentitysourcetype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.mspp_referenceentitysourcetype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_referenceentitysourcetype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_referenceentitysourcetype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Query Attribute Logical Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referencequeryattributelogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referencequeryattributelogicalname); }
			set { Entity.Attributes[Fields.mspp_referencequeryattributelogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Query String Is Primary Key</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_referencequerystringisprimarykey
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_referencequerystringisprimarykey); }
			set { Entity.Attributes[Fields.mspp_referencequerystringisprimarykey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Query String Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referencequerystringname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referencequerystringname); }
			set { Entity.Attributes[Fields.mspp_referencequerystringname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Source Relationship Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referencerecordsourcerelationshipname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referencerecordsourcerelationshipname); }
			set { Entity.Attributes[Fields.mspp_referencerecordsourcerelationshipname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Reference Target Lookup Attribute Logical Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_referencetargetlookupattributelogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_referencetargetlookupattributelogicalname); }
			set { Entity.Attributes[Fields.mspp_referencetargetlookupattributelogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom JavaScript</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_registerstartupscript
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_registerstartupscript); }
			set { Entity.Attributes[Fields.mspp_registerstartupscript] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Render Web Resources Inline</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_renderwebresourcesinline
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_renderwebresourcesinline); }
			set { Entity.Attributes[Fields.mspp_renderwebresourcesinline] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Set Table Reference</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_setentityreference
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_setentityreference); }
			set { Entity.Attributes[Fields.mspp_setentityreference] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Settings</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 100,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_settings
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_settings); }
			set { Entity.Attributes[Fields.mspp_settings] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show Captcha for Authenticated Users</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_showcaptchaforauthenticatedusers
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_showcaptchaforauthenticatedusers); }
			set { Entity.Attributes[Fields.mspp_showcaptchaforauthenticatedusers] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show Owner Fields</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_showownerfields
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_showownerfields); }
			set { Entity.Attributes[Fields.mspp_showownerfields] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Show Unsupported Fields</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_showunsupportedfields
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_showunsupportedfields); }
			set { Entity.Attributes[Fields.mspp_showunsupportedfields] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Storage Account Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_storageaccountname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_storageaccountname); }
			set { Entity.Attributes[Fields.mspp_storageaccountname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submit Button Busy Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_submitbuttonbusytext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_submitbuttonbusytext); }
			set { Entity.Attributes[Fields.mspp_submitbuttonbusytext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submit Button CSS Class</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_submitbuttoncssclass
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_submitbuttoncssclass); }
			set { Entity.Attributes[Fields.mspp_submitbuttoncssclass] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Submit Button Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_submitbuttontext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_submitbuttontext); }
			set { Entity.Attributes[Fields.mspp_submitbuttontext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Success Message</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 10,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_successmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_successmessage); }
			set { Entity.Attributes[Fields.mspp_successmessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tab Name</para>
		/// <para><strong>Description</strong>: The name of the tab on an entity form to render.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_tabname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_tabname); }
			set { Entity.Attributes[Fields.mspp_tabname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal User Lookup Column</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_targetentityportaluserlookupattribute
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_targetentityportaluserlookupattribute); }
			set { Entity.Attributes[Fields.mspp_targetentityportaluserlookupattribute] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ToolTip Enabled</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_tooltipenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_tooltipenabled); }
			set { Entity.Attributes[Fields.mspp_tooltipenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation Group</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_validationgroup
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_validationgroup); }
			set { Entity.Attributes[Fields.mspp_validationgroup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation Summary CSS Class</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_validationsummarycssclass
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_validationsummarycssclass); }
			set { Entity.Attributes[Fields.mspp_validationsummarycssclass] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation Summary Header Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_validationsummaryheadertext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_validationsummaryheadertext); }
			set { Entity.Attributes[Fields.mspp_validationsummaryheadertext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Enable Validation Summary Links</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_validationsummarylinksenabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_validationsummarylinksenabled); }
			set { Entity.Attributes[Fields.mspp_validationsummarylinksenabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Validation Summary Link Text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_validationsummarylinktext
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_validationsummarylinktext); }
			set { Entity.Attributes[Fields.mspp_validationsummarylinktext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Unique identifier for Website entity associated with this record.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="mspp_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_websiteid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_websiteid); }
			set { Entity.Attributes[Fields.mspp_websiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Basic Form</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Basic Form</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entityformOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
	}
}