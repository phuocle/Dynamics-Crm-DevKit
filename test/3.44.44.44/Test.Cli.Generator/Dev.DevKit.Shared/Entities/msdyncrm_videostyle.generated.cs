//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyncrm_videostyle : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyncrm_alignment = "msdyncrm_alignment";
			public const string msdyncrm_alttext = "msdyncrm_alttext";
			public const string msdyncrm_autowidth = "msdyncrm_autowidth";
			public const string msdyncrm_height = "msdyncrm_height";
			public const string msdyncrm_marginbottom = "msdyncrm_marginbottom";
			public const string msdyncrm_marginleft = "msdyncrm_marginleft";
			public const string msdyncrm_marginright = "msdyncrm_marginright";
			public const string msdyncrm_margintop = "msdyncrm_margintop";
			public const string msdyncrm_name = "msdyncrm_name";
			public const string msdyncrm_noalttext = "msdyncrm_noalttext";
			public const string msdyncrm_originalheight = "msdyncrm_originalheight";
			public const string msdyncrm_originalwidth = "msdyncrm_originalwidth";
			public const string msdyncrm_paddingbottom = "msdyncrm_paddingbottom";
			public const string msdyncrm_paddingleft = "msdyncrm_paddingleft";
			public const string msdyncrm_paddingright = "msdyncrm_paddingright";
			public const string msdyncrm_paddingtop = "msdyncrm_paddingtop";
			public const string msdyncrm_roundedcorners = "msdyncrm_roundedcorners";
			public const string msdyncrm_source = "msdyncrm_source";
			public const string msdyncrm_thumbnail = "msdyncrm_thumbnail";
			public const string msdyncrm_verticalalign = "msdyncrm_verticalalign";
			public const string msdyncrm_videoId = "msdyncrm_videoid";
			public const string msdyncrm_videostyleId = "msdyncrm_videostyleid";
			public const string msdyncrm_videourl = "msdyncrm_videourl";
			public const string msdyncrm_width = "msdyncrm_width";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyncrm_videostyle";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10627;
		public const string EntityCollectionSchemaName = "msdyncrm_videostyles";
		public const string EntityDisplayCollectionName = "Video styles";
		public const string DisplayName = "Video style";
		public const string EntitySetName = "msdyncrm_videostyles";
		public const string EntityLogicalCollectionName = "msdyncrm_videostyles";
		public const string EntityPrimaryIdAttribute = "msdyncrm_videostyleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyncrm_name";
		public const string EntitySchemaName = "msdyncrm_videostyle";
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle(Guid msdyncrm_videostyleId)
		{
			Entity = new Entity(EntityLogicalName, msdyncrm_videostyleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_videostyle"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_videostyle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_videostyle(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyncrm_videostyle"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyncrm_videostyle(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyncrm_videostyle(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alignment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_alignment
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_alignment); }
			set { Entity.Attributes[Fields.msdyncrm_alignment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Alt text</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 255</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_alttext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_alttext); }
			set { Entity.Attributes[Fields.msdyncrm_alttext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Auto width</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>On</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_autowidth
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_autowidth); }
			set { Entity.Attributes[Fields.msdyncrm_autowidth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Height</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_height
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_height); }
			set { Entity.Attributes[Fields.msdyncrm_height] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bottom</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marginbottom
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marginbottom); }
			set { Entity.Attributes[Fields.msdyncrm_marginbottom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Left</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marginleft
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marginleft); }
			set { Entity.Attributes[Fields.msdyncrm_marginleft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Right</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_marginright
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_marginright); }
			set { Entity.Attributes[Fields.msdyncrm_marginright] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Top</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_margintop
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_margintop); }
			set { Entity.Attributes[Fields.msdyncrm_margintop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_name); }
			set { Entity.Attributes[Fields.msdyncrm_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: This video doesn't need alt text</para>
		/// <para><strong>Two Option</strong> - [<strong>true</strong>]: true - [<strong>false</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>false</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyncrm_noalttext
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyncrm_noalttext); }
			set { Entity.Attributes[Fields.msdyncrm_noalttext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Original height</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_originalheight
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_originalheight); }
			set { Entity.Attributes[Fields.msdyncrm_originalheight] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Original width</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_originalwidth
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_originalwidth); }
			set { Entity.Attributes[Fields.msdyncrm_originalwidth] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bottom</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingbottom
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingbottom); }
			set { Entity.Attributes[Fields.msdyncrm_paddingbottom] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Left</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingleft
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingleft); }
			set { Entity.Attributes[Fields.msdyncrm_paddingleft] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Right</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingright
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingright); }
			set { Entity.Attributes[Fields.msdyncrm_paddingright] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Top</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_paddingtop
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_paddingtop); }
			set { Entity.Attributes[Fields.msdyncrm_paddingtop] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rounded corners</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_roundedcorners
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_roundedcorners); }
			set { Entity.Attributes[Fields.msdyncrm_roundedcorners] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_source
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_source); }
			set { Entity.Attributes[Fields.msdyncrm_source] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thumbnail</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_thumbnail
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_thumbnail); }
			set { Entity.Attributes[Fields.msdyncrm_thumbnail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Vertical alignment</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_verticalalign
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_verticalalign); }
			set { Entity.Attributes[Fields.msdyncrm_verticalalign] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Video Id</para>
		/// <para><strong>Description</strong>: Lookup field for the selected video entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyncrm_videostyle"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyncrm_videoId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyncrm_videoId); }
			set { Entity.Attributes[Fields.msdyncrm_videoId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Video style</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyncrm_videostyleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyncrm_videostyleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Video URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_videourl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_videourl); }
			set { Entity.Attributes[Fields.msdyncrm_videourl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Width</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyncrm_width
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyncrm_width); }
			set { Entity.Attributes[Fields.msdyncrm_width] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Video style</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Video style</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyncrm_videostyleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}