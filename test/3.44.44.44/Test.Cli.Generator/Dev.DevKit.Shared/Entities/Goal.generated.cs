//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.GoalOptionSets
{
	public enum AmountDataType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Decimal</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Decimal = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Integer</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Integer = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Money</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Money = 0
	}
	public enum FiscalPeriod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Annual</para>
		/// <para><strong>Value</strong>: 301</para>
		/// </summary>
		Annual = 301,
		/// <summary>
		/// <para><strong>Display Name</strong>: April</para>
		/// <para><strong>Value</strong>: 104</para>
		/// </summary>
		April = 104,
		/// <summary>
		/// <para><strong>Display Name</strong>: August</para>
		/// <para><strong>Value</strong>: 108</para>
		/// </summary>
		August = 108,
		/// <summary>
		/// <para><strong>Display Name</strong>: December</para>
		/// <para><strong>Value</strong>: 112</para>
		/// </summary>
		December = 112,
		/// <summary>
		/// <para><strong>Display Name</strong>: February</para>
		/// <para><strong>Value</strong>: 102</para>
		/// </summary>
		February = 102,
		/// <summary>
		/// <para><strong>Display Name</strong>: January</para>
		/// <para><strong>Value</strong>: 101</para>
		/// </summary>
		January = 101,
		/// <summary>
		/// <para><strong>Display Name</strong>: July</para>
		/// <para><strong>Value</strong>: 107</para>
		/// </summary>
		July = 107,
		/// <summary>
		/// <para><strong>Display Name</strong>: June</para>
		/// <para><strong>Value</strong>: 106</para>
		/// </summary>
		June = 106,
		/// <summary>
		/// <para><strong>Display Name</strong>: March</para>
		/// <para><strong>Value</strong>: 103</para>
		/// </summary>
		March = 103,
		/// <summary>
		/// <para><strong>Display Name</strong>: May</para>
		/// <para><strong>Value</strong>: 105</para>
		/// </summary>
		May = 105,
		/// <summary>
		/// <para><strong>Display Name</strong>: November</para>
		/// <para><strong>Value</strong>: 111</para>
		/// </summary>
		November = 111,
		/// <summary>
		/// <para><strong>Display Name</strong>: October</para>
		/// <para><strong>Value</strong>: 110</para>
		/// </summary>
		October = 110,
		/// <summary>
		/// <para><strong>Display Name</strong>: P1</para>
		/// <para><strong>Value</strong>: 401</para>
		/// </summary>
		P1 = 401,
		/// <summary>
		/// <para><strong>Display Name</strong>: P10</para>
		/// <para><strong>Value</strong>: 410</para>
		/// </summary>
		P10 = 410,
		/// <summary>
		/// <para><strong>Display Name</strong>: P11</para>
		/// <para><strong>Value</strong>: 411</para>
		/// </summary>
		P11 = 411,
		/// <summary>
		/// <para><strong>Display Name</strong>: P12</para>
		/// <para><strong>Value</strong>: 412</para>
		/// </summary>
		P12 = 412,
		/// <summary>
		/// <para><strong>Display Name</strong>: P13</para>
		/// <para><strong>Value</strong>: 413</para>
		/// </summary>
		P13 = 413,
		/// <summary>
		/// <para><strong>Display Name</strong>: P2</para>
		/// <para><strong>Value</strong>: 402</para>
		/// </summary>
		P2 = 402,
		/// <summary>
		/// <para><strong>Display Name</strong>: P3</para>
		/// <para><strong>Value</strong>: 403</para>
		/// </summary>
		P3 = 403,
		/// <summary>
		/// <para><strong>Display Name</strong>: P4</para>
		/// <para><strong>Value</strong>: 404</para>
		/// </summary>
		P4 = 404,
		/// <summary>
		/// <para><strong>Display Name</strong>: P5</para>
		/// <para><strong>Value</strong>: 405</para>
		/// </summary>
		P5 = 405,
		/// <summary>
		/// <para><strong>Display Name</strong>: P6</para>
		/// <para><strong>Value</strong>: 406</para>
		/// </summary>
		P6 = 406,
		/// <summary>
		/// <para><strong>Display Name</strong>: P7</para>
		/// <para><strong>Value</strong>: 407</para>
		/// </summary>
		P7 = 407,
		/// <summary>
		/// <para><strong>Display Name</strong>: P8</para>
		/// <para><strong>Value</strong>: 408</para>
		/// </summary>
		P8 = 408,
		/// <summary>
		/// <para><strong>Display Name</strong>: P9</para>
		/// <para><strong>Value</strong>: 409</para>
		/// </summary>
		P9 = 409,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quarter 1</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Quarter_1 = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quarter 2</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Quarter_2 = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quarter 3</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Quarter_3 = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Quarter 4</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Quarter_4 = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Semester 1</para>
		/// <para><strong>Value</strong>: 201</para>
		/// </summary>
		Semester_1 = 201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Semester 2</para>
		/// <para><strong>Value</strong>: 202</para>
		/// </summary>
		Semester_2 = 202,
		/// <summary>
		/// <para><strong>Display Name</strong>: September</para>
		/// <para><strong>Value</strong>: 109</para>
		/// </summary>
		September = 109
	}
	public enum FiscalYear
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1970</para>
		/// <para><strong>Value</strong>: 1,970</para>
		/// </summary>
		FY1970 = 1_970,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1971</para>
		/// <para><strong>Value</strong>: 1,971</para>
		/// </summary>
		FY1971 = 1_971,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1972</para>
		/// <para><strong>Value</strong>: 1,972</para>
		/// </summary>
		FY1972 = 1_972,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1973</para>
		/// <para><strong>Value</strong>: 1,973</para>
		/// </summary>
		FY1973 = 1_973,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1974</para>
		/// <para><strong>Value</strong>: 1,974</para>
		/// </summary>
		FY1974 = 1_974,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1975</para>
		/// <para><strong>Value</strong>: 1,975</para>
		/// </summary>
		FY1975 = 1_975,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1976</para>
		/// <para><strong>Value</strong>: 1,976</para>
		/// </summary>
		FY1976 = 1_976,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1977</para>
		/// <para><strong>Value</strong>: 1,977</para>
		/// </summary>
		FY1977 = 1_977,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1978</para>
		/// <para><strong>Value</strong>: 1,978</para>
		/// </summary>
		FY1978 = 1_978,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1979</para>
		/// <para><strong>Value</strong>: 1,979</para>
		/// </summary>
		FY1979 = 1_979,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1980</para>
		/// <para><strong>Value</strong>: 1,980</para>
		/// </summary>
		FY1980 = 1_980,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1981</para>
		/// <para><strong>Value</strong>: 1,981</para>
		/// </summary>
		FY1981 = 1_981,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1982</para>
		/// <para><strong>Value</strong>: 1,982</para>
		/// </summary>
		FY1982 = 1_982,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1983</para>
		/// <para><strong>Value</strong>: 1,983</para>
		/// </summary>
		FY1983 = 1_983,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1984</para>
		/// <para><strong>Value</strong>: 1,984</para>
		/// </summary>
		FY1984 = 1_984,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1985</para>
		/// <para><strong>Value</strong>: 1,985</para>
		/// </summary>
		FY1985 = 1_985,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1986</para>
		/// <para><strong>Value</strong>: 1,986</para>
		/// </summary>
		FY1986 = 1_986,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1987</para>
		/// <para><strong>Value</strong>: 1,987</para>
		/// </summary>
		FY1987 = 1_987,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1988</para>
		/// <para><strong>Value</strong>: 1,988</para>
		/// </summary>
		FY1988 = 1_988,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1989</para>
		/// <para><strong>Value</strong>: 1,989</para>
		/// </summary>
		FY1989 = 1_989,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1990</para>
		/// <para><strong>Value</strong>: 1,990</para>
		/// </summary>
		FY1990 = 1_990,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1991</para>
		/// <para><strong>Value</strong>: 1,991</para>
		/// </summary>
		FY1991 = 1_991,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1992</para>
		/// <para><strong>Value</strong>: 1,992</para>
		/// </summary>
		FY1992 = 1_992,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1993</para>
		/// <para><strong>Value</strong>: 1,993</para>
		/// </summary>
		FY1993 = 1_993,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1994</para>
		/// <para><strong>Value</strong>: 1,994</para>
		/// </summary>
		FY1994 = 1_994,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1995</para>
		/// <para><strong>Value</strong>: 1,995</para>
		/// </summary>
		FY1995 = 1_995,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1996</para>
		/// <para><strong>Value</strong>: 1,996</para>
		/// </summary>
		FY1996 = 1_996,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1997</para>
		/// <para><strong>Value</strong>: 1,997</para>
		/// </summary>
		FY1997 = 1_997,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1998</para>
		/// <para><strong>Value</strong>: 1,998</para>
		/// </summary>
		FY1998 = 1_998,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY1999</para>
		/// <para><strong>Value</strong>: 1,999</para>
		/// </summary>
		FY1999 = 1_999,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2000</para>
		/// <para><strong>Value</strong>: 2,000</para>
		/// </summary>
		FY2000 = 2_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2001</para>
		/// <para><strong>Value</strong>: 2,001</para>
		/// </summary>
		FY2001 = 2_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2002</para>
		/// <para><strong>Value</strong>: 2,002</para>
		/// </summary>
		FY2002 = 2_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2003</para>
		/// <para><strong>Value</strong>: 2,003</para>
		/// </summary>
		FY2003 = 2_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2004</para>
		/// <para><strong>Value</strong>: 2,004</para>
		/// </summary>
		FY2004 = 2_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2005</para>
		/// <para><strong>Value</strong>: 2,005</para>
		/// </summary>
		FY2005 = 2_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2006</para>
		/// <para><strong>Value</strong>: 2,006</para>
		/// </summary>
		FY2006 = 2_006,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2007</para>
		/// <para><strong>Value</strong>: 2,007</para>
		/// </summary>
		FY2007 = 2_007,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2008</para>
		/// <para><strong>Value</strong>: 2,008</para>
		/// </summary>
		FY2008 = 2_008,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2009</para>
		/// <para><strong>Value</strong>: 2,009</para>
		/// </summary>
		FY2009 = 2_009,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2010</para>
		/// <para><strong>Value</strong>: 2,010</para>
		/// </summary>
		FY2010 = 2_010,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2011</para>
		/// <para><strong>Value</strong>: 2,011</para>
		/// </summary>
		FY2011 = 2_011,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2012</para>
		/// <para><strong>Value</strong>: 2,012</para>
		/// </summary>
		FY2012 = 2_012,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2013</para>
		/// <para><strong>Value</strong>: 2,013</para>
		/// </summary>
		FY2013 = 2_013,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2014</para>
		/// <para><strong>Value</strong>: 2,014</para>
		/// </summary>
		FY2014 = 2_014,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2015</para>
		/// <para><strong>Value</strong>: 2,015</para>
		/// </summary>
		FY2015 = 2_015,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2016</para>
		/// <para><strong>Value</strong>: 2,016</para>
		/// </summary>
		FY2016 = 2_016,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2017</para>
		/// <para><strong>Value</strong>: 2,017</para>
		/// </summary>
		FY2017 = 2_017,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2018</para>
		/// <para><strong>Value</strong>: 2,018</para>
		/// </summary>
		FY2018 = 2_018,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2019</para>
		/// <para><strong>Value</strong>: 2,019</para>
		/// </summary>
		FY2019 = 2_019,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2020</para>
		/// <para><strong>Value</strong>: 2,020</para>
		/// </summary>
		FY2020 = 2_020,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2021</para>
		/// <para><strong>Value</strong>: 2,021</para>
		/// </summary>
		FY2021 = 2_021,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2022</para>
		/// <para><strong>Value</strong>: 2,022</para>
		/// </summary>
		FY2022 = 2_022,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2023</para>
		/// <para><strong>Value</strong>: 2,023</para>
		/// </summary>
		FY2023 = 2_023,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2024</para>
		/// <para><strong>Value</strong>: 2,024</para>
		/// </summary>
		FY2024 = 2_024,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2025</para>
		/// <para><strong>Value</strong>: 2,025</para>
		/// </summary>
		FY2025 = 2_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2026</para>
		/// <para><strong>Value</strong>: 2,026</para>
		/// </summary>
		FY2026 = 2_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2027</para>
		/// <para><strong>Value</strong>: 2,027</para>
		/// </summary>
		FY2027 = 2_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2028</para>
		/// <para><strong>Value</strong>: 2,028</para>
		/// </summary>
		FY2028 = 2_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2029</para>
		/// <para><strong>Value</strong>: 2,029</para>
		/// </summary>
		FY2029 = 2_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2030</para>
		/// <para><strong>Value</strong>: 2,030</para>
		/// </summary>
		FY2030 = 2_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2031</para>
		/// <para><strong>Value</strong>: 2,031</para>
		/// </summary>
		FY2031 = 2_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2032</para>
		/// <para><strong>Value</strong>: 2,032</para>
		/// </summary>
		FY2032 = 2_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2033</para>
		/// <para><strong>Value</strong>: 2,033</para>
		/// </summary>
		FY2033 = 2_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2034</para>
		/// <para><strong>Value</strong>: 2,034</para>
		/// </summary>
		FY2034 = 2_034,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2035</para>
		/// <para><strong>Value</strong>: 2,035</para>
		/// </summary>
		FY2035 = 2_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2036</para>
		/// <para><strong>Value</strong>: 2,036</para>
		/// </summary>
		FY2036 = 2_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2037</para>
		/// <para><strong>Value</strong>: 2,037</para>
		/// </summary>
		FY2037 = 2_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: FY2038</para>
		/// <para><strong>Value</strong>: 2,038</para>
		/// </summary>
		FY2038 = 2_038
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Closed = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discarded</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Discarded = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Open = 0
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class Goal : EntityBase
	{
		public struct Fields
		{
			public const string ActualDecimal = "actualdecimal";
			public const string ActualInteger = "actualinteger";
			public const string ActualMoney = "actualmoney";
			public const string ActualMoney_Base = "actualmoney_base";
			public const string ActualString = "actualstring";
			public const string AmountDataType = "amountdatatype";
			public const string ComputedTargetAsOfTodayDecimal = "computedtargetasoftodaydecimal";
			public const string ComputedTargetAsOfTodayInteger = "computedtargetasoftodayinteger";
			public const string ComputedTargetAsOfTodayMoney = "computedtargetasoftodaymoney";
			public const string ComputedTargetAsOfTodayMoney_Base = "computedtargetasoftodaymoney_base";
			public const string ComputedTargetAsOfTodayPercentageAchieved = "computedtargetasoftodaypercentageachieved";
			public const string ConsiderOnlyGoalOwnersRecords = "consideronlygoalownersrecords";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CustomRollupFieldDecimal = "customrollupfielddecimal";
			public const string CustomRollupFieldInteger = "customrollupfieldinteger";
			public const string CustomRollupFieldMoney = "customrollupfieldmoney";
			public const string CustomRollupFieldMoney_Base = "customrollupfieldmoney_base";
			public const string CustomRollupFieldString = "customrollupfieldstring";
			public const string Depth = "depth";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string FiscalPeriod = "fiscalperiod";
			public const string FiscalYear = "fiscalyear";
			public const string GoalEndDate = "goalenddate";
			public const string GoalId = "goalid";
			public const string GoalOwnerId = "goalownerid";
			public const string GoalStartDate = "goalstartdate";
			public const string GoalWithErrorId = "goalwitherrorid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string InProgressDecimal = "inprogressdecimal";
			public const string InProgressInteger = "inprogressinteger";
			public const string InProgressMoney = "inprogressmoney";
			public const string InProgressMoney_Base = "inprogressmoney_base";
			public const string InProgressString = "inprogressstring";
			public const string IsAmount = "isamount";
			public const string IsFiscalPeriodGoal = "isfiscalperiodgoal";
			public const string IsOverridden = "isoverridden";
			public const string IsOverride = "isoverride";
			public const string LastRolledupDate = "lastrolledupdate";
			public const string MetricId = "metricid";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentGoalId = "parentgoalid";
			public const string Percentage = "percentage";
			public const string RollupErrorCode = "rolluperrorcode";
			public const string RollupOnlyFromChildGoals = "rolluponlyfromchildgoals";
			public const string RollUpQueryActualDecimalId = "rollupqueryactualdecimalid";
			public const string RollupQueryActualIntegerId = "rollupqueryactualintegerid";
			public const string RollUpQueryActualMoneyId = "rollupqueryactualmoneyid";
			public const string RollUpQueryCustomDecimalId = "rollupquerycustomdecimalid";
			public const string RollUpQueryCustomIntegerId = "rollupquerycustomintegerid";
			public const string RollUpQueryCustomMoneyId = "rollupquerycustommoneyid";
			public const string RollUpQueryInprogressDecimalId = "rollupqueryinprogressdecimalid";
			public const string RollUpQueryInprogressIntegerId = "rollupqueryinprogressintegerid";
			public const string RollUpQueryInprogressMoneyId = "rollupqueryinprogressmoneyid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StretchTargetDecimal = "stretchtargetdecimal";
			public const string StretchTargetInteger = "stretchtargetinteger";
			public const string StretchTargetMoney = "stretchtargetmoney";
			public const string StretchTargetMoney_Base = "stretchtargetmoney_base";
			public const string StretchTargetString = "stretchtargetstring";
			public const string TargetDecimal = "targetdecimal";
			public const string TargetInteger = "targetinteger";
			public const string TargetMoney = "targetmoney";
			public const string TargetMoney_Base = "targetmoney_base";
			public const string TargetString = "targetstring";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TreeId = "treeid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "goal";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9600;
		public const string EntityCollectionSchemaName = "Goals";
		public const string EntityDisplayCollectionName = "Goals";
		public const string DisplayName = "Goal";
		public const string EntitySetName = "goals";
		public const string EntityLogicalCollectionName = "goals";
		public const string EntityPrimaryIdAttribute = "goalid";
		public const string EntityPrimaryImageAttribute = "entityimage";
		public const string EntityPrimaryNameAttribute = "title";
		public const string EntitySchemaName = "Goal";
		[DebuggerNonUserCode()]
		public Goal()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Goal(Guid GoalId)
		{
			Entity = new Entity(EntityLogicalName, GoalId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Goal(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Goal"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public Goal(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Goal"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Goal(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Goal(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="Goal"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public Goal(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new Goal(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public Goal(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual (Decimal)</para>
		/// <para><strong>Description</strong>: Shows the actual value (Decimal type) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount and the amount data type is Decimal.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ActualDecimal); }
			set { Entity.Attributes[Fields.ActualDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual (Integer)</para>
		/// <para><strong>Description</strong>: Shows the actual value (integer) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount or Count and the amount data type is Integer.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ActualInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ActualInteger); }
			set { Entity.Attributes[Fields.ActualInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual (Money)</para>
		/// <para><strong>Description</strong>: Shows the actual value (Money type) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount and the amount data type is Money.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ActualMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.ActualMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual (Money) (Base)</para>
		/// <para><strong>Description</strong>: Shows the actual value (money type) in base currency to track goal results against the target.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ActualMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ActualMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual</para>
		/// <para><strong>Description</strong>: Actual Value of the goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActualString
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActualString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Amount Data Type</para>
		/// <para><strong>Description</strong>: Data type of the amount.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType.Decimal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType? AmountDataType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AmountDataType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.AmountDataType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.AmountDataType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.AmountDataType] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Today's Target (Decimal)</para>
		/// <para><strong>Description</strong>: Shows the expected amount for actual value (decimal type) against the target goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ComputedTargetAsOfTodayDecimal); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Today's Target (Integer)</para>
		/// <para><strong>Description</strong>: Shows the expected amount for actual value (integer type) against the target goal as of the current date.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ComputedTargetAsOfTodayInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ComputedTargetAsOfTodayInteger); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Today's Target (Money)</para>
		/// <para><strong>Description</strong>: Shows the expected amount for actual value (money type) against the target goal as of the current date.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ComputedTargetAsOfTodayMoney);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Today's Target (Money) (Base)</para>
		/// <para><strong>Description</strong>: Shows the expected amount in base currency for actual value (money type) against the target goal as of the current date.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.ComputedTargetAsOfTodayMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Today's Target (Percentage Achieved)</para>
		/// <para><strong>Description</strong>: Shows the expected value for percentage achieved against the target goal as of the current date.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ComputedTargetAsOfTodayPercentageAchieved
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ComputedTargetAsOfTodayPercentageAchieved); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Set for Rollup</para>
		/// <para><strong>Description</strong>: Select whether only the goal owner&apos;s records, or all records, should be rolled up for goal results.</para>
		/// <para><strong>Two Option</strong> - [<strong>Owned by goal owner</strong>]: true - [<strong>All</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Owned by goal owner</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConsiderOnlyGoalOwnersRecords
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConsiderOnlyGoalOwnersRecords); }
			set { Entity.Attributes[Fields.ConsiderOnlyGoalOwnersRecords] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who created the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Rollup Field (Decimal)</para>
		/// <para><strong>Description</strong>: Indicates a placeholder rollup field for a decimal value to track a third category of results other than actuals and in-progress results.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.CustomRollupFieldDecimal); }
			set { Entity.Attributes[Fields.CustomRollupFieldDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Rollup Field (Integer)</para>
		/// <para><strong>Description</strong>: Indicates a placeholder rollup field for an integer value to track a third category of results other than actuals and in-progress results.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CustomRollupFieldInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CustomRollupFieldInteger); }
			set { Entity.Attributes[Fields.CustomRollupFieldInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Rollup Field (Money)</para>
		/// <para><strong>Description</strong>: Indicates a placeholder rollup field for a money value to track a third category of results other than actuals and in-progress results.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CustomRollupFieldMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CustomRollupFieldMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.CustomRollupFieldMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Rollup Field (Money) (Base)</para>
		/// <para><strong>Description</strong>: Indicates a placeholder rollup field for a money value in base currency to track a third category of results other than actuals and in-progress results.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? CustomRollupFieldMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.CustomRollupFieldMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom Rollup Field</para>
		/// <para><strong>Description</strong>: Placeholder rollup field for the goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CustomRollupFieldString
		{
			get { return Entity.GetAttributeValue<string>(Fields.CustomRollupFieldString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Depth</para>
		/// <para><strong>Description</strong>: Depth of the goal in the tree.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Depth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Depth); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Image Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Shows the conversion rate of the record&apos;s currency. The exchange rate is used to convert all money fields in the record from the local currency to the system&apos;s default currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fiscal Period</para>
		/// <para><strong>Description</strong>: Select the fiscal period for the goal.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod? FiscalPeriod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalPeriod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalPeriod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalPeriod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalPeriod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fiscal Year</para>
		/// <para><strong>Description</strong>: Select the fiscal year for the goal that&apos;s being tracked.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear? FiscalYear
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.FiscalYear);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.FiscalYear)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.FiscalYear] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.FiscalYear] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To</para>
		/// <para><strong>Description</strong>: Enter the date when the goal ends.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? GoalEndDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.GoalEndDate); }
			set { Entity.Attributes[Fields.GoalEndDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Goal</para>
		/// <para><strong>Description</strong>: Unique identifier of the goal.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid GoalId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.GoalId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Goal Owner</para>
		/// <para><strong>Description</strong>: Choose the user or team responsible for meeting the goal.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GoalOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GoalOwnerId); }
			set { Entity.Attributes[Fields.GoalOwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From</para>
		/// <para><strong>Description</strong>: Enter the date and time when the period for tracking the goal begins.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? GoalStartDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.GoalStartDate); }
			set { Entity.Attributes[Fields.GoalStartDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Goal With Error</para>
		/// <para><strong>Description</strong>: Unique identifier of the goal that caused an error in the rollup of the goal hierarchy.</para>
		/// <para><strong>Lookup</strong>: <see cref="goal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference GoalWithErrorId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.GoalWithErrorId); }
			set { Entity.Attributes[Fields.GoalWithErrorId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In-progress (Decimal)</para>
		/// <para><strong>Description</strong>: Shows the in-progress value (decimal) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.InProgressDecimal); }
			set { Entity.Attributes[Fields.InProgressDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In-progress (Integer)</para>
		/// <para><strong>Description</strong>: Shows the in-progress value (integer) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? InProgressInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.InProgressInteger); }
			set { Entity.Attributes[Fields.InProgressInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In-progress (Money)</para>
		/// <para><strong>Description</strong>: Shows the in-progress value (money) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.InProgressMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.InProgressMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.InProgressMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In-progress (Money) (Base)</para>
		/// <para><strong>Description</strong>: Shows the in-progress value (money) in base currency to track goal results against the target.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? InProgressMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.InProgressMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In-Progress</para>
		/// <para><strong>Description</strong>: In-progress value of the goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InProgressString
		{
			get { return Entity.GetAttributeValue<string>(Fields.InProgressString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Metric Type</para>
		/// <para><strong>Description</strong>: Indicates whether the metric type is Count or Amount.</para>
		/// <para>Required - <strong>Two Option</strong> - [<strong>Amount</strong>]: true - [<strong>Count</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Amount</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsAmount
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsAmount); }
			set { Entity.Attributes[Fields.IsAmount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Goal Period Type</para>
		/// <para><strong>Description</strong>: Select whether the goal period is a fiscal period or custom period.</para>
		/// <para><strong>Two Option</strong> - [<strong>Fiscal Period</strong>]: true - [<strong>Custom Period</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Fiscal Period</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsFiscalPeriodGoal
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsFiscalPeriodGoal); }
			set { Entity.Attributes[Fields.IsFiscalPeriodGoal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Overridden</para>
		/// <para><strong>Description</strong>: Select whether the system rollup fields are updated. If set to Yes, the next system rollup will not update the values of the rollup fields with the system calculated values.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverridden
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverridden); }
			set { Entity.Attributes[Fields.IsOverridden] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Override</para>
		/// <para><strong>Description</strong>: Indicates whether the values of system rollup fields can be updated.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsOverride
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsOverride); }
			set { Entity.Attributes[Fields.IsOverride] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Rolled Up Date</para>
		/// <para><strong>Description</strong>: Shows the date and time when the goal was last rolled up. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastRolledupDateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastRolledupDate); }
			set { Entity.Attributes[Fields.LastRolledupDate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Goal Metric</para>
		/// <para><strong>Description</strong>: Choose the metric for the goal. This metric determines how the goal is tracked.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="metric"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference MetricId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.MetricId); }
			set { Entity.Attributes[Fields.MetricId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Shows who last updated the record on behalf of another user.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manager</para>
		/// <para><strong>Description</strong>: Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns the goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user who owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Goal</para>
		/// <para><strong>Description</strong>: Choose a parent goal if the current goal is a child goal. This sets up a parent-child relationship for reporting and analytics.</para>
		/// <para><strong>Lookup</strong>: <see cref="goal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentGoalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentGoalId); }
			set { Entity.Attributes[Fields.ParentGoalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percentage Achieved</para>
		/// <para><strong>Description</strong>: Shows the percentage achieved against the target goal.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? Percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.Percentage); }
			set { Entity.Attributes[Fields.Percentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Error Code</para>
		/// <para><strong>Description</strong>: Error code associated with rollup.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RollupErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RollupErrorCode); }
			set { Entity.Attributes[Fields.RollupErrorCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Roll Up Only from Child Goals</para>
		/// <para><strong>Description</strong>: Select whether the data should be rolled up only from the child goals.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RollupOnlyFromChildGoals
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RollupOnlyFromChildGoals); }
			set { Entity.Attributes[Fields.RollupOnlyFromChildGoals] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - Actual(Decimal)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate the actual data for the goal (decimal).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryActualDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryActualDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryActualDecimalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - Actual(Integer)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate the actual data for the goal (integer).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollupQueryActualIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollupQueryActualIntegerId); }
			set { Entity.Attributes[Fields.RollupQueryActualIntegerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - Actual(Money)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate the actual data for the goal (money).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryActualMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryActualMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryActualMoneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - Custom Rollup Field (Decimal)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate data for the custom rollup field (decimal).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomDecimalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - Custom Rollup Field (Integer)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate data for the custom rollup field (integer).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomIntegerId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomIntegerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - Custom Rollup Field (Money)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate data for the custom rollup field (money).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryCustomMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryCustomMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryCustomMoneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - In-progress(Decimal)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate data for the in-progress rollup field (decimal).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressDecimalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressDecimalId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressDecimalId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - In-progress(Integer)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate data for the in-progress rollup field (integer).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressIntegerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressIntegerId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressIntegerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Query - In-progress(Money)</para>
		/// <para><strong>Description</strong>: Choose the query that will be used to calculate data for the in-progress rollup field (money).</para>
		/// <para><strong>Lookup</strong>: <see cref="goalrollupquery"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RollUpQueryInprogressMoneyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RollUpQueryInprogressMoneyId); }
			set { Entity.Attributes[Fields.RollUpQueryInprogressMoneyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Shows whether the goal is open, completed, or canceled. Completed and canceled goals are read-only and can&apos;t be edited.</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Select the goal&apos;s status.</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.GoalOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stretch Target (Decimal)</para>
		/// <para><strong>Description</strong>: Select a stretch target (decimal) of the goal to define a higher or difficult level of goal than the usual ones.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.StretchTargetDecimal); }
			set { Entity.Attributes[Fields.StretchTargetDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stretch Target (Integer)</para>
		/// <para><strong>Description</strong>: Select the stretch target (integer) of the goal to define a higher or difficult level of goal than the usual ones.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? StretchTargetInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.StretchTargetInteger); }
			set { Entity.Attributes[Fields.StretchTargetInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stretch Target (Money)</para>
		/// <para><strong>Description</strong>: Select stretch target (money) of the goal to define a higher or difficult level of goal than the usual ones.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StretchTargetMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StretchTargetMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.StretchTargetMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stretch Target (Money) (Base)</para>
		/// <para><strong>Description</strong>: Shows the stretch target (money) in base currency to indicate a higher or difficult level of goal than the usual ones.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? StretchTargetMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.StretchTargetMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Stretched Target</para>
		/// <para><strong>Description</strong>: Stretch target value for all data types.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StretchTargetString
		{
			get { return Entity.GetAttributeValue<string>(Fields.StretchTargetString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target (Decimal)</para>
		/// <para><strong>Description</strong>: Select a goal target of the decimal type to use for tracking data that include partial numbers, such as pounds sold of a product sold by weight.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetDecimal
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.TargetDecimal); }
			set { Entity.Attributes[Fields.TargetDecimal] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target (Integer)</para>
		/// <para><strong>Description</strong>: Select a goal target of the integer type to use for tracking anything countable in whole numbers, such as units sold.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TargetInteger
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TargetInteger); }
			set { Entity.Attributes[Fields.TargetInteger] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target (Money)</para>
		/// <para><strong>Description</strong>: Select a goal target (money) to track a monetary amount such as revenue from a product.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetMoney
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TargetMoney);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.TargetMoney] = new Money(value.Value);
				else
					Entity.Attributes[Fields.TargetMoney] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target (Money) (Base)</para>
		/// <para><strong>Description</strong>: Shows the goal target of the money type in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? TargetMoney_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.TargetMoney_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target</para>
		/// <para><strong>Description</strong>: Target value of the goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TargetString
		{
			get { return Entity.GetAttributeValue<string>(Fields.TargetString); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Type a title or name that describes the goal.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Tree ID</para>
		/// <para><strong>Description</strong>: Unique identifier of the goal tree.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? TreeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.TreeId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the goal.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para>byte[]</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}
		/// <summary>
		/// <para>ReadOnly - String</para>
		/// <para>Image</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}