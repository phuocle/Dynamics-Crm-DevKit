//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ConvertRuleOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
	public enum SenderResolutionOption
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Creating a new contact automatically</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Creating_a_new_contact_automatically = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Mapping in Power Automate manually</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Mapping_in_Power_Automate_manually = 1
	}
	public enum SourceChannelTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment</para>
		/// <para><strong>Value</strong>: 4,201</para>
		/// </summary>
		Appointment = 4_201,
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Alert</para>
		/// <para><strong>Value</strong>: 11,000</para>
		/// </summary>
		Booking_Alert = 11_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation</para>
		/// <para><strong>Value</strong>: 10,691</para>
		/// </summary>
		Conversation = 10_691,
		/// <summary>
		/// <para><strong>Display Name</strong>: Copilot Transcript</para>
		/// <para><strong>Value</strong>: 10,877</para>
		/// </summary>
		Copilot_Transcript = 10_877,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice alert</para>
		/// <para><strong>Value</strong>: 10,600</para>
		/// </summary>
		Customer_Voice_alert = 10_600,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey invite</para>
		/// <para><strong>Value</strong>: 10,610</para>
		/// </summary>
		Customer_Voice_survey_invite = 10_610,
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice survey response</para>
		/// <para><strong>Value</strong>: 10,612</para>
		/// </summary>
		Customer_Voice_survey_response = 10_612,
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 4,202</para>
		/// </summary>
		Email = 4_202,
		/// <summary>
		/// <para><strong>Display Name</strong>: Invite Redemption</para>
		/// <para><strong>Value</strong>: 10,310</para>
		/// </summary>
		Invite_Redemption = 10_310,
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message</para>
		/// <para><strong>Value</strong>: 11,063</para>
		/// </summary>
		Outbound_message = 11_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Phone Call</para>
		/// <para><strong>Value</strong>: 4,210</para>
		/// </summary>
		Phone_Call = 4_210,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portal Comment</para>
		/// <para><strong>Value</strong>: 10,311</para>
		/// </summary>
		Portal_Comment = 10_311,
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Value</strong>: 4,214</para>
		/// </summary>
		Service_Activity = 4_214,
		/// <summary>
		/// <para><strong>Display Name</strong>: Session</para>
		/// <para><strong>Value</strong>: 10,708</para>
		/// </summary>
		Session = 10_708,
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Activity</para>
		/// <para><strong>Value</strong>: 4,216</para>
		/// </summary>
		Social_Activity = 4_216,
		/// <summary>
		/// <para><strong>Display Name</strong>: Task</para>
		/// <para><strong>Value</strong>: 4,212</para>
		/// </summary>
		Task = 4_212,
		/// <summary>
		/// <para><strong>Display Name</strong>: Teams chat</para>
		/// <para><strong>Value</strong>: 10,185</para>
		/// </summary>
		Teams_chat = 10_185,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voicemail</para>
		/// <para><strong>Value</strong>: 11,070</para>
		/// </summary>
		Voicemail = 11_070
	}
	public enum SourceTypeCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Email</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Email = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Social Monitoring</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Social_Monitoring = 1
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Draft = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Draft</strong></para>
		/// </summary>
		Draft = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ConvertRule : EntityBase
	{
		public struct Fields
		{
			public const string AllowUnknownSender = "allowunknownsender";
			public const string ChannelPropertyGroupId = "channelpropertygroupid";
			public const string CheckActiveEntitlement = "checkactiveentitlement";
			public const string CheckBlockedSocialProfile = "checkblockedsocialprofile";
			public const string CheckDirectMessages = "checkdirectmessages";
			public const string CheckIfResolved = "checkifresolved";
			public const string ComponentState = "componentstate";
			public const string ConvertRuleId = "convertruleid";
			public const string ConvertRuleIdUnique = "convertruleidunique";
			public const string ConvertRuleType = "convertruletype";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string QueueId = "queueid";
			public const string RecordVersion = "recordversion";
			public const string ResolvedSince = "resolvedsince";
			public const string ResponseTemplateId = "responsetemplateid";
			public const string SendAutomaticResponse = "sendautomaticresponse";
			public const string SenderResolutionOption = "senderresolutionoption";
			public const string SolutionId = "solutionid";
			public const string SourceChannelTypeCode = "sourcechanneltypecode";
			public const string SourceTypeCode = "sourcetypecode";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowId = "workflowid";
		}
		public const string EntityLogicalName = "convertrule";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9300;
		public const string EntityCollectionSchemaName = "ConvertRules";
		public const string EntityDisplayCollectionName = "Record Creation and Update Rules";
		public const string DisplayName = "Record Creation and Update Rule";
		public const string EntitySetName = "convertrules";
		public const string EntityLogicalCollectionName = "convertrules";
		public const string EntityPrimaryIdAttribute = "convertruleid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "name";
		public const string EntitySchemaName = "ConvertRule";
		[DebuggerNonUserCode()]
		public ConvertRule()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ConvertRule(Guid ConvertRuleId)
		{
			Entity = new Entity(EntityLogicalName, ConvertRuleId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ConvertRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ConvertRule"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ConvertRule(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ConvertRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ConvertRule(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ConvertRule(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ConvertRule"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ConvertRule(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ConvertRule(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ConvertRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Unknown Sender</para>
		/// <para><strong>Description</strong>: Choose whether items from unknown senders should be converted to records.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUnknownSender
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUnknownSender); }
			set { Entity.Attributes[Fields.AllowUnknownSender] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Property Group</para>
		/// <para><strong>Description</strong>: channel property group associated with the convert rule.</para>
		/// <para><strong>Lookup</strong>: <see cref="channelpropertygroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ChannelPropertyGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ChannelPropertyGroupId); }
			set { Entity.Attributes[Fields.ChannelPropertyGroupId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check Active SLA</para>
		/// <para><strong>Description</strong>: Choose whether cases should be created for customers with active entitlements.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckActiveEntitlement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckActiveEntitlement); }
			set { Entity.Attributes[Fields.CheckActiveEntitlement] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check black listed social profiles</para>
		/// <para><strong>Description</strong>: Information whether record needs to be created for black listed social profiles.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckBlockedSocialProfile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckBlockedSocialProfile); }
			set { Entity.Attributes[Fields.CheckBlockedSocialProfile] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create records for private messages only</para>
		/// <para><strong>Description</strong>: Information whether record needs to be created for direct messages.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckDirectMessages
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckDirectMessages); }
			set { Entity.Attributes[Fields.CheckDirectMessages] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Check If Resolved</para>
		/// <para><strong>Description</strong>: Choose whether an item related to a resolved case should be converted to a case.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckIfResolved
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckIfResolved); }
			set { Entity.Attributes[Fields.CheckIfResolved] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Convert Rule</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ConvertRuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ConvertRuleId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unique Id</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ConvertRuleIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ConvertRuleIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: ARC Type</para>
		/// <para><strong>Description</strong>: Choose whether an ARC rule is modern or legacy.</para>
		/// <para><strong>Two Option</strong> - [<strong>Modern</strong>]: true - [<strong>Legacy</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Legacy</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ConvertRuleType
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ConvertRuleType); }
			set { Entity.Attributes[Fields.ConvertRuleType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Type additional information to describe the rule for creating records automatically.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the queue with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rule name</para>
		/// <para><strong>Description</strong>: Type a title or name of the queue for which the setting is defined.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Shows the business unit that the convert rule owner belongs to.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
			set { Entity.Attributes[Fields.OwningTeam] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
			set { Entity.Attributes[Fields.OwningUser] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Description</strong>: Choose the queue that the rule is assigned to.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Version</para>
		/// <para><strong>Description</strong>: Record Version</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 50</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecordVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecordVersion); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resolved Since</para>
		/// <para><strong>Description</strong>: If you want to create a new case for an item associated with a resolved case, type how long a case must remain resolved before a new case is created for the associated item.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ResolvedSince
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ResolvedSince); }
			set { Entity.Attributes[Fields.ResolvedSince] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Response Email Template</para>
		/// <para><strong>Description</strong>: Choose the email template to use to create an automatic response to the customer.</para>
		/// <para><strong>Lookup</strong>: <see cref="template"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ResponseTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResponseTemplateId); }
			set { Entity.Attributes[Fields.ResponseTemplateId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Send Automatic Response</para>
		/// <para><strong>Description</strong>: Choose whether to send an automatic email response to the customer after a record is created.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendAutomaticResponse
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendAutomaticResponse); }
			set { Entity.Attributes[Fields.SendAutomaticResponse] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender resolution options</para>
		/// <para><strong>Description</strong>: Choose whether an ARC rule should resolve email sender manually or automatically.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SenderResolutionOption"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SenderResolutionOption.Creating_a_new_contact_automatically"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SenderResolutionOption? SenderResolutionOption
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SenderResolutionOption);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SenderResolutionOption)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SenderResolutionOption] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SenderResolutionOption] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Monitored activity type</para>
		/// <para><strong>Description</strong>: Identifies the Dynamics 365 activity that&apos;s the source of the record.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceChannelTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceChannelTypeCode); }
			set { Entity.Attributes[Fields.SourceChannelTypeCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Type</para>
		/// <para><strong>Description</strong>: Source of the record.</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SourceTypeCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SourceTypeCode.Email"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SourceTypeCode? SourceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SourceTypeCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.SourceTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SourceTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SourceTypeCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Convert Rule</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.StateCode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Convert Rule</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ConvertRuleOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the queue.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of the convert rule.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Workflow</para>
		/// <para><strong>Description</strong>: Shows the workflow for this rule.</para>
		/// <para><strong>Lookup</strong>: <see cref="workflow"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowId); }
			set { Entity.Attributes[Fields.WorkflowId] = value; }
		}
	}
}