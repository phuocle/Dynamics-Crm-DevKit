//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets
{
	public enum mspp_scope
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 756,150,002</para>
		/// </summary>
		Account = 756_150_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 756,150,001</para>
		/// </summary>
		Contact = 756_150_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Global</para>
		/// <para><strong>Value</strong>: 756,150,000</para>
		/// </summary>
		Global = 756_150_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent</para>
		/// <para><strong>Value</strong>: 756,150,003</para>
		/// </summary>
		Parent = 756_150_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Self</para>
		/// <para><strong>Value</strong>: 756,150,004</para>
		/// </summary>
		Self = 756_150_004
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class mspp_entitypermission : EntityBase
	{
		public struct Fields
		{
			public const string mspp_accountrelationship = "mspp_accountrelationship";
			public const string mspp_append = "mspp_append";
			public const string mspp_appendto = "mspp_appendto";
			public const string mspp_contactrelationship = "mspp_contactrelationship";
			public const string mspp_create = "mspp_create";
			public const string mspp_createdby = "mspp_createdby";
			public const string mspp_createdon = "mspp_createdon";
			public const string mspp_delete = "mspp_delete";
			public const string mspp_entitylogicalname = "mspp_entitylogicalname";
			public const string mspp_entityname = "mspp_entityname";
			public const string mspp_entitypermissionId = "mspp_entitypermissionid";
			public const string mspp_modifiedby = "mspp_modifiedby";
			public const string mspp_modifiedon = "mspp_modifiedon";
			public const string mspp_parententitypermission = "mspp_parententitypermission";
			public const string mspp_parentrelationship = "mspp_parentrelationship";
			public const string mspp_read = "mspp_read";
			public const string mspp_scope = "mspp_scope";
			public const string mspp_websiteid = "mspp_websiteid";
			public const string mspp_write = "mspp_write";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
		}
		public const string EntityLogicalName = "mspp_entitypermission";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10324;
		public const string EntityCollectionSchemaName = "mspp_entitypermissions";
		public const string EntityDisplayCollectionName = "Table Permissions";
		public const string DisplayName = "Table Permission";
		public const string EntitySetName = "mspp_entitypermissions";
		public const string EntityLogicalCollectionName = "mspp_entitypermissions";
		public const string EntityPrimaryIdAttribute = "mspp_entitypermissionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "mspp_entityname";
		public const string EntitySchemaName = "mspp_entitypermission";
		[DebuggerNonUserCode()]
		public mspp_entitypermission()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_entitypermission(Guid mspp_entitypermissionId)
		{
			Entity = new Entity(EntityLogicalName, mspp_entitypermissionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_entitypermission(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_entitypermission"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public mspp_entitypermission(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_entitypermission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_entitypermission(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_entitypermission(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="mspp_entitypermission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public mspp_entitypermission(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new mspp_entitypermission(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public mspp_entitypermission(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Account Relationship</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_accountrelationship
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_accountrelationship); }
			set { Entity.Attributes[Fields.mspp_accountrelationship] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Append</para>
		/// <para><strong>Description</strong>: Controls whether the user can attach another record to the specified record. The Append and Append To permissions work in combination.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_append
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_append); }
			set { Entity.Attributes[Fields.mspp_append] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Append To</para>
		/// <para><strong>Description</strong>: Controls whether the user can append the specified record to another record. The Append and Append To permissions work in combination.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_appendto
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_appendto); }
			set { Entity.Attributes[Fields.mspp_appendto] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact Relationship</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_contactrelationship
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_contactrelationship); }
			set { Entity.Attributes[Fields.mspp_contactrelationship] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create</para>
		/// <para><strong>Description</strong>: The Create privilege controls whether you can create a record.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_create
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_create); }
			set { Entity.Attributes[Fields.mspp_create] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Shows who created the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_createdby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_createdby); }
			set { Entity.Attributes[Fields.mspp_createdby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was created.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_createdon); }
			set { Entity.Attributes[Fields.mspp_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Delete</para>
		/// <para><strong>Description</strong>: Controls whether the user can delete a record.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_delete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_delete); }
			set { Entity.Attributes[Fields.mspp_delete] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Table Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 250</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_entitylogicalname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_entitylogicalname); }
			set { Entity.Attributes[Fields.mspp_entitylogicalname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_entityname
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_entityname); }
			set { Entity.Attributes[Fields.mspp_entityname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Table Permission</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid mspp_entitypermissionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.mspp_entitypermissionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Shows who last updated the record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_modifiedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_modifiedby); }
			set { Entity.Attributes[Fields.mspp_modifiedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Shows the date and time when the record was modified.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? mspp_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.mspp_modifiedon); }
			set { Entity.Attributes[Fields.mspp_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Table Permission</para>
		/// <para><strong>Lookup</strong>: <see cref="mspp_entitypermission"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_parententitypermission
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_parententitypermission); }
			set { Entity.Attributes[Fields.mspp_parententitypermission] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Relationship</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string mspp_parentrelationship
		{
			get { return Entity.GetAttributeValue<string>(Fields.mspp_parentrelationship); }
			set { Entity.Attributes[Fields.mspp_parentrelationship] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Read</para>
		/// <para><strong>Description</strong>: Controls whether the user can read a record.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_read
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_read); }
			set { Entity.Attributes[Fields.mspp_read] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access Type</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.mspp_scope"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.mspp_scope? mspp_scope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.mspp_scope);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.mspp_scope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.mspp_scope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.mspp_scope] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Website</para>
		/// <para><strong>Description</strong>: Unique identifier for Website associated with Entity Permission</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="mspp_website"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference mspp_websiteid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.mspp_websiteid); }
			set { Entity.Attributes[Fields.mspp_websiteid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Write</para>
		/// <para><strong>Description</strong>: Controls whether the user can update a record.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? mspp_write
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.mspp_write); }
			set { Entity.Attributes[Fields.mspp_write] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Table Permission</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Table Permission</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.mspp_entitypermissionOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
	}
}