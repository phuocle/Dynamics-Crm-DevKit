//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets
{
	public enum msdyn_language
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Arabic - Saudi Arabia</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		Arabic_Saudi_Arabia = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: Basque - Spain</para>
		/// <para><strong>Value</strong>: 1,069</para>
		/// </summary>
		Basque_Spain = 1_069,
		/// <summary>
		/// <para><strong>Display Name</strong>: Bulgarian - Bulgaria</para>
		/// <para><strong>Value</strong>: 1,026</para>
		/// </summary>
		Bulgarian_Bulgaria = 1_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: Catalan - Spain</para>
		/// <para><strong>Value</strong>: 1,027</para>
		/// </summary>
		Catalan_Spain = 1_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - China</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		Chinese_China = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese - Hong Kong</para>
		/// <para><strong>Value</strong>: 3,076</para>
		/// </summary>
		Chinese_Hong_Kong = 3_076,
		/// <summary>
		/// <para><strong>Display Name</strong>: Chinese (Traditional)</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		Chinese_Traditional = 1_028,
		/// <summary>
		/// <para><strong>Display Name</strong>: Croatian - Croatia</para>
		/// <para><strong>Value</strong>: 1,050</para>
		/// </summary>
		Croatian_Croatia = 1_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: Czech - Czech Republic</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		Czech_Czech_Republic = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: Danish - Denmark</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		Danish_Denmark = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: Dutch - Netherlands</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		Dutch_Netherlands = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: English - United States</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		English_United_States = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: Estonian - Estonia</para>
		/// <para><strong>Value</strong>: 1,061</para>
		/// </summary>
		Estonian_Estonia = 1_061,
		/// <summary>
		/// <para><strong>Display Name</strong>: Finnish - Finland</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		Finnish_Finland = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: French - France</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		French_France = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: Galician - Spain</para>
		/// <para><strong>Value</strong>: 1,110</para>
		/// </summary>
		Galician_Spain = 1_110,
		/// <summary>
		/// <para><strong>Display Name</strong>: German - Germany</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		German_Germany = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: Greek - Greece</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		Greek_Greece = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hebrew - Israel</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		Hebrew_Israel = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hindi - India</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		Hindi_India = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: Hungarian - Hungary</para>
		/// <para><strong>Value</strong>: 1,038</para>
		/// </summary>
		Hungarian_Hungary = 1_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: Indonesian - Indonesia</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		Indonesian_Indonesia = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: Italian - Italy</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		Italian_Italy = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: Japanese - Japan</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		Japanese_Japan = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: Kazakh - Kazakhstan</para>
		/// <para><strong>Value</strong>: 1,087</para>
		/// </summary>
		Kazakh_Kazakhstan = 1_087,
		/// <summary>
		/// <para><strong>Display Name</strong>: Korean - Korea</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		Korean_Korea = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: Latvian - Latvia</para>
		/// <para><strong>Value</strong>: 1,062</para>
		/// </summary>
		Latvian_Latvia = 1_062,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lithuanian - Lithuania</para>
		/// <para><strong>Value</strong>: 1,063</para>
		/// </summary>
		Lithuanian_Lithuania = 1_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: Malay - Malaysia</para>
		/// <para><strong>Value</strong>: 1,086</para>
		/// </summary>
		Malay_Malaysia = 1_086,
		/// <summary>
		/// <para><strong>Display Name</strong>: Norwegian Bokmal - Norway</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		Norwegian_Bokmal_Norway = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: Polish - Poland</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		Polish_Poland = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Brazil</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		Portuguese_Brazil = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: Portuguese - Portugal</para>
		/// <para><strong>Value</strong>: 2,070</para>
		/// </summary>
		Portuguese_Portugal = 2_070,
		/// <summary>
		/// <para><strong>Display Name</strong>: Romanian - Romania</para>
		/// <para><strong>Value</strong>: 1,048</para>
		/// </summary>
		Romanian_Romania = 1_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: Russian - Russia</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		Russian_Russia = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Cyrillic) - Serbia</para>
		/// <para><strong>Value</strong>: 3,098</para>
		/// </summary>
		Serbian_Cyrillic_Serbia = 3_098,
		/// <summary>
		/// <para><strong>Display Name</strong>: Serbian (Latin) - Serbia</para>
		/// <para><strong>Value</strong>: 2,074</para>
		/// </summary>
		Serbian_Latin_Serbia = 2_074,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovak - Slovakia</para>
		/// <para><strong>Value</strong>: 1,051</para>
		/// </summary>
		Slovak_Slovakia = 1_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slovenian - Slovenia</para>
		/// <para><strong>Value</strong>: 1,060</para>
		/// </summary>
		Slovenian_Slovenia = 1_060,
		/// <summary>
		/// <para><strong>Display Name</strong>: Spanish - Spain</para>
		/// <para><strong>Value</strong>: 3,082</para>
		/// </summary>
		Spanish_Spain = 3_082,
		/// <summary>
		/// <para><strong>Display Name</strong>: Swedish - Sweden</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		Swedish_Sweden = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: Thai - Thailand</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		Thai_Thailand = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: Turkish - Turkey</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		Turkish_Turkey = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ukrainian - Ukraine</para>
		/// <para><strong>Value</strong>: 1,058</para>
		/// </summary>
		Ukrainian_Ukraine = 1_058,
		/// <summary>
		/// <para><strong>Display Name</strong>: Vietnamese - Vietnam</para>
		/// <para><strong>Value</strong>: 1,066</para>
		/// </summary>
		Vietnamese_Vietnam = 1_066
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_sequencetemplate : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_cjodefinition = "msdyn_cjodefinition";
			public const string msdyn_cjodefinitionnew = "msdyn_cjodefinitionnew";
			public const string msdyn_definition = "msdyn_definition";
			public const string msdyn_definitionnew = "msdyn_definitionnew";
			public const string msdyn_description = "msdyn_description";
			public const string msdyn_language = "msdyn_language";
			public const string msdyn_maxduration = "msdyn_maxduration";
			public const string msdyn_maxstepcount = "msdyn_maxstepcount";
			public const string msdyn_maxstepcounttext = "msdyn_maxstepcounttext";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_prefferedregardingentitydisplayname = "msdyn_prefferedregardingentitydisplayname";
			public const string msdyn_prefferedregardingEntityName = "msdyn_prefferedregardingEntityName";
			public const string msdyn_sequencetemplateId = "msdyn_sequencetemplateid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_sequencetemplate";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10820;
		public const string EntityCollectionSchemaName = "msdyn_sequencetemplates";
		public const string EntityDisplayCollectionName = "sequencetemplates";
		public const string DisplayName = "Sequence Template";
		public const string EntitySetName = "msdyn_sequencetemplates";
		public const string EntityLogicalCollectionName = "msdyn_sequencetemplates";
		public const string EntityPrimaryIdAttribute = "msdyn_sequencetemplateid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_sequencetemplate";
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Guid msdyn_sequencetemplateId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sequencetemplateId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetemplate"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetemplate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequencetemplate(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_sequencetemplate"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_sequencetemplate(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_sequencetemplate(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO Definition Old</para>
		/// <para><strong>Description</strong>: CJO Definition Old</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cjodefinition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cjodefinition); }
			set { Entity.Attributes[Fields.msdyn_cjodefinition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CJO Definition</para>
		/// <para><strong>Description</strong>: CJO Definition</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_cjodefinitionnew
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_cjodefinitionnew); }
			set { Entity.Attributes[Fields.msdyn_cjodefinitionnew] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition Old</para>
		/// <para><strong>Description</strong>: Sequence definition Old</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_definition
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_definition); }
			set { Entity.Attributes[Fields.msdyn_definition] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Definition</para>
		/// <para><strong>Description</strong>: Sequence definition</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_definitionnew
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_definitionnew); }
			set { Entity.Attributes[Fields.msdyn_definitionnew] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_description); }
			set { Entity.Attributes[Fields.msdyn_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Language</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.msdyn_language"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.msdyn_language.English_United_States"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.msdyn_language? msdyn_language
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_language);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.msdyn_language)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_language] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_language] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum completion days</para>
		/// <para><strong>Description</strong>: Maximum number of days to complete the sequence</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_maxduration
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_maxduration); }
			set { Entity.Attributes[Fields.msdyn_maxduration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum steps</para>
		/// <para><strong>Description</strong>: The max step count for the sequence.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_maxstepcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_maxstepcount); }
			set { Entity.Attributes[Fields.msdyn_maxstepcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Maximum step</para>
		/// <para><strong>Description</strong>: Maximum number of days to complete the sequence</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_maxstepcounttext
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_maxstepcounttext); }
			set { Entity.Attributes[Fields.msdyn_maxstepcounttext] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record type</para>
		/// <para><strong>Description</strong>: The display name information about record to which this sequence could be associated</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_prefferedregardingentitydisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_prefferedregardingentitydisplayname); }
			set { Entity.Attributes[Fields.msdyn_prefferedregardingentitydisplayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Preffered Regarding Entity Name</para>
		/// <para><strong>Description</strong>: The logical name of regarding entity</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_prefferedregardingEntityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_prefferedregardingEntityName); }
			set { Entity.Attributes[Fields.msdyn_prefferedregardingEntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Template</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sequencetemplateId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sequencetemplateId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Sequence Template</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Sequence Template</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_sequencetemplateOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}