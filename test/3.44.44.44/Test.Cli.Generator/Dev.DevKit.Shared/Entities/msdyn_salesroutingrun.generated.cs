//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets
{
	public enum msdyn_connectsequencestatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: D365WorkAssignment app user doesn't have the necessary permissions.</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		D365WorkAssignment_app_user_doesnt_have_the_necessary_permissions = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: In progress</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		In_progress = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: No sequence connected to this segment</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		No_sequence_connected_to_this_segment = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Seller needs additional access</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Seller_needs_additional_access = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence is either deleted or inactive</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Sequence_is_either_deleted_or_inactive = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence unchanged</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Sequence_unchanged = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped as segmentation failed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Skipped_as_segmentation_failed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Something went wrong</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Something_went_wrong = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Successfully connected to a sequence</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Successfully_connected_to_a_sequence = 1
	}
	public enum msdyn_routingrequestsource
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Force routed manually</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Force_routed_manually = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manually reassigned</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Manually_reassigned = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Manually resegmented</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Manually_resegmented = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: New record</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		New_record = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Reassignment scheduled</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Reassignment_scheduled = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record updated</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Record_updated = 1
	}
	public enum msdyn_routingstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Couldn't find eligible queue</para>
		/// <para><strong>Value</strong>: 15</para>
		/// </summary>
		Couldnt_find_eligible_queue = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Couldn't find eligible team</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Couldnt_find_eligible_team = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: D365WorkAssignment app user doesn't have the necessary permissions.</para>
		/// <para><strong>Value</strong>: 18</para>
		/// </summary>
		D365WorkAssignment_app_user_doesnt_have_the_necessary_permissions = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Eligible sellers don't have availability</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Eligible_sellers_dont_have_availability = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Eligible sellers don't have capacity</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Eligible_sellers_dont_have_capacity = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Found multiple eligible queues</para>
		/// <para><strong>Value</strong>: 14</para>
		/// </summary>
		Found_multiple_eligible_queues = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Found multiple eligible teams</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Found_multiple_eligible_teams = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: No assignment rule for this record's segment</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		No_assignment_rule_for_this_records_segment = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: No sellers meet the conditions</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		No_sellers_meet_the_conditions = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner assigned manually</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Owner_assigned_manually = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner assigned successfully</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Owner_assigned_successfully = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record doesn't meet any conditions</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Record_doesnt_meet_any_conditions = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record unassigned as seller lacks security role privileges</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Record_unassigned_as_seller_lacks_security_role_privileges = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rules won't run for this segment</para>
		/// <para><strong>Value</strong>: 17</para>
		/// </summary>
		Rules_wont_run_for_this_segment = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Run is in progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Run_is_in_progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Seller not assigned as record is older than the set timeframe</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Seller_not_assigned_as_record_is_older_than_the_set_timeframe = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped as segmentation failed</para>
		/// <para><strong>Value</strong>: 16</para>
		/// </summary>
		Skipped_as_segmentation_failed = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: There was an issue with the server</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		There_was_an_issue_with_the_server = 3
	}
	public enum msdyn_segmentationstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: D365WorkAssignment app user doesn't have the necessary permissions.</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		D365WorkAssignment_app_user_doesnt_have_the_necessary_permissions = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		In_Progress = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Matched with previous segment</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Matched_with_previous_segment = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: No matching segments</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		No_matching_segments = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: No segmentation required</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		No_segmentation_required = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Segmentation successful</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Segmentation_successful = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Something went wrong</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Something_went_wrong = 2
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Failed = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inprogress</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Inprogress = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Succeeded</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Succeeded = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Couldn't find eligible queue</para>
		/// <para><strong>Value</strong>: 15</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Couldnt_find_eligible_queue = 15,
		/// <summary>
		/// <para><strong>Display Name</strong>: Couldn't find eligible team</para>
		/// <para><strong>Value</strong>: 13</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Couldnt_find_eligible_team = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: D365WorkAssignment app user doesn't have the necessary permissions.</para>
		/// <para><strong>Value</strong>: 18</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		D365WorkAssignment_app_user_doesnt_have_the_necessary_permissions = 18,
		/// <summary>
		/// <para><strong>Display Name</strong>: Eligible sellers don't have availability</para>
		/// <para><strong>Value</strong>: 6</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Eligible_sellers_dont_have_availability = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Eligible sellers don't have capacity</para>
		/// <para><strong>Value</strong>: 7</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Eligible_sellers_dont_have_capacity = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Found multiple eligible queues</para>
		/// <para><strong>Value</strong>: 14</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Found_multiple_eligible_queues = 14,
		/// <summary>
		/// <para><strong>Display Name</strong>: Found multiple eligible teams</para>
		/// <para><strong>Value</strong>: 12</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Found_multiple_eligible_teams = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: No assignment rule for this record's segment</para>
		/// <para><strong>Value</strong>: 8</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		No_assignment_rule_for_this_records_segment = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: No sellers meet the conditions</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		No_sellers_meet_the_conditions = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner assigned manually</para>
		/// <para><strong>Value</strong>: 9</para>
		/// <para><strong>StateCode.Succeeded</strong></para>
		/// </summary>
		Owner_assigned_manually = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner assigned successfully</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Succeeded</strong></para>
		/// </summary>
		Owner_assigned_successfully = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record doesn't meet any conditions</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Record_doesnt_meet_any_conditions = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Record unassigned as seller lacks security role privileges</para>
		/// <para><strong>Value</strong>: 10</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Record_unassigned_as_seller_lacks_security_role_privileges = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Rules won't run for this segment</para>
		/// <para><strong>Value</strong>: 17</para>
		/// <para><strong>StateCode.Succeeded</strong></para>
		/// </summary>
		Rules_wont_run_for_this_segment = 17,
		/// <summary>
		/// <para><strong>Display Name</strong>: Run is in progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Inprogress</strong></para>
		/// </summary>
		Run_is_in_progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Seller not assigned as record is older than the set timeframe</para>
		/// <para><strong>Value</strong>: 11</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Seller_not_assigned_as_record_is_older_than_the_set_timeframe = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skipped as segmentation failed</para>
		/// <para><strong>Value</strong>: 16</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		Skipped_as_segmentation_failed = 16,
		/// <summary>
		/// <para><strong>Display Name</strong>: There was an issue with the server</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Failed</strong></para>
		/// </summary>
		There_was_an_issue_with_the_server = 3
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_salesroutingrun : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_assignmentruleid = "msdyn_assignmentruleid";
			public const string msdyn_connectedsequenceids = "msdyn_connectedsequenceids";
			public const string msdyn_connectsequencestatus = "msdyn_connectsequencestatus";
			public const string msdyn_errormessage = "msdyn_errormessage";
			public const string msdyn_isrecordassigned = "msdyn_isrecordassigned";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ownerassigned = "msdyn_ownerassigned";
			public const string msdyn_previousowner = "msdyn_previousowner";
			public const string msdyn_previoussegmentid = "msdyn_previoussegmentid";
			public const string msdyn_routingrequestsource = "msdyn_routingrequestsource";
			public const string msdyn_routingstatus = "msdyn_routingstatus";
			public const string msdyn_salesroutingrunId = "msdyn_salesroutingrunid";
			public const string msdyn_saruninstanceid = "msdyn_saruninstanceid";
			public const string msdyn_segmentationstatus = "msdyn_segmentationstatus";
			public const string msdyn_segmentid = "msdyn_segmentid";
			public const string msdyn_targetobject = "msdyn_targetobject";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_salesroutingrun";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10835;
		public const string EntityCollectionSchemaName = "msdyn_salesroutingruns";
		public const string EntityDisplayCollectionName = "Sales routing runs";
		public const string DisplayName = "Sales routing run";
		public const string EntitySetName = "msdyn_salesroutingruns";
		public const string EntityLogicalCollectionName = "msdyn_salesroutingruns";
		public const string EntityPrimaryIdAttribute = "msdyn_salesroutingrunid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_salesroutingrun";
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun(Guid msdyn_salesroutingrunId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_salesroutingrunId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salesroutingrun"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salesroutingrun"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_salesroutingrun(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_salesroutingrun"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_salesroutingrun(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_salesroutingrun(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment attempt</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Rule</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_assignmentrule"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_assignmentruleid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_assignmentruleid); }
			set { Entity.Attributes[Fields.msdyn_assignmentruleid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connected sequences</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_connectedsequenceids
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_connectedsequenceids); }
			set { Entity.Attributes[Fields.msdyn_connectedsequenceids] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Connect sequence status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_connectsequencestatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_connectsequencestatus? msdyn_connectsequencestatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_connectsequencestatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_connectsequencestatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_connectsequencestatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_connectsequencestatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error message</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 50,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_errormessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_errormessage); }
			set { Entity.Attributes[Fields.msdyn_errormessage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is record assigned</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isrecordassigned
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isrecordassigned); }
			set { Entity.Attributes[Fields.msdyn_isrecordassigned] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Assigned owner</para>
		/// <para><strong>Description</strong>: Assigned owner id</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ownerassigned
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ownerassigned); }
			set { Entity.Attributes[Fields.msdyn_ownerassigned] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous owner</para>
		/// <para><strong>Description</strong>: Previous owner id</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/>, <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_previousowner
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_previousowner); }
			set { Entity.Attributes[Fields.msdyn_previousowner] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Previous segment</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_previoussegmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_previoussegmentid); }
			set { Entity.Attributes[Fields.msdyn_previoussegmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Routing request source</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_routingrequestsource"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_routingrequestsource? msdyn_routingrequestsource
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_routingrequestsource);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_routingrequestsource)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_routingrequestsource] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_routingrequestsource] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Routing status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_routingstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_routingstatus? msdyn_routingstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_routingstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_routingstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_routingstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_routingstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sales routing run</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_salesroutingrunId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_salesroutingrunId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: SARunInstance</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_saruninstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_saruninstanceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_saruninstanceid); }
			set { Entity.Attributes[Fields.msdyn_saruninstanceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segmentation status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_segmentationstatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_segmentationstatus? msdyn_segmentationstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_segmentationstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.msdyn_segmentationstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_segmentationstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_segmentationstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Segment</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_segment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_segmentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_segmentid); }
			set { Entity.Attributes[Fields.msdyn_segmentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Object</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/>, <see cref="lead"/>, <see cref="msdyn_salessuggestion"/>, <see cref="opportunity"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_targetobject
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_targetobject); }
			set { Entity.Attributes[Fields.msdyn_targetobject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Sales routing run</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Sales routing run</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_salesroutingrunOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}