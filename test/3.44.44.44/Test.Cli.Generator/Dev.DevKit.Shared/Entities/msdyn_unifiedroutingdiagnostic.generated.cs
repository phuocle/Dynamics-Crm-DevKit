//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets
{
	public enum msdyn_diagnosticdatatype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Diagnostic</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Assignment_Diagnostic = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Demand Classification Diagnostic</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Demand_Classification_Diagnostic = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Demand ML Diagnostic</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Demand_ML_Diagnostic = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Demand RTQ Diagnostic</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Demand_RTQ_Diagnostic = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unknown</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Unknown = 0
	}
	public enum msdyn_ruletype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Assignment = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Assignment Selection Criteria</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Assignment_Selection_Criteria = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom API Classification</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Custom_API_Classification = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom API Route to Queue</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Custom_API_Route_to_Queue = 13,
		/// <summary>
		/// <para><strong>Display Name</strong>: Demand Classification</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Demand_Classification = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: ICD Route To Queue</para>
		/// <para><strong>Value</strong>: 20</para>
		/// </summary>
		ICD_Route_To_Queue = 20,
		/// <summary>
		/// <para><strong>Display Name</strong>: Intake</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Intake = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: ML</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		ML = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Prioritization</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Prioritization = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Route To Queue</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Route_To_Queue = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Skill Identification</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Skill_Identification = 3
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_unifiedroutingdiagnostic : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_completedon = "msdyn_completedon";
			public const string msdyn_decisionrulesetid = "msdyn_decisionrulesetid";
			public const string msdyn_diagnosticdata = "msdyn_diagnosticdata";
			public const string msdyn_diagnosticdatatype = "msdyn_diagnosticdatatype";
			public const string msdyn_evaluation = "msdyn_evaluation";
			public const string msdyn_inputdata = "msdyn_inputdata";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocliveworkitemid = "msdyn_ocliveworkitemid";
			public const string msdyn_outputdata = "msdyn_outputdata";
			public const string msdyn_ruletype = "msdyn_ruletype";
			public const string msdyn_sequencenumber = "msdyn_sequencenumber";
			public const string msdyn_startedon = "msdyn_startedon";
			public const string msdyn_targetobject = "msdyn_targetobject";
			public const string msdyn_unifiedroutingdiagnosticId = "msdyn_unifiedroutingdiagnosticid";
			public const string msdyn_unifiedroutingrunid = "msdyn_unifiedroutingrunid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_unifiedroutingdiagnostic";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10634;
		public const string EntityCollectionSchemaName = "msdyn_unifiedroutingdiagnostics";
		public const string EntityDisplayCollectionName = "Routing diagnostic items";
		public const string DisplayName = "Routing diagnostic item";
		public const string EntitySetName = "msdyn_unifiedroutingdiagnostics";
		public const string EntityLogicalCollectionName = "msdyn_unifiedroutingdiagnostics";
		public const string EntityPrimaryIdAttribute = "msdyn_unifiedroutingdiagnosticid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_unifiedroutingdiagnostic";
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic(Guid msdyn_unifiedroutingdiagnosticId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_unifiedroutingdiagnosticId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_unifiedroutingdiagnostic"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_unifiedroutingdiagnostic"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_unifiedroutingdiagnostic(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_unifiedroutingdiagnostic"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_unifiedroutingdiagnostic(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_unifiedroutingdiagnostic(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed On</para>
		/// <para><strong>Description</strong>: Date and time when the rule execution was completed.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_completedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_completedon); }
			set { Entity.Attributes[Fields.msdyn_completedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Decision Rule Set Id</para>
		/// <para><strong>Description</strong>: Unique identifier for Decision rule set associated with unifiedroutingdiagnostic.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_decisionruleset"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_decisionrulesetid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_decisionrulesetid); }
			set { Entity.Attributes[Fields.msdyn_decisionrulesetid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Diagnostics Data</para>
		/// <para><strong>Description</strong>: Diagnostics data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_diagnosticdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_diagnosticdata); }
			set { Entity.Attributes[Fields.msdyn_diagnosticdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Diagnostic Data Type</para>
		/// <para><strong>Description</strong>: Diagnostic Data type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.msdyn_diagnosticdatatype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.msdyn_diagnosticdatatype? msdyn_diagnosticdatatype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_diagnosticdatatype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.msdyn_diagnosticdatatype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_diagnosticdatatype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_diagnosticdatatype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Evaluation</para>
		/// <para><strong>Description</strong>: Evaluation</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_evaluation
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_evaluation); }
			set { Entity.Attributes[Fields.msdyn_evaluation] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Input Data</para>
		/// <para><strong>Description</strong>: Input data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_inputdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_inputdata); }
			set { Entity.Attributes[Fields.msdyn_inputdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: Name of the unifiedroutingdiagnostic record</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work item</para>
		/// <para><strong>Description</strong>: Unique identifier for Conversation associated with unifiedroutingdiagnostic.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocliveworkitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ocliveworkitemid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ocliveworkitemid); }
			set { Entity.Attributes[Fields.msdyn_ocliveworkitemid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Output Data</para>
		/// <para><strong>Description</strong>: Output data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_outputdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_outputdata); }
			set { Entity.Attributes[Fields.msdyn_outputdata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rule Type</para>
		/// <para><strong>Description</strong>: Rule type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.msdyn_ruletype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.msdyn_ruletype? msdyn_ruletype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ruletype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.msdyn_ruletype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ruletype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ruletype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_sequencenumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_sequencenumber); }
			set { Entity.Attributes[Fields.msdyn_sequencenumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Started On</para>
		/// <para><strong>Description</strong>: Date and time when the rule execution was started.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startedon); }
			set { Entity.Attributes[Fields.msdyn_startedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target Object</para>
		/// <para><strong>Description</strong>: Unique identifier for the target object associated with unifiedroutingdiagnostic.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocliveworkitem"/>, <see cref="msdyn_ocvoicemail"/>, <see cref="queueitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_targetobject
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_targetobject); }
			set { Entity.Attributes[Fields.msdyn_targetobject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Unified Routing Diagnostic</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_unifiedroutingdiagnosticId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_unifiedroutingdiagnosticId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: unified routing run wrapper</para>
		/// <para><strong>Description</strong>: Unique identifier for Unified routing run associated with Unified routing diagnostic.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_unifiedroutingrun"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_unifiedroutingrunid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_unifiedroutingrunid); }
			set { Entity.Attributes[Fields.msdyn_unifiedroutingrunid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the unifiedroutingdiagnostic</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the unifiedroutingdiagnostic</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_unifiedroutingdiagnosticOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}