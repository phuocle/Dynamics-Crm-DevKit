//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:52:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.TraceLogOptionSets
{
	public enum Level
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Error</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Error = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Information</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Information = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Warning</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Warning = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class TraceLog : EntityBase
	{
		public struct Fields
		{
			public const string CanBeDeleted = "canbedeleted";
			public const string CollationLevel = "collationlevel";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorDetails = "errordetails";
			public const string ErrorTypeDisplay = "errortypedisplay";
			public const string IsUnique = "isunique";
			public const string Level = "level";
			public const string MachineName = "machinename";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OrganizationId = "organizationid";
			public const string ParentTraceLogId = "parenttracelogid";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectOwnerId = "regardingobjectownerid";
			public const string RegardingObjectOwningBusinessUnit = "regardingobjectowningbusinessunit";
			public const string Text = "text";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TraceActionXml = "traceactionxml";
			public const string TraceCode = "tracecode";
			public const string TraceDetailXml = "tracedetailxml";
			public const string TraceLogId = "tracelogid";
			public const string TraceParameterHash = "traceparameterhash";
			public const string TraceParameterXml = "traceparameterxml";
			public const string TraceRegardingId = "traceregardingid";
			public const string TraceStatus = "tracestatus";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
		}
		public const string EntityLogicalName = "tracelog";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 8050;
		public const string EntityCollectionSchemaName = "TraceLogs";
		public const string EntityDisplayCollectionName = "Traces";
		public const string DisplayName = "Trace";
		public const string EntitySetName = "tracelogs";
		public const string EntityLogicalCollectionName = "tracelogs";
		public const string EntityPrimaryIdAttribute = "tracelogid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "text";
		public const string EntitySchemaName = "TraceLog";
		[DebuggerNonUserCode()]
		public TraceLog()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TraceLog(Guid TraceLogId)
		{
			Entity = new Entity(EntityLogicalName, TraceLogId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TraceLog(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TraceLog"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public TraceLog(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TraceLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TraceLog(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TraceLog(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="TraceLog"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public TraceLog(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new TraceLog(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public TraceLog(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace CanBeDeleted Flag</para>
		/// <para><strong>Description</strong>: Indicates if this trace log can be deleted.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Yes</strong>]: true</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CanBeDeleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CanBeDeleted); }
			set { Entity.Attributes[Fields.CanBeDeleted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Collation Level</para>
		/// <para><strong>Description</strong>: Indicates the collation level</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CollationLevel
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CollationLevel); }
			set { Entity.Attributes[Fields.CollationLevel] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the trace.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Time the error is created and logged.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the trace.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,048</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorDetails
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorDetails); }
			set { Entity.Attributes[Fields.ErrorDetails] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Error Details</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ErrorTypeDisplay
		{
			get { return Entity.GetAttributeValue<string>(Fields.ErrorTypeDisplay); }
			set { Entity.Attributes[Fields.ErrorTypeDisplay] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Unique Trace</para>
		/// <para><strong>Description</strong>: Tells if this traceLog is created uniquely(only one) for the associated entity.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsUnique
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsUnique); }
			set { Entity.Attributes[Fields.IsUnique] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Level</para>
		/// <para><strong>Description</strong>: Information about the trace level.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level.Information"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level? Level
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Level);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.TraceLogOptionSets.Level)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Level] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Level] = null;
			}
		}
		/// <summary>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 320</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MachineName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MachineName); }
			set { Entity.Attributes[Fields.MachineName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the trace.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Update On</para>
		/// <para><strong>Description</strong>: Time the error is updated and logged for the same regarding object.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the trace.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization</para>
		/// <para><strong>Description</strong>: Unique identifier of the organization associated with the trace.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Parent Id</para>
		/// <para><strong>Description</strong>: Indicates the parent ID of the trace log.</para>
		/// <para><strong>Lookup</strong>: <see cref="tracelog"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentTraceLogId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentTraceLogId); }
			set { Entity.Attributes[Fields.ParentTraceLogId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Regarding</para>
		/// <para><strong>Description</strong>: Regarding mailbox or email server profile.</para>
		/// <para><strong>Lookup</strong>: <see cref="emailserverprofile"/>, <see cref="mailbox"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the regarding object.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwnerId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the regarding object.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectOwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectOwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Text</para>
		/// <para><strong>Description</strong>: Text of the trace.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 2,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Text
		{
			get { return Entity.GetAttributeValue<string>(Fields.Text); }
			set { Entity.Attributes[Fields.Text] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Actions XML</para>
		/// <para><strong>Description</strong>: XML representation of the trace actions.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceActionXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceActionXml); }
			set { Entity.Attributes[Fields.TraceActionXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error Code</para>
		/// <para><strong>Description</strong>: Error code.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceCode); }
			set { Entity.Attributes[Fields.TraceCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Detail XML</para>
		/// <para><strong>Description</strong>: XML representation of the trace details.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceDetailXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceDetailXml); }
			set { Entity.Attributes[Fields.TraceDetailXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace</para>
		/// <para><strong>Description</strong>: Unique identifier of the trace.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid TraceLogId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.TraceLogId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Parameter Hash</para>
		/// <para><strong>Description</strong>: Stores the hash of the entity object associated with this tracelog. Hash is computed using the object type code and its id.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TraceParameterHash
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TraceParameterHash); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Parameter XML</para>
		/// <para><strong>Description</strong>: XML representation of the trace parameters.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,073,741,823</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraceParameterXml
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraceParameterXml); }
			set { Entity.Attributes[Fields.TraceParameterXml] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Regarding</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="traceregarding"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TraceRegardingId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TraceRegardingId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Trace Status</para>
		/// <para><strong>Description</strong>: Status about the trace.</para>
		/// <para><strong>Two Option</strong> - [<strong>Success</strong>]: true - [<strong>Failure</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Failure</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TraceStatus
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TraceStatus); }
			set { Entity.Attributes[Fields.TraceStatus] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the trace was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
	}
}