//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:36
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_forecastinstance : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_actualamount = "msdyn_actualamount";
			public const string msdyn_actualamount_Base = "msdyn_actualamount_base";
			public const string msdyn_bestcaseamount = "msdyn_bestcaseamount";
			public const string msdyn_bestcaseamount_Base = "msdyn_bestcaseamount_base";
			public const string msdyn_committedamount = "msdyn_committedamount";
			public const string msdyn_committedamount_Base = "msdyn_committedamount_base";
			public const string msdyn_forecastdefinitionid = "msdyn_forecastdefinitionid";
			public const string msdyn_forecastinstanceId = "msdyn_forecastinstanceid";
			public const string msdyn_forecastinstancetype = "msdyn_forecastinstancetype";
			public const string msdyn_forecastname = "msdyn_forecastname";
			public const string msdyn_forecastparentid = "msdyn_forecastparentid";
			public const string msdyn_forecastrecurrenceid = "msdyn_forecastrecurrenceid";
			public const string msdyn_ismanualbestcase = "msdyn_ismanualbestcase";
			public const string msdyn_ismanualcommitted = "msdyn_ismanualcommitted";
			public const string msdyn_ismanualpipeline = "msdyn_ismanualpipeline";
			public const string msdyn_isquotasourcemanual = "msdyn_isquotasourcemanual";
			public const string msdyn_level = "msdyn_level";
			public const string msdyn_manualbestcaseamount = "msdyn_manualbestcaseamount";
			public const string msdyn_manualbestcaseamount_Base = "msdyn_manualbestcaseamount_base";
			public const string msdyn_manualcommittedamount = "msdyn_manualcommittedamount";
			public const string msdyn_manualcommittedamount_Base = "msdyn_manualcommittedamount_base";
			public const string msdyn_manualpipelineamount = "msdyn_manualpipelineamount";
			public const string msdyn_manualpipelineamount_Base = "msdyn_manualpipelineamount_base";
			public const string msdyn_matchinggoalid = "msdyn_matchinggoalid";
			public const string msdyn_percentageachieved = "msdyn_percentageachieved";
			public const string msdyn_pipelineamount = "msdyn_pipelineamount";
			public const string msdyn_pipelineamount_Base = "msdyn_pipelineamount_base";
			public const string msdyn_recurrenceindex = "msdyn_recurrenceindex";
			public const string msdyn_targetamount = "msdyn_targetamount";
			public const string msdyn_targetamount_Base = "msdyn_targetamount_base";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_forecastinstance";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10528;
		public const string EntityCollectionSchemaName = "msdyn_forecastinstances";
		public const string EntityDisplayCollectionName = "Forecasts";
		public const string DisplayName = "Forecast";
		public const string EntitySetName = "msdyn_forecastinstances";
		public const string EntityLogicalCollectionName = "msdyn_forecastinstances";
		public const string EntityPrimaryIdAttribute = "msdyn_forecastinstanceid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_forecastname";
		public const string EntitySchemaName = "msdyn_forecastinstance";
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance(Guid msdyn_forecastinstanceId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_forecastinstanceId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastinstance"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastinstance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_forecastinstance(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_forecastinstance"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_forecastinstance(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_forecastinstance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Exchange Rate</para>
		/// <para><strong>Description</strong>: Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Description</strong>: Shows the actual value (money) achieved toward the target as of the last rollup date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -9,999,999,999,999 - <strong>MaxValue</strong>: 9,999,999,999,999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_actualamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_actualamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Actual (Money) (Base)</para>
		/// <para><strong>Description</strong>: Value of the Actual (Money) in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -9,999,999,999,999 - <strong>MaxValue</strong>: 9,999,999,999,999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_actualamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_actualamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Best case</para>
		/// <para><strong>Description</strong>: Shows the rollup value (money) for the best case category as of the last rollup date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_bestcaseamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_bestcaseamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_bestcaseamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_bestcaseamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: bestcaseamount (Base)</para>
		/// <para><strong>Description</strong>: Value of the BestCase in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_bestcaseamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_bestcaseamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Committed</para>
		/// <para><strong>Description</strong>: Shows the committed rollup value (money) as of the last rollup date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_committedamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_committedamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_committedamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_committedamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Committed (Base)</para>
		/// <para><strong>Description</strong>: Value of the Committed in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_committedamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_committedamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast definition</para>
		/// <para><strong>Description</strong>: Unique identifier for the forecast definition that is associated with the forecast.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_forecastdefinition"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_forecastdefinitionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_forecastdefinitionid); }
			set { Entity.Attributes[Fields.msdyn_forecastdefinitionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast</para>
		/// <para><strong>Description</strong>: Unique identifier for the forecast.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_forecastinstanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_forecastinstanceId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast type</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_forecastinstancetype
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_forecastinstancetype); }
			set { Entity.Attributes[Fields.msdyn_forecastinstancetype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast</para>
		/// <para><strong>Description</strong>: Name of the forecast.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_forecastname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_forecastname); }
			set { Entity.Attributes[Fields.msdyn_forecastname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast parent</para>
		/// <para><strong>Description</strong>: Unique identifier for the parent forecast that is associated with the forecast.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_forecastinstance"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_forecastparentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_forecastparentid); }
			set { Entity.Attributes[Fields.msdyn_forecastparentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Forecast recurrence</para>
		/// <para><strong>Description</strong>: Unique identifier for the forecast recurrence associated with the forecast.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_forecastrecurrence"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_forecastrecurrenceid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_forecastrecurrenceid); }
			set { Entity.Attributes[Fields.msdyn_forecastrecurrenceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Adjust manually (Best case)</para>
		/// <para><strong>Description</strong>: Select whether the bestcase rollup has been manually updated.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ismanualbestcase
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ismanualbestcase); }
			set { Entity.Attributes[Fields.msdyn_ismanualbestcase] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Adjust manually (Committed)</para>
		/// <para><strong>Description</strong>: Select whether the committed rollup has been manually updated.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ismanualcommitted
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ismanualcommitted); }
			set { Entity.Attributes[Fields.msdyn_ismanualcommitted] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Adjust manually (Pipeline)</para>
		/// <para><strong>Description</strong>: Select whether the pipeline rollup has been manually updated.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ismanualpipeline
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ismanualpipeline); }
			set { Entity.Attributes[Fields.msdyn_ismanualpipeline] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is quota source manual</para>
		/// <para><strong>Description</strong>: Is quota source manual</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isquotasourcemanual
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isquotasourcemanual); }
			set { Entity.Attributes[Fields.msdyn_isquotasourcemanual] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record level</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_level
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_level); }
			set { Entity.Attributes[Fields.msdyn_level] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Best case</para>
		/// <para><strong>Description</strong>: Shows the changed value of the best case rollup (Money type) as of the last rolled-up date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_manualbestcaseamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_manualbestcaseamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_manualbestcaseamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_manualbestcaseamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual BestCase (Base)</para>
		/// <para><strong>Description</strong>: Value of the Manual BestCase in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_manualbestcaseamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_manualbestcaseamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Committed</para>
		/// <para><strong>Description</strong>: Shows the changed value of the committed rollup (Money type) as of the last rolled-up date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_manualcommittedamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_manualcommittedamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_manualcommittedamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_manualcommittedamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual Committed (Base)</para>
		/// <para><strong>Description</strong>: Value of the Manual Committed in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_manualcommittedamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_manualcommittedamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pipeline</para>
		/// <para><strong>Description</strong>: Shows the changed value of the pipeline rollup (Money type) as of the last rolled-up date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_manualpipelineamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_manualpipelineamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_manualpipelineamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_manualpipelineamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Manual Pipeline (Base)</para>
		/// <para><strong>Description</strong>: Value of the Manual Pipeline in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_manualpipelineamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_manualpipelineamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Matching goal</para>
		/// <para><strong>Description</strong>: Unique identifier for the matching goal associated with the forecast.</para>
		/// <para><strong>Lookup</strong>: <see cref="goal"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_matchinggoalid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_matchinggoalid); }
			set { Entity.Attributes[Fields.msdyn_matchinggoalid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Achieved %</para>
		/// <para><strong>Description</strong>: Shows the percentage achieved against the target.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// <para><strong>Calculated Field</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_percentageachieved
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_percentageachieved); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pipeline</para>
		/// <para><strong>Description</strong>: Shows the pipeline rollup value (money) as of the last rollup date.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_pipelineamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_pipelineamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_pipelineamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_pipelineamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pipeline (Base)</para>
		/// <para><strong>Description</strong>: Value of the Pipeline in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>: -922,337,203,685,477 - <strong>MaxValue</strong>: 922,337,203,685,477</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_pipelineamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_pipelineamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Recurrence index</para>
		/// <para><strong>Description</strong>: Shows the recurrence index of the forecast created from the forecast definition.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_recurrenceindex
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_recurrenceindex); }
			set { Entity.Attributes[Fields.msdyn_recurrenceindex] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quota</para>
		/// <para><strong>Description</strong>: Select a target (Money type) to track a monetary amount, such as estimated revenue from an opportunity.</para>
		/// <para><strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 9,999,999,999,999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_targetamount
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_targetamount);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_targetamount] = new Money(value.Value);
				else
					Entity.Attributes[Fields.msdyn_targetamount] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target (Money) (Base)</para>
		/// <para><strong>Description</strong>: Value of the Target (Money) in base currency.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Currency</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 9,999,999,999,999</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_targetamount_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.msdyn_targetamount_Base);
				if (value == null) return null;
				return value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Forecast</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Forecast</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_forecastinstanceOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Currency</para>
		/// <para><strong>Description</strong>: Unique identifier of the currency associated with the entity.</para>
		/// <para><strong>Lookup</strong>: <see cref="transactioncurrency"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}