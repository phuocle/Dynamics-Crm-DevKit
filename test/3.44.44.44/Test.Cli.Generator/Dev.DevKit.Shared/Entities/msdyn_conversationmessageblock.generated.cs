//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:34
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_conversationmessageblock : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_agentid = "msdyn_agentid";
			public const string msdyn_agentmessagetime = "msdyn_agentmessagetime";
			public const string msdyn_agentresponsesessionid = "msdyn_agentresponsesessionid";
			public const string msdyn_agentresponsetimeadjforoh = "msdyn_agentresponsetimeadjforoh";
			public const string msdyn_agentresponsetimenotadjforoh = "msdyn_agentresponsetimenotadjforoh";
			public const string msdyn_conversationmessageblockId = "msdyn_conversationmessageblockid";
			public const string msdyn_customermessagesessionid = "msdyn_customermessagesessionid";
			public const string msdyn_customermessagetimestamp = "msdyn_customermessagetimestamp";
			public const string msdyn_inboundmessagecountoutsideoh = "msdyn_inboundmessagecountoutsideoh";
			public const string msdyn_inboundmessagecountwithinoh = "msdyn_inboundmessagecountwithinoh";
			public const string msdyn_isfirstresponsetime = "msdyn_isfirstresponsetime";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocliveworkitemid = "msdyn_ocliveworkitemid";
			public const string msdyn_outboundmessagecountoutsideoh = "msdyn_outboundmessagecountoutsideoh";
			public const string msdyn_outboundmessagecountwithinoh = "msdyn_outboundmessagecountwithinoh";
			public const string msdyn_responsetimeadjforoh = "msdyn_responsetimeadjforoh";
			public const string msdyn_responsetimenotadjforoh = "msdyn_responsetimenotadjforoh";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_conversationmessageblock";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10675;
		public const string EntityCollectionSchemaName = "msdyn_conversationmessageblocks";
		public const string EntityDisplayCollectionName = "msdyn_conversationmessageblock";
		public const string DisplayName = "Conversation Message Block";
		public const string EntitySetName = "msdyn_conversationmessageblocks";
		public const string EntityLogicalCollectionName = "msdyn_conversationmessageblocks";
		public const string EntityPrimaryIdAttribute = "msdyn_conversationmessageblockid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_conversationmessageblock";
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock(Guid msdyn_conversationmessageblockId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_conversationmessageblockId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_conversationmessageblock"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_conversationmessageblock"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_conversationmessageblock(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_conversationmessageblock"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_conversationmessageblock(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_conversationmessageblock(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent Id</para>
		/// <para><strong>Description</strong>: Id of Agent who first responded to customer in this message block</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_agentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_agentid); }
			set { Entity.Attributes[Fields.msdyn_agentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent message time</para>
		/// <para><strong>Description</strong>: Timestamp of first message sent by agent within a message block. Each message block record is a summary of consecutive messages sent by customer and agent’s response to the same</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_agentmessagetimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_agentmessagetime); }
			set { Entity.Attributes[Fields.msdyn_agentmessagetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent response session identifier</para>
		/// <para><strong>Description</strong>: Agent response session identifier. The session in which agent responded to the customer’s message within this message block</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_agentresponsesessionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_agentresponsesessionid); }
			set { Entity.Attributes[Fields.msdyn_agentresponsesessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent response time adjusted for operating hours.</para>
		/// <para><strong>Description</strong>: Time it took for the agent to respond to the customer from the time agent accepted the session., excluding agent&apos;s out of operating hours (OOOH)</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_agentresponsetimeadjforoh
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_agentresponsetimeadjforoh); }
			set { Entity.Attributes[Fields.msdyn_agentresponsetimeadjforoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Agent response time not adjusted for OH</para>
		/// <para><strong>Description</strong>: Time it took for the agent to respond to the customer from the time agent accepted the session, including agent&apos;s out of operating hours (OOOH)</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_agentresponsetimenotadjforoh
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_agentresponsetimenotadjforoh); }
			set { Entity.Attributes[Fields.msdyn_agentresponsetimenotadjforoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Message Blocks</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_conversationmessageblockId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_conversationmessageblockId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer message session identifier</para>
		/// <para><strong>Description</strong>: Customer message session identifier. The session in which customer sent the message within this message block</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocsession"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customermessagesessionid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customermessagesessionid); }
			set { Entity.Attributes[Fields.msdyn_customermessagesessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer message time</para>
		/// <para><strong>Description</strong>: Customer Message Session timestamp. Timestamp of first customer message within this message block</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_customermessagetimestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_customermessagetimestamp); }
			set { Entity.Attributes[Fields.msdyn_customermessagetimestamp] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In message outside OH</para>
		/// <para><strong>Description</strong>: Number of messages from customer to agent outside the agent&apos;s operating hours</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_inboundmessagecountoutsideoh
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_inboundmessagecountoutsideoh); }
			set { Entity.Attributes[Fields.msdyn_inboundmessagecountoutsideoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: In message within OH</para>
		/// <para><strong>Description</strong>: Number of messages from customer to agent within the agent&apos;s operating hours</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_inboundmessagecountwithinoh
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_inboundmessagecountwithinoh); }
			set { Entity.Attributes[Fields.msdyn_inboundmessagecountwithinoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is first response time</para>
		/// <para><strong>Description</strong>: Indicates if this message block contains the first response time for the conversation</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_isfirstresponsetime
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_isfirstresponsetime); }
			set { Entity.Attributes[Fields.msdyn_isfirstresponsetime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Conversation Id</para>
		/// <para><strong>Description</strong>: Conversation Id</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_ocliveworkitem"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_ocliveworkitemid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_ocliveworkitemid); }
			set { Entity.Attributes[Fields.msdyn_ocliveworkitemid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outbound message outside operating hours</para>
		/// <para><strong>Description</strong>: Number of messages from agent to customer outside the agent&apos;s operating hours</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_outboundmessagecountoutsideoh
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_outboundmessagecountoutsideoh); }
			set { Entity.Attributes[Fields.msdyn_outboundmessagecountoutsideoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Outboud message within operating hours</para>
		/// <para><strong>Description</strong>: Number of messages from agent to customer within the agent&apos;s operating hours</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_outboundmessagecountwithinoh
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_outboundmessagecountwithinoh); }
			set { Entity.Attributes[Fields.msdyn_outboundmessagecountwithinoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Response time adjusted for OH</para>
		/// <para><strong>Description</strong>: Time it took to respond to customer, excluding agent&apos;s out of operating hours (OOOH)</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_responsetimeadjforoh
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_responsetimeadjforoh); }
			set { Entity.Attributes[Fields.msdyn_responsetimeadjforoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Response time not adjusted for OH</para>
		/// <para><strong>Description</strong>: Time it took to respond to customer, including agent&apos;s out of operating hours</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_responsetimenotadjforoh
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_responsetimenotadjforoh); }
			set { Entity.Attributes[Fields.msdyn_responsetimenotadjforoh] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Conversation Message Blocks</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Conversation Message Blocks</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_conversationmessageblockOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}