//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:46:10
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.FieldPermissionOptionSets
{
	public enum CanCreate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Allowed</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Allowed = 0
	}
	public enum CanRead
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Allowed</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Allowed = 0
	}
	public enum CanReadUnMasked
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: All Records</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		All_Records = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Allowed</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Allowed = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: One Record</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		One_Record = 1
	}
	public enum CanUpdate
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Allowed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Allowed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not Allowed</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Not_Allowed = 0
	}
	public enum ComponentState
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted Unpublished</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Published = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unpublished</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Unpublished = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class FieldPermission : EntityBase
	{
		public struct Fields
		{
			public const string AttributeLogicalName = "attributelogicalname";
			public const string CanCreate = "cancreate";
			public const string CanRead = "canread";
			public const string CanReadUnMasked = "canreadunmasked";
			public const string CanUpdate = "canupdate";
			public const string ComponentState = "componentstate";
			public const string EntityName = "entityname";
			public const string FieldPermissionId = "fieldpermissionid";
			public const string FieldPermissionIdUnique = "fieldpermissionidunique";
			public const string FieldSecurityProfileId = "fieldsecurityprofileid";
			public const string IsManaged = "ismanaged";
			public const string OrganizationId = "organizationid";
			public const string OverwriteTime = "overwritetime";
			public const string SolutionId = "solutionid";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "fieldpermission";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 1201;
		public const string EntityCollectionSchemaName = "FieldPermissions";
		public const string EntityDisplayCollectionName = "Field Permissions";
		public const string DisplayName = "Field Permission";
		public const string EntitySetName = "fieldpermissions";
		public const string EntityLogicalCollectionName = "fieldpermissions";
		public const string EntityPrimaryIdAttribute = "fieldpermissionid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "FieldPermission";
		[DebuggerNonUserCode()]
		public FieldPermission()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public FieldPermission(Guid FieldPermissionId)
		{
			Entity = new Entity(EntityLogicalName, FieldPermissionId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public FieldPermission(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="FieldPermission"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public FieldPermission(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="FieldPermission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public FieldPermission(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new FieldPermission(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="FieldPermission"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public FieldPermission(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new FieldPermission(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public FieldPermission(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name of the attribute for which this privilege is defined</para>
		/// <para><strong>Description</strong>: Attribute Name.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AttributeLogicalName); }
			set { Entity.Attributes[Fields.AttributeLogicalName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Can create the attribute</para>
		/// <para><strong>Description</strong>: Can this Profile create the attribute</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanCreate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanCreate.Not_Allowed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanCreate? CanCreate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanCreate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanCreate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanCreate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanCreate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Can Read the attribute</para>
		/// <para><strong>Description</strong>: Can this Profile read the attribute</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanRead"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanRead.Not_Allowed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanRead? CanRead
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanRead);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanRead)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanRead] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanRead] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Can this profile read unmasked value of attribute</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanReadUnMasked"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanReadUnMasked.Not_Allowed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanReadUnMasked? CanReadUnMasked
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanReadUnMasked);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanReadUnMasked)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanReadUnMasked] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanReadUnMasked] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Can Update the attribute</para>
		/// <para><strong>Description</strong>: Can this Profile update the attribute</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanUpdate"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanUpdate.Not_Allowed"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanUpdate? CanUpdate
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CanUpdate);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.CanUpdate)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CanUpdate] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CanUpdate] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Component State</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.ComponentState"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.FieldPermissionOptionSets.ComponentState)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name of the Entity for which this privilege is defined</para>
		/// <para><strong>Description</strong>: Entity name.</para>
		/// <para><strong>EntityName</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityName2
		{
			get { return Entity.GetAttributeValue<string>(Fields.EntityName); }
			set { Entity.Attributes[Fields.EntityName] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Permission</para>
		/// <para><strong>Description</strong>: Unique identifier of the Field Permission.</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid FieldPermissionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.FieldPermissionId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Field Permission</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FieldPermissionIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FieldPermissionIdUnique); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Profile</para>
		/// <para><strong>Description</strong>: Unique identifier of profile to which this privilege belongs.</para>
		/// <para><strong>Lookup</strong>: <see cref="fieldsecurityprofile"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference FieldSecurityProfileId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.FieldSecurityProfileId); }
			set { Entity.Attributes[Fields.FieldSecurityProfileId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Managed</para>
		/// <para><strong>Description</strong>: Indicates whether the solution component is part of a managed solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Managed</strong>]: true - [<strong>Unmanaged</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Unmanaged</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>:</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Overwrite Time</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: Unique identifier of the associated solution.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Solution</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}