//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:40
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_trackingcontextOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_trackingcontext : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_businessunitid = "msdynmkt_businessunitid";
			public const string msdynmkt_channeldefinitionid = "msdynmkt_channeldefinitionid";
			public const string msdynmkt_channeltype = "msdynmkt_channeltype";
			public const string msdynmkt_contactpoint = "msdynmkt_contactpoint";
			public const string msdynmkt_contexttype = "msdynmkt_contexttype";
			public const string msdynmkt_customerjourneyid = "msdynmkt_customerjourneyid";
			public const string msdynmkt_customerjourneyinstanceid = "msdynmkt_customerjourneyinstanceid";
			public const string msdynmkt_customerjourneytype = "msdynmkt_customerjourneytype";
			public const string msdynmkt_customerjourneyversion = "msdynmkt_customerjourneyversion";
			public const string msdynmkt_emaildelivered = "msdynmkt_trackingcontext_emaildelivered";
			public const string msdynmkt_entityid = "msdynmkt_entityid";
			public const string msdynmkt_entitytype = "msdynmkt_entitytype";
			public const string msdynmkt_identityid = "msdynmkt_identityid";
			public const string msdynmkt_journeyactivityid = "msdynmkt_journeyactivityid";
			public const string msdynmkt_jsondata = "msdynmkt_jsondata";
			public const string msdynmkt_linkfriendlyname = "msdynmkt_linkfriendlyname";
			public const string msdynmkt_links = "msdynmkt_links";
			public const string msdynmkt_messagetemplateid = "msdynmkt_messagetemplateid";
			public const string msdynmkt_messagetemplateversion = "msdynmkt_messagetemplateversion";
			public const string msdynmkt_messagevariationindexes = "msdynmkt_messagevariationindexes";
			public const string msdynmkt_messagevariationname = "msdynmkt_messagevariationname";
			public const string msdynmkt_profileid = "msdynmkt_profileid";
			public const string msdynmkt_sender = "msdynmkt_sender";
			public const string msdynmkt_targeturl = "msdynmkt_targeturl";
			public const string msdynmkt_trackingcontextId = "msdynmkt_trackingcontextid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string PartitionId = "partitionid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_trackingcontext";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10792;
		public const string EntityCollectionSchemaName = "msdynmkt_trackingcontexts";
		public const string EntityDisplayCollectionName = "TrackingContexts";
		public const string DisplayName = "TrackingContext";
		public const string EntitySetName = "msdynmkt_trackingcontexts";
		public const string EntityLogicalCollectionName = "msdynmkt_trackingcontexts";
		public const string EntityPrimaryIdAttribute = "msdynmkt_trackingcontextid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_contexttype";
		public const string EntitySchemaName = "msdynmkt_trackingcontext";
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext(Guid msdynmkt_trackingcontextId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_trackingcontextId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_trackingcontext"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_trackingcontext"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_trackingcontext(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_trackingcontext"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_trackingcontext(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_trackingcontext(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Business unit Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_businessunitid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_businessunitid); }
			set { Entity.Attributes[Fields.msdynmkt_businessunitid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Definition Id</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_channeldefinitionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_channeldefinitionid); }
			set { Entity.Attributes[Fields.msdynmkt_channeldefinitionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel Type</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_channeltype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_channeltype); }
			set { Entity.Attributes[Fields.msdynmkt_channeltype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact point</para>
		/// <para><strong>Description</strong>: Contact point.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_contactpoint
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_contactpoint); }
			set { Entity.Attributes[Fields.msdynmkt_contactpoint] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Context type name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_contexttype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_contexttype); }
			set { Entity.Attributes[Fields.msdynmkt_contexttype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Journey Id</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_customerjourneyid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_customerjourneyid); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneyid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer journey instance identifier</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_customerjourneyinstanceid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_customerjourneyinstanceid); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneyinstanceid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: customerjourneytype</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_customerjourneytype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_customerjourneytype); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneytype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Journey Version</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_customerjourneyversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_customerjourneyversion); }
			set { Entity.Attributes[Fields.msdynmkt_customerjourneyversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Email delivered</para>
		/// <para><strong>Description</strong>: Tracks if the email was delivered</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_emaildelivered
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_emaildelivered); }
			set { Entity.Attributes[Fields.msdynmkt_emaildelivered] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: entityid</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_entityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_entityid); }
			set { Entity.Attributes[Fields.msdynmkt_entityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: entitytype</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_entitytype
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_entitytype); }
			set { Entity.Attributes[Fields.msdynmkt_entitytype] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: identityid</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_identityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_identityid); }
			set { Entity.Attributes[Fields.msdynmkt_identityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Journey Instance Id</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_journeyactivityid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_journeyactivityid); }
			set { Entity.Attributes[Fields.msdynmkt_journeyactivityid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Json data</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 150,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_jsondata
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_jsondata); }
			set { Entity.Attributes[Fields.msdynmkt_jsondata] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Link friendly name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_linkfriendlyname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_linkfriendlyname); }
			set { Entity.Attributes[Fields.msdynmkt_linkfriendlyname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Links</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 150,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_links
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_links); }
			set { Entity.Attributes[Fields.msdynmkt_links] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message template</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_messagetemplateid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_messagetemplateid); }
			set { Entity.Attributes[Fields.msdynmkt_messagetemplateid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message template version</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_messagetemplateversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_messagetemplateversion); }
			set { Entity.Attributes[Fields.msdynmkt_messagetemplateversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message Variation Indexes</para>
		/// <para><strong>Description</strong>: Message Variation Indexes</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_messagevariationindexes
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_messagevariationindexes); }
			set { Entity.Attributes[Fields.msdynmkt_messagevariationindexes] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message Variation Name</para>
		/// <para><strong>Description</strong>: Message Variation Name</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_messagevariationname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_messagevariationname); }
			set { Entity.Attributes[Fields.msdynmkt_messagevariationname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Journey Id</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_profileid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_profileid); }
			set { Entity.Attributes[Fields.msdynmkt_profileid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sender</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_sender
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_sender); }
			set { Entity.Attributes[Fields.msdynmkt_sender] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Journey Id</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,024</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_targeturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_targeturl); }
			set { Entity.Attributes[Fields.msdynmkt_targeturl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TrackingContext</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_trackingcontextId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_trackingcontextId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Partition Id</para>
		/// <para><strong>Description</strong>: Logical partition id. A logical partition consists of a set of records with same partition id.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PartitionId
		{
			get { return Entity.GetAttributeValue<string>(Fields.PartitionId); }
			set { Entity.Attributes[Fields.PartitionId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time to live</para>
		/// <para><strong>Description</strong>: Time to live in seconds.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: 1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}