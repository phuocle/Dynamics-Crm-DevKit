//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:46
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets
{
	public enum AggregateType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Average</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Average = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Count</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Count = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Max</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Max = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Min</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Min = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Sum</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Sum = 1
	}
	public enum InitialValueCalculationStatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Completed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Completed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Failed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Failed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: In Progress</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		In_Progress = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Paused</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Paused = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pending</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Pending = 0
	}
	public enum StateCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Invalid = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Valid = 0
	}
	public enum StatusCode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Invalid</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Invalid</strong></para>
		/// </summary>
		Invalid = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Valid</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Valid</strong></para>
		/// </summary>
		Valid = 1
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class RollupProperties : EntityBase
	{
		public struct Fields
		{
			public const string AggregateAttributeLogicalName = "aggregateattributelogicalname";
			public const string AggregateEntityLogicalName = "aggregateentitylogicalname";
			public const string AggregateEntityTypeCode = "aggregateentitytypecode";
			public const string AggregateFilterAttributes = "aggregatefilterattributes";
			public const string AggregateRelationshipName = "aggregaterelationshipname";
			public const string AggregateType = "aggregatetype";
			public const string AllowHierarchyOnSource = "allowhierarchyonsource";
			public const string BootstrapCurrentDepth = "bootstrapcurrentdepth";
			public const string BootstrapRetryCount = "bootstrapretrycount";
			public const string BootstrapRollupAsyncJobId = "bootstraprollupasyncjobid";
			public const string BootstrapStepNumber = "bootstrapstepnumber";
			public const string BootstrapTargetPointer = "bootstraptargetpointer";
			public const string DataType = "datatype";
			public const string IncrementalRollupAsyncJobId = "incrementalrollupasyncjobid";
			public const string InitialValueCalculationStatus = "initialvaluecalculationstatus";
			public const string IsActivityPartyIncluded = "isactivitypartyincluded";
			public const string LastCalculationTime = "lastcalculationtime";
			public const string RollupAttributeLogicalName = "rollupattributelogicalname";
			public const string RollupEntityBaseTableName = "rollupentitybasetablename";
			public const string RollupEntityLogicalName = "rollupentitylogicalname";
			public const string RollupEntityPrimaryKeyPhysicalName = "rollupentityprimarykeyphysicalname";
			public const string RollupEntityTypeCode = "rollupentitytypecode";
			public const string RollupFilterAttributes = "rollupfilterattributes";
			public const string RollupPropertiesId = "rolluppropertiesid";
			public const string RollupStateAttributePhysicalName = "rollupstateattributephysicalname";
			public const string SourceHierarchicalRelationshipName = "sourcehierarchicalrelationshipname";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "rollupproperties";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9510;
		public const string EntityCollectionSchemaName = "RollupProperties";
		public const string EntityDisplayCollectionName = "Rollup Properties";
		public const string DisplayName = "Rollup Properties";
		public const string EntitySetName = "rolluppropertiescollection";
		public const string EntityLogicalCollectionName = "rolluppropertiescollection";
		public const string EntityPrimaryIdAttribute = "rolluppropertiesid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "RollupProperties";
		[DebuggerNonUserCode()]
		public RollupProperties()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupProperties(Guid RollupPropertiesId)
		{
			Entity = new Entity(EntityLogicalName, RollupPropertiesId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupProperties(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupProperties"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public RollupProperties(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupProperties"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupProperties(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupProperties(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="RollupProperties"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public RollupProperties(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new RollupProperties(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public RollupProperties(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target attribute logical name</para>
		/// <para><strong>Description</strong>: Logical name of target attribute</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateAttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateAttributeLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target entity logical name</para>
		/// <para><strong>Description</strong>: Logical name of target entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateEntityLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Aggregate entity type code</para>
		/// <para><strong>Description</strong>: Type code of aggregate entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? AggregateEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.AggregateEntityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target filter criteria</para>
		/// <para><strong>Description</strong>: Filter criteria for target</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateFilterAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateFilterAttributes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source-Target relationship name</para>
		/// <para><strong>Description</strong>: Relationship name of the source-target relationship.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string AggregateRelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.AggregateRelationshipName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Aggregation Type</para>
		/// <para><strong>Description</strong>: Type of aggregation to perform</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType.Count"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType? AggregateType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.AggregateType);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.AggregateType)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allow Hierarchy on Source</para>
		/// <para><strong>Description</strong>: Allow source entity to be hierarchical</para>
		/// <para><strong>ReadOnly</strong> - <strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowHierarchyOnSource
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowHierarchyOnSource); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Depth used for bootstrap calculations</para>
		/// <para><strong>Description</strong>: Depth used for bootstrap calculations</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapCurrentDepth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapCurrentDepth); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bootstrap Retry count</para>
		/// <para><strong>Description</strong>: Retry count for bootstrap</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapRetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapRetryCount); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Mass calculate async job id.</para>
		/// <para><strong>Description</strong>: Unique identifier representing the mass calculate async job id.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BootstrapRollupAsyncJobId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BootstrapRollupAsyncJobId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Step number to start bootstrap execution</para>
		/// <para><strong>Description</strong>: Step number to start bootstrap execution</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapStepNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapStepNumber); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Target pointer used for bootstrap calculations</para>
		/// <para><strong>Description</strong>: Target pointer used for bootstrap calculations</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? BootstrapTargetPointer
		{
			get { return Entity.GetAttributeValue<int?>(Fields.BootstrapTargetPointer); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup field data type</para>
		/// <para><strong>Description</strong>: Rollup field data type</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DataType
		{
			get { return Entity.GetAttributeValue<string>(Fields.DataType); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calculate entity async job Id</para>
		/// <para><strong>Description</strong>: Unique identifier representing the calculate entity async job id.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? IncrementalRollupAsyncJobId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.IncrementalRollupAsyncJobId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initial Value Calculation Status</para>
		/// <para><strong>Description</strong>: Status of initial value calculation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus.Pending"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus? InitialValueCalculationStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.InitialValueCalculationStatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.InitialValueCalculationStatus)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Flag indicating whether Activity Party is included</para>
		/// <para><strong>Description</strong>: Flag indicating whether Activity Party is included</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IsActivityPartyIncluded
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IsActivityPartyIncluded); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Calculation Time</para>
		/// <para><strong>Description</strong>: Last time when calculations were performed for this rollup field.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? LastCalculationTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.LastCalculationTime); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Attribute Logical Name</para>
		/// <para><strong>Description</strong>: Logical name of source attribute</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupAttributeLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupAttributeLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Entity Base Table Name</para>
		/// <para><strong>Description</strong>: Base Table Name Of Rollup Entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityBaseTableName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityBaseTableName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source Entity Logical Name</para>
		/// <para><strong>Description</strong>: Logical name of source entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 128</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityLogicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityLogicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Entity Primary Key Physical Name</para>
		/// <para><strong>Description</strong>: Physical Name of Primary Key Of Rollup Entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupEntityPrimaryKeyPhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupEntityPrimaryKeyPhysicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Entity Type Code</para>
		/// <para><strong>Description</strong>: Type code of rollup entity</para>
		/// <para><strong>ReadOnly</strong> - <strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RollupEntityTypeCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RollupEntityTypeCode); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source filter criteria</para>
		/// <para><strong>Description</strong>: Filter criteria for source</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupFilterAttributes
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupFilterAttributes); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup Properties Id</para>
		/// <para><strong>Description</strong>: Unique identifier of the current record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid RollupPropertiesId
		{
			get { return Id; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Rollup State Attribute Physical Name</para>
		/// <para><strong>Description</strong>: Physical Name of Rollup State Attribute</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 64</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RollupStateAttributePhysicalName
		{
			get { return Entity.GetAttributeValue<string>(Fields.RollupStateAttributePhysicalName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source hierarchical relationship name</para>
		/// <para><strong>Description</strong>: Relationship name of the source hierarchical relationship</para>
		/// <para><strong>ReadOnly</strong> - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceHierarchicalRelationshipName
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceHierarchicalRelationshipName); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Rollup.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode.Valid"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StateCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Additional information about status of the rollup properties.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.RollupPropertiesOptionSets.StatusCode)value.Value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version number of rollup.</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}