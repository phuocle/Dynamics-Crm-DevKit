//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:41
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_usertokencache : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msevtmgt_encryptedvalue01 = "msevtmgt_encryptedvalue01";
			public const string msevtmgt_encryptedvalue02 = "msevtmgt_encryptedvalue02";
			public const string msevtmgt_encryptedvalue03 = "msevtmgt_encryptedvalue03";
			public const string msevtmgt_encryptedvalue04 = "msevtmgt_encryptedvalue04";
			public const string msevtmgt_encryptedvalue05 = "msevtmgt_encryptedvalue05";
			public const string msevtmgt_encryptedvalue06 = "msevtmgt_encryptedvalue06";
			public const string msevtmgt_encryptedvalue07 = "msevtmgt_encryptedvalue07";
			public const string msevtmgt_encryptedvalue08 = "msevtmgt_encryptedvalue08";
			public const string msevtmgt_encryptedvalue09 = "msevtmgt_encryptedvalue09";
			public const string msevtmgt_encryptedvalue10 = "msevtmgt_encryptedvalue10";
			public const string msevtmgt_encryptedvalue11 = "msevtmgt_encryptedvalue11";
			public const string msevtmgt_encryptedvalue12 = "msevtmgt_encryptedvalue12";
			public const string msevtmgt_encryptedvalue13 = "msevtmgt_encryptedvalue13";
			public const string msevtmgt_encryptedvalue14 = "msevtmgt_encryptedvalue14";
			public const string msevtmgt_encryptedvalue15 = "msevtmgt_encryptedvalue15";
			public const string msevtmgt_encryptedvalue16 = "msevtmgt_encryptedvalue16";
			public const string msevtmgt_encryptedvalue17 = "msevtmgt_encryptedvalue17";
			public const string msevtmgt_encryptedvalue18 = "msevtmgt_encryptedvalue18";
			public const string msevtmgt_encryptedvalue19 = "msevtmgt_encryptedvalue19";
			public const string msevtmgt_encryptedvalue20 = "msevtmgt_encryptedvalue20";
			public const string msevtmgt_encryptedvalue21 = "msevtmgt_encryptedvalue21";
			public const string msevtmgt_encryptedvalue22 = "msevtmgt_encryptedvalue22";
			public const string msevtmgt_encryptedvalue23 = "msevtmgt_encryptedvalue23";
			public const string msevtmgt_encryptedvalue24 = "msevtmgt_encryptedvalue24";
			public const string msevtmgt_encryptedvalue25 = "msevtmgt_encryptedvalue25";
			public const string msevtmgt_encryptedvalue26 = "msevtmgt_encryptedvalue26";
			public const string msevtmgt_encryptedvalue27 = "msevtmgt_encryptedvalue27";
			public const string msevtmgt_encryptedvalue28 = "msevtmgt_encryptedvalue28";
			public const string msevtmgt_encryptedvalue29 = "msevtmgt_encryptedvalue29";
			public const string msevtmgt_encryptedvalue30 = "msevtmgt_encryptedvalue30";
			public const string msevtmgt_encryptedvalue31 = "msevtmgt_encryptedvalue31";
			public const string msevtmgt_encryptedvalue32 = "msevtmgt_encryptedvalue32";
			public const string msevtmgt_encyptedvalue = "msevtmgt_encyptedvalue";
			public const string msevtmgt_name = "msevtmgt_name";
			public const string msevtmgt_systemuserid = "msevtmgt_systemuserid";
			public const string msevtmgt_usertokencacheId = "msevtmgt_usertokencacheid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_usertokencache";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11364;
		public const string EntityCollectionSchemaName = "msevtmgt_usertokencaches";
		public const string EntityDisplayCollectionName = "User token caches";
		public const string DisplayName = "User token cache";
		public const string EntitySetName = "msevtmgt_usertokencaches";
		public const string EntityLogicalCollectionName = "msevtmgt_usertokencaches";
		public const string EntityPrimaryIdAttribute = "msevtmgt_usertokencacheid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_usertokencache";
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache(Guid msevtmgt_usertokencacheId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_usertokencacheId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_usertokencache"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_usertokencache"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_usertokencache(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_usertokencache"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_usertokencache(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_usertokencache(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 01</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue01
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue01); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue01] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 02</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue02
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue02); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue02] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 03</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue03
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue03); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue03] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 04</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue04
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue04); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue04] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 05</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue05
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue05); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue05] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 06</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue06
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue06); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue06] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 07</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue07
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue07); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue07] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 08</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue08
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue08); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue08] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 09</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue09
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue09); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue09] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 10</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue10
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue10); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue10] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 11</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue11
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue11); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue11] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 12</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue12
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue12); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue12] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 13</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue13
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue13); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue13] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 14</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue14
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue14); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue14] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 15</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue15
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue15); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue15] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 16</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue16
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue16); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue16] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 17</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue17
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue17); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue17] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 18</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue18
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue18); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue18] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 19</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue19
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue19); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue19] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 20</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue20
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue20); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue20] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 21</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue21
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue21); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue21] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 22</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue22
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue22); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue22] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 23</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue23
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue23); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue23] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 24</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue24
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue24); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue24] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 25</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue25
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue25); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue25] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 26</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue26
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue26); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue26] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 27</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue27
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue27); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue27] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 28</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue28
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue28); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue28] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 29</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue29
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue29); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue29] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 30</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue30
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue30); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue30] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 31</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue31
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue31); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue31] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Encrypted Value 32</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encryptedvalue32
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encryptedvalue32); }
			set { Entity.Attributes[Fields.msevtmgt_encryptedvalue32] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: (Deprecated) Encypted Value</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_encyptedvalue
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_encyptedvalue); }
			set { Entity.Attributes[Fields.msevtmgt_encyptedvalue] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_name); }
			set { Entity.Attributes[Fields.msevtmgt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Description</strong>: Unique identifier for User associated with User token cache.</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_systemuserid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_systemuserid); }
			set { Entity.Attributes[Fields.msevtmgt_systemuserid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: User token cache</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_usertokencacheId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_usertokencacheId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the User token cache</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the User token cache</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_usertokencacheOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}