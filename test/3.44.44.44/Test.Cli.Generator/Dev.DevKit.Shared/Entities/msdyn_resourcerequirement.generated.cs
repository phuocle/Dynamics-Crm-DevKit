//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets
{
	public enum msdyn_allocationmethod
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Distribute evenly</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Distribute_evenly = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Front load</para>
		/// <para><strong>Value</strong>: 192,350,005</para>
		/// </summary>
		Front_load = 192_350_005,
		/// <summary>
		/// <para><strong>Display Name</strong>: Full capacity</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Full_capacity = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: None</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		None = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Percentage capacity</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Percentage_capacity = 192_350_004
	}
	public enum msdyn_PoolType
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Account = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Contact = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Equipment</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		Equipment = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 192,350,004</para>
		/// </summary>
		Facility = 192_350_004,
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		User = 192_350_002
	}
	public enum msdyn_resourcetype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Account</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Account = 5,
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Contact = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Crew</para>
		/// <para><strong>Value</strong>: 6</para>
		/// </summary>
		Crew = 6,
		/// <summary>
		/// <para><strong>Display Name</strong>: Equipment</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Equipment = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Facility = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Generic</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Generic = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Pool</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Pool = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: User</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		User = 3
	}
	public enum msdyn_WorkLocation
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Facility</para>
		/// <para><strong>Value</strong>: 690,970,001</para>
		/// </summary>
		Facility = 690_970_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Location Agnostic</para>
		/// <para><strong>Value</strong>: 690,970,002</para>
		/// </summary>
		Location_Agnostic = 690_970_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Onsite</para>
		/// <para><strong>Value</strong>: 690,970,000</para>
		/// </summary>
		Onsite = 690_970_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_resourcerequirement : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_allocationmethod = "msdyn_allocationmethod";
			public const string msdyn_AppointmentRequirementId = "msdyn_appointmentrequirementid";
			public const string msdyn_BookingSetupMetadataId = "msdyn_bookingsetupmetadataid";
			public const string msdyn_CalendarId = "msdyn_calendarid";
			public const string msdyn_duration = "msdyn_duration";
			public const string msdyn_effort = "msdyn_effort";
			public const string msdyn_fromdate = "msdyn_fromdate";
			public const string msdyn_FulfilledDuration = "msdyn_fulfilledduration";
			public const string msdyn_InternalFlags = "msdyn_internalflags";
			public const string msdyn_IsPrimary = "msdyn_isprimary";
			public const string msdyn_istemplate = "msdyn_istemplate";
			public const string msdyn_Latitude = "msdyn_latitude";
			public const string msdyn_Longitude = "msdyn_longitude";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_percentage = "msdyn_percentage";
			public const string msdyn_PoolType = "msdyn_pooltype";
			public const string msdyn_Priority = "msdyn_priority";
			public const string msdyn_ProposedDuration = "msdyn_proposedduration";
			public const string msdyn_RemainingDuration = "msdyn_remainingduration";
			public const string msdyn_requirementgroupcontrolviewid = "msdyn_requirementgroupcontrolviewid";
			public const string msdyn_requirementgroupid = "msdyn_requirementgroupid";
			public const string msdyn_requirementrelationshipid = "msdyn_requirementrelationshipid";
			public const string msdyn_resourcerequirementId = "msdyn_resourcerequirementid";
			public const string msdyn_resourcetype = "msdyn_resourcetype";
			public const string msdyn_serviceappointment = "msdyn_serviceappointment";
			public const string msdyn_sortoptions = "msdyn_sortoptions";
			public const string msdyn_Status = "msdyn_status";
			public const string msdyn_templaterequirementid = "msdyn_templaterequirementid";
			public const string msdyn_Territory = "msdyn_territory";
			public const string msdyn_TimeFromPromised = "msdyn_timefrompromised";
			public const string msdyn_TimeGroup = "msdyn_timegroup";
			public const string msdyn_TimeToPromised = "msdyn_timetopromised";
			public const string msdyn_TimeWindowEnd = "msdyn_timewindowend";
			public const string msdyn_TimeWindowStart = "msdyn_timewindowstart";
			public const string msdyn_timezonefortimewindow = "msdyn_timezonefortimewindow";
			public const string msdyn_todate = "msdyn_todate";
			public const string msdyn_workhourtemplate = "msdyn_workhourtemplate";
			public const string msdyn_WorkLocation = "msdyn_worklocation";
			public const string msdyn_WorkOrder = "msdyn_workorder";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_resourcerequirement";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11011;
		public const string EntityCollectionSchemaName = "msdyn_resourcerequirements";
		public const string EntityDisplayCollectionName = "Resource Requirements";
		public const string DisplayName = "Resource Requirement";
		public const string EntitySetName = "msdyn_resourcerequirements";
		public const string EntityLogicalCollectionName = "msdyn_resourcerequirements";
		public const string EntityPrimaryIdAttribute = "msdyn_resourcerequirementid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_resourcerequirement";
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Guid msdyn_resourcerequirementId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_resourcerequirementId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_resourcerequirement"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_resourcerequirement"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_resourcerequirement(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_resourcerequirement"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_resourcerequirement(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_resourcerequirement(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Allocation Method</para>
		/// <para><strong>Description</strong>: Select the allocation method to be used for creating requirement distribution over a time period.</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_allocationmethod"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_allocationmethod.None"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_allocationmethod? msdyn_allocationmethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_allocationmethod);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_allocationmethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_allocationmethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_allocationmethod] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Appointment Requirement</para>
		/// <para><strong>Description</strong>: Unique identifier for Appointment associated with Resource Requirement.</para>
		/// <para><strong>Lookup</strong>: <see cref="appointment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_AppointmentRequirementId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_AppointmentRequirementId); }
			set { Entity.Attributes[Fields.msdyn_AppointmentRequirementId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Booking Setup Metadata</para>
		/// <para><strong>Description</strong>: A unique identifier for the booking setup metadata that is associated with a resource requirement.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_bookingsetupmetadata"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BookingSetupMetadataId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BookingSetupMetadataId); }
			set { Entity.Attributes[Fields.msdyn_BookingSetupMetadataId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Calendar Id</para>
		/// <para><strong>Description</strong>: The calendar that will be used for a resource requirement</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CalendarId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CalendarId); }
			set { Entity.Attributes[Fields.msdyn_CalendarId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duration</para>
		/// <para><strong>Description</strong>: Duration of total minutes required</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_duration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_duration); }
			set { Entity.Attributes[Fields.msdyn_duration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Effort</para>
		/// <para><strong>Description</strong>: Effort that&apos;s required from resource capacity</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 1,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_effort
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_effort); }
			set { Entity.Attributes[Fields.msdyn_effort] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: From Date</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_fromdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_fromdate); }
			set { Entity.Attributes[Fields.msdyn_fromdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fulfilled Duration</para>
		/// <para><strong>Description</strong>: The fulfilled duration, in minutes.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_FulfilledDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_FulfilledDuration); }
			set { Entity.Attributes[Fields.msdyn_FulfilledDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Internal Flags</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,048,576</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InternalFlags
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InternalFlags); }
			set { Entity.Attributes[Fields.msdyn_InternalFlags] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Primary</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_IsPrimary
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_IsPrimary); }
			set { Entity.Attributes[Fields.msdyn_IsPrimary] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Is Template</para>
		/// <para><strong>Description</strong>: Is template requirement</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_istemplate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_istemplate); }
			set { Entity.Attributes[Fields.msdyn_istemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Latitude</para>
		/// <para><strong>Description</strong>: The latitude to use for the location of a requirement.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -90 - <strong>MaxValue</strong>: 90</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Latitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Latitude); }
			set { Entity.Attributes[Fields.msdyn_Latitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Longitude</para>
		/// <para><strong>Description</strong>: The longitude to use for the location of a requirement.</para>
		/// <para><strong>Decimal Number</strong> - <strong>MinValue</strong>: -180 - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? msdyn_Longitude
		{
			get { return Entity.GetAttributeValue<double?>(Fields.msdyn_Longitude); }
			set { Entity.Attributes[Fields.msdyn_Longitude] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Percentage</para>
		/// <para><strong>Description</strong>: Enter the percentage of the calendar capacity required.</para>
		/// <para><strong>Floating Point Number</strong> - <strong>MinValue</strong>: -100,000,000,000 - <strong>MaxValue</strong>: 100,000,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? msdyn_percentage
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.msdyn_percentage); }
			set { Entity.Attributes[Fields.msdyn_percentage] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Pool Type</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType> msdyn_PoolType
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_PoolType);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_PoolType)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_PoolType] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_PoolType] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Priority</para>
		/// <para><strong>Description</strong>: Priority of the requirement. To be taken into consideration while scheduling resources</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_priority"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Priority
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Priority); }
			set { Entity.Attributes[Fields.msdyn_Priority] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Proposed Duration</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ProposedDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ProposedDuration); }
			set { Entity.Attributes[Fields.msdyn_ProposedDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Remaining Duration</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RemainingDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RemainingDuration); }
			set { Entity.Attributes[Fields.msdyn_RemainingDuration] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Group Control View Id</para>
		/// <para><strong>Description</strong>: The requirement group control view id of the resource requirement entity. This field will has value only when the entity is inside the requirement group control.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_requirementgroupcontrolviewid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_requirementgroupcontrolviewid); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupcontrolviewid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Group</para>
		/// <para><strong>Description</strong>: Requirement Group</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementgroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_requirementgroupid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_requirementgroupid); }
			set { Entity.Attributes[Fields.msdyn_requirementgroupid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Requirement Relationship</para>
		/// <para><strong>Description</strong>: Requirement Relationship</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_requirementrelationship"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_requirementrelationshipid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_requirementrelationshipid); }
			set { Entity.Attributes[Fields.msdyn_requirementrelationshipid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Requirement</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_resourcerequirementId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_resourcerequirementId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Resource Type</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype> msdyn_resourcetype
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_resourcetype);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_resourcetype)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_resourcetype] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_resourcetype] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Service Activity</para>
		/// <para><strong>Description</strong>: Unique identifier for Service Appointment associated with Resource Requirement.</para>
		/// <para><strong>Lookup</strong>: <see cref="serviceappointment"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_serviceappointment
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_serviceappointment); }
			set { Entity.Attributes[Fields.msdyn_serviceappointment] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Sort Options</para>
		/// <para><strong>Description</strong>: Sort option string field of resource requirement</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sortoptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sortoptions); }
			set { Entity.Attributes[Fields.msdyn_sortoptions] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Requirement Status</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msdyn_requirementstatus"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Status
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Status); }
			set { Entity.Attributes[Fields.msdyn_Status] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Template Requirement Id</para>
		/// <para><strong>Description</strong>: template requirement id if requirement is created from template</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_templaterequirementid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_templaterequirementid); }
			set { Entity.Attributes[Fields.msdyn_templaterequirementid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Territory</para>
		/// <para><strong>Lookup</strong>: <see cref="territory"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Territory
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Territory); }
			set { Entity.Attributes[Fields.msdyn_Territory] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time From Promised</para>
		/// <para><strong>Description</strong>: Enter the starting range of the time promised to the account that incidents will be resolved.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeFromPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeFromPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeFromPromised] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fulfillment Preference</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_timegroup"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TimeGroup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TimeGroup); }
			set { Entity.Attributes[Fields.msdyn_TimeGroup] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time To Promised</para>
		/// <para><strong>Description</strong>: Enter the ending range of the time promised to the account that incidents will be resolved.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeToPromisedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeToPromised); }
			set { Entity.Attributes[Fields.msdyn_TimeToPromised] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Window End</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowEndUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowEnd); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowEnd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Window Start</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_TimeWindowStartUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_TimeWindowStart); }
			set { Entity.Attributes[Fields.msdyn_TimeWindowStart] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Timezone for time window</para>
		/// <para><strong>Description</strong>: The Timezone in which the Time windows are defined by the User</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_timezonefortimewindow
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_timezonefortimewindow); }
			set { Entity.Attributes[Fields.msdyn_timezonefortimewindow] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: To Date</para>
		/// <para><strong>Description</strong>: End date of requirement period</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_todateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_todate); }
			set { Entity.Attributes[Fields.msdyn_todate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Hour Template</para>
		/// <para><strong>Description</strong>: The working hours for a requirement.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workhourtemplate"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_workhourtemplate
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_workhourtemplate); }
			set { Entity.Attributes[Fields.msdyn_workhourtemplate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Location</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_WorkLocation"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_WorkLocation.Onsite"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_WorkLocation? msdyn_WorkLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkLocation);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.msdyn_WorkLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_WorkLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_WorkLocation] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work Order</para>
		/// <para><strong>Description</strong>: Unique identifier for Work Order associated with Resource Requirement.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_workorder"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkOrder
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkOrder); }
			set { Entity.Attributes[Fields.msdyn_WorkOrder] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Resource Requirement</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Resource Requirement</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_resourcerequirementOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}