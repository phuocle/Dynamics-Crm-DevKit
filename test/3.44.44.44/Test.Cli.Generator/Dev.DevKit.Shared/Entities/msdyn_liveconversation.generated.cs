//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:37
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets
{
	public enum msdyn_channel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Apple Messages for Business</para>
		/// <para><strong>Value</strong>: 192,450,000</para>
		/// </summary>
		Apple_Messages_for_Business = 192_450_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Co-browse</para>
		/// <para><strong>Value</strong>: 192,390,000</para>
		/// </summary>
		Co_browse = 192_390_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Custom</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Custom = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Entity Records</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Entity_Records = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Facebook</para>
		/// <para><strong>Value</strong>: 192,330,000</para>
		/// </summary>
		Facebook = 192_330_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Google's Business Messages</para>
		/// <para><strong>Value</strong>: 192,450,001</para>
		/// </summary>
		Googles_Business_Messages = 192_450_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: LINE</para>
		/// <para><strong>Value</strong>: 192,310,000</para>
		/// </summary>
		LINE = 192_310_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Live chat</para>
		/// <para><strong>Value</strong>: 192,360,000</para>
		/// </summary>
		Live_chat = 192_360_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Teams</para>
		/// <para><strong>Value</strong>: 19,241,000</para>
		/// </summary>
		Microsoft_Teams = 19_241_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Screen sharing</para>
		/// <para><strong>Value</strong>: 192,400,000</para>
		/// </summary>
		Screen_sharing = 192_400_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: SMS</para>
		/// <para><strong>Value</strong>: 192,340,000</para>
		/// </summary>
		SMS = 192_340_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Twitter</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Twitter = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Video</para>
		/// <para><strong>Value</strong>: 192,380,000</para>
		/// </summary>
		Video = 192_380_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice</para>
		/// <para><strong>Value</strong>: 192,370,000</para>
		/// </summary>
		Voice = 192_370_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Voice call</para>
		/// <para><strong>Value</strong>: 192,440,000</para>
		/// </summary>
		Voice_call = 192_440_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WeChat</para>
		/// <para><strong>Value</strong>: 192,320,000</para>
		/// </summary>
		WeChat = 192_320_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: WhatsApp</para>
		/// <para><strong>Value</strong>: 192,300,000</para>
		/// </summary>
		WhatsApp = 192_300_000
	}
	public enum msdyn_customersentimentlabel
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: N/A</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		NA = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Negative</para>
		/// <para><strong>Value</strong>: 8</para>
		/// </summary>
		Negative = 8,
		/// <summary>
		/// <para><strong>Display Name</strong>: Neutral</para>
		/// <para><strong>Value</strong>: 10</para>
		/// </summary>
		Neutral = 10,
		/// <summary>
		/// <para><strong>Display Name</strong>: Positive</para>
		/// <para><strong>Value</strong>: 12</para>
		/// </summary>
		Positive = 12,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slightly negative</para>
		/// <para><strong>Value</strong>: 9</para>
		/// </summary>
		Slightly_negative = 9,
		/// <summary>
		/// <para><strong>Display Name</strong>: Slightly positive</para>
		/// <para><strong>Value</strong>: 11</para>
		/// </summary>
		Slightly_positive = 11,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very negative</para>
		/// <para><strong>Value</strong>: 7</para>
		/// </summary>
		Very_negative = 7,
		/// <summary>
		/// <para><strong>Display Name</strong>: Very positive</para>
		/// <para><strong>Value</strong>: 13</para>
		/// </summary>
		Very_positive = 13
	}
	public enum msdyn_statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Closed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Waiting = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Wrap_up = 4
	}
	public enum msdyn_statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Active = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Closed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Open = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Waiting = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up</para>
		/// <para><strong>Value</strong>: 5</para>
		/// </summary>
		Wrap_up = 5
	}
	public enum msdyn_workstreamworkdistributionmode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Pick</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Pick = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Push</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Push = 192_350_000
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 3</para>
		/// </summary>
		Closed = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Open = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 2</para>
		/// </summary>
		Waiting = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up</para>
		/// <para><strong>Value</strong>: 4</para>
		/// </summary>
		Wrap_up = 4
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed</para>
		/// <para><strong>Value</strong>: 4</para>
		/// <para><strong>StateCode.Closed</strong></para>
		/// </summary>
		Closed = 4,
		/// <summary>
		/// <para><strong>Display Name</strong>: Open</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Open</strong></para>
		/// </summary>
		Open = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Waiting</para>
		/// <para><strong>Value</strong>: 3</para>
		/// <para><strong>StateCode.Waiting</strong></para>
		/// </summary>
		Waiting = 3,
		/// <summary>
		/// <para><strong>Display Name</strong>: Wrap-up</para>
		/// <para><strong>Value</strong>: 5</para>
		/// <para><strong>StateCode.Wrap_up</strong></para>
		/// </summary>
		Wrap_up = 5
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_liveconversation : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_activeagentassignedon = "msdyn_activeagentassignedon";
			public const string msdyn_activeagentid = "msdyn_activeagentid";
			public const string msdyn_cdsqueueid = "msdyn_cdsqueueid";
			public const string msdyn_channel = "msdyn_channel";
			public const string msdyn_closedon = "msdyn_closedon";
			public const string msdyn_createdon = "msdyn_createdon";
			public const string msdyn_customer = "msdyn_customer";
			public const string msdyn_customersentimentlabel = "msdyn_customersentimentlabel";
			public const string msdyn_escalationcount = "msdyn_escalationcount";
			public const string msdyn_initiatedon = "msdyn_initiatedon";
			public const string msdyn_liveconversationId = "msdyn_liveconversationid";
			public const string msdyn_liveworkstreamid = "msdyn_liveworkstreamid";
			public const string msdyn_modifiedon = "msdyn_modifiedon";
			public const string msdyn_oclastsessionid = "msdyn_oclastsessionid";
			public const string msdyn_queueid = "msdyn_queueid";
			public const string msdyn_startedon = "msdyn_startedon";
			public const string msdyn_statecode = "msdyn_statecode";
			public const string msdyn_statuscode = "msdyn_statuscode";
			public const string msdyn_statusupdatedon = "msdyn_statusupdatedon";
			public const string msdyn_subject = "msdyn_subject";
			public const string msdyn_title = "msdyn_title";
			public const string msdyn_transfercount = "msdyn_transfercount";
			public const string msdyn_workstreamworkdistributionmode = "msdyn_workstreamworkdistributionmode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_liveconversation";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10679;
		public const string EntityCollectionSchemaName = "msdyn_liveconversations";
		public const string EntityDisplayCollectionName = "Ongoing conversations (Deprecated)";
		public const string DisplayName = "Ongoing conversation (Deprecated)";
		public const string EntitySetName = "msdyn_liveconversations";
		public const string EntityLogicalCollectionName = "msdyn_liveconversations";
		public const string EntityPrimaryIdAttribute = "msdyn_liveconversationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_subject";
		public const string EntitySchemaName = "msdyn_liveconversation";
		[DebuggerNonUserCode()]
		public msdyn_liveconversation()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Guid msdyn_liveconversationId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_liveconversationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_liveconversation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_liveconversation"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_liveconversation"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_liveconversation(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_liveconversation"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_liveconversation(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_liveconversation(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_liveconversation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Date Created</para>
		/// <para><strong>Description</strong>: Date and time when the Ongoing Conversation was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of user who last modified the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last Updated</para>
		/// <para><strong>Description</strong>: Date and time when Ongoing Conversation was last modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who last modified the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Agent Assigned On</para>
		/// <para><strong>Description</strong>: Date and time when last agent was assigned to the conversation</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_activeagentassignedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_activeagentassignedon); }
			set { Entity.Attributes[Fields.msdyn_activeagentassignedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Active Agent</para>
		/// <para><strong>Description</strong>: Last agent assigned to the conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_activeagentid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_activeagentid); }
			set { Entity.Attributes[Fields.msdyn_activeagentid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Description</strong>: Unique identifier for Queue associated with Conversation.</para>
		/// <para><strong>Lookup</strong>: <see cref="queue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_cdsqueueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_cdsqueueid); }
			set { Entity.Attributes[Fields.msdyn_cdsqueueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Channel</para>
		/// <para><strong>Description</strong>: The channel(s) in the conversation.</para>
		/// <para><strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel> msdyn_channel
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_channel);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_channel)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_channel] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_channel] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Closed On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was closed</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_closedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_closedon); }
			set { Entity.Attributes[Fields.msdyn_closedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was created</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_createdonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_createdon); }
			set { Entity.Attributes[Fields.msdyn_createdon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer</para>
		/// <para><strong>Description</strong>: Customer associated to the conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="account"/>, <see cref="contact"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_customer
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_customer); }
			set { Entity.Attributes[Fields.msdyn_customer] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Sentiment</para>
		/// <para><strong>Description</strong>: Customer Sentiment Label powered by Sentiment Service</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_customersentimentlabel"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_customersentimentlabel? msdyn_customersentimentlabel
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_customersentimentlabel);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_customersentimentlabel)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_customersentimentlabel] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_customersentimentlabel] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Escalation Count</para>
		/// <para><strong>Description</strong>: Number of times conversation was escalated to Supervisor i.e. transferred to Supervisor</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_escalationcount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_escalationcount); }
			set { Entity.Attributes[Fields.msdyn_escalationcount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Initiated On</para>
		/// <para><strong>Description</strong>: Time when conversation was initiated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_initiatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_initiatedon); }
			set { Entity.Attributes[Fields.msdyn_initiatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OngoingConversationId (Deprecated)</para>
		/// <para><strong>Description</strong>: Id of this ongoing conversation record</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_liveconversationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_liveconversationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work stream</para>
		/// <para><strong>Description</strong>: Work stream associated to the conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_liveworkstream"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_liveworkstreamid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_liveworkstreamid); }
			set { Entity.Attributes[Fields.msdyn_liveworkstreamid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was last modified</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_modifiedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_modifiedon); }
			set { Entity.Attributes[Fields.msdyn_modifiedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last session Id</para>
		/// <para><strong>Description</strong>: Last agent session</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_oclastsessionid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_oclastsessionid); }
			set { Entity.Attributes[Fields.msdyn_oclastsessionid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Queue</para>
		/// <para><strong>Description</strong>: Unique identifier for msdyn_omnichannelqueue associated with Conversation</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_omnichannelqueue"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_queueid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_queueid); }
			set { Entity.Attributes[Fields.msdyn_queueid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Started On</para>
		/// <para><strong>Description</strong>: Date and time when conversation was started</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_startedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_startedon); }
			set { Entity.Attributes[Fields.msdyn_startedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: State</para>
		/// <para><strong>Description</strong>: State of the conversation record</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statecode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statecode? msdyn_statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of Ongoing conversation record</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statuscode? msdyn_statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Updated On</para>
		/// <para><strong>Description</strong>: Date and time when conversation status was last modified</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_statusupdatedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_statusupdatedon); }
			set { Entity.Attributes[Fields.msdyn_statusupdatedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Subject</para>
		/// <para><strong>Description</strong>: Subject associated with the conversation record</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_subject); }
			set { Entity.Attributes[Fields.msdyn_subject] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: Conversation Title</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_title); }
			set { Entity.Attributes[Fields.msdyn_title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Transfer Count</para>
		/// <para><strong>Description</strong>: Number of times the conversation was transferred</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_transfercount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_transfercount); }
			set { Entity.Attributes[Fields.msdyn_transfercount] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Work distribution mode</para>
		/// <para><strong>Description</strong>: Work distribution mode of the associated work stream</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_workstreamworkdistributionmode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_workstreamworkdistributionmode? msdyn_workstreamworkdistributionmode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_workstreamworkdistributionmode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.msdyn_workstreamworkdistributionmode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_workstreamworkdistributionmode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_workstreamworkdistributionmode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the conversation record.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team that owns the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user that owns the Ongoing Conversation.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Ongoing conversation record</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of Ongoing conversation record</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_liveconversationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}