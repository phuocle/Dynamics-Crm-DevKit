//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets
{
	public enum msdynmkt_createanewcontact_choice
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Contact = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Lead = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead & Contact</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Lead_Contact = 100_000_002
	}
	public enum msdynmkt_defaulttargetaudience
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Contact = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Lead = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead & Contact</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Lead_Contact = 100_000_002
	}
	public enum msdynmkt_Duplicaterecords
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Always create new record</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Always_create_new_record = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Match existing contact using email</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Match_existing_contact_using_email = 100_000_000
	}
	public enum msdynmkt_formtype
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Marketing form</para>
		/// <para><strong>Value</strong>: 534,120,000</para>
		/// </summary>
		Marketing_form = 534_120_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Registration form</para>
		/// <para><strong>Value</strong>: 534,120,001</para>
		/// </summary>
		Registration_form = 534_120_001
	}
	public enum msdynmkt_Howtomatchexistingcontact
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Always create new record</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Always_create_new_record = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Match existing contact using email</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Match_existing_contact_using_email = 100_000_000
	}
	public enum msdynmkt_linkedleadtoparentcontact_choice
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Contact = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Lead = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead & Contact</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Lead_Contact = 100_000_002
	}
	public enum msdynmkt_matchexistingcontact_choice
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Always create new record</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Always_create_new_record = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Match existing contact using email</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Match_existing_contact_using_email = 100_000_000
	}
	public enum msdynmkt_Postsubmissionactions
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you message</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Thank_you_message = 100_000_000
	}
	public enum msdynmkt_Updatematchedcontactwithsubmitteddata
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Contact = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Lead = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead & Contact</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Lead_Contact = 100_000_002
	}
	public enum msdynmkt_updateparentcontactwithsubmitteddata_choi
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Contact</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Contact = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Lead = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Lead & Contact</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Lead_Contact = 100_000_002
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdynmkt_formsetting : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdynmkt_createanewcontact_choice = "msdynmkt_createanewcontact_choice";
			public const string msdynmkt_defaultformtargetaudience = "msdynmkt_defaultformtargetaudience";
			public const string msdynmkt_defaulttargetaudience = "msdynmkt_defaulttargetaudience";
			public const string msdynmkt_Doubleoptin = "msdynmkt_doubleoptin";
			public const string msdynmkt_Duplicaterecords = "msdynmkt_duplicaterecords";
			public const string msdynmkt_Errornotification = "msdynmkt_errornotification";
			public const string msdynmkt_formsettingId = "msdynmkt_formsettingid";
			public const string msdynmkt_formtype = "msdynmkt_formtype";
			public const string msdynmkt_Howtomatchexistingcontact = "msdynmkt_howtomatchexistingcontact";
			public const string msdynmkt_linkedleadtoparentcontact_choice = "msdynmkt_linkedleadtoparentcontact_choice";
			public const string msdynmkt_matchexistingcontact_choice = "msdynmkt_matchexistingcontact_choice";
			public const string msdynmkt_Name = "msdynmkt_name";
			public const string msdynmkt_parentcontactwithsubmitteddata_choice = "msdynmkt_parentcontactwithsubmitteddata_choice";
			public const string msdynmkt_Postsubmissionactions = "msdynmkt_postsubmissionactions";
			public const string msdynmkt_Prefillfields = "msdynmkt_prefillfields";
			public const string msdynmkt_Redirectaftersubmission = "msdynmkt_redirectaftersubmission";
			public const string msdynmkt_Thankyouemail = "msdynmkt_thankyouemail";
			public const string msdynmkt_Thankyounotification = "msdynmkt_thankyounotification";
			public const string msdynmkt_Updatematchedcontactwithsubmitteddata = "msdynmkt_updatematchedcontactwithsubmitteddata";
			public const string msdynmkt_updateparentcontactwithsubmitteddata_choi = "msdynmkt_updateparentcontactwithsubmitteddata_choi";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdynmkt_formsetting";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11606;
		public const string EntityCollectionSchemaName = "msdynmkt_formsettings";
		public const string EntityDisplayCollectionName = "Form settings";
		public const string DisplayName = "Form settings";
		public const string EntitySetName = "msdynmkt_formsettings";
		public const string EntityLogicalCollectionName = "msdynmkt_formsettings";
		public const string EntityPrimaryIdAttribute = "msdynmkt_formsettingid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdynmkt_name";
		public const string EntitySchemaName = "msdynmkt_formsetting";
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting(Guid msdynmkt_formsettingId)
		{
			Entity = new Entity(EntityLogicalName, msdynmkt_formsettingId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_formsetting"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_formsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_formsetting(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdynmkt_formsetting"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdynmkt_formsetting(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdynmkt_formsetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Create a new contact if there is no match</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_createanewcontact_choice"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_createanewcontact_choice? msdynmkt_createanewcontact_choice
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_createanewcontact_choice);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_createanewcontact_choice)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_createanewcontact_choice] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_createanewcontact_choice] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default target audience</para>
		/// <para><strong>Lookup</strong>: <see cref="msdynmkt_formtargetaudience"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdynmkt_defaultformtargetaudience
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdynmkt_defaultformtargetaudience); }
			set { Entity.Attributes[Fields.msdynmkt_defaultformtargetaudience] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Default target audience</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_defaulttargetaudience"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_defaulttargetaudience.Lead"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_defaulttargetaudience? msdynmkt_defaulttargetaudience
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_defaulttargetaudience);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_defaulttargetaudience)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_defaulttargetaudience] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_defaulttargetaudience] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Double opt-in</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_Doubleoptin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_Doubleoptin); }
			set { Entity.Attributes[Fields.msdynmkt_Doubleoptin] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Duplicate records</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Duplicaterecords"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Duplicaterecords? msdynmkt_Duplicaterecords
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_Duplicaterecords);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Duplicaterecords)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_Duplicaterecords] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_Duplicaterecords] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Error notification</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_Errornotification
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_Errornotification); }
			set { Entity.Attributes[Fields.msdynmkt_Errornotification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form settings</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdynmkt_formsettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdynmkt_formsettingId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Form type</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_formtype"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_formtype.Marketing_form"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_formtype? msdynmkt_formtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_formtype);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_formtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_formtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_formtype] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: How to match existing contact</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Howtomatchexistingcontact"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Howtomatchexistingcontact? msdynmkt_Howtomatchexistingcontact
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_Howtomatchexistingcontact);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Howtomatchexistingcontact)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_Howtomatchexistingcontact] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_Howtomatchexistingcontact] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Linked lead to parent contact</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_linkedleadtoparentcontact_choice"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_linkedleadtoparentcontact_choice? msdynmkt_linkedleadtoparentcontact_choice
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_linkedleadtoparentcontact_choice);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_linkedleadtoparentcontact_choice)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_linkedleadtoparentcontact_choice] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_linkedleadtoparentcontact_choice] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: How to match existing contact</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_matchexistingcontact_choice"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_matchexistingcontact_choice? msdynmkt_matchexistingcontact_choice
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_matchexistingcontact_choice);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_matchexistingcontact_choice)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_matchexistingcontact_choice] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_matchexistingcontact_choice] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Primary Name</strong>: <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_Name); }
			set { Entity.Attributes[Fields.msdynmkt_Name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update parent contact with submitted data</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_parentcontactwithsubmitteddata_choice
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_parentcontactwithsubmitteddata_choice); }
			set { Entity.Attributes[Fields.msdynmkt_parentcontactwithsubmitteddata_choice] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Post submission actions</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Postsubmissionactions"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Postsubmissionactions? msdynmkt_Postsubmissionactions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_Postsubmissionactions);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Postsubmissionactions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_Postsubmissionactions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_Postsubmissionactions] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Prefill fields</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_Prefillfields
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_Prefillfields); }
			set { Entity.Attributes[Fields.msdynmkt_Prefillfields] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Redirect after submission</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_Redirectaftersubmission
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_Redirectaftersubmission); }
			set { Entity.Attributes[Fields.msdynmkt_Redirectaftersubmission] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you email</para>
		/// <para><strong>Two Option</strong> - [<strong>On</strong>]: true - [<strong>Off</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Off</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdynmkt_Thankyouemail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdynmkt_Thankyouemail); }
			set { Entity.Attributes[Fields.msdynmkt_Thankyouemail] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Thank you notification</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdynmkt_Thankyounotification
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdynmkt_Thankyounotification); }
			set { Entity.Attributes[Fields.msdynmkt_Thankyounotification] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update matched contact with submitted data</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Updatematchedcontactwithsubmitteddata"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Updatematchedcontactwithsubmitteddata? msdynmkt_Updatematchedcontactwithsubmitteddata
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_Updatematchedcontactwithsubmitteddata);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_Updatematchedcontactwithsubmitteddata)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_Updatematchedcontactwithsubmitteddata] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_Updatematchedcontactwithsubmitteddata] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update parent contact with submitted data</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_updateparentcontactwithsubmitteddata_choi"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_updateparentcontactwithsubmitteddata_choi? msdynmkt_updateparentcontactwithsubmitteddata_choi
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdynmkt_updateparentcontactwithsubmitteddata_choi);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.msdynmkt_updateparentcontactwithsubmitteddata_choi)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdynmkt_updateparentcontactwithsubmitteddata_choi] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdynmkt_updateparentcontactwithsubmitteddata_choi] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the form settings</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the form settings</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdynmkt_formsettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}