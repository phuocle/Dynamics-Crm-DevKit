//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:33
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets
{
	public enum msdyn_Locale_Field
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: ar-SA</para>
		/// <para><strong>Value</strong>: 1,025</para>
		/// </summary>
		ar_SA = 1_025,
		/// <summary>
		/// <para><strong>Display Name</strong>: bg-BG</para>
		/// <para><strong>Value</strong>: 1,026</para>
		/// </summary>
		bg_BG = 1_026,
		/// <summary>
		/// <para><strong>Display Name</strong>: ca-ES</para>
		/// <para><strong>Value</strong>: 1,027</para>
		/// </summary>
		ca_ES = 1_027,
		/// <summary>
		/// <para><strong>Display Name</strong>: cs-CZ</para>
		/// <para><strong>Value</strong>: 1,029</para>
		/// </summary>
		cs_CZ = 1_029,
		/// <summary>
		/// <para><strong>Display Name</strong>: da-DK</para>
		/// <para><strong>Value</strong>: 1,030</para>
		/// </summary>
		da_DK = 1_030,
		/// <summary>
		/// <para><strong>Display Name</strong>: de-DE</para>
		/// <para><strong>Value</strong>: 1,031</para>
		/// </summary>
		de_DE = 1_031,
		/// <summary>
		/// <para><strong>Display Name</strong>: el-GR</para>
		/// <para><strong>Value</strong>: 1,032</para>
		/// </summary>
		el_GR = 1_032,
		/// <summary>
		/// <para><strong>Display Name</strong>: en-US</para>
		/// <para><strong>Value</strong>: 1,033</para>
		/// </summary>
		en_US = 1_033,
		/// <summary>
		/// <para><strong>Display Name</strong>: es-ES</para>
		/// <para><strong>Value</strong>: 3,082</para>
		/// </summary>
		es_ES = 3_082,
		/// <summary>
		/// <para><strong>Display Name</strong>: et-EE</para>
		/// <para><strong>Value</strong>: 1,061</para>
		/// </summary>
		et_EE = 1_061,
		/// <summary>
		/// <para><strong>Display Name</strong>: eu-ES</para>
		/// <para><strong>Value</strong>: 1,069</para>
		/// </summary>
		eu_ES = 1_069,
		/// <summary>
		/// <para><strong>Display Name</strong>: fi-FI</para>
		/// <para><strong>Value</strong>: 1,035</para>
		/// </summary>
		fi_FI = 1_035,
		/// <summary>
		/// <para><strong>Display Name</strong>: fr-FR</para>
		/// <para><strong>Value</strong>: 1,036</para>
		/// </summary>
		fr_FR = 1_036,
		/// <summary>
		/// <para><strong>Display Name</strong>: gl-ES</para>
		/// <para><strong>Value</strong>: 1,110</para>
		/// </summary>
		gl_ES = 1_110,
		/// <summary>
		/// <para><strong>Display Name</strong>: he-IL</para>
		/// <para><strong>Value</strong>: 1,037</para>
		/// </summary>
		he_IL = 1_037,
		/// <summary>
		/// <para><strong>Display Name</strong>: hi-IN</para>
		/// <para><strong>Value</strong>: 1,081</para>
		/// </summary>
		hi_IN = 1_081,
		/// <summary>
		/// <para><strong>Display Name</strong>: hr-HR</para>
		/// <para><strong>Value</strong>: 1,050</para>
		/// </summary>
		hr_HR = 1_050,
		/// <summary>
		/// <para><strong>Display Name</strong>: hu-HU</para>
		/// <para><strong>Value</strong>: 1,038</para>
		/// </summary>
		hu_HU = 1_038,
		/// <summary>
		/// <para><strong>Display Name</strong>: id-ID</para>
		/// <para><strong>Value</strong>: 1,057</para>
		/// </summary>
		id_ID = 1_057,
		/// <summary>
		/// <para><strong>Display Name</strong>: it-IT</para>
		/// <para><strong>Value</strong>: 1,040</para>
		/// </summary>
		it_IT = 1_040,
		/// <summary>
		/// <para><strong>Display Name</strong>: ja-JP</para>
		/// <para><strong>Value</strong>: 1,041</para>
		/// </summary>
		ja_JP = 1_041,
		/// <summary>
		/// <para><strong>Display Name</strong>: kk-KZ</para>
		/// <para><strong>Value</strong>: 1,087</para>
		/// </summary>
		kk_KZ = 1_087,
		/// <summary>
		/// <para><strong>Display Name</strong>: ko-KR</para>
		/// <para><strong>Value</strong>: 1,042</para>
		/// </summary>
		ko_KR = 1_042,
		/// <summary>
		/// <para><strong>Display Name</strong>: lt-LT</para>
		/// <para><strong>Value</strong>: 1,063</para>
		/// </summary>
		lt_LT = 1_063,
		/// <summary>
		/// <para><strong>Display Name</strong>: lv-LV</para>
		/// <para><strong>Value</strong>: 1,062</para>
		/// </summary>
		lv_LV = 1_062,
		/// <summary>
		/// <para><strong>Display Name</strong>: ms-MY</para>
		/// <para><strong>Value</strong>: 1,086</para>
		/// </summary>
		ms_MY = 1_086,
		/// <summary>
		/// <para><strong>Display Name</strong>: nb-NO</para>
		/// <para><strong>Value</strong>: 1,044</para>
		/// </summary>
		nb_NO = 1_044,
		/// <summary>
		/// <para><strong>Display Name</strong>: nl-NL</para>
		/// <para><strong>Value</strong>: 1,043</para>
		/// </summary>
		nl_NL = 1_043,
		/// <summary>
		/// <para><strong>Display Name</strong>: pl-PL</para>
		/// <para><strong>Value</strong>: 1,045</para>
		/// </summary>
		pl_PL = 1_045,
		/// <summary>
		/// <para><strong>Display Name</strong>: pt-BR</para>
		/// <para><strong>Value</strong>: 1,046</para>
		/// </summary>
		pt_BR = 1_046,
		/// <summary>
		/// <para><strong>Display Name</strong>: pt-PT</para>
		/// <para><strong>Value</strong>: 2,070</para>
		/// </summary>
		pt_PT = 2_070,
		/// <summary>
		/// <para><strong>Display Name</strong>: ro-RO</para>
		/// <para><strong>Value</strong>: 1,048</para>
		/// </summary>
		ro_RO = 1_048,
		/// <summary>
		/// <para><strong>Display Name</strong>: ru-RU</para>
		/// <para><strong>Value</strong>: 1,049</para>
		/// </summary>
		ru_RU = 1_049,
		/// <summary>
		/// <para><strong>Display Name</strong>: sk-SK</para>
		/// <para><strong>Value</strong>: 1,051</para>
		/// </summary>
		sk_SK = 1_051,
		/// <summary>
		/// <para><strong>Display Name</strong>: sl-SI</para>
		/// <para><strong>Value</strong>: 1,060</para>
		/// </summary>
		sl_SI = 1_060,
		/// <summary>
		/// <para><strong>Display Name</strong>: sr-Cyrl-CS</para>
		/// <para><strong>Value</strong>: 3,098</para>
		/// </summary>
		sr_Cyrl_CS = 3_098,
		/// <summary>
		/// <para><strong>Display Name</strong>: sv-SE</para>
		/// <para><strong>Value</strong>: 1,053</para>
		/// </summary>
		sv_SE = 1_053,
		/// <summary>
		/// <para><strong>Display Name</strong>: th-TH</para>
		/// <para><strong>Value</strong>: 1,054</para>
		/// </summary>
		th_TH = 1_054,
		/// <summary>
		/// <para><strong>Display Name</strong>: tr-TR</para>
		/// <para><strong>Value</strong>: 1,055</para>
		/// </summary>
		tr_TR = 1_055,
		/// <summary>
		/// <para><strong>Display Name</strong>: uk-UA</para>
		/// <para><strong>Value</strong>: 1,058</para>
		/// </summary>
		uk_UA = 1_058,
		/// <summary>
		/// <para><strong>Display Name</strong>: vi-VN</para>
		/// <para><strong>Value</strong>: 1,066</para>
		/// </summary>
		vi_VN = 1_066,
		/// <summary>
		/// <para><strong>Display Name</strong>: zh-CN</para>
		/// <para><strong>Value</strong>: 2,052</para>
		/// </summary>
		zh_CN = 2_052,
		/// <summary>
		/// <para><strong>Display Name</strong>: zh-HK</para>
		/// <para><strong>Value</strong>: 3,076</para>
		/// </summary>
		zh_HK = 3_076,
		/// <summary>
		/// <para><strong>Display Name</strong>: zh-TW</para>
		/// <para><strong>Value</strong>: 1,028</para>
		/// </summary>
		zh_TW = 1_028
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_cannedmessage : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_cannedmessageId = "msdyn_cannedmessageid";
			public const string msdyn_Locale_Field = "msdyn_locale_field";
			public const string msdyn_message = "msdyn_message";
			public const string msdyn_tagscontrolfield = "msdyn_tagscontrolfield";
			public const string msdyn_title = "msdyn_title";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_cannedmessage";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10670;
		public const string EntityCollectionSchemaName = "msdyn_cannedmessages";
		public const string EntityDisplayCollectionName = "Quick replies";
		public const string DisplayName = "Quick reply";
		public const string EntitySetName = "msdyn_cannedmessages";
		public const string EntityLogicalCollectionName = "msdyn_cannedmessages";
		public const string EntityPrimaryIdAttribute = "msdyn_cannedmessageid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_title";
		public const string EntitySchemaName = "msdyn_cannedmessage";
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage(Guid msdyn_cannedmessageId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_cannedmessageId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_cannedmessage"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_cannedmessage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_cannedmessage(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_cannedmessage"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_cannedmessage(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_cannedmessage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Quick reply</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_cannedmessageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_cannedmessageId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Locale</para>
		/// <para><strong>Description</strong>: The locale of a canned message</para>
		/// <para>Required - <strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.msdyn_Locale_Field"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.msdyn_Locale_Field.en_US"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.msdyn_Locale_Field? msdyn_Locale_Field
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Locale_Field);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.msdyn_Locale_Field)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Locale_Field] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Locale_Field] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Description</strong>: Canned message text</para>
		/// <para>Required - <strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_message
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_message); }
			set { Entity.Attributes[Fields.msdyn_message] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: TagsControlField</para>
		/// <para><strong>Description</strong>: Dummy field to render the tags control</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_tagscontrolfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_tagscontrolfield); }
			set { Entity.Attributes[Fields.msdyn_tagscontrolfield] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Title</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_title
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_title); }
			set { Entity.Attributes[Fields.msdyn_title] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization Id</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Quick replies</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Quick replies</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_cannedmessageOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}