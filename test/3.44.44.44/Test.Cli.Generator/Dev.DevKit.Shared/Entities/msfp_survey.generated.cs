//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msfp_surveyOptionSets
{
	public enum msdyn_mcsbotstatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Disconnected</para>
		/// <para><strong>Value</strong>: 357,890,002</para>
		/// </summary>
		Disconnected = 357_890_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: InProgress</para>
		/// <para><strong>Value</strong>: 357,890,000</para>
		/// </summary>
		InProgress = 357_890_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Ready</para>
		/// <para><strong>Value</strong>: 357,890,001</para>
		/// </summary>
		Ready = 357_890_001
	}
	public enum msdyn_surveyprovider
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Customer Voice</para>
		/// <para><strong>Value</strong>: 600,990,000</para>
		/// </summary>
		Customer_Voice = 600_990_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Copilot Studio</para>
		/// <para><strong>Value</strong>: 600,990,001</para>
		/// </summary>
		Microsoft_Copilot_Studio = 600_990_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Deleted</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Deleted = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Draft</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Draft = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2,
		/// <summary>
		/// <para><strong>Display Name</strong>: Published</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Published = 100_000_003
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msfp_survey : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Inspection = "msdyn_inspection";
			public const string msdyn_mcsbotstatus = "msdyn_mcsbotstatus";
			public const string msdyn_microsoftcopilotstudiobot = "msdyn_microsoftcopilotstudiobot";
			public const string msdyn_surveyprovider = "msdyn_surveyprovider";
			public const string msfp_acceptanonymousresponses = "msfp_acceptanonymousresponses";
			public const string msfp_anonymousurl = "msfp_anonymousurl";
			public const string msfp_description = "msfp_description";
			public const string msfp_embedcode = "msfp_embedcode";
			public const string msfp_enddate = "msfp_enddate";
			public const string msfp_friendlyname = "msfp_friendlyname";
			public const string msfp_name = "msfp_name";
			public const string msfp_otherproperties = "msfp_otherproperties";
			public const string msfp_PermanentID = "msfp_permanentid";
			public const string msfp_project = "msfp_project";
			public const string msfp_publishedby = "msfp_publishedby";
			public const string msfp_publishedon = "msfp_publishedon";
			public const string msfp_sourcesurveyidentifier = "msfp_sourcesurveyidentifier";
			public const string msfp_sourcesurveymodifieddate = "msfp_sourcesurveymodifieddate";
			public const string msfp_sourcesurveyversion = "msfp_sourcesurveyversion";
			public const string msfp_startdate = "msfp_startdate";
			public const string msfp_surveyId = "msfp_surveyid";
			public const string msfp_surveysource = "msfp_surveysource";
			public const string msfp_surveyurl = "msfp_surveyurl";
			public const string msfp_variables = "msfp_variables";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msfp_survey";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10609;
		public const string EntityCollectionSchemaName = "msfp_surveies";
		public const string EntityDisplayCollectionName = "Customer Voice surveys";
		public const string DisplayName = "Customer Voice survey";
		public const string EntitySetName = "msfp_surveies";
		public const string EntityLogicalCollectionName = "msfp_surveies";
		public const string EntityPrimaryIdAttribute = "msfp_surveyid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msfp_name";
		public const string EntitySchemaName = "msfp_survey";
		[DebuggerNonUserCode()]
		public msfp_survey()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_survey(Guid msfp_surveyId)
		{
			Entity = new Entity(EntityLogicalName, msfp_surveyId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_survey(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_survey"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msfp_survey(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_survey"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msfp_survey(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msfp_survey(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msfp_survey"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msfp_survey(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msfp_survey(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msfp_survey(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Inspection Template</para>
		/// <para><strong>Description</strong>: Unique identifier for Inspection Template associated with Survey.</para>
		/// <para><strong>Lookup</strong>: <see cref="msdyn_inspection"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Inspection
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Inspection); }
			set { Entity.Attributes[Fields.msdyn_Inspection] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: MCSBotStatus</para>
		/// <para><strong>Description</strong>: MCS Bot Status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_mcsbotstatus"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_mcsbotstatus.InProgress"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_mcsbotstatus? msdyn_mcsbotstatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_mcsbotstatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_mcsbotstatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_mcsbotstatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_mcsbotstatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Microsoft Copilot Studio Bot</para>
		/// <para><strong>Lookup</strong>: <see cref="bot"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_microsoftcopilotstudiobot
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_microsoftcopilotstudiobot); }
			set { Entity.Attributes[Fields.msdyn_microsoftcopilotstudiobot] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey Provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_surveyprovider"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_surveyprovider.Customer_Voice"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_surveyprovider? msdyn_surveyprovider
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_surveyprovider);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.msdyn_surveyprovider)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_surveyprovider] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_surveyprovider] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Accept anonymous responses</para>
		/// <para><strong>Description</strong>: Specifies if responses can be accepted from anonymous respondents.</para>
		/// <para><strong>Two Option</strong> - [<strong>Yes</strong>]: true - [<strong>No</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>No</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msfp_acceptanonymousresponses
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msfp_acceptanonymousresponses); }
			set { Entity.Attributes[Fields.msfp_acceptanonymousresponses] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Anonymous URL</para>
		/// <para><strong>Description</strong>: Link to the anonymous survey response.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_anonymousurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_anonymousurl); }
			set { Entity.Attributes[Fields.msfp_anonymousurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Description</para>
		/// <para><strong>Description</strong>: Description of the survey.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_description
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_description); }
			set { Entity.Attributes[Fields.msfp_description] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Embed code for the survey</para>
		/// <para><strong>Description</strong>: Embed code for the survey</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_embedcode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_embedcode); }
			set { Entity.Attributes[Fields.msfp_embedcode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: End date</para>
		/// <para><strong>Description</strong>: End date and time of the survey, if configured.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msfp_enddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msfp_enddate); }
			set { Entity.Attributes[Fields.msfp_enddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Friendly name</para>
		/// <para><strong>Description</strong>: Friendly name of the survey.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 400</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_friendlyname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_friendlyname); }
			set { Entity.Attributes[Fields.msfp_friendlyname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 450</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_name); }
			set { Entity.Attributes[Fields.msfp_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Other properties</para>
		/// <para><strong>Description</strong>: Other survey properties in JSON format.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_otherproperties
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_otherproperties); }
			set { Entity.Attributes[Fields.msfp_otherproperties] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Permanent ID</para>
		/// <para><strong>Description</strong>: Permanent ID is auto-generated for a new survey. For a copied survey, the ID is carried over from the original survey.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_PermanentID
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_PermanentID); }
			set { Entity.Attributes[Fields.msfp_PermanentID] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Project</para>
		/// <para><strong>Description</strong>: Project associated with the survey.</para>
		/// <para><strong>Lookup</strong>: <see cref="msfp_project"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msfp_project
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msfp_project); }
			set { Entity.Attributes[Fields.msfp_project] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published by</para>
		/// <para><strong>Description</strong>: User who published the survey.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msfp_publishedby
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msfp_publishedby); }
			set { Entity.Attributes[Fields.msfp_publishedby] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Published on</para>
		/// <para><strong>Description</strong>: Date and time on which the survey was published.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msfp_publishedonUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msfp_publishedon); }
			set { Entity.Attributes[Fields.msfp_publishedon] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source survey identifier</para>
		/// <para><strong>Description</strong>: Unique identifier for the survey in the source application.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_sourcesurveyidentifier
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_sourcesurveyidentifier); }
			set { Entity.Attributes[Fields.msfp_sourcesurveyidentifier] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source survey modified date</para>
		/// <para><strong>Description</strong>: Date when a survey is modified in source.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msfp_sourcesurveymodifieddateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msfp_sourcesurveymodifieddate); }
			set { Entity.Attributes[Fields.msfp_sourcesurveymodifieddate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Source survey version</para>
		/// <para><strong>Description</strong>: Version number of the survey.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_sourcesurveyversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_sourcesurveyversion); }
			set { Entity.Attributes[Fields.msfp_sourcesurveyversion] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Start date</para>
		/// <para><strong>Description</strong>: Start date and time of the survey, if configured.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msfp_startdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msfp_startdate); }
			set { Entity.Attributes[Fields.msfp_startdate] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msfp_surveyId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msfp_surveyId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey source</para>
		/// <para><strong>Description</strong>: Source through which the survey was created.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_surveysource
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_surveysource); }
			set { Entity.Attributes[Fields.msfp_surveysource] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Survey URL</para>
		/// <para><strong>Description</strong>: Link to the survey in Customer Voice.</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_surveyurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_surveyurl); }
			set { Entity.Attributes[Fields.msfp_surveyurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Variables</para>
		/// <para><strong>Description</strong>: Stores survey variables and their default values in JSON format.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 1,000,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msfp_variables
		{
			get { return Entity.GetAttributeValue<string>(Fields.msfp_variables); }
			set { Entity.Attributes[Fields.msfp_variables] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the Survey</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the Survey</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msfp_surveyOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}