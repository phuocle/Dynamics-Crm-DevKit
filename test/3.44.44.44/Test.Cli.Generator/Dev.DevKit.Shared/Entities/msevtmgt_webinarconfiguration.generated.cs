//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:49:42
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets
{
	public enum msevtmgt_authorized
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		No = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Token expired</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Token_expired = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Yes = 100_000_000
	}
	public enum msevtmgt_providerservicestatus
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Forbidden</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		Forbidden = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Healthy</para>
		/// <para><strong>Value</strong>: 100,000,000</para>
		/// </summary>
		Healthy = 100_000_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Not authenticated</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Not_authenticated = 100_000_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Unhealthy</para>
		/// <para><strong>Value</strong>: 100,000,003</para>
		/// </summary>
		Unhealthy = 100_000_003
	}
	public enum msevtmgt_UpdateCredentials
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: No</para>
		/// <para><strong>Value</strong>: 100,000,002</para>
		/// </summary>
		No = 100_000_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Yes</para>
		/// <para><strong>Value</strong>: 100,000,001</para>
		/// </summary>
		Yes = 100_000_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msevtmgt_webinarconfiguration : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msevtmgt_accesstoken = "msevtmgt_accesstoken";
			public const string msevtmgt_AccessTokenKey = "msevtmgt_accesstokenkey";
			public const string msevtmgt_AccessTokenSecret = "msevtmgt_accesstokensecret";
			public const string msevtmgt_appURL = "msevtmgt_appurl";
			public const string msevtmgt_authorized = "msevtmgt_authorized";
			public const string msevtmgt_ClientId = "msevtmgt_clientid";
			public const string msevtmgt_LastUpdateDateTime = "msevtmgt_lastupdatedatetime";
			public const string msevtmgt_Message = "msevtmgt_message";
			public const string msevtmgt_name = "msevtmgt_name";
			public const string msevtmgt_providerservicestatus = "msevtmgt_providerservicestatus";
			public const string msevtmgt_UpdateCredentials = "msevtmgt_updatecredentials";
			public const string msevtmgt_webinarconfigurationId = "msevtmgt_webinarconfigurationid";
			public const string msevtmgt_WebinarProviderId = "msevtmgt_webinarproviderid";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msevtmgt_webinarconfiguration";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11124;
		public const string EntityCollectionSchemaName = "msevtmgt_webinarconfigurations";
		public const string EntityDisplayCollectionName = "Webinar configurations";
		public const string DisplayName = "Webinar configuration";
		public const string EntitySetName = "msevtmgt_webinarconfigurations";
		public const string EntityLogicalCollectionName = "msevtmgt_webinarconfigurations";
		public const string EntityPrimaryIdAttribute = "msevtmgt_webinarconfigurationid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msevtmgt_name";
		public const string EntitySchemaName = "msevtmgt_webinarconfiguration";
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration(Guid msevtmgt_webinarconfigurationId)
		{
			Entity = new Entity(EntityLogicalName, msevtmgt_webinarconfigurationId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_webinarconfiguration"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_webinarconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_webinarconfiguration(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msevtmgt_webinarconfiguration"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msevtmgt_webinarconfiguration(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msevtmgt_webinarconfiguration(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was created</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import sequence number</para>
		/// <para><strong>Description</strong>: The sequence number of the import that created this record</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified on</para>
		/// <para><strong>Description</strong>: The date and time when the record was modified</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified by (delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access token</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_accesstoken
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_accesstoken); }
			set { Entity.Attributes[Fields.msevtmgt_accesstoken] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access token key</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AccessTokenKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AccessTokenKey); }
			set { Entity.Attributes[Fields.msevtmgt_AccessTokenKey] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Access token secret</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 130</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_AccessTokenSecret
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_AccessTokenSecret); }
			set { Entity.Attributes[Fields.msevtmgt_AccessTokenSecret] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: App URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_appURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_appURL); }
			set { Entity.Attributes[Fields.msevtmgt_appURL] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Authenticated</para>
		/// <para><strong>Description</strong>: Tells whether the credentials in this webinar configuration have been authenticated with the provider</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_authorized"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_authorized.No"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_authorized? msevtmgt_authorized
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_authorized);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_authorized)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_authorized] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_authorized] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Client ID</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_ClientId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_ClientId); }
			set { Entity.Attributes[Fields.msevtmgt_ClientId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Last metrics update</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msevtmgt_LastUpdateDateTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msevtmgt_LastUpdateDateTime); }
			set { Entity.Attributes[Fields.msevtmgt_LastUpdateDateTime] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Message</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 1,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_Message
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_Message); }
			set { Entity.Attributes[Fields.msevtmgt_Message] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msevtmgt_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msevtmgt_name); }
			set { Entity.Attributes[Fields.msevtmgt_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Provider service status</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_providerservicestatus"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_providerservicestatus? msevtmgt_providerservicestatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_providerservicestatus);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_providerservicestatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_providerservicestatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_providerservicestatus] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Update credentials?</para>
		/// <para><strong>OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_UpdateCredentials"/></para>
		/// <para><strong>Default Value</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_UpdateCredentials.Yes"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_UpdateCredentials? msevtmgt_UpdateCredentials
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msevtmgt_UpdateCredentials);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.msevtmgt_UpdateCredentials)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msevtmgt_UpdateCredentials] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msevtmgt_UpdateCredentials] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar configuration</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msevtmgt_webinarconfigurationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msevtmgt_webinarconfigurationId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Webinar provider</para>
		/// <para><strong>Description</strong>: Unique identifier for the webinar provider associated with the webinar configuration</para>
		/// <para>Required - <strong>Lookup</strong>: <see cref="msevtmgt_webinarprovider"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msevtmgt_WebinarProviderId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msevtmgt_WebinarProviderId); }
			set { Entity.Attributes[Fields.msevtmgt_WebinarProviderId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Organization ID</para>
		/// <para><strong>Description</strong>: Unique identifier for the organization</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="organization"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record created on</para>
		/// <para><strong>Description</strong>: The date and time when the record was migrated</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the webinar configuration</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the webinar configuration</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msevtmgt_webinarconfigurationOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time zone rule version number</para>
		/// <para><strong>Description</strong>: For internal use only</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC conversion time zone code</para>
		/// <para><strong>Description</strong>: The time zone code that was in use when the record was created</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}