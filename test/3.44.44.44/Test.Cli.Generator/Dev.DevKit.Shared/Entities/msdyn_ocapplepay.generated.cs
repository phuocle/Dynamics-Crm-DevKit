//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:48:38
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets
{
	public enum msdyn_merchantcapabilities
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: 3D Secure</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		_3D_Secure = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: Credit</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Credit = 192_350_001,
		/// <summary>
		/// <para><strong>Display Name</strong>: Debit</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		Debit = 192_350_000
	}
	public enum msdyn_supportednetworks
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: American Express</para>
		/// <para><strong>Value</strong>: 192,350,000</para>
		/// </summary>
		American_Express = 192_350_000,
		/// <summary>
		/// <para><strong>Display Name</strong>: Discover</para>
		/// <para><strong>Value</strong>: 192,350,002</para>
		/// </summary>
		Discover = 192_350_002,
		/// <summary>
		/// <para><strong>Display Name</strong>: MasterCard</para>
		/// <para><strong>Value</strong>: 192,350,003</para>
		/// </summary>
		MasterCard = 192_350_003,
		/// <summary>
		/// <para><strong>Display Name</strong>: Visa</para>
		/// <para><strong>Value</strong>: 192,350,001</para>
		/// </summary>
		Visa = 192_350_001
	}
	public enum statecode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 0</para>
		/// </summary>
		Active = 0,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 1</para>
		/// </summary>
		Inactive = 1
	}
	public enum statuscode
	{
		/// <summary>
		/// <para><strong>Display Name</strong>: Active</para>
		/// <para><strong>Value</strong>: 1</para>
		/// <para><strong>StateCode.Active</strong></para>
		/// </summary>
		Active = 1,
		/// <summary>
		/// <para><strong>Display Name</strong>: Inactive</para>
		/// <para><strong>Value</strong>: 2</para>
		/// <para><strong>StateCode.Inactive</strong></para>
		/// </summary>
		Inactive = 2
	}
}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class msdyn_ocapplepay : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_countrycode = "msdyn_countrycode";
			public const string msdyn_fallbackurl = "msdyn_fallbackurl";
			public const string msdyn_merchantcapabilities = "msdyn_merchantcapabilities";
			public const string msdyn_merchantdisplayname = "msdyn_merchantdisplayname";
			public const string msdyn_merchantid = "msdyn_merchantid";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_ocapplepayId = "msdyn_ocapplepayid";
			public const string msdyn_ocbase64merchantcertstring = "msdyn_ocbase64merchantcertstring";
			public const string msdyn_ocbase64merchantcertstringcontd = "msdyn_ocbase64merchantcertstringcontd";
			public const string msdyn_ocmerchantcertfilename = "msdyn_ocmerchantcertfilename";
			public const string msdyn_ocmerchantcertificatepassword = "msdyn_ocmerchantcertificatepassword";
			public const string msdyn_ocmerchantdomainurl = "msdyn_ocmerchantdomainurl";
			public const string msdyn_ordertrackingurl = "msdyn_ordertrackingurl";
			public const string msdyn_paymentgatewayurl = "msdyn_paymentgatewayurl";
			public const string msdyn_paymentmethodupdateurl = "msdyn_paymentmethodupdateurl";
			public const string msdyn_shippingcontactupdateurl = "msdyn_shippingcontactupdateurl";
			public const string msdyn_shippingmethodupdateurl = "msdyn_shippingmethodupdateurl";
			public const string msdyn_supportednetworks = "msdyn_supportednetworks";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "msdyn_ocapplepay";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 11618;
		public const string EntityCollectionSchemaName = "msdyn_ocapplepaies";
		public const string EntityDisplayCollectionName = "ocapplepay";
		public const string DisplayName = "OC Apple Pay Entity";
		public const string EntitySetName = "msdyn_ocapplepaies";
		public const string EntityLogicalCollectionName = "msdyn_ocapplepaies";
		public const string EntityPrimaryIdAttribute = "msdyn_ocapplepayid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "msdyn_name";
		public const string EntitySchemaName = "msdyn_ocapplepay";
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Guid msdyn_ocapplepayId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_ocapplepayId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocapplepay"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocapplepay"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocapplepay(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="msdyn_ocapplepay"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new msdyn_ocapplepay(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public msdyn_ocapplepay(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created On</para>
		/// <para><strong>Description</strong>: Date and time when the record was created.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Created By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who created the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Import Sequence Number</para>
		/// <para><strong>Description</strong>: Sequence number of the import that created this record.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -2,147,483,648 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified On</para>
		/// <para><strong>Description</strong>: Date and time when the record was modified.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateAndTime</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Modified By (Delegate)</para>
		/// <para><strong>Description</strong>: Unique identifier of the delegate user who modified the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Country Code</para>
		/// <para><strong>Description</strong>: Merchant Country Code</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_countrycode
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_countrycode); }
			set { Entity.Attributes[Fields.msdyn_countrycode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Fallback URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_fallbackurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_fallbackurl); }
			set { Entity.Attributes[Fields.msdyn_fallbackurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merchant Capabilities</para>
		/// <para>Required - <strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities> msdyn_merchantcapabilities
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_merchantcapabilities);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_merchantcapabilities)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_merchantcapabilities] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_merchantcapabilities] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merchant Display Name</para>
		/// <para><strong>Description</strong>: Merchant display name or domain name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_merchantdisplayname
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_merchantdisplayname); }
			set { Entity.Attributes[Fields.msdyn_merchantdisplayname] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merchant ID</para>
		/// <para><strong>Description</strong>: Apple Pay Merchant ID</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_merchantid
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_merchantid); }
			set { Entity.Attributes[Fields.msdyn_merchantid] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Name</para>
		/// <para><strong>Description</strong>: The name of the custom entity.</para>
		/// <para><strong>Primary Name</strong>: Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: OC Apple Pay Entity</para>
		/// <para><strong>Description</strong>: Unique identifier for entity instances</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_ocapplepayId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_ocapplepayId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The Apple Pay Merchant Certificate</para>
		/// <para><strong>Description</strong>: The Apple Pay Merchant Certificate (Base 64 string)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocbase64merchantcertstring
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocbase64merchantcertstring); }
			set { Entity.Attributes[Fields.msdyn_ocbase64merchantcertstring] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: The Apple Pay Merchant Certificate - Continued</para>
		/// <para><strong>Description</strong>: The Apple Pay Merchant Certificate (Base 64 string)</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 4,000</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocbase64merchantcertstringcontd
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocbase64merchantcertstringcontd); }
			set { Entity.Attributes[Fields.msdyn_ocbase64merchantcertstringcontd] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merchant Certificate File Name</para>
		/// <para><strong>Description</strong>: Merchant Certificate File Name</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocmerchantcertfilename
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocmerchantcertfilename); }
			set { Entity.Attributes[Fields.msdyn_ocmerchantcertfilename] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merchant Certificate Password</para>
		/// <para><strong>Description</strong>: The password for the Apple Pay Merchant certificate</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 100</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocmerchantcertificatepassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocmerchantcertificatepassword); }
			set { Entity.Attributes[Fields.msdyn_ocmerchantcertificatepassword] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Merchant Domain URL</para>
		/// <para><strong>Description</strong>: Merchant Domain URL</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 200</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ocmerchantdomainurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ocmerchantdomainurl); }
			set { Entity.Attributes[Fields.msdyn_ocmerchantdomainurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Order Tracking URL</para>
		/// <para><strong>Description</strong>: Order Tracking URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_ordertrackingurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_ordertrackingurl); }
			set { Entity.Attributes[Fields.msdyn_ordertrackingurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Payment Gateway URL</para>
		/// <para><strong>Description</strong>: The URL of the payment service provider</para>
		/// <para>Required - <strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_paymentgatewayurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_paymentgatewayurl); }
			set { Entity.Attributes[Fields.msdyn_paymentgatewayurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Payment Method Update URL</para>
		/// <para><strong>Description</strong>: The URL that Apple calls into when payment method is updated</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_paymentmethodupdateurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_paymentmethodupdateurl); }
			set { Entity.Attributes[Fields.msdyn_paymentmethodupdateurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Shipping Contact Update URL</para>
		/// <para><strong>Description</strong>: The URL that Apple will call into when there is a shipping contact update</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_shippingcontactupdateurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_shippingcontactupdateurl); }
			set { Entity.Attributes[Fields.msdyn_shippingcontactupdateurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Shipping Method Update URL</para>
		/// <para><strong>Single Line of Text</strong> - <strong>MaxLength</strong>: 300</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_shippingmethodupdateurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_shippingmethodupdateurl); }
			set { Entity.Attributes[Fields.msdyn_shippingmethodupdateurl] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Supported Networks</para>
		/// <para>Required - <strong>MultiSelect OptionSet</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks> msdyn_supportednetworks
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.msdyn_supportednetworks);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.msdyn_supportednetworks)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.msdyn_supportednetworks] = null;
				}
				else
				{
					Entity.Attributes[Fields.msdyn_supportednetworks] = data;
				}
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Record Created On</para>
		/// <para><strong>Description</strong>: Date and time that the record was migrated.</para>
		/// <para><strong>Date and Time</strong> - <strong>DateTimeBehavior</strong>: UserLocal - <strong>DateTimeFormat</strong>: DateOnly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Owner Id</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier for the business unit that owns the record</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier for the team that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier for the user that owns the record.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status</para>
		/// <para><strong>Description</strong>: Status of the OC Apple Pay Entity</para>
		/// <para><strong>Status</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statecode"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Status Reason</para>
		/// <para><strong>Description</strong>: Reason for the status of the OC Apple Pay Entity</para>
		/// <para><strong>Status Reason</strong>: <see cref="Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statuscode"/></para>
		/// <para><strong>Default Value</strong>: <see langword="null"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_ocapplepayOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Time Zone Rule Version Number</para>
		/// <para><strong>Description</strong>: For internal use only.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: UTC Conversion Time Zone Code</para>
		/// <para><strong>Description</strong>: Time zone code that was in use when the record was created.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>: -1 - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Version Number</para>
		/// <para><strong>Description</strong>: Version Number</para>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}