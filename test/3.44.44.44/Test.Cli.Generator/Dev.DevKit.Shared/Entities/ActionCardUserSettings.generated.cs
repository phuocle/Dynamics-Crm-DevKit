//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
//		Last Modified: 2024-12-05 15:44:32
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;
using System.Linq;
namespace Dev.DevKit.Shared.Entities.ActionCardUserSettingsOptionSets
{

}
namespace Dev.DevKit.Shared.Entities
{
	[DebuggerNonUserCode()]
	public partial class ActionCardUserSettings : EntityBase
	{
		public struct Fields
		{
			public const string ActionCardUserSettingsId = "actioncardusersettingsid";
			public const string BoolCardOption = "boolcardoption";
			public const string CardType = "cardtype";
			public const string CardTypeId = "cardtypeid";
			public const string IntCardOption = "intcardoption";
			public const string IsEnabled = "isenabled";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string StringCardOption = "stringcardoption";
			public const string VersionNumber = "versionnumber";
		}
		public const string EntityLogicalName = "actioncardusersettings";
		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 9973;
		public const string EntityCollectionSchemaName = "ActionCardUserSettingses";
		public const string EntityDisplayCollectionName = "Action Card User Settings";
		public const string DisplayName = "Action Card User Settings";
		public const string EntitySetName = "actioncardusersettingsset";
		public const string EntityLogicalCollectionName = "actioncardusersettingses";
		public const string EntityPrimaryIdAttribute = "actioncardusersettingsid";
		public const string EntityPrimaryImageAttribute = "";
		public const string EntityPrimaryNameAttribute = "";
		public const string EntitySchemaName = "ActionCardUserSettings";
		[DebuggerNonUserCode()]
		public ActionCardUserSettings()
		{
			Entity = new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ActionCardUserSettings(Guid ActionCardUserSettingsId)
		{
			Entity = new Entity(EntityLogicalName, ActionCardUserSettingsId);
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ActionCardUserSettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ActionCardUserSettings"/> with <paramref name="targetEntity"/>.
		/// </summary>
		[DebuggerNonUserCode()]
		public ActionCardUserSettings(Entity targetEntity)
		{
			Entity = targetEntity ?? new Entity(EntityLogicalName, Guid.Empty);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ActionCardUserSettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ActionCardUserSettings(Entity preEntity, Entity targetEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ActionCardUserSettings(preEntity, targetEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// Instance new late bound class <see cref="ActionCardUserSettings"/> with <paramref name="preEntity"/>. Then copy all attributes from <paramref name="targetEntity"/> to <paramref name="preEntity"/>. After that copy all attributes from <paramref name="postEntity"/> to the last result. Existing attribute will be overwritten.
		/// </summary>
		/// <exception cref="InvalidPluginExecutionException">when <paramref name="targetEntity"/> is null.</exception>
		[DebuggerNonUserCode()]
		public ActionCardUserSettings(Entity preEntity, Entity targetEntity, Entity postEntity)
		{
			if (targetEntity == null) throw new InvalidPluginExecutionException($"new ActionCardUserSettings(preEntity, targetEntity, postEntity) with targetEntity = null");
			if (preEntity == null) preEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			if (postEntity == null) postEntity = new Entity(targetEntity.LogicalName, targetEntity.Id);
			Entity = CloneThisEntity(preEntity);
			foreach (var property in targetEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			foreach (var property in postEntity?.Attributes?.ToList())
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}
		[DebuggerNonUserCode()]
		public ActionCardUserSettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}
		/// <summary>
		/// <para><strong>Description</strong>: Unique identifier user entity</para>
		/// <para><strong>Primary Key</strong>: <strong>Uniqueidentifier</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ActionCardUserSettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ActionCardUserSettingsId] = value;
				Entity.Id = value;
			}
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Bolean option for a cardtype.</para>
		/// <para><strong>Description</strong>: Bolean option for a cardtype.</para>
		/// <para><strong>Two Option</strong> - [<strong>Check</strong>]: true - [<strong>Uncheck</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Uncheck</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? BoolCardOption
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.BoolCardOption); }
			set { Entity.Attributes[Fields.BoolCardOption] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: CardType ENUM</para>
		/// <para><strong>Description</strong>: The CardType ENUM value.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 2,147,483,647</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? CardType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.CardType); }
			set { Entity.Attributes[Fields.CardType] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: card type</para>
		/// <para><strong>Description</strong>: card type attribute</para>
		/// <para><strong>Lookup</strong>: <see cref="cardtype"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CardTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CardTypeId); }
			set { Entity.Attributes[Fields.CardTypeId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Any int option for a cardtype.</para>
		/// <para><strong>Description</strong>: Any int option for a cardtype.</para>
		/// <para><strong>Whole Number</strong> - <strong>MinValue</strong>:  - <strong>MaxValue</strong>: 180</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? IntCardOption
		{
			get { return Entity.GetAttributeValue<int?>(Fields.IntCardOption); }
			set { Entity.Attributes[Fields.IntCardOption] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Visibiliy Status of ActionCard</para>
		/// <para><strong>Description</strong>: Select whether the card is enabled for user or not.</para>
		/// <para><strong>Two Option</strong> - [<strong>Enable</strong>]: true - [<strong>Disable</strong>]: false</para>
		/// <para><strong>Default Value</strong> [<strong>Disable</strong>]: false</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEnabled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEnabled); }
			set { Entity.Attributes[Fields.IsEnabled] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owner</para>
		/// <para><strong>Description</strong>: Unique identifier of the user or team who owns the settings.</para>
		/// <para><strong>Lookup</strong>: <see cref="systemuser"/>, <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Business Unit</para>
		/// <para><strong>Description</strong>: Unique identifier of the business unit that owns this.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="businessunit"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning Team</para>
		/// <para><strong>Description</strong>: Unique identifier of the team who owns this saved view.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="team"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Owning User</para>
		/// <para><strong>Description</strong>: Unique identifier of the user who owns this saved view.</para>
		/// <para><strong>ReadOnly</strong> - <strong>Lookup</strong>: <see cref="systemuser"/></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}
		/// <summary>
		/// <para><strong>Display Name</strong>: Any string option for a cardtype.</para>
		/// <para><strong>Description</strong>: Any string option for a cardtype.</para>
		/// <para><strong>Multiple Lines of Text</strong> - <strong>MaxLength</strong>: 8,192</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StringCardOption
		{
			get { return Entity.GetAttributeValue<string>(Fields.StringCardOption); }
			set { Entity.Attributes[Fields.StringCardOption] = value; }
		}
		/// <summary>
		/// <para><strong>ReadOnly</strong> - <strong>BigInt</strong></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}